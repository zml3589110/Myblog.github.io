<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>赵逸尘个人博客</title>
  
  <subtitle>记录工作生活</subtitle>
  <link href="https://zml3589110.github.io/atom.xml" rel="self"/>
  
  <link href="https://zml3589110.github.io/"/>
  <updated>2023-02-10T01:35:51.511Z</updated>
  <id>https://zml3589110.github.io/</id>
  
  <author>
    <name>ZhaoYichen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C#绘图之十（Chart中各类图表数据显示）</title>
    <link href="https://zml3589110.github.io/posts/224704259.html"/>
    <id>https://zml3589110.github.io/posts/224704259.html</id>
    <published>2023-02-10T01:18:20.000Z</published>
    <updated>2023-02-10T01:35:51.511Z</updated>
    
    <content type="html"><![CDATA[<h1 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h1><img src="https://img-blog.csdnimg.cn/20210510134457640.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyODMyMjcy,size_16,color_FFFFFF,t_70"><h1 id="简单属性说明"><a href="#简单属性说明" class="headerlink" title="简单属性说明"></a>简单属性说明</h1><h2 id="ChartAreas属性"><a href="#ChartAreas属性" class="headerlink" title="ChartAreas属性"></a>ChartAreas属性</h2><p>ChartAreas属性指绘图区，一个控件可以有多个绘图区，比如我要在同一个控件内显示饼图和柱状图，肯定不能放在同一个ChartAreas区域内，应该在同一个Chart控件里增加两个ChartAreas并分别绑定Series对象。<br><strong>所以ChartAreas属性对应的是一个集合。</strong></p><h2 id="Series属性"><a href="#Series属性" class="headerlink" title="Series属性"></a>Series属性</h2><p>Series属性就是各种图表的图形啦，比如我们要显示某月的天气变化，那么应该有这样两组数据，一组是天数，一组是每天对应的温度值，同时绑定到Series对象中，再将Series对象Add()到Chart控件的Series属性里即可。<br>为了横向比较，例如我要看本月与上月的天气曲线变化图，并同时显示在同一个ChartAreas中，那该怎么办呢？很简单，再实例一个Series对象，将上月的天数数组与温度值数组绑定到一个新的Series2实例中，再将Series2实例Add()到Chart控件的Series属性里，此时，Chart控件的第一个绘图区ChartArea里就会有两条曲线。</p><h2 id="Legends属性"><a href="#Legends属性" class="headerlink" title="Legends属性"></a>Legends属性</h2><p>Legend就是指一个图标的图例，当一个Series属性有多个Series时，或是一个Series有几组数据时，为了区分各自的颜色，通常每个Serie对象一种颜色，这就需要用到图例来指明哪个颜色的代表的是什么数据</p><p><strong>如下图所示：</strong></p><img src="https://img-blog.csdnimg.cn/20190606115526740.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NjI4OTcw,size_16,color_FFFFFF,t_70"><img src="https://img-blog.csdnimg.cn/20190606115542660.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NjI4OTcw,size_16,color_FFFFFF,t_70"><img src="https://img-blog.csdnimg.cn/20190606115559527.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NjI4OTcw,size_16,color_FFFFFF,t_70"><img src="https://img-blog.csdnimg.cn/20190606115611468.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NjI4OTcw,size_16,color_FFFFFF,t_70"><h2 id="关于数据的绑定"><a href="#关于数据的绑定" class="headerlink" title="关于数据的绑定"></a>关于数据的绑定</h2><p>将要显示的X轴和Y轴的数据分别放到两个数组里在， 然后绑定即可。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cht1.Series[<span class="number">0</span>].Points.DataBindXY(x, y);</span><br></pre></td></tr></table></figure><h1 id="柱状图"><a href="#柱状图" class="headerlink" title="柱状图"></a>柱状图</h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span>[] x = <span class="keyword">new</span> <span class="built_in">string</span>[] &#123; <span class="string">&quot;南山大队&quot;</span>, <span class="string">&quot;福田大队&quot;</span>, <span class="string">&quot;罗湖大队&quot;</span>, <span class="string">&quot;宝安大队&quot;</span>, <span class="string">&quot;指挥处&quot;</span>, &#125;;</span><br><span class="line">        <span class="built_in">double</span>[] y = <span class="keyword">new</span> <span class="built_in">double</span>[] &#123; <span class="number">541</span>, <span class="number">574</span>, <span class="number">345</span>, <span class="number">854</span>, <span class="number">257</span> &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">region</span> 柱状图</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//标题</span></span><br><span class="line">        cht1.Titles.Add(<span class="string">&quot;柱状图数据分析&quot;</span>);</span><br><span class="line">        cht1.Titles[<span class="number">0</span>].ForeColor = Color.Black;</span><br><span class="line">        cht1.Titles[<span class="number">0</span>].Font = <span class="keyword">new</span> Font(<span class="string">&quot;宋体&quot;</span>, <span class="number">5f</span>, FontStyle.Regular);</span><br><span class="line">        cht1.Titles[<span class="number">0</span>].Alignment = ContentAlignment.TopCenter;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//右上角标题</span></span><br><span class="line">        cht1.Titles.Add(<span class="string">&quot;合计：0 宗&quot;</span>);</span><br><span class="line">        <span class="comment">//cht1.Titles.Add(&quot;合计：25414 宗&quot;);</span></span><br><span class="line">        <span class="comment">//cht1.Titles.Add(&quot;合计：25414 宗&quot;);</span></span><br><span class="line">        <span class="comment">//cht1.Titles.Add(&quot;合计：25414 宗&quot;);</span></span><br><span class="line">        cht1.Titles[<span class="number">1</span>].ForeColor = Color.Black;</span><br><span class="line">        cht1.Titles[<span class="number">1</span>].Font = <span class="keyword">new</span> Font(<span class="string">&quot;宋体&quot;</span>, <span class="number">5f</span>, FontStyle.Regular);</span><br><span class="line">        <span class="comment">//设置标题位于右上角</span></span><br><span class="line">        <span class="comment">//cht1.Titles[1].Alignment = ContentAlignment.TopRight;</span></span><br><span class="line">        <span class="comment">//cht1.Titles[2].Alignment = ContentAlignment.TopRight;</span></span><br><span class="line">        <span class="comment">//cht1.Titles[3].Alignment = ContentAlignment.TopRight;</span></span><br><span class="line">        <span class="comment">//cht1.Titles[4].Alignment = ContentAlignment.TopRight;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//控件背景</span></span><br><span class="line">        cht1.BackColor = Color.Yellow;</span><br><span class="line">        <span class="comment">//图表区背景</span></span><br><span class="line">        cht1.ChartAreas[<span class="number">0</span>].BackColor = Color.Transparent;</span><br><span class="line">        cht1.ChartAreas[<span class="number">0</span>].BorderColor = Color.Transparent;</span><br><span class="line">        <span class="comment">//X轴标签间距</span></span><br><span class="line">        cht1.ChartAreas[<span class="number">0</span>].AxisX.Interval = <span class="number">1</span>;</span><br><span class="line">        cht1.ChartAreas[<span class="number">0</span>].AxisX.LabelStyle.IsStaggered = <span class="literal">true</span>;</span><br><span class="line">        cht1.ChartAreas[<span class="number">0</span>].AxisX.LabelStyle.Angle = <span class="number">-45</span>;   <span class="comment">//下方标签显示的角度</span></span><br><span class="line">        cht1.ChartAreas[<span class="number">0</span>].AxisX.TitleFont = <span class="keyword">new</span> Font(<span class="string">&quot;宋体&quot;</span>, <span class="number">5f</span>, FontStyle.Regular);</span><br><span class="line">        cht1.ChartAreas[<span class="number">0</span>].AxisX.TitleForeColor = Color.Black;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//X坐标轴颜色</span></span><br><span class="line">        cht1.ChartAreas[<span class="number">0</span>].AxisX.LineColor = ColorTranslator.FromHtml(<span class="string">&quot;#38587a&quot;</span>); ;</span><br><span class="line">        cht1.ChartAreas[<span class="number">0</span>].AxisX.LabelStyle.ForeColor = Color.Black;</span><br><span class="line">        cht1.ChartAreas[<span class="number">0</span>].AxisX.LabelStyle.Font = <span class="keyword">new</span> Font(<span class="string">&quot;宋体&quot;</span>, <span class="number">5f</span>, FontStyle.Regular);</span><br><span class="line">        <span class="comment">//X坐标轴标题</span></span><br><span class="line">        cht1.ChartAreas[<span class="number">0</span>].AxisX.Title = <span class="string">&quot;数量(个)&quot;</span>;</span><br><span class="line">        cht1.ChartAreas[<span class="number">0</span>].AxisX.TitleFont = <span class="keyword">new</span> Font(<span class="string">&quot;宋体&quot;</span>, <span class="number">5f</span>, FontStyle.Regular);</span><br><span class="line">        cht1.ChartAreas[<span class="number">0</span>].AxisX.TitleForeColor = Color.Black;</span><br><span class="line">        cht1.ChartAreas[<span class="number">0</span>].AxisX.TextOrientation = TextOrientation.Horizontal;</span><br><span class="line">        cht1.ChartAreas[<span class="number">0</span>].AxisX.ToolTip = <span class="string">&quot;数量(个)&quot;</span>;</span><br><span class="line">        <span class="comment">//X轴网络线条</span></span><br><span class="line">        cht1.ChartAreas[<span class="number">0</span>].AxisX.MajorGrid.Enabled = <span class="literal">true</span>;</span><br><span class="line">        cht1.ChartAreas[<span class="number">0</span>].AxisX.MajorGrid.LineColor = ColorTranslator.FromHtml(<span class="string">&quot;#2c4c6d&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Y坐标轴颜色</span></span><br><span class="line">        cht1.ChartAreas[<span class="number">0</span>].AxisY.LineColor = ColorTranslator.FromHtml(<span class="string">&quot;#38587a&quot;</span>);</span><br><span class="line">        cht1.ChartAreas[<span class="number">0</span>].AxisY.LabelStyle.ForeColor = Color.Black;</span><br><span class="line">        cht1.ChartAreas[<span class="number">0</span>].AxisY.LabelStyle.Font = <span class="keyword">new</span> Font(<span class="string">&quot;宋体&quot;</span>, <span class="number">5f</span>, FontStyle.Regular);</span><br><span class="line">        <span class="comment">//Y坐标轴标题</span></span><br><span class="line">        cht1.ChartAreas[<span class="number">0</span>].AxisY.Title = <span class="string">&quot;数量(个)&quot;</span>;</span><br><span class="line">        cht1.ChartAreas[<span class="number">0</span>].AxisY.TitleFont = <span class="keyword">new</span> Font(<span class="string">&quot;宋体&quot;</span>, <span class="number">5f</span>, FontStyle.Regular);</span><br><span class="line">        cht1.ChartAreas[<span class="number">0</span>].AxisY.TitleForeColor = Color.Black;</span><br><span class="line">        cht1.ChartAreas[<span class="number">0</span>].AxisY.TextOrientation = TextOrientation.Rotated270;</span><br><span class="line">        cht1.ChartAreas[<span class="number">0</span>].AxisY.ToolTip = <span class="string">&quot;数量(个)&quot;</span>;</span><br><span class="line">        <span class="comment">//Y轴网格线条</span></span><br><span class="line">        cht1.ChartAreas[<span class="number">0</span>].AxisY.MajorGrid.Enabled = <span class="literal">true</span>;</span><br><span class="line">        cht1.ChartAreas[<span class="number">0</span>].AxisY.MajorGrid.LineColor = ColorTranslator.FromHtml(<span class="string">&quot;#2c4c6d&quot;</span>);</span><br><span class="line"></span><br><span class="line">        cht1.ChartAreas[<span class="number">0</span>].AxisY2.LineColor = Color.Transparent;</span><br><span class="line">        cht1.ChartAreas[<span class="number">0</span>].BackGradientStyle = GradientStyle.TopBottom;</span><br><span class="line">        <span class="built_in">string</span> now_time = System.DateTime.Now.ToString(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">        Legend legend = <span class="keyword">new</span> Legend(now_time);</span><br><span class="line">        legend.Title = <span class="string">&quot;legendTitle&quot;</span>;</span><br><span class="line"></span><br><span class="line">        cht1.Series[<span class="number">0</span>].XValueType = ChartValueType.String;  <span class="comment">//设置X轴上的值类型</span></span><br><span class="line">        cht1.Series[<span class="number">0</span>].Label = <span class="string">&quot;#VAL&quot;</span>;                <span class="comment">//设置显示X Y的值    </span></span><br><span class="line">        cht1.Series[<span class="number">0</span>].LabelForeColor = Color.Black;</span><br><span class="line">        cht1.Series[<span class="number">0</span>].ToolTip = <span class="string">&quot;#VALX:#VAL&quot;</span>;     <span class="comment">//鼠标移动到对应点显示数值</span></span><br><span class="line">        cht1.Series[<span class="number">0</span>].ChartType = SeriesChartType.Column;    <span class="comment">//图类型(折线)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        cht1.Series[<span class="number">0</span>].Color = Color.Lime;</span><br><span class="line">        cht1.Series[<span class="number">0</span>].LegendText = legend.Name;</span><br><span class="line">        cht1.Series[<span class="number">0</span>].IsValueShownAsLabel = <span class="literal">true</span>;</span><br><span class="line">        cht1.Series[<span class="number">0</span>].LabelForeColor = Color.Black;</span><br><span class="line">        cht1.Series[<span class="number">0</span>].CustomProperties = <span class="string">&quot;DrawingStyle = Cylinder&quot;</span>;</span><br><span class="line">        cht1.Legends.Add(legend);</span><br><span class="line">        cht1.Legends[<span class="number">0</span>].Position.Auto = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//绑定数据</span></span><br><span class="line">        cht1.Series[<span class="number">0</span>].Points.DataBindXY(x, y);</span><br><span class="line">        cht1.Series[<span class="number">0</span>].Points[<span class="number">0</span>].Color = Color.Black;</span><br><span class="line">        cht1.Series[<span class="number">0</span>].Palette = ChartColorPalette.Bright;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="饼图"><a href="#饼图" class="headerlink" title="饼图"></a>饼图</h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">region</span> 饼图</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//标题</span></span><br><span class="line">            cht2.Titles.Add(<span class="string">&quot;饼图数据分析&quot;</span>);</span><br><span class="line">            cht2.Titles[<span class="number">0</span>].ForeColor = Color.Black;</span><br><span class="line">            cht2.Titles[<span class="number">0</span>].Font = <span class="keyword">new</span> Font(<span class="string">&quot;微软雅黑&quot;</span>, <span class="number">12f</span>, FontStyle.Regular);</span><br><span class="line">            cht2.Titles[<span class="number">0</span>].Alignment = ContentAlignment.TopCenter;</span><br><span class="line">            cht2.Titles.Add(<span class="string">&quot;合计：25412 宗&quot;</span>);</span><br><span class="line">            cht2.Titles[<span class="number">1</span>].ForeColor = Color.Black;</span><br><span class="line">            cht2.Titles[<span class="number">1</span>].Font = <span class="keyword">new</span> Font(<span class="string">&quot;微软雅黑&quot;</span>, <span class="number">8f</span>, FontStyle.Regular);</span><br><span class="line">            cht2.Titles[<span class="number">1</span>].Alignment = ContentAlignment.TopRight;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//控件背景</span></span><br><span class="line">            cht2.BackColor = Color.Transparent;</span><br><span class="line">            <span class="comment">//图表区背景</span></span><br><span class="line">            cht2.ChartAreas[<span class="number">0</span>].BackColor = Color.Transparent;</span><br><span class="line">            cht2.ChartAreas[<span class="number">0</span>].BorderColor = Color.Transparent;</span><br><span class="line">            <span class="comment">//X轴标签间距</span></span><br><span class="line">            cht2.ChartAreas[<span class="number">0</span>].AxisX.Interval = <span class="number">1</span>;</span><br><span class="line">            cht2.ChartAreas[<span class="number">0</span>].AxisX.LabelStyle.IsStaggered = <span class="literal">true</span>;</span><br><span class="line">            cht2.ChartAreas[<span class="number">0</span>].AxisX.LabelStyle.Angle = <span class="number">-45</span>;</span><br><span class="line">            cht2.ChartAreas[<span class="number">0</span>].AxisX.TitleFont = <span class="keyword">new</span> Font(<span class="string">&quot;微软雅黑&quot;</span>, <span class="number">14f</span>, FontStyle.Regular);</span><br><span class="line">            cht2.ChartAreas[<span class="number">0</span>].AxisX.TitleForeColor = Color.Black;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//X坐标轴颜色</span></span><br><span class="line">            cht2.ChartAreas[<span class="number">0</span>].AxisX.LineColor = ColorTranslator.FromHtml(<span class="string">&quot;#38587a&quot;</span>); ;</span><br><span class="line">            cht2.ChartAreas[<span class="number">0</span>].AxisX.LabelStyle.ForeColor = Color.Black;</span><br><span class="line">            cht2.ChartAreas[<span class="number">0</span>].AxisX.LabelStyle.Font = <span class="keyword">new</span> Font(<span class="string">&quot;微软雅黑&quot;</span>, <span class="number">10f</span>, FontStyle.Regular);</span><br><span class="line">            <span class="comment">//X坐标轴标题</span></span><br><span class="line">            cht2.ChartAreas[<span class="number">0</span>].AxisX.Title = <span class="string">&quot;数量(宗)&quot;</span>;</span><br><span class="line">            cht2.ChartAreas[<span class="number">0</span>].AxisX.TitleFont = <span class="keyword">new</span> Font(<span class="string">&quot;微软雅黑&quot;</span>, <span class="number">10f</span>, FontStyle.Regular);</span><br><span class="line">            cht2.ChartAreas[<span class="number">0</span>].AxisX.TitleForeColor = Color.Black;</span><br><span class="line">            cht2.ChartAreas[<span class="number">0</span>].AxisX.TextOrientation = TextOrientation.Horizontal;</span><br><span class="line">            cht2.ChartAreas[<span class="number">0</span>].AxisX.ToolTip = <span class="string">&quot;数量(宗)&quot;</span>;</span><br><span class="line">            <span class="comment">//X轴网络线条</span></span><br><span class="line">            cht2.ChartAreas[<span class="number">0</span>].AxisX.MajorGrid.Enabled = <span class="literal">true</span>;</span><br><span class="line">            cht2.ChartAreas[<span class="number">0</span>].AxisX.MajorGrid.LineColor = ColorTranslator.FromHtml(<span class="string">&quot;#2c4c6d&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//Y坐标轴颜色</span></span><br><span class="line">            cht2.ChartAreas[<span class="number">0</span>].AxisY.LineColor = ColorTranslator.FromHtml(<span class="string">&quot;#38587a&quot;</span>);</span><br><span class="line">            cht2.ChartAreas[<span class="number">0</span>].AxisY.LabelStyle.ForeColor = Color.Black;</span><br><span class="line">            cht2.ChartAreas[<span class="number">0</span>].AxisY.LabelStyle.Font = <span class="keyword">new</span> Font(<span class="string">&quot;微软雅黑&quot;</span>, <span class="number">10f</span>, FontStyle.Regular);</span><br><span class="line">            <span class="comment">//Y坐标轴标题</span></span><br><span class="line">            cht2.ChartAreas[<span class="number">0</span>].AxisY.Title = <span class="string">&quot;数量(宗)&quot;</span>;</span><br><span class="line">            cht2.ChartAreas[<span class="number">0</span>].AxisY.TitleFont = <span class="keyword">new</span> Font(<span class="string">&quot;微软雅黑&quot;</span>, <span class="number">10f</span>, FontStyle.Regular);</span><br><span class="line">            cht2.ChartAreas[<span class="number">0</span>].AxisY.TitleForeColor = Color.Black;</span><br><span class="line">            cht2.ChartAreas[<span class="number">0</span>].AxisY.TextOrientation = TextOrientation.Rotated270;</span><br><span class="line">            cht2.ChartAreas[<span class="number">0</span>].AxisY.ToolTip = <span class="string">&quot;数量(宗)&quot;</span>;</span><br><span class="line">            <span class="comment">//Y轴网格线条</span></span><br><span class="line">            cht2.ChartAreas[<span class="number">0</span>].AxisY.MajorGrid.Enabled = <span class="literal">true</span>;</span><br><span class="line">            cht2.ChartAreas[<span class="number">0</span>].AxisY.MajorGrid.LineColor = ColorTranslator.FromHtml(<span class="string">&quot;#2c4c6d&quot;</span>);</span><br><span class="line"></span><br><span class="line">            cht2.ChartAreas[<span class="number">0</span>].AxisY2.LineColor = Color.Transparent;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//背景渐变</span></span><br><span class="line">            cht2.ChartAreas[<span class="number">0</span>].BackGradientStyle = GradientStyle.None;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//图例样式</span></span><br><span class="line">            Legend legend2 = <span class="keyword">new</span> Legend(<span class="string">&quot;#VALX&quot;</span>);</span><br><span class="line">            legend2.Title = <span class="string">&quot;图例&quot;</span>;</span><br><span class="line">            legend2.TitleBackColor = Color.Transparent;</span><br><span class="line">            legend2.BackColor = Color.Transparent;</span><br><span class="line">            legend2.TitleForeColor = Color.Black;</span><br><span class="line">            legend2.TitleFont = <span class="keyword">new</span> Font(<span class="string">&quot;微软雅黑&quot;</span>, <span class="number">10f</span>, FontStyle.Regular);</span><br><span class="line">            legend2.Font = <span class="keyword">new</span> Font(<span class="string">&quot;微软雅黑&quot;</span>, <span class="number">8f</span>, FontStyle.Regular);</span><br><span class="line">            legend2.ForeColor = Color.Black;</span><br><span class="line"></span><br><span class="line">            cht2.Series[<span class="number">0</span>].XValueType = ChartValueType.String;  <span class="comment">//设置X轴上的值类型</span></span><br><span class="line">            cht2.Series[<span class="number">0</span>].Label = <span class="string">&quot;#VAL&quot;</span>;                <span class="comment">//设置显示X Y的值    </span></span><br><span class="line">            cht2.Series[<span class="number">0</span>].LabelForeColor = Color.Black;</span><br><span class="line">            cht2.Series[<span class="number">0</span>].ToolTip = <span class="string">&quot;#VALX:#VAL(宗)&quot;</span>;     <span class="comment">//鼠标移动到对应点显示数值</span></span><br><span class="line">            cht2.Series[<span class="number">0</span>].ChartType = SeriesChartType.Pie;    <span class="comment">//图类型(折线)</span></span><br><span class="line"></span><br><span class="line">            cht2.Series[<span class="number">0</span>].Color = Color.Lime;</span><br><span class="line">            cht2.Series[<span class="number">0</span>].LegendText = legend2.Name;</span><br><span class="line">            cht2.Series[<span class="number">0</span>].IsValueShownAsLabel = <span class="literal">true</span>;</span><br><span class="line">            cht2.Series[<span class="number">0</span>].LabelForeColor = Color.Black;</span><br><span class="line">            cht2.Series[<span class="number">0</span>].CustomProperties = <span class="string">&quot;DrawingStyle = Cylinder&quot;</span>;</span><br><span class="line">            cht2.Series[<span class="number">0</span>].CustomProperties = <span class="string">&quot;PieLabelStyle = Outside&quot;</span>;</span><br><span class="line">            <span class="comment">//cht2.Legends.Add(legend2);</span></span><br><span class="line">            cht2.Legends[<span class="number">0</span>].Position.Auto = <span class="literal">true</span>;</span><br><span class="line">            cht2.Series[<span class="number">0</span>].IsValueShownAsLabel = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">//是否显示图例</span></span><br><span class="line">            cht2.Series[<span class="number">0</span>].IsVisibleInLegend = <span class="literal">true</span>;</span><br><span class="line">            cht2.Series[<span class="number">0</span>].ShadowOffset = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//饼图折线</span></span><br><span class="line">            cht2.Series[<span class="number">0</span>][<span class="string">&quot;PieLineColor&quot;</span>] = <span class="string">&quot;White&quot;</span>;</span><br><span class="line">            <span class="comment">//绑定数据</span></span><br><span class="line">            cht2.Series[<span class="number">0</span>].Points.DataBindXY(x, y);</span><br><span class="line">            cht2.Series[<span class="number">0</span>].Points[<span class="number">0</span>].Color = Color.Black;</span><br><span class="line">            <span class="comment">//绑定颜色</span></span><br><span class="line">            cht2.Series[<span class="number">0</span>].Palette = ChartColorPalette.BrightPastel;</span><br><span class="line">            <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="横向柱状图"><a href="#横向柱状图" class="headerlink" title="横向柱状图"></a>横向柱状图</h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">region</span> Bar图</span></span><br><span class="line"></span><br><span class="line">           <span class="comment">//标题</span></span><br><span class="line">           cht3.Titles.Add(<span class="string">&quot;交通违法行为TOP5&quot;</span>);</span><br><span class="line">           cht3.Titles[<span class="number">0</span>].ForeColor = Color.Black;</span><br><span class="line">           cht3.Titles[<span class="number">0</span>].Font = <span class="keyword">new</span> Font(<span class="string">&quot;微软雅黑&quot;</span>, <span class="number">12f</span>, FontStyle.Regular);</span><br><span class="line">           cht3.Titles[<span class="number">0</span>].Alignment = ContentAlignment.TopCenter;</span><br><span class="line">           cht3.Titles.Add(<span class="string">&quot;合计：25412 宗 &quot;</span>);</span><br><span class="line">           cht3.Titles[<span class="number">1</span>].ForeColor = Color.Black;</span><br><span class="line">           cht3.Titles[<span class="number">1</span>].Font = <span class="keyword">new</span> Font(<span class="string">&quot;微软雅黑&quot;</span>, <span class="number">8f</span>, FontStyle.Regular);</span><br><span class="line">           cht3.Titles[<span class="number">1</span>].Alignment = ContentAlignment.TopRight;</span><br><span class="line"></span><br><span class="line">           <span class="comment">//控件背景</span></span><br><span class="line">           cht3.BackColor = Color.Transparent;</span><br><span class="line">           <span class="comment">//图表区背景</span></span><br><span class="line">           cht3.ChartAreas[<span class="number">0</span>].BackColor = Color.Transparent;</span><br><span class="line">           cht3.ChartAreas[<span class="number">0</span>].BorderColor = Color.Transparent;</span><br><span class="line">           <span class="comment">//X轴标签间距</span></span><br><span class="line">           cht3.ChartAreas[<span class="number">0</span>].AxisX.Interval = <span class="number">1</span>;</span><br><span class="line">           cht3.ChartAreas[<span class="number">0</span>].AxisX.LabelStyle.IsStaggered = <span class="literal">true</span>;</span><br><span class="line">           cht3.ChartAreas[<span class="number">0</span>].AxisX.LabelStyle.Angle = <span class="number">-45</span>;</span><br><span class="line">           cht3.ChartAreas[<span class="number">0</span>].AxisX.TitleFont = <span class="keyword">new</span> Font(<span class="string">&quot;微软雅黑&quot;</span>, <span class="number">14f</span>, FontStyle.Regular);</span><br><span class="line">           cht3.ChartAreas[<span class="number">0</span>].AxisX.TitleForeColor = Color.Black;</span><br><span class="line"></span><br><span class="line">           <span class="comment">//X坐标轴颜色</span></span><br><span class="line">           cht3.ChartAreas[<span class="number">0</span>].AxisX.LineColor = ColorTranslator.FromHtml(<span class="string">&quot;#38587a&quot;</span>); ;</span><br><span class="line">           cht3.ChartAreas[<span class="number">0</span>].AxisX.LabelStyle.ForeColor = Color.Black;</span><br><span class="line">           cht3.ChartAreas[<span class="number">0</span>].AxisX.LabelStyle.Font = <span class="keyword">new</span> Font(<span class="string">&quot;微软雅黑&quot;</span>, <span class="number">10f</span>, FontStyle.Regular);</span><br><span class="line">           <span class="comment">//X坐标轴标题</span></span><br><span class="line">           <span class="comment">//cht3.ChartAreas[0].AxisX.Title = &quot;数量(宗)&quot;;</span></span><br><span class="line">           <span class="comment">//cht3.ChartAreas[0].AxisX.TitleFont = new Font(&quot;微软雅黑&quot;, 10f, FontStyle.Regular);</span></span><br><span class="line">           <span class="comment">//cht3.ChartAreas[0].AxisX.TitleForeColor = Color.Black;</span></span><br><span class="line">           <span class="comment">//cht3.ChartAreas[0].AxisX.TextOrientation = TextOrientation.Auto;</span></span><br><span class="line">           <span class="comment">//cht3.ChartAreas[0].AxisX.ToolTip = &quot;数量(宗)&quot;;</span></span><br><span class="line">           <span class="comment">//X轴网络线条</span></span><br><span class="line">           cht3.ChartAreas[<span class="number">0</span>].AxisX.MajorGrid.Enabled = <span class="literal">true</span>;</span><br><span class="line">           cht3.ChartAreas[<span class="number">0</span>].AxisX.MajorGrid.LineColor = ColorTranslator.FromHtml(<span class="string">&quot;#2c4c6d&quot;</span>);</span><br><span class="line"></span><br><span class="line">           <span class="comment">//Y坐标轴颜色</span></span><br><span class="line">           cht3.ChartAreas[<span class="number">0</span>].AxisY.LineColor = ColorTranslator.FromHtml(<span class="string">&quot;#38587a&quot;</span>);</span><br><span class="line">           cht3.ChartAreas[<span class="number">0</span>].AxisY.LabelStyle.ForeColor = Color.Black;</span><br><span class="line">           cht3.ChartAreas[<span class="number">0</span>].AxisY.LabelStyle.Font = <span class="keyword">new</span> Font(<span class="string">&quot;微软雅黑&quot;</span>, <span class="number">10f</span>, FontStyle.Regular);</span><br><span class="line">           <span class="comment">//Y坐标轴标题</span></span><br><span class="line">           <span class="comment">//cht3.ChartAreas[0].AxisY.Title = &quot;数量(宗)&quot;;</span></span><br><span class="line">           <span class="comment">//cht3.ChartAreas[0].AxisY.TitleFont = new Font(&quot;微软雅黑&quot;, 10f, FontStyle.Regular);</span></span><br><span class="line">           <span class="comment">//cht3.ChartAreas[0].AxisY.TitleForeColor = Color.Black;</span></span><br><span class="line">           <span class="comment">//cht3.ChartAreas[0].AxisY.TextOrientation = TextOrientation.Auto;</span></span><br><span class="line">           <span class="comment">//cht3.ChartAreas[0].AxisY.ToolTip = &quot;数量(宗)&quot;;</span></span><br><span class="line">           <span class="comment">//Y轴网格线条</span></span><br><span class="line">           cht3.ChartAreas[<span class="number">0</span>].AxisY.MajorGrid.Enabled = <span class="literal">true</span>;</span><br><span class="line">           cht3.ChartAreas[<span class="number">0</span>].AxisY.MajorGrid.LineColor = ColorTranslator.FromHtml(<span class="string">&quot;#2c4c6d&quot;</span>);</span><br><span class="line"></span><br><span class="line">           cht3.ChartAreas[<span class="number">0</span>].AxisY2.LineColor = Color.Transparent;</span><br><span class="line">           cht3.ChartAreas[<span class="number">0</span>].AxisX.IsMarginVisible = <span class="literal">false</span>;</span><br><span class="line">           cht3.ChartAreas[<span class="number">0</span>].Area3DStyle.Enable3D = <span class="literal">true</span>;</span><br><span class="line">           <span class="comment">//背景渐变</span></span><br><span class="line">           cht2.ChartAreas[<span class="number">0</span>].BackGradientStyle = GradientStyle.None;</span><br><span class="line"></span><br><span class="line">           <span class="comment">//图例样式</span></span><br><span class="line">           Legend legend3 = <span class="keyword">new</span> Legend(<span class="string">&quot;#VALX&quot;</span>);</span><br><span class="line">           legend3.Title = <span class="string">&quot;图例&quot;</span>;</span><br><span class="line">           legend3.TitleBackColor = Color.Transparent;</span><br><span class="line">           legend3.BackColor = Color.Transparent;</span><br><span class="line">           legend3.TitleForeColor = Color.Black;</span><br><span class="line">           legend3.TitleFont = <span class="keyword">new</span> Font(<span class="string">&quot;微软雅黑&quot;</span>, <span class="number">10f</span>, FontStyle.Regular);</span><br><span class="line">           legend3.Font = <span class="keyword">new</span> Font(<span class="string">&quot;微软雅黑&quot;</span>, <span class="number">8f</span>, FontStyle.Regular);</span><br><span class="line">           legend3.ForeColor = Color.Black;</span><br><span class="line"></span><br><span class="line">           cht3.Series[<span class="number">0</span>].XValueType = ChartValueType.String;  <span class="comment">//设置X轴上的值类型</span></span><br><span class="line">           cht3.Series[<span class="number">0</span>].Label = <span class="string">&quot;#VAL&quot;</span>;                <span class="comment">//设置显示X Y的值    </span></span><br><span class="line">           cht3.Series[<span class="number">0</span>].LabelForeColor = Color.Black;</span><br><span class="line">           cht3.Series[<span class="number">0</span>].ToolTip = <span class="string">&quot;#VALX:#VAL(宗)&quot;</span>;     <span class="comment">//鼠标移动到对应点显示数值</span></span><br><span class="line">           cht3.Series[<span class="number">0</span>].ChartType = SeriesChartType.Bar;    <span class="comment">//图类型(折线)</span></span><br><span class="line"></span><br><span class="line">           cht3.Series[<span class="number">0</span>].Color = Color.Lime;</span><br><span class="line">           <span class="comment">//cht3.Series[0].LegendText = legend3.Name;</span></span><br><span class="line">           cht3.Series[<span class="number">0</span>].IsValueShownAsLabel = <span class="literal">true</span>;</span><br><span class="line">           cht3.Series[<span class="number">0</span>].LabelForeColor = Color.Black;</span><br><span class="line">           cht3.Series[<span class="number">0</span>].CustomProperties = <span class="string">&quot;DrawingStyle = Cylinder&quot;</span>;</span><br><span class="line">           cht3.Series[<span class="number">0</span>].CustomProperties = <span class="string">&quot;PieLabelStyle = Outside&quot;</span>;</span><br><span class="line">           <span class="comment">//cht3.Legends.Add(legend3);</span></span><br><span class="line">           <span class="comment">//cht3.Legends[0].Position.Auto = true;</span></span><br><span class="line"></span><br><span class="line">           <span class="comment">//是否显示图例</span></span><br><span class="line">           cht3.Series[<span class="number">0</span>].IsVisibleInLegend = <span class="literal">true</span>;</span><br><span class="line">           cht3.Series[<span class="number">0</span>].ShadowOffset = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">           <span class="comment">//饼图折线</span></span><br><span class="line">           cht3.Series[<span class="number">0</span>][<span class="string">&quot;PieLineColor&quot;</span>] = <span class="string">&quot;White&quot;</span>;</span><br><span class="line">           <span class="comment">//绑定数据</span></span><br><span class="line">           cht3.Series[<span class="number">0</span>].Points.DataBindXY(x, y);</span><br><span class="line"></span><br><span class="line">           <span class="comment">//cht3.Series[0].Points[0].Color = Color.Black;</span></span><br><span class="line">           <span class="comment">//绑定颜色</span></span><br><span class="line">           cht3.Series[<span class="number">0</span>].Palette = ChartColorPalette.BrightPastel;</span><br><span class="line"></span><br><span class="line">           <span class="comment">//for (int n = 0; n &lt; x.Length; n++)</span></span><br><span class="line">           <span class="comment">//&#123;</span></span><br><span class="line">           <span class="comment">//    int ptIdx = cht3.Series[0].Points.AddY(Convert.ToDouble(y[n]));</span></span><br><span class="line">           <span class="comment">//    DataPoint pt = this.cht3.Series[0].Points[ptIdx];</span></span><br><span class="line">           <span class="comment">//    pt.LegendText = x[n] + &quot; &quot; + &quot;#PERCENT&#123;P2&#125;&quot; + &quot; [ &quot; + &quot;#VAL&#123;D&#125; 次&quot; + &quot; ]&quot;;//右边标签列显示的文字  </span></span><br><span class="line">           <span class="comment">//    pt.Label = x[n] + &quot; &quot; + &quot;#PERCENT&#123;P2&#125;&quot; + &quot; [ &quot; + &quot;#VAL&#123;D&#125; 次&quot; + &quot; ]&quot;; //圆饼外显示的信息 </span></span><br><span class="line"></span><br><span class="line">           <span class="comment">//    //  pt.LabelToolTip = &quot;#PERCENT&#123;P2&#125;&quot;;  </span></span><br><span class="line">           <span class="comment">//    //pt.LabelBorderColor = Color.Red;//文字背景色   </span></span><br><span class="line">           <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">           <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="雷达图"><a href="#雷达图" class="headerlink" title="雷达图"></a>雷达图</h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line">cht4.Titles.Add(<span class="string">&quot;交通违法行为TOP5&quot;</span>);</span><br><span class="line">            cht4.Titles[<span class="number">0</span>].ForeColor = Color.Black;</span><br><span class="line">            cht4.Titles[<span class="number">0</span>].Font = <span class="keyword">new</span> Font(<span class="string">&quot;微软雅黑&quot;</span>, <span class="number">12f</span>, FontStyle.Regular);</span><br><span class="line">            cht4.Titles[<span class="number">0</span>].Alignment = ContentAlignment.TopCenter;</span><br><span class="line">            cht4.Titles.Add(<span class="string">&quot;合计：25412 宗 &quot;</span>);</span><br><span class="line">            cht4.Titles[<span class="number">1</span>].ForeColor = Color.Black;</span><br><span class="line">            cht4.Titles[<span class="number">1</span>].Font = <span class="keyword">new</span> Font(<span class="string">&quot;微软雅黑&quot;</span>, <span class="number">8f</span>, FontStyle.Regular);</span><br><span class="line">            cht4.Titles[<span class="number">1</span>].Alignment = ContentAlignment.TopRight;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//控件背景</span></span><br><span class="line">            cht4.BackColor = Color.Transparent;</span><br><span class="line">            cht4.ChartAreas[<span class="number">0</span>].BackColor = Color.Transparent;</span><br><span class="line">            cht4.ChartAreas[<span class="number">0</span>].BorderColor = Color.Transparent;</span><br><span class="line">            <span class="comment">//X轴标签间距</span></span><br><span class="line">            cht4.ChartAreas[<span class="number">0</span>].AxisX.Interval = <span class="number">1</span>;</span><br><span class="line">            cht4.ChartAreas[<span class="number">0</span>].AxisX.LabelStyle.IsStaggered = <span class="literal">true</span>;</span><br><span class="line">            cht4.ChartAreas[<span class="number">0</span>].AxisX.LabelStyle.Angle = <span class="number">-45</span>;</span><br><span class="line">            cht4.ChartAreas[<span class="number">0</span>].AxisX.TitleFont = <span class="keyword">new</span> Font(<span class="string">&quot;微软雅黑&quot;</span>, <span class="number">14f</span>, FontStyle.Regular);</span><br><span class="line">            cht4.ChartAreas[<span class="number">0</span>].AxisX.TitleForeColor = Color.Black;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//X坐标轴颜色</span></span><br><span class="line">            cht4.ChartAreas[<span class="number">0</span>].AxisX.LineColor = ColorTranslator.FromHtml(<span class="string">&quot;#38587a&quot;</span>); ;</span><br><span class="line">            cht4.ChartAreas[<span class="number">0</span>].AxisX.LabelStyle.ForeColor = Color.Black;</span><br><span class="line">            cht4.ChartAreas[<span class="number">0</span>].AxisX.LabelStyle.Font = <span class="keyword">new</span> Font(<span class="string">&quot;微软雅黑&quot;</span>, <span class="number">10f</span>, FontStyle.Regular);</span><br><span class="line">            <span class="comment">//X坐标轴标题</span></span><br><span class="line">            <span class="comment">//cht4.ChartAreas[0].AxisX.Title = &quot;数量(宗)&quot;;</span></span><br><span class="line">            <span class="comment">//cht4.ChartAreas[0].AxisX.TitleFont = new Font(&quot;微软雅黑&quot;, 10f, FontStyle.Regular);</span></span><br><span class="line">            <span class="comment">//cht4.ChartAreas[0].AxisX.TitleForeColor = Color.Black;</span></span><br><span class="line">            <span class="comment">//cht4.ChartAreas[0].AxisX.TextOrientation = TextOrientation.Auto;</span></span><br><span class="line">            <span class="comment">//cht4.ChartAreas[0].AxisX.ToolTip = &quot;数量(宗)&quot;;</span></span><br><span class="line">            <span class="comment">//X轴网络线条</span></span><br><span class="line">            cht4.ChartAreas[<span class="number">0</span>].AxisX.MajorGrid.Enabled = <span class="literal">true</span>;</span><br><span class="line">            cht4.ChartAreas[<span class="number">0</span>].AxisX.MajorGrid.LineColor = ColorTranslator.FromHtml(<span class="string">&quot;#2c4c6d&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//Y坐标轴颜色</span></span><br><span class="line">            cht4.ChartAreas[<span class="number">0</span>].AxisY.LineColor = ColorTranslator.FromHtml(<span class="string">&quot;#38587a&quot;</span>);</span><br><span class="line">            cht4.ChartAreas[<span class="number">0</span>].AxisY.LabelStyle.ForeColor = Color.Black;</span><br><span class="line">            cht4.ChartAreas[<span class="number">0</span>].AxisY.LabelStyle.Font = <span class="keyword">new</span> Font(<span class="string">&quot;微软雅黑&quot;</span>, <span class="number">10f</span>, FontStyle.Regular);</span><br><span class="line">            <span class="comment">//Y坐标轴标题</span></span><br><span class="line">            <span class="comment">//cht4.ChartAreas[0].AxisY.Title = &quot;数量(宗)&quot;;</span></span><br><span class="line">            <span class="comment">//cht4.ChartAreas[0].AxisY.TitleFont = new Font(&quot;微软雅黑&quot;, 10f, FontStyle.Regular);</span></span><br><span class="line">            <span class="comment">//cht4.ChartAreas[0].AxisY.TitleForeColor = Color.Black;</span></span><br><span class="line">            <span class="comment">//cht4.ChartAreas[0].AxisY.TextOrientation = TextOrientation.Auto;</span></span><br><span class="line">            <span class="comment">//cht4.ChartAreas[0].AxisY.ToolTip = &quot;数量(宗)&quot;;</span></span><br><span class="line">            <span class="comment">//Y轴网格线条</span></span><br><span class="line">            cht4.ChartAreas[<span class="number">0</span>].AxisY.MajorGrid.Enabled = <span class="literal">true</span>;</span><br><span class="line">            cht4.ChartAreas[<span class="number">0</span>].AxisY.MajorGrid.LineColor = ColorTranslator.FromHtml(<span class="string">&quot;#2c4c6d&quot;</span>);</span><br><span class="line"></span><br><span class="line">            cht4.ChartAreas[<span class="number">0</span>].AxisY2.LineColor = Color.Transparent;</span><br><span class="line">            cht4.ChartAreas[<span class="number">0</span>].AxisX.IsMarginVisible = <span class="literal">false</span>;</span><br><span class="line">            cht4.ChartAreas[<span class="number">0</span>].Area3DStyle.Enable3D = <span class="literal">true</span>;</span><br><span class="line">            cht4.ChartAreas[<span class="number">0</span>].AxisX.IsInterlaced = <span class="literal">false</span>;</span><br><span class="line">            cht4.ChartAreas[<span class="number">0</span>].AxisX.IsMarginVisible = <span class="literal">false</span>;</span><br><span class="line">            <span class="comment">//刻度线</span></span><br><span class="line">            cht4.ChartAreas[<span class="number">0</span>].AxisY.MajorTickMark.Enabled = <span class="literal">false</span>;</span><br><span class="line">            <span class="comment">//cht4.ChartAreas[0].AxisX.MajorGrid.Enabled = false;</span></span><br><span class="line">            <span class="comment">//cht4.ChartAreas[0].AxisY.MajorGrid.Enabled = false;</span></span><br><span class="line">            <span class="comment">//cht4.ChartAreas[0].AxisX.MajorTickMark.Enabled = false;</span></span><br><span class="line">            cht4.ChartAreas[<span class="number">0</span>].AxisY.LabelStyle.Enabled = <span class="literal">false</span>;</span><br><span class="line">            <span class="comment">//背景渐变</span></span><br><span class="line">            cht4.ChartAreas[<span class="number">0</span>].BackGradientStyle = GradientStyle.None;</span><br><span class="line">            <span class="comment">//cht4.ChartAreas[0].AxisX2.InterlacedColor = Color.Red;</span></span><br><span class="line">            <span class="comment">//cht4.ChartAreas[0].AxisY2.InterlacedColor = Color.Red;</span></span><br><span class="line">            <span class="comment">//cht4.ChartAreas[0].BorderWidth = 0;</span></span><br><span class="line">            <span class="comment">//cht4.ChartAreas[0].BackSecondaryColor = Color.Red;</span></span><br><span class="line">            <span class="comment">//cht4.ChartAreas[0].BackImageTransparentColor = Color.Red;</span></span><br><span class="line">            <span class="comment">//cht4.ChartAreas[0].AxisX.InterlacedColor = Color.Red;</span></span><br><span class="line">            <span class="comment">//cht4.ChartAreas[0].AxisX.LineColor = Color.Red;</span></span><br><span class="line">            <span class="comment">//cht4.ChartAreas[0].AxisX2.LineColor = Color.Red;</span></span><br><span class="line">            <span class="comment">//cht4.ChartAreas[0].AxisX2.MajorGrid.LineColor = Color.Red;</span></span><br><span class="line">            <span class="comment">//cht4.ChartAreas[0].AxisX2.MajorTickMark.LineColor = Color.Red;</span></span><br><span class="line">            <span class="comment">//cht4.ChartAreas[0].AxisX2.MinorTickMark.LineColor = Color.Red;</span></span><br><span class="line">            <span class="comment">//cht4.ChartAreas[0].AxisY.InterlacedColor = Color.Red;</span></span><br><span class="line">            <span class="comment">//cht4.ChartAreas[0].AxisY.LineColor = Color.Red;</span></span><br><span class="line">            <span class="comment">//cht4.ChartAreas[0].AxisY2.InterlacedColor = Color.Red;</span></span><br><span class="line">            <span class="comment">//cht4.ChartAreas[0].AxisY2.LineColor = Color.Red;</span></span><br><span class="line">            <span class="comment">//cht4.ChartAreas[0].AxisY2.MajorGrid.LineColor = Color.Red;</span></span><br><span class="line">            <span class="comment">//cht4.ChartAreas[0].AxisY2.MajorTickMark.LineColor = Color.Red;</span></span><br><span class="line">            <span class="comment">//cht4.ChartAreas[0].AxisY2.MinorTickMark.LineColor = Color.Red;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//图例样式</span></span><br><span class="line">            Legend legend4 = <span class="keyword">new</span> Legend();</span><br><span class="line">            legend4.Title = <span class="string">&quot;图例&quot;</span>;</span><br><span class="line">            legend4.TitleBackColor = Color.Transparent;</span><br><span class="line">            legend4.BackColor = Color.Transparent;</span><br><span class="line">            legend4.TitleForeColor = Color.Black;</span><br><span class="line">            legend4.TitleFont = <span class="keyword">new</span> Font(<span class="string">&quot;微软雅黑&quot;</span>, <span class="number">10f</span>, FontStyle.Regular);</span><br><span class="line">            legend4.Font = <span class="keyword">new</span> Font(<span class="string">&quot;微软雅黑&quot;</span>, <span class="number">8f</span>, FontStyle.Regular);</span><br><span class="line">            legend4.ForeColor = Color.Black;</span><br><span class="line">            cht4.Legends.Add(legend4);</span><br><span class="line">            cht4.Legends[<span class="number">0</span>].Position.Auto = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//Series1</span></span><br><span class="line">            cht4.Series[<span class="number">0</span>].XValueType = ChartValueType.String; </span><br><span class="line">            cht4.Series[<span class="number">0</span>].Label = <span class="string">&quot;#VAL&quot;</span>;                </span><br><span class="line">            cht4.Series[<span class="number">0</span>].LabelForeColor = Color.Black;</span><br><span class="line">            cht4.Series[<span class="number">0</span>].ToolTip = <span class="string">&quot;#LEGENDTEXT:#VAL(宗)&quot;</span>;    </span><br><span class="line">            cht4.Series[<span class="number">0</span>].ChartType = SeriesChartType.Radar;    </span><br><span class="line">            cht4.Series[<span class="number">0</span>][<span class="string">&quot;RadarDrawingStyle&quot;</span>] = <span class="string">&quot;Line&quot;</span>;  </span><br><span class="line">            cht4.Series[<span class="number">0</span>].LegendText = <span class="string">&quot;2015年&quot;</span>;</span><br><span class="line">            cht4.Series[<span class="number">0</span>].IsValueShownAsLabel = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//Series2</span></span><br><span class="line">            cht4.Series.Add(<span class="keyword">new</span> Series(<span class="string">&quot;Series2&quot;</span>));</span><br><span class="line">            cht4.Series[<span class="number">1</span>].Label = <span class="string">&quot;#VAL&quot;</span>;                </span><br><span class="line">            cht4.Series[<span class="number">1</span>].LabelForeColor = Color.Black;</span><br><span class="line">            cht4.Series[<span class="number">1</span>].ToolTip = <span class="string">&quot;#LEGENDTEXT:#VAL(宗)&quot;</span>;     </span><br><span class="line">            cht4.Series[<span class="number">1</span>].ChartType = SeriesChartType.Radar;   </span><br><span class="line">            cht4.Series[<span class="number">1</span>][<span class="string">&quot;RadarDrawingStyle&quot;</span>] = <span class="string">&quot;Line&quot;</span>;</span><br><span class="line">            cht4.Series[<span class="number">1</span>].LegendText = <span class="string">&quot;2016年&quot;</span>;</span><br><span class="line">            cht4.Series[<span class="number">1</span>].IsValueShownAsLabel = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//Series3</span></span><br><span class="line">            cht4.Series.Add(<span class="keyword">new</span> Series(<span class="string">&quot;Series3&quot;</span>));</span><br><span class="line">            cht4.Series[<span class="number">2</span>].Label = <span class="string">&quot;#VAL&quot;</span>;               </span><br><span class="line">            cht4.Series[<span class="number">2</span>].LabelForeColor = Color.Black;</span><br><span class="line">            cht4.Series[<span class="number">2</span>].ToolTip = <span class="string">&quot;#LEGENDTEXT:#VAL(宗)&quot;</span>;     </span><br><span class="line">            cht4.Series[<span class="number">2</span>].ChartType = SeriesChartType.Radar;    </span><br><span class="line">            cht4.Series[<span class="number">2</span>][<span class="string">&quot;RadarDrawingStyle&quot;</span>] = <span class="string">&quot;Line&quot;</span>;</span><br><span class="line">            cht4.Series[<span class="number">2</span>].LegendText = <span class="string">&quot;2017年&quot;</span>;</span><br><span class="line">            cht4.Series[<span class="number">2</span>].IsValueShownAsLabel = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="built_in">double</span>[] yValues = &#123; <span class="number">65.62</span>, <span class="number">75.54</span>, <span class="number">60.45</span>, <span class="number">34.73</span>, <span class="number">85.42</span>, <span class="number">55.9</span>, <span class="number">63.6</span>, <span class="number">55.2</span>, <span class="number">77.1</span> &#125;;</span><br><span class="line">            <span class="built_in">string</span>[] xValues = &#123; <span class="string">&quot;France&quot;</span>, <span class="string">&quot;Canada&quot;</span>, <span class="string">&quot;Germany&quot;</span>, <span class="string">&quot;USA&quot;</span>, <span class="string">&quot;Italy&quot;</span>, <span class="string">&quot;Spain&quot;</span>, <span class="string">&quot;Russia&quot;</span>, <span class="string">&quot;Sweden&quot;</span>, <span class="string">&quot;Japan&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//Seris2  </span></span><br><span class="line">            <span class="built_in">double</span>[] y2 = &#123; <span class="number">45.62</span>, <span class="number">65.54</span>, <span class="number">70.45</span>, <span class="number">84.73</span>, <span class="number">35.42</span>, <span class="number">55.9</span>, <span class="number">63.6</span> &#125;;</span><br><span class="line">            <span class="built_in">double</span>[] y3 = &#123; <span class="number">88.62</span>, <span class="number">35.54</span>, <span class="number">52.45</span>, <span class="number">45.73</span>, <span class="number">88.42</span>, <span class="number">14.9</span>, <span class="number">33.6</span> &#125;;</span><br><span class="line">            <span class="keyword">this</span>.cht4.Series[<span class="number">0</span>].Points.DataBindXY(xValues, yValues);</span><br><span class="line">            <span class="keyword">this</span>.cht4.Series[<span class="number">1</span>].Points.DataBindY(y2);</span><br><span class="line">            <span class="keyword">this</span>.cht4.Series[<span class="number">2</span>].Points.DataBindY(y3);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//设置X轴显示间隔为1,X轴数据比较多的时候比较有用  </span></span><br><span class="line">            cht4.ChartAreas[<span class="number">0</span>].AxisX.LabelStyle.Interval = <span class="number">1</span>;</span><br><span class="line">            <span class="comment">//设置XY轴标题的名称所在位置位远  </span></span><br><span class="line">            cht4.ChartAreas[<span class="number">0</span>].AxisX.TitleAlignment = StringAlignment.Near;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; cht4.Series[<span class="number">2</span>].Points.Count; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                cht4.Series[<span class="number">2</span>].Points[i].MarkerStyle = MarkerStyle.Circle;<span class="comment">//设置折点的风格     </span></span><br><span class="line">                cht4.Series[<span class="number">2</span>].Points[i].MarkerColor = Color.Red;<span class="comment">//设置seires中折点的颜色   </span></span><br><span class="line">            <span class="comment">//    cht4.Series[1].Points[i].MarkerStyle = MarkerStyle.Square;//设置折点的风格     </span></span><br><span class="line">            <span class="comment">//    cht4.Series[1].Points[i].MarkerColor = Color.Blue;//设置seires中折点的颜色  </span></span><br><span class="line">            <span class="comment">//    cht4.Series[2].Points[i].MarkerStyle = MarkerStyle.Square;//设置折点的风格     </span></span><br><span class="line">            <span class="comment">//    cht4.Series[2].Points[i].MarkerColor = Color.Green;//设置seires中折点的颜色  </span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; cht4.Series.Count; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; cht4.Series[i].Points.Count; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    cht4.Series[i].Points[j].Label = <span class="string">&quot; &quot;</span>;</span><br><span class="line">                    <span class="comment">//cht4.Series[i].Points[j].LabelToolTip = &quot;string.Empty&quot;;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//cht4.ImageType = ChartImageType.Jpeg;</span></span><br><span class="line">            <span class="comment">//反锯齿  </span></span><br><span class="line">            cht4.AntiAliasing = AntiAliasingStyles.All;</span><br><span class="line">            <span class="comment">//调色板 磨沙:SemiTransparent  </span></span><br><span class="line">            cht4.Palette = ChartColorPalette.BrightPastel;</span><br><span class="line"></span><br><span class="line">            cht4.Series[<span class="number">0</span>].ChartType = SeriesChartType.Radar;</span><br><span class="line">            cht4.Series[<span class="number">1</span>].ChartType = SeriesChartType.Radar;</span><br><span class="line">            cht4.Series[<span class="number">2</span>].ChartType = SeriesChartType.Radar;</span><br><span class="line">            cht4.Width = <span class="number">500</span>;</span><br><span class="line">            cht4.Height = <span class="number">350</span>;</span><br><span class="line"></span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">            <span class="comment">/* </span></span><br><span class="line"><span class="comment">                 #VALX      显示当前图例的X轴的对应文本(或数据) </span></span><br><span class="line"><span class="comment">                 #VAL, #VALY,  显示当前图例的Y轴的对应文本(或数据) </span></span><br><span class="line"><span class="comment">                 #VALY2, #VALY3, 显示当前图例的辅助Y轴的对应文本(或数据) </span></span><br><span class="line"><span class="comment">                 #SER:      显示当前图例的名称 </span></span><br><span class="line"><span class="comment">                 #LABEL       显示当前图例的标签文本 </span></span><br><span class="line"><span class="comment">                 #INDEX      显示当前图例的索引 </span></span><br><span class="line"><span class="comment">                 #PERCENT       显示当前图例的所占的百分比 </span></span><br><span class="line"><span class="comment">                 #TOTAL      总数量 </span></span><br><span class="line"><span class="comment">                 #LEGENDTEXT      图例文本 </span></span><br><span class="line"><span class="comment">                 */</span>  </span><br><span class="line">                    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="相关链接（侵删）"><a href="#相关链接（侵删）" class="headerlink" title="相关链接（侵删）"></a>相关链接（侵删）</h1><ol><li><a href="https://blog.csdn.net/qq_42832272/article/details/116593002">C#应用6——chart数据显示(柱状图、饼图、横向柱状图、雷达图)</a></li><li><a href="https://blog.csdn.net/qq_38628970/article/details/91041879">C#chart控件绘制折线图、柱状图、饼图、雷达图</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">在 Chart 中，鼠标放在上面时显示浮动坐标值</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="C#" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/C/"/>
    
    <category term="前端" scheme="https://zml3589110.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="绘图" scheme="https://zml3589110.github.io/categories/%E7%BB%98%E5%9B%BE/"/>
    
    
    <category term="C#" scheme="https://zml3589110.github.io/tags/C/"/>
    
    <category term="控件" scheme="https://zml3589110.github.io/tags/%E6%8E%A7%E4%BB%B6/"/>
    
    <category term="绘图" scheme="https://zml3589110.github.io/tags/%E7%BB%98%E5%9B%BE/"/>
    
    <category term="Chart" scheme="https://zml3589110.github.io/tags/Chart/"/>
    
    <category term="图表" scheme="https://zml3589110.github.io/tags/%E5%9B%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>C#绘图之九（Chart鼠标位置浮动显示坐标值）</title>
    <link href="https://zml3589110.github.io/posts/3865063700.html"/>
    <id>https://zml3589110.github.io/posts/3865063700.html</id>
    <published>2023-02-10T01:05:20.000Z</published>
    <updated>2023-02-10T01:16:45.614Z</updated>
    
    <content type="html"><![CDATA[<h1 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h1><img src="https://img-blog.csdnimg.cn/2021040613561561.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxMTA4MTg0,size_16,color_FFFFFF,t_70"><h1 id="设置方法"><a href="#设置方法" class="headerlink" title="设置方法"></a>设置方法</h1><h2 id="1、找到chart控件的series属性"><a href="#1、找到chart控件的series属性" class="headerlink" title="1、找到chart控件的series属性"></a>1、找到chart控件的series属性</h2><img src="https://img-blog.csdnimg.cn/20210406135830476.png"><h2 id="2、-将集合下isxvayleindexed属性设置为true"><a href="#2、-将集合下isxvayleindexed属性设置为true" class="headerlink" title="2、 将集合下isxvayleindexed属性设置为true"></a>2、 将集合下isxvayleindexed属性设置为true</h2><blockquote><p>也可以直接使用代码在初始化时实现实现</p></blockquote><img src="https://img-blog.csdnimg.cn/20210406135903819.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxMTA4MTg0,size_16,color_FFFFFF,t_70"><h2 id="3、在鼠标移动事件下添加以下代码"><a href="#3、在鼠标移动事件下添加以下代码" class="headerlink" title="3、在鼠标移动事件下添加以下代码"></a>3、在鼠标移动事件下添加以下代码</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chart1.Series[<span class="number">0</span>].ToolTip = “X：<span class="meta">#VALX\nY：#VALY”;</span></span><br></pre></td></tr></table></figure><hr><h1 id="相关链接（侵删）"><a href="#相关链接（侵删）" class="headerlink" title="相关链接（侵删）"></a>相关链接（侵删）</h1><ol><li><a href="https://blog.csdn.net/qq_51108184/article/details/115459335">C#_chart 控件曲线坐标值，根据鼠标移动浮动显示(六)</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">在 Chart 中，鼠标放在上面时显示浮动坐标值</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="C#" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/C/"/>
    
    <category term="前端" scheme="https://zml3589110.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="绘图" scheme="https://zml3589110.github.io/categories/%E7%BB%98%E5%9B%BE/"/>
    
    
    <category term="C#" scheme="https://zml3589110.github.io/tags/C/"/>
    
    <category term="控件" scheme="https://zml3589110.github.io/tags/%E6%8E%A7%E4%BB%B6/"/>
    
    <category term="绘图" scheme="https://zml3589110.github.io/tags/%E7%BB%98%E5%9B%BE/"/>
    
    <category term="Chart" scheme="https://zml3589110.github.io/tags/Chart/"/>
    
    <category term="鼠标" scheme="https://zml3589110.github.io/tags/%E9%BC%A0%E6%A0%87/"/>
    
    <category term="坐标值" scheme="https://zml3589110.github.io/tags/%E5%9D%90%E6%A0%87%E5%80%BC/"/>
    
  </entry>
  
  <entry>
    <title>C#绘图之八（Chart下鼠标滚轮放大缩小及平移）</title>
    <link href="https://zml3589110.github.io/posts/3201193844.html"/>
    <id>https://zml3589110.github.io/posts/3201193844.html</id>
    <published>2023-02-10T00:18:20.000Z</published>
    <updated>2023-02-10T01:16:38.754Z</updated>
    
    <content type="html"><![CDATA[<h1 id="放大缩小"><a href="#放大缩小" class="headerlink" title="放大缩小"></a>放大缩小</h1><h2 id="使用一（这个正常使用）"><a href="#使用一（这个正常使用）" class="headerlink" title="使用一（这个正常使用）"></a>使用一（这个正常使用）</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">this</span>.chart1.MouseWheel += <span class="keyword">new</span> System.Windows.Forms.MouseEventHandler(<span class="keyword">this</span>.chart1_MouseWheel);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">chart1_MouseWheel</span>(<span class="params"><span class="built_in">object</span> sender, MouseEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//鼠标向上滚的Delta值是120，向下是-120</span></span><br><span class="line">    <span class="keyword">if</span>(e.Delta == <span class="number">120</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (chart1.ChartAreas[<span class="number">0</span>].AxisX.ScaleView.Size &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            chart1.ChartAreas[<span class="number">0</span>].AxisX.ScaleView.Size /= <span class="number">2</span>;<span class="comment">//每页显示的点数除以2实现放大效果</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            chart1.ChartAreas[<span class="number">0</span>].AxisX.ScaleView.Size = chart1.Series[<span class="number">0</span>].Points.Count/<span class="number">2</span>;<span class="comment">//首次滚动时size为NaN</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (e.Delta == <span class="number">-120</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (chart1.ChartAreas[<span class="number">0</span>].AxisX.ScaleView.Size &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            chart1.ChartAreas[<span class="number">0</span>].AxisX.ScaleView.Size *= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            chart1.ChartAreas[<span class="number">0</span>].AxisX.ScaleView.Size = chart1.Series[<span class="number">0</span>].Points.Count * <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="放大缩小二"><a href="#放大缩小二" class="headerlink" title="放大缩小二"></a>放大缩小二</h2><blockquote><p>添加鼠标滚轮事件</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.chart1.MouseWheel += <span class="keyword">new</span> System.Windows.Forms.MouseEventHandler(<span class="keyword">this</span>.chart1_MouseWheel);</span><br></pre></td></tr></table></figure><blockquote><p>实现鼠标滚轮事件</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">chart1_MouseWheel</span>(<span class="params"><span class="built_in">object</span> sender, MouseEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 实验发现鼠标滚轮滚动一圈时e.Delta = 120，正反转对应正负120</span></span><br><span class="line"><span class="keyword">if</span> (chart1.ChartAreas[<span class="number">0</span>].AxisX.ScaleView.Size &gt; <span class="number">0</span>) <span class="comment">// 防止越过左边界</span></span><br><span class="line">&#123;</span><br><span class="line">chart1.ChartAreas[<span class="number">0</span>].AxisX.ScaleView.Size += (e.Delta / <span class="number">120</span>); <span class="comment">// 每次缩放1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(e.Delta &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">chart1.ChartAreas[<span class="number">0</span>].AxisX.ScaleView.Size += (e.Delta / <span class="number">120</span>); <span class="comment">// 每次缩放1</span></span><br><span class="line">&#125;           </span><br><span class="line">&#125;     </span><br></pre></td></tr></table></figure><h1 id="左右平移"><a href="#左右平移" class="headerlink" title="左右平移"></a>左右平移</h1><h2 id="平移使用一（这个正常使用）"><a href="#平移使用一（这个正常使用）" class="headerlink" title="平移使用一（这个正常使用）"></a>平移使用一（这个正常使用）</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> chartBeforePoint = <span class="number">0</span>; <span class="comment">// 用于记录鼠标上次移动的点，用于判断是左移还是右移</span></span><br><span class="line"><span class="built_in">bool</span> chartFlag = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">chart1_MouseDown</span>(<span class="params"><span class="built_in">object</span> sender, MouseEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    chartBeforePoint = <span class="number">0</span>;</span><br><span class="line">    chartFlag = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">chart1_MouseUp</span>(<span class="params"><span class="built_in">object</span> sender, MouseEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    chartFlag = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">chart1_MouseMove</span>(<span class="params"><span class="built_in">object</span> sender, MouseEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (chartFlag)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//e.x代表的是当前点</span></span><br><span class="line">        <span class="keyword">if</span> (chartBeforePoint != <span class="number">0</span> &amp;&amp; e.X - chartBeforePoint &gt; <span class="number">0</span>)<span class="comment">//往右移动了</span></span><br><span class="line">            chart1.ChartAreas[<span class="number">0</span>].AxisX.ScaleView.Position += <span class="number">1</span>; </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (chartBeforePoint != <span class="number">0</span> &amp;&amp; e.X - chartBeforePoint &lt; <span class="number">0</span>)<span class="comment">//往左移动了</span></span><br><span class="line">            chart1.ChartAreas[<span class="number">0</span>].AxisX.ScaleView.Position -= <span class="number">1</span>;</span><br><span class="line">        chartBeforePoint = e.X;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="平移使用二"><a href="#平移使用二" class="headerlink" title="平移使用二"></a>平移使用二</h2><blockquote><p>初始化有关参数</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义两个全局变量</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">bool</span> isMouseDown = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> lastMove = <span class="number">0</span>; <span class="comment">// 用于记录鼠标上次移动的点，用于判断是左移还是右移</span></span><br><span class="line"><span class="comment">// 初始化ScaleView，可根据首次出现在chart中的数据点数修改合适的值</span></span><br><span class="line">chart1.ChartAreas[<span class="number">0</span>].AxisX.ScaleView.Size = <span class="number">5</span>;</span><br><span class="line"><span class="comment">// 设置不显示chart自带的滚动条</span></span><br><span class="line">chart1.ChartAreas[<span class="number">0</span>].AxisX.ScrollBar.Enabled = <span class="literal">false</span>;</span><br><span class="line">chart1.ChartAreas[<span class="number">0</span>].AxisY.ScrollBar.Enabled = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">// 注意不要开启X轴游标，默认不开启，如下设置false或者不设置下列参数</span></span><br><span class="line">chart1.ChartAreas[<span class="number">0</span>].CursorX.IsUserEnabled = <span class="literal">false</span>;</span><br><span class="line">chart1.ChartAreas[<span class="number">0</span>].CursorX.AutoScroll = <span class="literal">false</span>;</span><br><span class="line">chart1.ChartAreas[<span class="number">0</span>].CursorX.IsUserSelectionEnabled = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><blockquote><p>添加鼠标按下、弹起和移动事件</p></blockquote><ul><li>上述事件在chart控件中均自带，直接添加即可，事件代码如下：</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 鼠标按下事件</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">chart1_MouseDown</span>(<span class="params"><span class="built_in">object</span> sender, MouseEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">lastMove  = <span class="number">0</span>;</span><br><span class="line">    isMouseDown = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 鼠标弹起事件</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">chart1_MouseUp</span>(<span class="params"><span class="built_in">object</span> sender, MouseEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    isMouseDown = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 鼠标移动事件</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">chart1_MouseMove</span>(<span class="params"><span class="built_in">object</span> sender, MouseEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isMouseDown)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">// 可更改（交换）如下加减1或if条件来设置鼠标移动时曲线移动方向</span></span><br><span class="line">        <span class="keyword">if</span>(lastMove != <span class="number">0</span> &amp;&amp; e.X - lastMove &gt; <span class="number">0</span>)</span><br><span class="line">            chart1.ChartAreas[<span class="number">0</span>].AxisX.ScaleView.Position += <span class="number">1</span>;  <span class="comment">// 每次移动1</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(lastMove != <span class="number">0</span> &amp;&amp; e.X - lastMove &lt; <span class="number">0</span>)</span><br><span class="line">            chart1.ChartAreas[<span class="number">0</span>].AxisX.ScaleView.Position -= <span class="number">1</span>; <span class="comment">// 每次移动1</span></span><br><span class="line">        lastMove = e.X;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终效果如下，图片前面黑呼呼的为控制台输出，似乎有点看不清（可忽略），可观察到鼠标滚轮的变化。</p><img src="https://img.jbzj.com/file_images/article/202206/202206280925299.gif"><h1 id="拓展chart（如何简单使用Chart图表）"><a href="#拓展chart（如何简单使用Chart图表）" class="headerlink" title="拓展chart（如何简单使用Chart图表）"></a>拓展chart（如何简单使用Chart图表）</h1><p>Chart控件可以用来绘制波形图、柱状图、饼图、折线图等，用来进行数据表现是很不错的，现在简单说一下这个控件的使用方法</p><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><img src="https://img.jbzj.com/file_images/article/202206/2022062809292610.png"><blockquote><p>我们首先要加载Chart控件</p></blockquote><img src="https://img.jbzj.com/file_images/article/202206/2022062809292611.png"><blockquote><p>然后打开控件的属性窗口</p></blockquote><img src="https://img.jbzj.com/file_images/article/202206/2022062809292612.jpg"><img src="https://img.jbzj.com/file_images/article/202206/2022062809292613.png"><p>在这个窗口里面我们可以修改曲线的名称，名称在<strong>【数据》Name】</strong>里面修改</p><h2 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h2><blockquote><p>XValueType是X轴的数据类型，Y同理，这里我们选Time，可以随时间改变</p></blockquote><h2 id="图表"><a href="#图表" class="headerlink" title="图表"></a>图表</h2><blockquote><p>ChartType是图表的类型，我们可以选出我们想要用的类型，这里选曲线</p></blockquote><img src="https://img.jbzj.com/file_images/article/202206/2022062809292614.png"><h2 id="外观"><a href="#外观" class="headerlink" title="外观"></a>外观</h2><p>Color可以选择曲线的颜色，这里我选了红色</p><p>左边的成员 框，是我们要显示的曲线，可以添加多个</p><p><strong>其他属性如果有需要自行修改，修改好之后确定，回到窗口设计界面</strong></p><h2 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h2><blockquote><p>在工具箱添加Timer</p></blockquote><img src="https://img.jbzj.com/file_images/article/202206/2022062809292615.png"><blockquote><p>在Timer的事件窗口双击时钟事件</p></blockquote><img src="https://img.jbzj.com/file_images/article/202206/2022062809292616.png"><p><strong>代码：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Form1</span> : <span class="title">Form</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Form1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Form1_Load</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            timer1.Enabled = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">timer1_Tick</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            chart1.Series[<span class="number">0</span>].Points.AddY(cnt*cnt);</span><br><span class="line">            label1.Text = cnt.ToString();</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">chart1_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>cnt是个自变量，曲线显示的是cnt为底的2次指数曲线</strong></p><hr><h1 id="相关链接（侵删）"><a href="#相关链接（侵删）" class="headerlink" title="相关链接（侵删）"></a>相关链接（侵删）</h1><ol><li><a href="https://blog.csdn.net/GoldenLionKing/article/details/125404813">C#Chart使用鼠标滚轮放大，缩小，平移曲线</a></li><li><a href="https://www.jb51.net/article/253223.htm">C# Chart折线图使用鼠标滚轮放大、缩小和平移曲线方式</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">在 Chart 使用鼠标滚轮滚动放大和缩小X轴的宽度，鼠标左键按住拖动实现曲线的左右平移，不再使用滚动条。</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="C#" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/C/"/>
    
    <category term="前端" scheme="https://zml3589110.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="绘图" scheme="https://zml3589110.github.io/categories/%E7%BB%98%E5%9B%BE/"/>
    
    
    <category term="C#" scheme="https://zml3589110.github.io/tags/C/"/>
    
    <category term="控件" scheme="https://zml3589110.github.io/tags/%E6%8E%A7%E4%BB%B6/"/>
    
    <category term="绘图" scheme="https://zml3589110.github.io/tags/%E7%BB%98%E5%9B%BE/"/>
    
    <category term="Chart" scheme="https://zml3589110.github.io/tags/Chart/"/>
    
  </entry>
  
  <entry>
    <title>C#控件DataGridView之一（使用各种数据源填充表格）</title>
    <link href="https://zml3589110.github.io/posts/3132353851.html"/>
    <id>https://zml3589110.github.io/posts/3132353851.html</id>
    <published>2023-02-09T09:02:20.000Z</published>
    <updated>2023-02-09T12:37:39.171Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>C#中的表格控件只有一个，那就是datagridview，不像QT中可以用QTableview，QTableWidget。新手拿到datagridview的第一个问题就是数据从哪里来？难道从设计器中一个个手动输入，到时候要变怎办？所以，我们这里说说DataGridView的手动操作。</p></blockquote><h1 id="一、手动操作DataGridView"><a href="#一、手动操作DataGridView" class="headerlink" title="一、手动操作DataGridView"></a>一、手动操作DataGridView</h1><p><strong>这里我们是没有数据源的纯view控件的操作，后面第二部分我们再讲有数据源的操作。</strong></p><h2 id="1、初步尝试"><a href="#1、初步尝试" class="headerlink" title="1、初步尝试"></a>1、初步尝试</h2><p>下面的代码声明并初始化完成列DataGridViewColumn、行DataGridViewRow 、单元格DataGridViewCell 对象。<br>但这里需要注意的是，<strong>DataGridView必须先有列后有行，最后才是单元格cell</strong>，初始化完成后你就可以直接将他们加入DataGridView的实例中了，如下代码dataGridView1就是在设计器的工具箱中直接拖放到窗体中的DataGridView控件。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">DataGridViewColumn col = <span class="keyword">new</span> DataGridViewColumn();</span><br><span class="line">DataGridViewRow row = <span class="keyword">new</span> DataGridViewRow();</span><br><span class="line">DataGridViewCell cell = <span class="keyword">new</span> DataGridViewTextBoxCell();</span><br><span class="line">cell.Value = <span class="string">&quot;item&quot;</span>;</span><br><span class="line">col.CellTemplate = cell; <span class="comment">//设置单元格格式模板</span></span><br><span class="line">col.HeaderText = <span class="string">&quot;column01&quot;</span>;</span><br><span class="line">dataGridView1.Columns.Add(col);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><img src="https://img-blog.csdnimg.cn/337ed5f6ffd24463812ba978f7350c85.png"><blockquote><p>虽然，只有一行一列一个单元格，但如果我们搞懂了原理，那后面批量加入我们需要的行列和单元格就容易了。</p></blockquote><p><strong>这里了重点强调一下，加入的顺序应该是：</strong></p><p>1、初始化列<br>2、初始化行<br>3、初始化单元格<br>4、将列column加入DataGridView<br>5、将行row加入列DataGridView<br>6、将单元格cell加入行row</p><p><strong>注意，一个列必须设定它自己这一列的单元格格式母板，否则就会报错。如：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cell= <span class="keyword">new</span> DataGridViewTextBoxCell();</span><br><span class="line"> col.CellTemplate = cell;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2、批量加入"><a href="#2、批量加入" class="headerlink" title="2、批量加入"></a>2、批量加入</h2><p>批量加入无非就是加入了一些循环，过程和单个单元格的加入几乎没有差别。<br>需要注意的是<strong>每次加入的行或者列或者单元格都必须是一个新对象，也就是要new一个新的对象</strong>，否则就不能成功加入。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">DataGridViewColumn col;</span><br><span class="line">DataGridViewRow row;</span><br><span class="line">DataGridViewCell cell= <span class="keyword">new</span> DataGridViewTextBoxCell();</span><br><span class="line">        </span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    col = <span class="keyword">new</span> DataGridViewColumn();</span><br><span class="line">    col.HeaderText = <span class="string">&quot;col&quot;</span> + i.ToString();       </span><br><span class="line">    col.CellTemplate = cell;</span><br><span class="line">    dataGridView1.Columns.Add(col);</span><br><span class="line">    &#125;</span><br><span class="line">           </span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt;<span class="number">20</span>; i++)</span><br><span class="line"> &#123;</span><br><span class="line">     row = <span class="keyword">new</span> DataGridViewRow(); </span><br><span class="line">     <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>; j++)</span><br><span class="line">     &#123;</span><br><span class="line">        cell = <span class="keyword">new</span> DataGridViewTextBoxCell();</span><br><span class="line">        cell.Value = <span class="string">&quot;item&quot;</span> + i.ToString() + j.ToString();</span><br><span class="line">        row.Cells.Add(cell);</span><br><span class="line">     &#125;</span><br><span class="line">     dataGridView1.Rows.Add(row);</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>运行的效果如下：</strong></p><img src="https://img-blog.csdnimg.cn/2965eed76ab949bca3c5df56497842e9.png"><blockquote><p>这里，我们将加入行和加入单元格同时进行的，你也可以加入行和加入列完成后，单独对单元格进行赋值</p></blockquote><p><strong>代码如下：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++)</span><br><span class="line"> &#123;</span><br><span class="line">     row = <span class="keyword">new</span> DataGridViewRow();</span><br><span class="line">     <span class="comment">//for (int j = 0; j &lt; 6; j++)</span></span><br><span class="line">     <span class="comment">//&#123;</span></span><br><span class="line">     <span class="comment">//    cell = new DataGridViewTextBoxCell();</span></span><br><span class="line">     <span class="comment">//    cell.Value = &quot;item&quot; + i.ToString() + j.ToString();</span></span><br><span class="line">     <span class="comment">//    row.Cells.Add(cell);</span></span><br><span class="line">     <span class="comment">//&#125;</span></span><br><span class="line">     dataGridView1.Rows.Add(row);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line">     <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; <span class="number">20</span>; j++)</span><br><span class="line">         dataGridView1.Rows[j].Cells[i].Value = <span class="string">&quot;item&quot;</span> + j.ToString() + i.ToString();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3、带数据的行的加入rows-Add"><a href="#3、带数据的行的加入rows-Add" class="headerlink" title="3、带数据的行的加入rows.Add"></a>3、带数据的行的加入rows.Add</h2><p>行的加入我们利用add方法来完成,它有三个重载，所以我们可以用多种方式加入，前面我们就已经使用过了它的最常见的重载，直接在add的参数中加入row<br>如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dataGridView1.Rows.Add(row);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>这里我们使用数组加入也很方便：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//添加行</span></span><br><span class="line"> <span class="built_in">string</span>[] row0 = &#123; <span class="string">&quot;Jack&quot;</span>, <span class="string">&quot;1880&quot;</span>, <span class="string">&quot;2022-12-5&quot;</span>,<span class="string">&quot;12.5&quot;</span>,<span class="string">&quot;true&quot;</span> &#125;;</span><br><span class="line"> <span class="built_in">string</span>[] row1 = &#123; <span class="string">&quot;Smith&quot;</span>, <span class="string">&quot;2208&quot;</span>, <span class="string">&quot;2022-02-15&quot;</span>, <span class="string">&quot;538&quot;</span>, <span class="string">&quot;true&quot;</span> &#125;;</span><br><span class="line"> dataGridView1.Rows.Add(row0);</span><br><span class="line"> dataGridView1.Rows.Add(row1);</span><br><span class="line"> dataGridView1.Rows.Add(<span class="keyword">new</span> <span class="built_in">string</span>[] &#123; <span class="string">&quot;Tome&quot;</span>, <span class="string">&quot;1208&quot;</span>, <span class="string">&quot;2012-2-15&quot;</span>, <span class="string">&quot;1.2&quot;</span>, <span class="string">&quot;true&quot;</span> &#125;);</span><br><span class="line"> <span class="comment">//list转数组后加入</span></span><br><span class="line"> List&lt;<span class="built_in">string</span>&gt; values = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line"> values.Add(<span class="string">&quot;Jone&quot;</span>);</span><br><span class="line"> values.Add(<span class="string">&quot;1222&quot;</span>);      </span><br><span class="line"> values.Add(<span class="string">&quot;2022-05-12&quot;</span>);</span><br><span class="line"> values.Add(<span class="string">&quot;23.2&quot;</span>);</span><br><span class="line"> values.Add(<span class="string">&quot;false&quot;</span>);</span><br><span class="line"> dataGridView1.Rows.Add(values.ToArray());</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>运行效果：</strong></p><img src="https://img-blog.csdnimg.cn/c494a8f1f3ce4a38b4b39283fc0e35c0.png"><blockquote><p>还有一个重载是add(int )，这个专门从来加入空行，比如加入1000个空行，那就直接在参数中输入1000：</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dataGridView1.Rows.Add(<span class="number">1000</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="二、数据来源DataSource"><a href="#二、数据来源DataSource" class="headerlink" title="二、数据来源DataSource"></a>二、数据来源DataSource</h1><p>数据来源可以是自己从数据库中获取，也可以自己构建一个DataTable，也可以读入字符流或者字符列表等。这里分别演示。<br><strong>DataSource它的特点是：任何实现IListSource接口的类都可以作为它的右值。</strong></p><h2 id="1、来自列表List"><a href="#1、来自列表List" class="headerlink" title="1、来自列表List"></a>1、来自列表List</h2><p>我们将列表中装入一个对象，当然，这个对象有多少特征，我们就可以显示在表格中显示多少列</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Student&gt; students = <span class="keyword">new</span> List&lt;Student&gt;()</span><br><span class="line">&#123;</span><br><span class="line">     <span class="keyword">new</span> Student() &#123;Name=<span class="string">&quot;John&quot;</span>, Gender=<span class="literal">true</span>, Birthday=<span class="keyword">new</span> DateTime(<span class="number">2012</span>, <span class="number">12</span>, <span class="number">4</span>),Age= <span class="number">20</span>, Hight=<span class="number">15</span>&#125;,</span><br><span class="line">     <span class="keyword">new</span> Student() &#123;Name=<span class="string">&quot;Jack&quot;</span>,  Gender=<span class="literal">true</span>, Birthday=<span class="keyword">new</span> DateTime(<span class="number">2022</span>, <span class="number">10</span>, <span class="number">12</span>), Age=<span class="number">10</span>, Hight=<span class="number">125</span>&#125;</span><br><span class="line"> &#125;;</span><br><span class="line"> dataGridView1.DataSource = students.Select(x =&gt; <span class="keyword">new</span> &#123; x.Name, x.Gender, x.Birthday, x.Age, x.Hight &#125;).ToList();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>运行效果：</strong></p><img src="https://img-blog.csdnimg.cn/c0f27acc07df4cbda3a912d49cfdbdfe.png"><h2 id="2、来自自定义DataTable"><a href="#2、来自自定义DataTable" class="headerlink" title="2、来自自定义DataTable"></a>2、来自自定义DataTable</h2><p>既然是我们手动自定义的一个表，那么我们就必须给它定义行列和单元格内容。这的Datatable只是提供数据，与视图View无关，那么它的责任就是组织好数据给视图来显示，这在MVC中就属于model层。<br>下面的代码我们初始化了一个DataTable对象后就可以利用columns.add增加列了，增加完列我们用DataTable的newRow（）方法直接增加行，没有它法。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">    DataTable dt = <span class="keyword">new</span> DataTable();</span><br><span class="line">    dt.Columns.Add(<span class="string">&quot;col1&quot;</span>, <span class="keyword">typeof</span>(System.String));</span><br><span class="line">    dt.Columns.Add(<span class="string">&quot;col2&quot;</span>, <span class="keyword">typeof</span>(System.String));</span><br><span class="line">    dt.Columns.Add(<span class="string">&quot;col3&quot;</span>, <span class="keyword">typeof</span>(System.String));</span><br><span class="line">    dt.Columns.Add(<span class="string">&quot;col4&quot;</span>, <span class="keyword">typeof</span>(System.String));</span><br><span class="line">    dt.Columns.Add(<span class="string">&quot;col5&quot;</span>, <span class="keyword">typeof</span>(System.String));</span><br><span class="line">    dt.Columns.Add(<span class="string">&quot;col6&quot;</span>, <span class="keyword">typeof</span>(System.String));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        dt.Rows.Add(dt.NewRow());</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>; j++)</span><br><span class="line">            dt.Rows[i][j]=<span class="string">&quot;item&quot;</span> + j.ToString() + i.ToString();</span><br><span class="line">    &#125;</span><br><span class="line">dataGridView1.DataSource =dt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们上面所有的行，我们使用的格式都是String的，便于统一用循环添加，我们我们想要添加其他的格式的数据可以这样添加：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DataTable dt = <span class="keyword">new</span> DataTable();</span><br><span class="line"></span><br><span class="line">dt.Columns.Add(<span class="string">&quot;col1&quot;</span>, <span class="keyword">typeof</span>(System.Int32));</span><br><span class="line">dt.Columns.Add(<span class="string">&quot;col2&quot;</span>, <span class="keyword">typeof</span>(System.String));</span><br><span class="line">dt.Columns.Add(<span class="string">&quot;col3&quot;</span>, <span class="keyword">typeof</span>(System.DateTime));</span><br><span class="line">dt.Columns.Add(<span class="string">&quot;col4&quot;</span>, <span class="keyword">typeof</span>(System.Boolean));</span><br><span class="line">dt.Columns.Add(<span class="string">&quot;col5&quot;</span>, <span class="keyword">typeof</span>(System.Int16));</span><br><span class="line">dt.Columns.Add(<span class="string">&quot;col6&quot;</span>, <span class="keyword">typeof</span>(System.Decimal));</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>关于赋值，使用<strong>二维数组</strong>的方式直接给单元格赋值即可：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dt.Rows[i][j]=<span class="string">&quot;item&quot;</span> + j.ToString() + i.ToString();</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>最后，我们给DataGridView实例指定数据源DataSource 属性即可，这里我们指定为我们刚刚手动建立的DataTable。</p></blockquote><p><strong>运行效果：</strong></p><img src="https://img-blog.csdnimg.cn/9e71c3ccb4cf4a34a6fed006856f2fe7.png"><p>看起来，和前面我们直接对DataGridView手动操作得到的表格没有什么两样，但实际我们此时已经使用了<strong>MVC</strong>的概念了，<strong>一个负责的是视图一个负责的是数据</strong>。</p><h2 id="3、动态建立表格"><a href="#3、动态建立表格" class="headerlink" title="3、动态建立表格"></a>3、动态建立表格</h2><ul><li>我们首先定义两个List分别存放表格的字段类型和值</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个表格的字段类型</span></span><br><span class="line">List&lt;<span class="built_in">string</span>&gt; typeDef = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">typeDef.Add(<span class="string">&quot;System.Int32&quot;</span>);</span><br><span class="line">typeDef.Add(<span class="string">&quot;System.String&quot;</span>);</span><br><span class="line">typeDef.Add(<span class="string">&quot;System.DateTime&quot;</span>);</span><br><span class="line">typeDef.Add(<span class="string">&quot;System.Decimal&quot;</span>);</span><br><span class="line">typeDef.Add(<span class="string">&quot;System.Boolean&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//表格字段内容</span></span><br><span class="line">List&lt;<span class="built_in">string</span>&gt; values = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">values.Add(<span class="string">&quot;1222&quot;</span>);</span><br><span class="line">values.Add(<span class="string">&quot;Jone&quot;</span>);</span><br><span class="line">values.Add(<span class="string">&quot;2022-05-12&quot;</span>);</span><br><span class="line">values.Add(<span class="string">&quot;23.2&quot;</span>);</span><br><span class="line">values.Add(<span class="string">&quot;false&quot;</span>);</span><br><span class="line">dataGridView1.DataSource = initialDataTable(typeDef,values);</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>接下来，我们定义一个函数，专门来建立一个表格</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">DataTable <span class="title">initialDataTable</span>(<span class="params">List&lt;String&gt; strlist, List&lt;String&gt; vluelist</span>)</span></span><br><span class="line"><span class="function"></span>      &#123;</span><br><span class="line"></span><br><span class="line">          DataTable dt = <span class="keyword">new</span> DataTable();</span><br><span class="line"></span><br><span class="line">          DataColumn col = <span class="keyword">new</span> DataColumn();</span><br><span class="line">          <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; strlist.Count; i++)</span><br><span class="line">          &#123;</span><br><span class="line">              col = <span class="keyword">new</span> DataColumn();</span><br><span class="line">              col.DataType = System.Type.GetType(strlist[i]);</span><br><span class="line">              dt.Columns.Add(col);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">          &#123;</span><br><span class="line">              dt.Rows.Add(dt.NewRow());</span><br><span class="line">              <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; strlist.Count; j++)</span><br><span class="line">                  dt.Rows[i][j] = vluelist[j];</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">return</span> dt;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>运行效果：</strong></p><img src="https://img-blog.csdnimg.cn/bd3810e2830f46a79bc1b7fd9dae0355.png"><h2 id="4、类和BindingList"><a href="#4、类和BindingList" class="headerlink" title="4、类和BindingList"></a>4、类和BindingList</h2><p>类的特征属性直接显示在表格里可以通过BindingList来实现</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">BindingList&lt;Student&gt; list2 = <span class="keyword">new</span> BindingList&lt;Student&gt;();</span><br><span class="line">list2.Add(<span class="keyword">new</span> Student(<span class="string">&quot;John&quot;</span>, <span class="literal">true</span>, <span class="keyword">new</span> DateTime(<span class="number">2012</span>, <span class="number">12</span>, <span class="number">4</span>), <span class="number">20</span>, <span class="number">15</span>));</span><br><span class="line">list2.Add(<span class="keyword">new</span> Student(<span class="string">&quot;Jack&quot;</span>, <span class="literal">true</span>, <span class="keyword">new</span> DateTime(<span class="number">2022</span>, <span class="number">10</span>, <span class="number">12</span>), <span class="number">10</span>, <span class="number">125</span>));</span><br><span class="line">list2.Add(<span class="keyword">new</span> Student(<span class="string">&quot;Tomy&quot;</span>, <span class="literal">true</span>, <span class="keyword">new</span> DateTime(<span class="number">1992</span>, <span class="number">3</span>, <span class="number">5</span>), <span class="number">30</span>, <span class="number">5</span>));</span><br><span class="line">dataGridView1.DataSource= list2;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>运行效果：</strong></p><img src="https://img-blog.csdnimg.cn/07f441c81666489ea131b094f28cf8f0.png"><h2 id="5、来自文件字符流"><a href="#5、来自文件字符流" class="headerlink" title="5、来自文件字符流"></a>5、来自文件字符流</h2><blockquote><p>有了上面的基础后，我们就可以建立一个导入文本文件的表格，并且可以自动识别文本文件中的字段类型。</p></blockquote><p><strong>我们首先来看看效果：</strong></p><img src="https://img-blog.csdnimg.cn/65cc89759bc442cb83eb30707ad9cc7c.gif#pic_center"><p>导入文本表格要做好文本字段之间的分割Split，这里不详说了，首先要从读入的文本流中取出表格的各列的名称和类型，然后再取出内容，然后分别形成数组</p><p><strong>关键代码：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">StreamReader sr = <span class="keyword">new</span> StreamReader(filepath, Encoding.UTF8);</span><br><span class="line">        typetext = sr.ReadLine();</span><br><span class="line">        headtext = sr.ReadLine();</span><br><span class="line">        <span class="built_in">string</span>[] typer = typetext.Split(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">        ArrayList content = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        <span class="comment">//开始读文本中的每条记录的内容</span></span><br><span class="line">        <span class="keyword">while</span> ((str=sr.ReadLine()) != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            content.Add(str);</span><br><span class="line">            Console.WriteLine(str); </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//定义一个表格的字段类型</span></span><br><span class="line">        List&lt;<span class="built_in">string</span>&gt; typeDef = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; typer.Length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            typeDef.Add(<span class="string">&quot;System.&quot;</span> + typer[i].ToString());</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//表格字段内容</span></span><br><span class="line">        ArrayList head = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        <span class="built_in">string</span>[] header = headtext.Split(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; header.Length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            head.Add( header[i].ToString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将上述代码得到的三个列表传入下面的DataTable处理函数中即可得到DataGridView的DataSource需要的DataTable</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">DataTable <span class="title">initialDataTable</span>(<span class="params">List&lt;String&gt; typelist, ArrayList headerlist,ArrayList contentarry</span>)</span></span><br><span class="line"><span class="function"></span> &#123;</span><br><span class="line"></span><br><span class="line">     DataTable dt = <span class="keyword">new</span> DataTable();</span><br><span class="line">     DataColumn col = <span class="keyword">new</span> DataColumn();</span><br><span class="line">     <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; headerlist.Count; i++)</span><br><span class="line">     &#123;</span><br><span class="line">         col = <span class="keyword">new</span> DataColumn();</span><br><span class="line">         col.ColumnName = headerlist[i].ToString();</span><br><span class="line">         col.DataType = System.Type.GetType(typelist[i]);</span><br><span class="line">         dt.Columns.Add(col);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">// 加入内容</span></span><br><span class="line">     <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; contentarry.Count; i++)</span><br><span class="line">     &#123;</span><br><span class="line">         dt.Rows.Add(contentarry[i].ToString().Split(<span class="string">&#x27;,&#x27;</span>));               </span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> dt;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>可以参考的文本：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">String,Boolean,Int32,DateTime,Int32,Int32</span><br><span class="line">Name,Gender,ID,Birthday,Score1,Score2</span><br><span class="line">John, <span class="literal">true</span>,<span class="number">1908</span>, <span class="number">2012</span><span class="number">-12</span><span class="number">-4</span>, <span class="number">20</span>, <span class="number">16</span></span><br><span class="line">Jack, false2015, <span class="number">2022</span><span class="number">-10</span><span class="number">-12</span>, <span class="number">10</span>, <span class="number">125</span></span><br><span class="line">Tomy, <span class="literal">true</span>, <span class="number">2047</span>,<span class="number">1992</span><span class="number">-3</span><span class="number">-5</span>, <span class="number">30</span>, <span class="number">15</span>,</span><br><span class="line">Mophy, <span class="literal">true</span>, <span class="number">1147</span>,<span class="number">2014</span><span class="number">-6</span><span class="number">-3</span>, <span class="number">40</span>, <span class="number">24</span></span><br><span class="line">Tollor, <span class="literal">false</span>,<span class="number">2347</span>,<span class="number">2102</span><span class="number">-2</span><span class="number">-15</span>, <span class="number">50</span>, <span class="number">55</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6、来自数据库"><a href="#6、来自数据库" class="headerlink" title="6、来自数据库"></a>6、来自数据库</h2><p>如果有数据库，那是最好不过的啦，直接将查询所得的表赋值给DataGridView的DataSource即可。<br>这里我们使用sqlite，事先要安装上sqlite，到Nuget中最快方式获得。</p><img sr="https://img-blog.csdnimg.cn/e3f1206fe8be43ac94beb10a0c556e13.png"><p>有了sqlite的环境，我们可以开始组织数据库读取了。这里我们调用的句子非常少，其实这是直接通过SQLiteDataAdapter 填充了一个新建的DataTable而已。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指定数据库地址（我这里就放在debug目录下）</span></span><br><span class="line"><span class="built_in">string</span> constr = <span class="string">&quot;Data Source=tbdb.db;&quot;</span>;</span><br><span class="line"> <span class="comment">//设置SQL查询语句</span></span><br><span class="line"><span class="built_in">string</span> sql = <span class="string">&quot;select * from TestTab&quot;</span>;</span><br><span class="line">SQLiteDataAdapter mAdapter = <span class="keyword">new</span> SQLiteDataAdapter(sql, constr);</span><br><span class="line">DataTable dt = <span class="keyword">new</span> DataTable();</span><br><span class="line">mAdapter.Fill(dt);</span><br><span class="line">dataGridView1.DataSource = dt;           </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>数据库中的表：</strong></p><img src="https://img-blog.csdnimg.cn/958629c401594f1eb86d70e111f0d952.png"><p><strong>运行效果：</strong></p><img src="https://img-blog.csdnimg.cn/4efdbc5056d34330a1a52ea222f400f2.png"><h2 id="7、用到的student类"><a href="#7、用到的student类" class="headerlink" title="7、用到的student类"></a>7、用到的student类</h2><p><strong>上面用到的student类，这里列出来省得大家重新编写：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> _name = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="built_in">bool</span> _gender =<span class="literal">false</span>;</span><br><span class="line">    DateTime _birthday;</span><br><span class="line">    <span class="built_in">int</span> _age;</span><br><span class="line">    <span class="built_in">decimal</span> _hight;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> School;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">        School = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="title">Student</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">bool</span> gender, DateTime birthday, <span class="built_in">int</span> age, <span class="built_in">decimal</span> hight</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Name = name;</span><br><span class="line">        Gender = gender;</span><br><span class="line">        Birthday = birthday;</span><br><span class="line">        Age = age;</span><br><span class="line">        Hight = hight;</span><br><span class="line">        School = <span class="string">&quot;&quot;</span>;     </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name&#123;<span class="keyword">get</span> &#123; <span class="keyword">return</span> _name; &#125;<span class="keyword">set</span> &#123; _name = <span class="keyword">value</span>; &#125;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> Gender&#123;<span class="keyword">get</span> &#123; <span class="keyword">return</span> _gender; &#125; <span class="keyword">set</span> &#123; _gender = <span class="keyword">value</span>; &#125;&#125;</span><br><span class="line">    <span class="keyword">public</span> DateTime Birthday&#123; <span class="keyword">get</span> &#123; <span class="keyword">return</span> _birthday; &#125; <span class="keyword">set</span> &#123; _birthday = <span class="keyword">value</span>; &#125; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Age &#123; <span class="keyword">get</span> &#123; <span class="keyword">return</span> _age; &#125; <span class="keyword">set</span> &#123; _age = <span class="keyword">value</span>; &#125; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">decimal</span> Hight &#123; <span class="keyword">get</span> &#123; <span class="keyword">return</span> _hight; &#125; <span class="keyword">set</span> &#123; _hight = <span class="keyword">value</span>; &#125; &#125;</span><br><span class="line">    <span class="keyword">public</span> List&lt;<span class="built_in">int</span>&gt; Scores &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>其实关于DataGridView的操作还有很多，控件中最复杂的就属它了，所以如果说你要重新编写一个自定义控件，它也是最复杂的，这里我们只是讲了表格的数据填充，后面一篇我们会讲到样式设置和编辑，有时间我们还可以讲讲自定义DataGridView的编写。感兴趣的童鞋可以继续关注。</p><h1 id="其他补充"><a href="#其他补充" class="headerlink" title="其他补充"></a>其他补充</h1><h2 id="datagridview默认选中第一行"><a href="#datagridview默认选中第一行" class="headerlink" title="datagridview默认选中第一行"></a>datagridview默认选中第一行</h2><p>设置datagridview在加载时默认选中第一行：<br>在需要为datagridview加载数据的地方添加代码：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.dataGridView1.Rows[<span class="number">0</span>].Selected = <span class="literal">true</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>例如：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">deplane_Load</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>       &#123;</span><br><span class="line">          </span><br><span class="line">           <span class="comment">// <span class="doctag">TODO:</span> 这行代码将数据加载到表“charge_sysDataSet.OnLine_Info”中。您可以根据需要移动或删除它。</span></span><br><span class="line">           <span class="keyword">this</span>.onLine_InfoTableAdapter.Fill(<span class="keyword">this</span>.charge_sysDataSet.OnLine_Info);</span><br><span class="line">           dataGridView1.AllowUserToAddRows = <span class="literal">false</span>;  <span class="comment">//去除空白行</span></span><br><span class="line">         dataGridView1.Rows[<span class="number">0</span>].Selected = <span class="literal">true</span>;<span class="comment">//默认选中第一行</span></span><br><span class="line">       &#125;在这里插入代码片</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="C-向datagridview添加一行，并使他位于第一行"><a href="#C-向datagridview添加一行，并使他位于第一行" class="headerlink" title="C# 向datagridview添加一行，并使他位于第一行"></a>C# 向datagridview添加一行，并使他位于第一行</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">datagridview.Rows.Insert(<span class="number">0</span>, row);</span><br></pre></td></tr></table></figure><h2 id="点击DataGridView时获取当前单元格信息-这个也很有用！"><a href="#点击DataGridView时获取当前单元格信息-这个也很有用！" class="headerlink" title="点击DataGridView时获取当前单元格信息(这个也很有用！)"></a>点击DataGridView时获取当前单元格信息(这个也很有用！)</h2><blockquote><p>在使用DataGridView控件时， 表中信息有时需要提取，因此，需使用获取坐标的方法，和获取内容的方法。</p></blockquote><img src="https://img-blog.csdnimg.cn/20eb88032eb145499a876252c28777c1.bmp"><img src="https://img-blog.csdnimg.cn/fd1b2809a6b346c3a9d674914cc526d2.bmp"><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.ComponentModel;</span><br><span class="line"><span class="keyword">using</span> System.Data;</span><br><span class="line"><span class="keyword">using</span> System.Drawing;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Test_DataGridView</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Form1</span> : <span class="title">Form</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Form1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Form1_Load</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            dataGridView1.DataSource = Source();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//数据表资源</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> DataTable <span class="title">Source</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            DataTable mydt = <span class="keyword">new</span> DataTable();</span><br><span class="line">            mydt.Columns.Add(<span class="string">&quot;姓名&quot;</span>);</span><br><span class="line">            mydt.Columns.Add(<span class="string">&quot;年龄&quot;</span>);</span><br><span class="line">            mydt.Columns.Add(<span class="string">&quot;分数&quot;</span>);</span><br><span class="line">            String[,] str = <span class="keyword">new</span> String[,] &#123; &#123; <span class="string">&quot;张三&quot;</span>, <span class="string">&quot;21&quot;</span>, <span class="string">&quot;90&quot;</span> &#125;, &#123; <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;22&quot;</span>, <span class="string">&quot;93&quot;</span> &#125;, &#123; <span class="string">&quot;王五&quot;</span>, <span class="string">&quot;23&quot;</span>, <span class="string">&quot;99&quot;</span> &#125; &#125;;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                DataRow dr = mydt.NewRow();</span><br><span class="line">                dr[<span class="number">0</span>] = str[i, <span class="number">0</span>];</span><br><span class="line">                dr[<span class="number">1</span>] = str[i, <span class="number">1</span>];</span><br><span class="line">                dr[<span class="number">2</span>] = str[i, <span class="number">2</span>];</span><br><span class="line">                mydt.Rows.Add(dr);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> mydt;</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//获取单元格信息</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dataGridView1_CellClick</span>(<span class="params"><span class="built_in">object</span> sender, DataGridViewCellEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//获取单元格坐标</span></span><br><span class="line">            <span class="built_in">int</span> col = dataGridView1.CurrentCellAddress.X + <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">int</span> row = dataGridView1.CurrentCellAddress.Y + <span class="number">1</span>;</span><br><span class="line">           </span><br><span class="line">            <span class="comment">//获取单元格内容</span></span><br><span class="line">            String content = dataGridView1.CurrentCell.Value.ToString();</span><br><span class="line"> </span><br><span class="line">            MessageBox.Show(<span class="string">&quot;行：&quot;</span> + row.ToString() + <span class="string">&quot;   列：&quot;</span> + col.ToString()+<span class="string">&quot;      内容：&quot;</span>+content);</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="在C-中将datagridview中的数据与图表绑定"><a href="#在C-中将datagridview中的数据与图表绑定" class="headerlink" title="在C#中将datagridview中的数据与图表绑定"></a>在C#中将datagridview中的数据与图表绑定</h2><p>我正在创建一个应用程序，它用于确定原始数据，并将这些原始数据值导入到datagridview中。<br>现在，我需要在图形表示中生成原始数据值。我有一个有多列的datgridview，我想用c#中的datagridview列值绘制图形&#x2F;图表。</p><p><strong>通过DataGridview对图表使用以下代码（未验证过，不知是否行）</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (DataGridViewRow row <span class="keyword">in</span> datagridview.Rows)</span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//chartBpComplaince.Series.Clear();</span></span><br><span class="line">                Series S = chartBpComplaince.Series.Add(row.Cells[<span class="number">2</span>].Value.ToString());</span><br><span class="line"></span><br><span class="line">                 S.Points.AddXY(row.Cells[<span class="number">4</span>].Value.ToString(), row.Cells[<span class="number">3</span>].Value.ToString());</span><br><span class="line">                 S.ChartType = SeriesChartType.Column;</span><br><span class="line">                 S.IsValueShownAsLabel = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="相关链接（侵删）"><a href="#相关链接（侵删）" class="headerlink" title="相关链接（侵删）"></a>相关链接（侵删）</h1><ol><li><a href="https://blog.csdn.net/haigear/article/details/128764698">C#手动操作DataGridView之——使用各种数据源填充表格实例</a></li><li><a href="https://blog.csdn.net/weixin_40486955/article/details/98071962">datagridview默认选中第一行方法</a></li><li><a href="https://blog.csdn.net/NickStudent/article/details/126142078">【C#语言】DataGridView获取当前单元格信息</a></li><li><a href="https://cloud.tencent.com/developer/ask/sof/100540628">如何在C#中将datagridview中的数据与图表绑定？</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">C# 对表格控件 DataGridView 中数据填充的不同种方法</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="C#" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/C/"/>
    
    <category term="前端" scheme="https://zml3589110.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="C#" scheme="https://zml3589110.github.io/tags/C/"/>
    
    <category term="DataGridView" scheme="https://zml3589110.github.io/tags/DataGridView/"/>
    
    <category term="表格" scheme="https://zml3589110.github.io/tags/%E8%A1%A8%E6%A0%BC/"/>
    
  </entry>
  
  <entry>
    <title>C#二维数组</title>
    <link href="https://zml3589110.github.io/posts/1818812067.html"/>
    <id>https://zml3589110.github.io/posts/1818812067.html</id>
    <published>2023-02-09T08:39:20.000Z</published>
    <updated>2023-02-09T08:51:23.855Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在这篇文章中，我将会用示例讨论二维数组。做为文章的部分内容，我们会讨论：</p></blockquote><ol><li>什么是二维数组？</li><li>以示例解析矩形数组和交错数组。</li></ol><h1 id="什么是二维数组？"><a href="#什么是二维数组？" class="headerlink" title="什么是二维数组？"></a>什么是二维数组？</h1><p><strong>在C#中，以行和列的形式存储元素的数组称为二维数组。C#中，二维数组也叫多维数组，有两种类型。</strong></p><ol><li>矩形数组：行和列相等的数组叫做矩形数组。</li><li>行和列不相等的数组称为交错数组。</li></ol><h1 id="C-中的矩形数组"><a href="#C-中的矩形数组" class="headerlink" title="C#中的矩形数组"></a>C#中的矩形数组</h1><p><strong>让我们了解一下二维数组的语法，请看一下下面的图表</strong></p><img src="https://img2022.cnblogs.com/blog/1005952/202207/1005952-20220710211342115-1542360066.png"><blockquote><p>让我们用示例来更好地理解一下矩形数组</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Drawing;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line">namespace _2DarrayDemo</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="built_in">int</span>[,] arr = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">            <span class="built_in">int</span> a = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="built_in">int</span> i <span class="keyword">in</span> arr)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.Write(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; arr.GetLength(<span class="number">0</span>); i++)  <span class="comment">//0指的是一维</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; arr.GetLength(<span class="number">1</span>); j++)<span class="comment">//1指的是二维</span></span><br><span class="line">                &#123;</span><br><span class="line">                    a += <span class="number">5</span>;</span><br><span class="line">                    arr[i, j] = a;</span><br><span class="line">                    Console.WriteLine(<span class="string">&quot;i is &#123;0&#125;;j is &#123;1&#125;&quot;</span>,i,j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; arr.GetLength(<span class="number">0</span>); i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; arr.GetLength(<span class="number">1</span>); j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.Write(arr[i,j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://img2022.cnblogs.com/blog/1005952/202207/1005952-20220711222856023-128846710.png"><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Drawing;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line">namespace _2DarrayDemo</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="built_in">int</span>[,] arr = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">            <span class="built_in">int</span> a = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="built_in">int</span> i <span class="keyword">in</span> arr)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.Write(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; arr.GetLength(<span class="number">0</span>); i++)  <span class="comment">//0指的是一维</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; arr.GetLength(<span class="number">2</span>); j++)<span class="comment">//如果将1修改为2，则会报错；</span></span><br><span class="line">                &#123;</span><br><span class="line">                    a += <span class="number">5</span>;</span><br><span class="line">                    arr[i, j] = a;</span><br><span class="line">                    Console.WriteLine(<span class="string">&quot;i is &#123;0&#125;;j is &#123;1&#125;&quot;</span>,i,j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; arr.GetLength(<span class="number">0</span>); i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; arr.GetLength(<span class="number">1</span>); j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.Write(arr[i,j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://img2022.cnblogs.com/blog/1005952/202207/1005952-20220711223410656-1367845040.png"><p><strong>系统会提示“索引超出了数组界限”。</strong></p><blockquote><p><strong>在上面 的示例中，我们使用嵌套的for循环来分配二维数组元素。我们也可以在二维数组声明的时候给其赋值。</strong></p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">TwoDimensionalArayDemo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//Assigning the array elements at the time of declaration</span></span><br><span class="line">            <span class="built_in">int</span>[,] arr = &#123;&#123;<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>&#125;,</span><br><span class="line">                          &#123;<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>,<span class="number">24</span>&#125;,</span><br><span class="line">                          &#123;<span class="number">31</span>,<span class="number">32</span>,<span class="number">33</span>,<span class="number">34</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//printing values of array using for each loop</span></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="built_in">int</span> i <span class="keyword">in</span> arr)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.Write(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//printing the values of array using nested for loop</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; arr.GetLength(<span class="number">0</span>); i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; arr.GetLength(<span class="number">1</span>); j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.Write(arr[i, j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://img2022.cnblogs.com/blog/1005952/202207/1005952-20220711224311321-133638715.png"><h1 id="交错数组"><a href="#交错数组" class="headerlink" title="交错数组"></a>交错数组</h1><blockquote><p>这些也是二维数组，也将以行和列的形式存储数据。但是在这个交错的数组中，每一行的列大小是不同的。那就意味着如果第一行包含5列，第二行可能包含4列，而第三行可能包含10列。所以，你需要记住的一点就是，如果列的大小在每行发生变化，那么它就是一个交错数组。如果所有行中，列的大小保持不变，则它是一个矩形二维数组。</p></blockquote><p>在C#中，交错数组也叫做数组中的数组。这是因为在交错数组的情况下，每一行都是一维数组。因此，在C#中，具有不同列大小的多个一维数组组合形成了一个交错数组。</p><p>语法:  <type> [][] <name> &#x3D; new <type> [rows][];</type></name></type></p><p><strong>示例：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> [][] arr = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">3</span>][];</span><br><span class="line"><span class="comment">//Or</span></span><br><span class="line"><span class="built_in">int</span> [][] arr = &#123;list of values&#125;;</span><br></pre></td></tr></table></figure><p>要在C#中声明交错数组，只需在声明时指定数组中所需要的行数即可。</p><p>示例如下：</p><p><strong>int [][] arr &#x3D; new int[4][];</strong></p><p><strong>在上面的数组声明中，我们指定在数组中需要4行。一旦你指定了你想要的数组的行数，那么你需要如下面所示那样用一维数组初始化每一行的列。</strong></p><p><strong>arr[0] &#x3D; new int[5]; &#x2F;&#x2F; we want five columns in the first row</strong><br><strong>arr[1] &#x3D; new int[6]; &#x2F;&#x2F; we want six columns in the first row</strong><br><strong>arr[2] &#x3D; new int[4]; &#x2F;&#x2F; we want four columns in the first row</strong><br><strong>arr[3] &#x3D; new int[5]; &#x2F;&#x2F; we want five columns in the first row</strong></p><p><strong>交错数组示例如下：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Drawing;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">TwoDimensionalArayDemo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="built_in">int</span>[][] arr = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">4</span>][];</span><br><span class="line"></span><br><span class="line">            arr[<span class="number">0</span>] = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">5</span>];</span><br><span class="line">            arr[<span class="number">1</span>] = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">6</span>];</span><br><span class="line">            arr[<span class="number">2</span>] = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">4</span>];</span><br><span class="line">            arr[<span class="number">3</span>] = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; arr.GetLength(<span class="number">0</span>); i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; arr[i].Length; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.Write(arr[i][j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; arr.GetLength(<span class="number">0</span>); i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; arr[i].Length; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">&quot;此处j值是&#123;0&#125;&quot;</span>,j);</span><br><span class="line">                    arr[i][j] = j++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; arr.GetLength(<span class="number">0</span>); i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">foreach</span> (<span class="built_in">int</span> x <span class="keyword">in</span> arr[i])</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.Write(x + <span class="string">&quot; &quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://img2022.cnblogs.com/blog/1005952/202207/1005952-20220714214431296-1013238939.png"><ul><li>在上面的例子中，我们通过使用嵌套的for循环来给交错数组的元素赋值。在交错数组定义的时候，也可以给交错数组赋值。</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">TwoDimensionalArayDemo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">// Assigning the values of the jagged array</span></span><br><span class="line">            <span class="comment">// at the time of its declaration</span></span><br><span class="line">            <span class="built_in">int</span>[][] arr = &#123;</span><br><span class="line">                            <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">4</span>]&#123;<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>&#125;,</span><br><span class="line">                            <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">5</span>]&#123;<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>,<span class="number">24</span>,<span class="number">25</span>&#125;,</span><br><span class="line">                            <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">3</span>]&#123;<span class="number">31</span>,<span class="number">32</span>,<span class="number">33</span>&#125;</span><br><span class="line">                           &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//printing the values of jagged array by using nested for loop</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; arr.GetLength(<span class="number">0</span>); i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; arr[i].Length; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.Write(arr[i][j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//print the values of jagged array by using foreach loop within for loop</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; arr.GetLength(<span class="number">0</span>); i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">foreach</span> (<span class="built_in">int</span> x <span class="keyword">in</span> arr[i])</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.Write(x + <span class="string">&quot; &quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://img2022.cnblogs.com/blog/1005952/202207/1005952-20220714215330744-1423859804.png"><hr><h1 id="相关链接（侵删）"><a href="#相关链接（侵删）" class="headerlink" title="相关链接（侵删）"></a>相关链接（侵删）</h1><ol><li><a href="https://www.cnblogs.com/chenlight/p/16464106.html">C# 二维数组（2d Array）解析</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">C#使用二维数组</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="C#" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/C/"/>
    
    <category term="前端" scheme="https://zml3589110.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="数据结构" scheme="https://zml3589110.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="数组" scheme="https://zml3589110.github.io/categories/%E6%95%B0%E7%BB%84/"/>
    
    
    <category term="C#" scheme="https://zml3589110.github.io/tags/C/"/>
    
    <category term="数据结构" scheme="https://zml3589110.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="数组" scheme="https://zml3589110.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
    <category term="二维数组" scheme="https://zml3589110.github.io/tags/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>C# 跨线程访问UI控件之二（操作UI的五种方法）</title>
    <link href="https://zml3589110.github.io/posts/1599861562.html"/>
    <id>https://zml3589110.github.io/posts/1599861562.html</id>
    <published>2023-02-09T06:57:20.000Z</published>
    <updated>2023-02-09T07:10:17.003Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>经常因为需要在线程间操作UI而头疼，总结了一下，记录出来，以后方便查阅。<br>以下代码，展示在一个窗体内，线程接到消息后（当前时间字符串），使窗体的UI发生改变。分别使用五种不同的方法。</p></blockquote><h1 id="方法一"><a href="#方法一" class="headerlink" title="方法一:"></a>方法一:</h1><p><strong>通过设置窗体属性，取消线程间的安全检查。（最简单，最省事，也是最不负责任的一种）。</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.ComponentModel;</span><br><span class="line"><span class="keyword">using</span> System.Data;</span><br><span class="line"><span class="keyword">using</span> System.Drawing;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line">namespace winform线程间操作UI的五种方法</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Form1</span> : <span class="title">Form</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Form1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line"></span><br><span class="line">            Control.CheckForIllegalCrossThreadCalls = <span class="literal">false</span>;<span class="comment">//取消线程间的安全检查</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">bool</span> bTest = <span class="literal">false</span>;      <span class="comment">//测试执行一次线程里面的函数</span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> sTip;</span><br><span class="line">        Thread thrRecv;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Form1_Load</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            thrRecv = <span class="keyword">new</span> Thread(ReceiveMessage);</span><br><span class="line">            thrRecv.IsBackground = <span class="literal">true</span>;</span><br><span class="line">            thrRecv.Start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ReceiveMessage</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (bTest)</span><br><span class="line">                &#123;</span><br><span class="line">                    sTip = System.DateTime.Now.ToString(<span class="string">&quot;yyyy-mm-dd HH:mm:ss&quot;</span>);</span><br><span class="line">                    textBox1.Text = sTip;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkBox1_CheckedChanged</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            bTest = checkBox1.Checked ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Form1_FormClosing</span>(<span class="params"><span class="built_in">object</span> sender, FormClosingEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            thrRecv.Abort();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>运行效果：</strong></p><img src="https://img-blog.csdnimg.cn/72820673ac494df4825b751e7e43033e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQklHRklTSDIwMTk=,size_17,color_FFFFFF,t_70,g_se,x_16"><h1 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h1><p>**通过设置全局变量属性，利用timer模拟实现此效果。<br>此方法的原理是，当接收线程接收到消息后，将消息赋值到一个全局变量上，同时timer一直在运行textBox1.Text &#x3D; sTip;<br>分析：<br>这种方法，不推荐使用，占用资源过多，并且根据timer时间设置的不同会有不同的延时。<br>**</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.ComponentModel;</span><br><span class="line"><span class="keyword">using</span> System.Data;</span><br><span class="line"><span class="keyword">using</span> System.Drawing;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line">namespace winform线程间操作UI的五种方法</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Form2</span> : <span class="title">Form</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Form2</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button1_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">bool</span> bTest = <span class="literal">false</span>;      <span class="comment">//测试执行一次线程里面的函数</span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> sTip;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Form2_Load</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Thread thrRecv = <span class="keyword">new</span> Thread(ReceiveMessage);</span><br><span class="line">            thrRecv.IsBackground = <span class="literal">true</span>;</span><br><span class="line">            thrRecv.Start();</span><br><span class="line">            timer1.Start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkBox1_CheckedChanged</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            bTest = checkBox1.Checked ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ReceiveMessage</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (bTest)</span><br><span class="line">                &#123;</span><br><span class="line">                    sTip = System.DateTime.Now.ToString(<span class="string">&quot;yyyy-mm-dd HH:mm:ss&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">timer1_Tick</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            textBox1.Text = sTip;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>运行效果：</strong></p><img src="https://img-blog.csdnimg.cn/92153e12262f45baa97b8607b21b0453.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQklHRklTSDIwMTk=,size_15,color_FFFFFF,t_70,g_se,x_16"><h1 id="方法三："><a href="#方法三：" class="headerlink" title="方法三："></a>方法三：</h1><p><strong>通过winform自带的backgroundworker取代thread进行异步操作。<br>代码的原理就是，把对UI的操作放到了backgroundworker2_progresschanged方法中进行，winform自带的backgroundworker不会受到影响，可以对UI进行操作。<br>分析：<br>这种方法，不推荐使用，虽然并没有什么不好的。但是就是感觉特别挫，因为只局限于winform，到了其它的地方，还不是得用thread来实现，使用这种方法解决问题，治标不治本。</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.ComponentModel;</span><br><span class="line"><span class="keyword">using</span> System.Data;</span><br><span class="line"><span class="keyword">using</span> System.Drawing;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line">namespace winform线程间操作UI的五种方法</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Form3</span> : <span class="title">Form</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Form3</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">bool</span> bTest = <span class="literal">false</span>;      <span class="comment">//测试执行一次线程里面的函数</span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> sTip;             <span class="comment">//UI显示的内容</span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> iCount = <span class="number">0</span>;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Form3_Load</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            backgroundWorker2.WorkerReportsProgress = <span class="literal">true</span>;</span><br><span class="line">            backgroundWorker2.RunWorkerAsync();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkBox1_CheckedChanged</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            bTest = checkBox1.Checked ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button1_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//backgroundWorker1.RunWorkerAsync();</span></span><br><span class="line">            MessageBox.Show(<span class="string">&quot;测试界面卡顿&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">backgroundWorker2_DoWork</span>(<span class="params"><span class="built_in">object</span> sender, DoWorkEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>         &#123;</span><br><span class="line">             <span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">             &#123;</span><br><span class="line">                <span class="keyword">if</span> (bTest)</span><br><span class="line">                &#123;</span><br><span class="line">                    iCount++;</span><br><span class="line">                    sTip = System.DateTime.Now.ToString(<span class="string">&quot;yyyy-mm-dd HH:mm:ss&quot;</span>);</span><br><span class="line">                    backgroundWorker2.ReportProgress(<span class="number">50</span>, sTip);</span><br><span class="line">                    Thread.Sleep(<span class="number">1</span>);   <span class="comment">//需要休眠，要不然界面卡顿</span></span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">backgroundWorker2_ProgressChanged</span>(<span class="params"><span class="built_in">object</span> sender, ProgressChangedEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            textBox1.Text = e.UserState.ToString();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Form3_Shown</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//backgroundWorker2.RunWorkerAsync();</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>运行效果：</strong></p><img src="https://img-blog.csdnimg.cn/ea04bc381eab40fe8e505aa58c16ebf7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQklHRklTSDIwMTk=,size_17,color_FFFFFF,t_70,g_se,x_16"><h1 id="方法四："><a href="#方法四：" class="headerlink" title="方法四："></a>方法四：</h1><p><strong>通过UI线程的SynchronizationContext的Post&#x2F;Send方法更新。<br>分析：<br>这种方法，推荐使用，是不错的解决问题的好方法。</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.ComponentModel;</span><br><span class="line"><span class="keyword">using</span> System.Data;</span><br><span class="line"><span class="keyword">using</span> System.Drawing;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line">namespace winform线程间操作UI的五种方法</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Form4</span> : <span class="title">Form</span></span><br><span class="line">    &#123;</span><br><span class="line">        SynchronizationContext SyncContext = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">bool</span> bTest = <span class="literal">false</span>;      <span class="comment">//测试执行一次线程里面的函数</span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> sTip;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Form4</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">            SyncContext = SynchronizationContext.Current;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Form4_Load</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Thread thrRecv = <span class="keyword">new</span> Thread(ReceiveMessage);</span><br><span class="line">            thrRecv.IsBackground = <span class="literal">true</span>;</span><br><span class="line">            thrRecv.Start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ReceiveMessage</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (bTest)</span><br><span class="line">                &#123;</span><br><span class="line">                    sTip = System.DateTime.Now.ToString(<span class="string">&quot;yyyy-mm-dd HH:mm:ss&quot;</span>);</span><br><span class="line">                    SyncContext.Post(change, sTip);</span><br><span class="line">                    Thread.Sleep(<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">change</span>(<span class="params"><span class="built_in">object</span> str</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            textBox1.Text = str.ToString();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkBox1_CheckedChanged</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            bTest = checkBox1.Checked ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>原理是，在线程执行过程中，需要更新到UI控件上的数据不再直接更新，而是通过UI线程上下文的Post&#x2F;Send方法，将数据以异步&#x2F;同步消息的形式发送到UI线程的消息队列；UI线程收到该消息后，根据消息是异步消息还是同步消息来决定通过异步&#x2F;同步的方式调用SetTextSafePost方法直接更新自己的控件了。<br>在本质上，向UI线程发送的消息并不是简单数据，而是一条委托调用命令。</p></blockquote><p><strong>运行效果：</strong></p><img src="https://img-blog.csdnimg.cn/0cde3cf0f6a54bd8be4e3abb749c6aa3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQklHRklTSDIwMTk=,size_17,color_FFFFFF,t_70,g_se,x_16"><h1 id="方法五："><a href="#方法五：" class="headerlink" title="方法五："></a>方法五：</h1><p><strong>通过设置UI控件的Invoke和BeginInvoke方法实现更新。<br>分析：<br>这种方法推荐使用，是当前的主流。</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.ComponentModel;</span><br><span class="line"><span class="keyword">using</span> System.Data;</span><br><span class="line"><span class="keyword">using</span> System.Drawing;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line">namespace winform线程间操作UI的五种方法</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Form5</span> : <span class="title">Form</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">Change</span>(<span class="params"><span class="built_in">string</span> text</span>)</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">bool</span> bTest = <span class="literal">false</span>;      <span class="comment">//测试执行一次线程里面的函数</span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> sTip;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Form5</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Form5_Load</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Thread thrRecv = <span class="keyword">new</span> Thread(ReceiveMessage);</span><br><span class="line">            thrRecv.IsBackground = <span class="literal">true</span>;</span><br><span class="line">            thrRecv.Start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Settext</span>(<span class="params"><span class="built_in">string</span> text</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            textBox1.Text = text;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ReceiveMessage</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>         &#123;</span><br><span class="line">             <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (bTest)</span><br><span class="line">                &#123;</span><br><span class="line">                    sTip = System.DateTime.Now.ToString(<span class="string">&quot;yyyy-mm-dd HH:mm:ss&quot;</span>);</span><br><span class="line">                    <span class="keyword">this</span>.BeginInvoke(<span class="keyword">new</span> Change(Settext), sTip);</span><br><span class="line">                    Thread.Sleep(<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkBox1_CheckedChanged</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            bTest = checkBox1.Checked ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>这个方法是目前跨线程更新UI使用的主流方法，使用控件的Invoke&#x2F;BegainInvoke方法，将委托转到UI线程上调用，实现线程安全的更新。</strong></p><p><strong>运行效果：</strong></p><img src="https://img-blog.csdnimg.cn/d30b63a8bccf4710a7173146ea6fbf62.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQklHRklTSDIwMTk=,size_17,color_FFFFFF,t_70,g_se,x_16"><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>多线程间会经常使用到委托，对委托的理解十分关键。</p><hr><h1 id="相关链接（侵删）"><a href="#相关链接（侵删）" class="headerlink" title="相关链接（侵删）"></a>相关链接（侵删）</h1><ol><li><a href="https://blog.csdn.net/BIGFISH2019/article/details/122835709">c#winform线程间操作UI的五种方法</a></li><li><a href="https://www.cnblogs.com/weifeng123/p/13734999.html">c#winform线程间操作UI的五种方法参考出处</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">C#跨线程访问UI控件的五种方法</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="C#" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/C/"/>
    
    <category term="前端" scheme="https://zml3589110.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="线程管理" scheme="https://zml3589110.github.io/categories/%E7%BA%BF%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
    
    
    <category term="C#" scheme="https://zml3589110.github.io/tags/C/"/>
    
    <category term="线程管理" scheme="https://zml3589110.github.io/tags/%E7%BA%BF%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
    
    <category term="UI访问" scheme="https://zml3589110.github.io/tags/UI%E8%AE%BF%E9%97%AE/"/>
    
    <category term="显示实时时间" scheme="https://zml3589110.github.io/tags/%E6%98%BE%E7%A4%BA%E5%AE%9E%E6%97%B6%E6%97%B6%E9%97%B4/"/>
    
  </entry>
  
  <entry>
    <title>C# 开启线程的几种方式</title>
    <link href="https://zml3589110.github.io/posts/100493848.html"/>
    <id>https://zml3589110.github.io/posts/100493848.html</id>
    <published>2023-02-09T06:49:20.000Z</published>
    <updated>2023-02-09T06:53:51.893Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、异步委托开启线程"><a href="#一、异步委托开启线程" class="headerlink" title="一、异步委托开启线程"></a>一、异步委托开启线程</h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> 　　Action&lt;<span class="built_in">int</span>,<span class="built_in">int</span>&gt; a=<span class="keyword">add</span>;</span><br><span class="line"> 　　a.BeginInvoke(,,<span class="literal">null</span>,<span class="literal">null</span>);<span class="comment">//前两个是add方法的参数，后两个可以为空</span></span><br><span class="line"> 　　Console.WriteLine(<span class="string">&quot;main()&quot;</span>);</span><br><span class="line"> 　　Console.ReadKey();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span>(<span class="params"><span class="built_in">int</span> a,<span class="built_in">int</span> b</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> 　　Console.WriteLine(a+b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二、通过Thread类开启线程"><a href="#二、通过Thread类开启线程" class="headerlink" title="二、通过Thread类开启线程"></a>二、通过Thread类开启线程</h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">     &#123;</span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>         &#123;</span><br><span class="line">             Thread t1;</span><br><span class="line">             Thread t2;</span><br><span class="line">             t1 = <span class="keyword">new</span> Thread(SetInfo1);</span><br><span class="line">             t2 = <span class="keyword">new</span> Thread(SetInfo2);</span><br><span class="line">             t1.Start();</span><br><span class="line">             <span class="comment">//线程睡眠</span></span><br><span class="line">             <span class="comment">//t1.Join(1000);</span></span><br><span class="line">             <span class="comment">//挂起线程</span></span><br><span class="line">             t1.Suspend();</span><br><span class="line">             <span class="comment">//继续执行线程</span></span><br><span class="line">             t1.Resume();</span><br><span class="line">             <span class="comment">//结束线程</span></span><br><span class="line">             <span class="comment">//t1.Abort();</span></span><br><span class="line"> </span><br><span class="line">             t2.Start();</span><br><span class="line">             Console.ReadKey();</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">//奇数线程</span></span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SetInfo1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>         &#123;</span><br><span class="line">             <span class="keyword">for</span> (<span class="built_in">int</span> i = ; i &lt; ; i++)</span><br><span class="line">             &#123;</span><br><span class="line">                 <span class="keyword">if</span> (i %  != )</span><br><span class="line">                 &#123;</span><br><span class="line">                     Console.WriteLine(<span class="string">&quot;奇数为&quot;</span> + i);</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">//偶数线程</span></span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SetInfo2</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>         &#123;</span><br><span class="line">             <span class="keyword">for</span> (<span class="built_in">int</span> i = ; i &lt; ; i++)</span><br><span class="line">             &#123;</span><br><span class="line">                 <span class="keyword">if</span> (i %  == )</span><br><span class="line">                 &#123;</span><br><span class="line">                     Console.WriteLine(<span class="string">&quot;偶数为&quot;</span> + i);</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><h1 id="三、通过线程池开启线程"><a href="#三、通过线程池开启线程" class="headerlink" title="三、通过线程池开启线程"></a>三、通过线程池开启线程</h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> 　　 <span class="comment">//线程池可以看做容纳线程的容器；一个应用程序最多只能有一个线程池；ThreadPool静态类通过QueueUserWorkItem()方法将工作函数排入线程池； 每排入一个工作函数，就相当于请求创建一个线程；</span></span><br><span class="line"><span class="comment">//线程池的作用：</span></span><br><span class="line"><span class="comment">//1、线程池是为突然大量爆发的线程设计的，通过有限的几个固定线程为大量的操作服务，减少了创建和销毁线程所需的时间，从而提高效率。</span></span><br><span class="line"><span class="comment">//2、如果一个线程的时间非常长，就没必要用线程池了(不是不能作长时间操作，而是不宜。)，况且我们还不能控制线程池中线程的开始、挂起、和中止</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        ThreadPool.QueueUserWorkItem(<span class="keyword">new</span> WaitCallback(TestThreadPool), <span class="keyword">new</span> <span class="built_in">string</span>[] &#123; <span class="string">&quot;hjh&quot;</span> &#125;);</span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">TestThreadPool</span>(<span class="params"><span class="built_in">object</span> state</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="built_in">string</span>[] arry = state <span class="keyword">as</span> <span class="built_in">string</span>[];<span class="comment">//传过来的参数值</span></span><br><span class="line">        <span class="built_in">int</span> workerThreads = ;</span><br><span class="line">        <span class="built_in">int</span> CompletionPortThreads = ;</span><br><span class="line">        ThreadPool.GetMaxThreads(<span class="keyword">out</span> workerThreads, <span class="keyword">out</span> CompletionPortThreads);</span><br><span class="line">        Console.WriteLine(DateTime.Now.ToString() + <span class="string">&quot;---&quot;</span> + arry[] + <span class="string">&quot;--workerThreads=&quot;</span> + workerThreads + <span class="string">&quot;--CompletionPortThreads&quot;</span> + CompletionPortThreads);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四、通过任务Task开启线程"><a href="#四、通过任务Task开启线程" class="headerlink" title="四、通过任务Task开启线程"></a>四、通过任务Task开启线程</h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">     &#123;</span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>         &#123;</span><br><span class="line">             Task task = <span class="keyword">new</span> Task(DownLoadFile_My);</span><br><span class="line">             task.Start();</span><br><span class="line">             Console.ReadKey();</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">DownLoadFile_My</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>         &#123;</span><br><span class="line">             Console.WriteLine(<span class="string">&quot;开始下载...线程ID:&quot;</span>+Thread.CurrentThread.ManagedThreadId);</span><br><span class="line">             Thread.Sleep();</span><br><span class="line">             Console.WriteLine(<span class="string">&quot;下载完成!&quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Thread(() =&gt;</span><br><span class="line"> &#123;</span><br><span class="line">     <span class="keyword">try</span></span><br><span class="line">     &#123;</span><br><span class="line">         <span class="comment">//运行的代码</span></span><br><span class="line">     &#125;</span><br><span class="line">      catch (Exception ex)</span><br><span class="line">     &#123;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;).Start();</span><br></pre></td></tr></table></figure><hr><h1 id="相关链接（侵删）"><a href="#相关链接（侵删）" class="headerlink" title="相关链接（侵删）"></a>相关链接（侵删）</h1><ol><li><a href="https://www.shuzhiduo.com/A/kjdwkWK2dN/">C# 开启线程的几种方式</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">C# 开启线程的几种常用方式</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="C#" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/C/"/>
    
    <category term="前端" scheme="https://zml3589110.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="线程管理" scheme="https://zml3589110.github.io/categories/%E7%BA%BF%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
    
    
    <category term="C#" scheme="https://zml3589110.github.io/tags/C/"/>
    
    <category term="Thread" scheme="https://zml3589110.github.io/tags/Thread/"/>
    
    <category term="线程开启方式" scheme="https://zml3589110.github.io/tags/%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%90%AF%E6%96%B9%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>C#数据结构之一（环形缓冲区FIFO）</title>
    <link href="https://zml3589110.github.io/posts/918496859.html"/>
    <id>https://zml3589110.github.io/posts/918496859.html</id>
    <published>2023-02-09T06:31:20.000Z</published>
    <updated>2023-02-09T06:43:39.912Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数组模拟环形队列（这个正在使用-效果很好）"><a href="#数组模拟环形队列（这个正在使用-效果很好）" class="headerlink" title="数组模拟环形队列（这个正在使用-效果很好）"></a>数组模拟环形队列（这个正在使用-效果很好）</h1><blockquote><p>上一章说到的数组模拟队列存在的问题，问题分析并优化</p></blockquote><ul><li>目前数组使用一次就不能用，没有达到复用的效果</li><li>将这个数组使用算法，改进成一个环形的队列</li></ul><p>对前面的数组模拟队列的优化，充分利用数组。因此将数组看做是一个环形的。（通过去模的方式来实现即可）</p><p>分析说明：</p><ul><li>尾索引的下一个为头索引时，表示队列满。即将队列容量空出一个作为约定，这个在做判断队列满的时候需要注意（rear+1）%maxsize&#x3D;&#x3D;front 满</li><li>rear&#x3D;&#x3D;front 空</li></ul><img src="https://pic3.zhimg.com/80/v2-02462cb1a43ecb49f9e47bdc3dd3245a_1440w.jpg"><p>实现思路如下：</p><ul><li>front指针含义调整，front指向队列第一个元素。也就是array[front]就是队列的第一个元素。front初始值&#x3D;0。</li><li>rear变量的含义调整，rear指向队列的最后一个元素的后一个位置。因为希望空出一个空间作为约定。rear初始值&#x3D;0。</li><li>当队列满时，条件是(rear + 1)% maxsize &#x3D; front , 位满。（PS：rear +1是预留一个位置，不牺牲这个空间会导致无法判断队列空或者满，rear一直自增，也就是说rear是很有可能大于maxsieze的，比如maxsize&#x3D;5，rear&#x3D;10，因为rear被加到10，此时rear的实际位置是0。取模式保证党front为0时，rear+1取模为0与front相等）</li><li>当队列空是，条件是rear&#x3D;&#x3D;front 。</li><li>有效的数据个数，(raer + maxsize - front)%maxsize。（为什么要取模，因为是环形同时有rear可能是最大的然后跑到最前面来；假如：rear&#x3D;1，front&#x3D;0，maxsize&#x3D;10 再套入公式中 (1+10-0)%10&#x3D;1 有效数据为1）</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CircleArrayQueue</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//队列最大值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> _maxSize;</span><br><span class="line">    <span class="comment">//队列头部</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> _front;</span><br><span class="line">    <span class="comment">//队列尾部</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> _rear;</span><br><span class="line">    <span class="comment">//存储值的数组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span>[] _tempArray;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CircleArrayQueue</span>(<span class="params"><span class="built_in">int</span> maxSize</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;MaxSize : <span class="subst">&#123; maxSize &#125;</span>&quot;</span>);</span><br><span class="line">        _maxSize = maxSize;</span><br><span class="line">        _tempArray = <span class="keyword">new</span> <span class="built_in">int</span>[_maxSize];</span><br><span class="line">        <span class="comment">//front指向队列第一个元素</span></span><br><span class="line">        _front = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//rear指向队列的最后一个元素的后一个位置</span></span><br><span class="line">        _rear = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">IsFull</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> (_rear + <span class="number">1</span>) % _maxSize == _front;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">IsEmpty</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> _rear == _front;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 有效数据个数</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">Num</span>(<span class="params"></span>) </span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> (_rear + _maxSize - _front) % _maxSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">EnQueue</span>(<span class="params"><span class="built_in">int</span> val</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (IsFull())</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;队列已满，无法加入数据！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//直接插入数据</span></span><br><span class="line">        _tempArray[_rear] = val;</span><br><span class="line">        <span class="comment">//_rear后移一位，这里必须考虑取模</span></span><br><span class="line">        _rear = (_rear + <span class="number">1</span>) % _maxSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">DeQueue</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (IsEmpty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;队列是空的，无法取出数据！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//这里需要分析出front是指向队列的第一个元素</span></span><br><span class="line">        <span class="comment">//1.先把front对应的值保留到一个临时变量</span></span><br><span class="line">        <span class="comment">//2.将front后移</span></span><br><span class="line">        <span class="comment">//3.将临时保存的变量返回</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> tempVal = _tempArray[_front];</span><br><span class="line">        _front = (_front + <span class="number">1</span>) % _maxSize;</span><br><span class="line">        <span class="keyword">return</span> tempVal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShowAll</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (IsEmpty())</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;队列是空的!&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;显示队列所有内容：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = _front; i &lt; _front + Num(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.Write(<span class="string">$&quot;<span class="subst">&#123; _tempArray[i % _maxSize] &#125;</span>\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Console.WriteLine();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PeekFirst</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (IsEmpty())</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;队列是空的，无法取出数据！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;查看第一个值:<span class="subst">&#123; _tempArray[_front] &#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>代码调用</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//MySparseArray sparseArray = new MySparseArray();</span></span><br><span class="line">            <span class="comment">//sparseArray.Print();    </span></span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            CircleArrayQueue queue = <span class="keyword">new</span> CircleArrayQueue(<span class="number">4</span>);</span><br><span class="line">            queue.EnQueue(<span class="number">97</span>);</span><br><span class="line">            queue.EnQueue(<span class="number">98</span>);</span><br><span class="line">            queue.EnQueue(<span class="number">200</span>);</span><br><span class="line">            queue.EnQueue(<span class="number">1000</span>);</span><br><span class="line">            <span class="comment">//查看第一个值</span></span><br><span class="line">            queue.PeekFirst();</span><br><span class="line">            <span class="comment">//显示队列里所有的内容</span></span><br><span class="line">            queue.ShowAll();</span><br><span class="line">            <span class="comment">//取出一个值</span></span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;取出一个值:<span class="subst">&#123; queue.DeQueue() &#125;</span>&quot;</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;取出一个值:<span class="subst">&#123; queue.DeQueue() &#125;</span>&quot;</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;取出一个值:<span class="subst">&#123; queue.DeQueue() &#125;</span>&quot;</span>);</span><br><span class="line">            queue.PeekFirst();</span><br><span class="line">            queue.EnQueue(<span class="number">200</span>);</span><br><span class="line">            queue.ShowAll();</span><br><span class="line">        &#125;</span><br><span class="line">        catch (Exception ex)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(ex.Message);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Console.Read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h2><img src="https://pic4.zhimg.com/80/v2-32df9eb6cdf9c4fbe5b5d5f8ac6c8d0b_1440w.jpg"><h1 id="C-串口数据处理–环形缓冲区-FIFO"><a href="#C-串口数据处理–环形缓冲区-FIFO" class="headerlink" title="C#串口数据处理–环形缓冲区-FIFO"></a>C#串口数据处理–环形缓冲区-FIFO</h1><p><strong>注意：这个FIFO无效，还不知什么原因</strong></p><h2 id="一、FIFO环形缓冲区初始化"><a href="#一、FIFO环形缓冲区初始化" class="headerlink" title="一、FIFO环形缓冲区初始化"></a>一、FIFO环形缓冲区初始化</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="built_in">int</span> MAX_BUFFER_LEN = <span class="number">1024</span>;<span class="comment">//定义缓冲区大小</span></span><br><span class="line">FIFO receiveBufferManager = <span class="keyword">new</span> FIFO(MAX_BUFFER_LEN);</span><br></pre></td></tr></table></figure><h2 id="二、串口接收事件中添加写入环形缓冲"><a href="#二、串口接收事件中添加写入环形缓冲" class="headerlink" title="二、串口接收事件中添加写入环形缓冲"></a>二、串口接收事件中添加写入环形缓冲</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> num = serialPort1.BytesToRead;      <span class="comment">//获取接收缓冲区中的字节数</span></span><br><span class="line">               <span class="built_in">byte</span>[] received_buf = <span class="keyword">new</span> <span class="built_in">byte</span>[num];    <span class="comment">//声明一个大小为num的字节数据用于存放读出的byte型数据</span></span><br><span class="line">               serialPort1.Read(received_buf, <span class="number">0</span>, num);   <span class="comment">//读取接收缓冲区中num个字节到byte数组中</span></span><br><span class="line">               <span class="keyword">if</span> (num &gt; <span class="number">0</span>)</span><br><span class="line">               &#123;</span><br><span class="line">                    receiveBufferManager.WriteBuffer(received_buf, <span class="number">0</span>,num);</span><br><span class="line">               &#125;</span><br></pre></td></tr></table></figure><h2 id="三、开一个线程解析数据，测试中串口以10ms的周期发送大量数据，然后在线程中以1s的速度去解析数据，数据依然不会丢失。"><a href="#三、开一个线程解析数据，测试中串口以10ms的周期发送大量数据，然后在线程中以1s的速度去解析数据，数据依然不会丢失。" class="headerlink" title="三、开一个线程解析数据，测试中串口以10ms的周期发送大量数据，然后在线程中以1s的速度去解析数据，数据依然不会丢失。"></a>三、开一个线程解析数据，测试中串口以10ms的周期发送大量数据，然后在线程中以1s的速度去解析数据，数据依然不会丢失。</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">serialPort1_DataReceived1</span>(<span class="params"><span class="built_in">object</span> o</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">byte</span>[] freame_byte = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                <span class="built_in">byte</span>[] freame_byte1 = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (receiveBufferManager.GetDataCount() &gt; <span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        receiveBufferManager.ReadBuffer(freame_byte, <span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line">                        receiveBufferManager.ReadBuffer(freame_byte1, <span class="number">0</span>,freame_byte[<span class="number">2</span>]);</span><br><span class="line">                        Console.Write(<span class="string">&quot;数据=&quot;</span>);</span><br><span class="line">                        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; freame_byte[<span class="number">2</span>]; i++)</span><br><span class="line">                        &#123;</span><br><span class="line">                            Console.Write(<span class="string">&quot;&#123;0:X000&#125; &quot;</span>, freame_byte1[i]);</span><br><span class="line">                        &#125;</span><br><span class="line">                        Console.WriteLine(<span class="string">&quot;&quot;</span>);</span><br><span class="line">                         receiveBufferManager.Clear(freame_byte[<span class="number">2</span>]);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123; Console.WriteLine(<span class="string">&quot;缓冲区没有数据&quot;</span>); &#125;</span><br><span class="line">                    Thread.Sleep(<span class="number">1000</span>);</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            catch</span><br><span class="line">            &#123;</span><br><span class="line"> </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="四、环形缓冲区实现类"><a href="#四、环形缓冲区实现类" class="headerlink" title="四、环形缓冲区实现类"></a>四、环形缓冲区实现类</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RingBufferManager</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">byte</span>[] Buffer &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; <span class="comment">// 存放内存的数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> DataCount &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; <span class="comment">// 写入数据大小</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> DataStart &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; <span class="comment">// 数据起始索引</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> DataEnd &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;   <span class="comment">// 数据结束索引</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RingBufferManager</span>(<span class="params"><span class="built_in">int</span> bufferSize</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        DataCount = <span class="number">0</span>; DataStart = <span class="number">0</span>; DataEnd = <span class="number">0</span>;</span><br><span class="line">        Buffer = <span class="keyword">new</span> <span class="built_in">byte</span>[bufferSize];</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">byte</span> <span class="keyword">this</span>[<span class="built_in">int</span> index]</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (index &gt;= DataCount) <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;环形缓冲区异常，索引溢出&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (DataStart + index &lt; Buffer.Length)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> Buffer[DataStart + index];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> Buffer[(DataStart + index) - Buffer.Length];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">GetDataCount</span>(<span class="params"></span>) <span class="comment">// 得到当前写入的字节数</span></span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> DataCount;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">GetReserveCount</span>(<span class="params"></span>) <span class="comment">// 得到剩余的字节数</span></span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> Buffer.Length - DataCount;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Clear</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        DataCount = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Clear</span>(<span class="params"><span class="built_in">int</span> count</span>) <span class="comment">// 清空指定大小的数据</span></span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (count &gt;= DataCount) <span class="comment">// 若是须要清理的数据大于现有数据大小，则所有清理</span></span><br><span class="line">        &#123;</span><br><span class="line">            DataCount = <span class="number">0</span>;</span><br><span class="line">            DataStart = <span class="number">0</span>;</span><br><span class="line">            DataEnd = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (DataStart + count &gt;= Buffer.Length)</span><br><span class="line">            &#123;</span><br><span class="line">                DataStart = (DataStart + count) - Buffer.Length;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">            &#123;</span><br><span class="line">                DataStart += count;</span><br><span class="line">            &#125;</span><br><span class="line">            DataCount -= count;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">WriteBuffer</span>(<span class="params"><span class="built_in">byte</span>[] buffer, <span class="built_in">int</span> offset, <span class="built_in">int</span> count</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Int32 reserveCount = Buffer.Length - DataCount;</span><br><span class="line">        <span class="keyword">if</span> (reserveCount &gt;= count)                          <span class="comment">// 可用空间够使用</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (DataEnd + count &lt; Buffer.Length)            <span class="comment">// 数据没到结尾</span></span><br><span class="line">            &#123;</span><br><span class="line">                Array.Copy(buffer, offset, Buffer, DataEnd, count);</span><br><span class="line">                DataEnd += count;</span><br><span class="line">                DataCount += count;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>           <span class="comment">//  数据结束索引超出结尾 循环到开始</span></span><br><span class="line">            &#123;</span><br><span class="line">                System.Diagnostics.Debug.WriteLine(<span class="string">&quot;缓存从新开始....&quot;</span>);</span><br><span class="line">                Int32 overflowIndexLength = (DataEnd + count) - Buffer.Length;      <span class="comment">// 超出索引长度</span></span><br><span class="line">                Int32 endPushIndexLength = count - overflowIndexLength;             <span class="comment">// 填充在末尾的数据长度</span></span><br><span class="line">                Array.Copy(buffer, offset, Buffer, DataEnd, endPushIndexLength);</span><br><span class="line">                DataEnd = <span class="number">0</span>;</span><br><span class="line">                offset += endPushIndexLength;</span><br><span class="line">                DataCount += endPushIndexLength;</span><br><span class="line">                <span class="keyword">if</span> (overflowIndexLength != <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    Array.Copy(buffer, offset, Buffer, DataEnd, overflowIndexLength);</span><br><span class="line">                &#125;</span><br><span class="line">                DataEnd += overflowIndexLength;                                     <span class="comment">// 结束索引</span></span><br><span class="line">                DataCount += overflowIndexLength;                                   <span class="comment">// 缓存大小</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 缓存溢出，不处理</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ReadBuffer</span>(<span class="params"><span class="built_in">byte</span>[] targetBytes,Int32 offset, Int32 count</span>) </span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (count &gt; DataCount) <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;环形缓冲区异常，读取长度大于数据长度&quot;</span>);</span><br><span class="line">        Int32 tempDataStart = DataStart;</span><br><span class="line">        <span class="keyword">if</span> (DataStart + count &lt; Buffer.Length)</span><br><span class="line">        &#123;</span><br><span class="line">            Array.Copy(Buffer, DataStart, targetBytes, offset, count);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            Int32 overflowIndexLength = (DataStart + count) - Buffer.Length;    <span class="comment">// 超出索引长度</span></span><br><span class="line">            Int32 endPushIndexLength = count - overflowIndexLength;             <span class="comment">// 填充在末尾的数据长度</span></span><br><span class="line">            Array.Copy(Buffer, DataStart, targetBytes, offset, endPushIndexLength);</span><br><span class="line">            </span><br><span class="line">            offset += endPushIndexLength;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (overflowIndexLength != <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Array.Copy(Buffer, <span class="number">0</span>, targetBytes, offset, overflowIndexLength);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">WriteBuffer</span>(<span class="params"><span class="built_in">byte</span>[] buffer</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        WriteBuffer(buffer, <span class="number">0</span>, buffer.Length);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="相关链接（侵删）"><a href="#相关链接（侵删）" class="headerlink" title="相关链接（侵删）"></a>相关链接（侵删）</h1><ol><li><a href="https://www.cnblogs.com/justzhuzhu/p/15866448.html">c#环形队列</a></li><li><a href="https://blog.csdn.net/xu_BK/article/details/120015339">C#串口数据处理–环形缓冲区-FIFO</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">C#数据结构，通过环形队列来处理串口数据接收问题</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="C#" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/C/"/>
    
    <category term="前端" scheme="https://zml3589110.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="数据结构" scheme="https://zml3589110.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="FIFO" scheme="https://zml3589110.github.io/categories/FIFO/"/>
    
    
    <category term="C#" scheme="https://zml3589110.github.io/tags/C/"/>
    
    <category term="数据结构" scheme="https://zml3589110.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="环形缓冲区" scheme="https://zml3589110.github.io/tags/%E7%8E%AF%E5%BD%A2%E7%BC%93%E5%86%B2%E5%8C%BA/"/>
    
    <category term="环形队列" scheme="https://zml3589110.github.io/tags/%E7%8E%AF%E5%BD%A2%E9%98%9F%E5%88%97/"/>
    
    <category term="FIFO" scheme="https://zml3589110.github.io/tags/FIFO/"/>
    
  </entry>
  
  <entry>
    <title>C# 将DataGridView中的数据保存到CSV和Excel中</title>
    <link href="https://zml3589110.github.io/posts/2417497739.html"/>
    <id>https://zml3589110.github.io/posts/2417497739.html</id>
    <published>2023-02-09T06:12:20.000Z</published>
    <updated>2023-02-09T06:22:41.101Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、保存到CSV"><a href="#一、保存到CSV" class="headerlink" title="一、保存到CSV"></a>一、保存到CSV</h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">dataGridViewToCSV</span>(<span class="params">DataGridView dataGridView</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dataGridView.Rows.Count == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        MessageBox.Show(<span class="string">&quot;没有数据可导出!&quot;</span>, <span class="string">&quot;提示&quot;</span>, MessageBoxButtons.OK, MessageBoxIcon.Information);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    SaveFileDialog saveFileDialog = <span class="keyword">new</span> SaveFileDialog();</span><br><span class="line">    saveFileDialog.Filter = <span class="string">&quot;CSV files (*.csv)|*.csv&quot;</span>;</span><br><span class="line">    saveFileDialog.FilterIndex = <span class="number">0</span>;</span><br><span class="line">    saveFileDialog.RestoreDirectory = <span class="literal">true</span>;</span><br><span class="line">    saveFileDialog.CreatePrompt = <span class="literal">true</span>;</span><br><span class="line">    saveFileDialog.FileName = <span class="literal">null</span>;</span><br><span class="line">    saveFileDialog.Title = <span class="string">&quot;保存&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (saveFileDialog.ShowDialog() == DialogResult.OK)</span><br><span class="line">    &#123;</span><br><span class="line">        Stream stream = saveFileDialog.OpenFile();</span><br><span class="line">        StreamWriter sw = <span class="keyword">new</span> StreamWriter(stream, System.Text.Encoding.GetEncoding(<span class="number">-0</span>));</span><br><span class="line">        <span class="built_in">string</span> strLine = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//表头</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; dataGridView.ColumnCount; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (i &gt; <span class="number">0</span>)</span><br><span class="line">                    strLine += <span class="string">&quot;,&quot;</span>;</span><br><span class="line">                strLine += dataGridView.Columns[i].HeaderText;</span><br><span class="line">            &#125;</span><br><span class="line">            strLine.Remove(strLine.Length - <span class="number">1</span>);</span><br><span class="line">            sw.WriteLine(strLine);</span><br><span class="line">            strLine = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="comment">//表的内容</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; dataGridView.Rows.Count; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                strLine = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                <span class="built_in">int</span> colCount = dataGridView.Columns.Count;</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> k = <span class="number">0</span>; k &lt; colCount; k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (k &gt; <span class="number">0</span> &amp;&amp; k &lt; colCount)</span><br><span class="line">                        strLine += <span class="string">&quot;,&quot;</span>;</span><br><span class="line">                    <span class="keyword">if</span> (dataGridView.Rows[j].Cells[k].Value == <span class="literal">null</span>)</span><br><span class="line">                        strLine += <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">string</span> cell = dataGridView.Rows[j].Cells[k].Value.ToString().Trim();</span><br><span class="line">                        <span class="comment">//防止里面含有特殊符号</span></span><br><span class="line">                        cell = cell.Replace(<span class="string">&quot;\&quot;&quot;</span>, <span class="string">&quot;\&quot;\&quot;&quot;</span>);</span><br><span class="line">                         <span class="comment">//cell = &quot;\&quot;&quot; + cell + &quot;\&quot;&quot;; //每个元素值用引号包括</span></span><br><span class="line">                        strLine += cell;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                sw.WriteLine(strLine);</span><br><span class="line">            &#125;</span><br><span class="line">            sw.Close();</span><br><span class="line">            stream.Close();</span><br><span class="line">            MessageBox.Show(<span class="string">&quot;数据被导出到：&quot;</span> + saveFileDialog.FileName.ToString(), <span class="string">&quot;导出完毕&quot;</span>, MessageBoxButtons.OK, MessageBoxIcon.Information);</span><br><span class="line">        &#125;</span><br><span class="line">        catch (Exception ex)</span><br><span class="line">        &#123;</span><br><span class="line">            MessageBox.Show(ex.Message, <span class="string">&quot;导出错误&quot;</span>, MessageBoxButtons.OK, MessageBoxIcon.Information);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二、保存到Excel"><a href="#二、保存到Excel" class="headerlink" title="二、保存到Excel"></a>二、保存到Excel</h1><h2 id="安装-Office-x2F-SharePoint-开发"><a href="#安装-Office-x2F-SharePoint-开发" class="headerlink" title="安装 Office&#x2F;SharePoint 开发"></a>安装 Office&#x2F;SharePoint 开发</h2><p><strong>正常调用的话会出现 没有 Microsoft.Office.XXX 错误</strong></p><blockquote><p>1、前言</p></blockquote><p>今天在写 C# 实验的时候遇到了</p><ul><li><p>命名空间“Microsoft”中不存在类型或命名空间名“Office”(是否缺少程序集引用?)</p></li><li><p>“Microsoft.Office.Interop”中不存在类型或命名空间名“Word”(是否缺少程序集引用?)<br>等等问题，关于 Office 的引用的，起初我查找网上的各种方法，发现都没有用，包括手动选择导入电脑中的 dll 和安装 NuGet 程序包，结果都是 “warning MSB3245: 未能解析此引用”</p></li></ul><p>后来在偶然中发现在 Visual Studio Installer 中安装 Office&#x2F;SharePoint 开发 可以解决这个问题。</p><blockquote><p>2、解决方案</p></blockquote><p>打开 Visual Studio 2019，选择 <strong>工具-&gt;获取工具和功能</strong>。</p><img src="https://img-blog.csdnimg.cn/8956a3d5d99245d3b592efb67a5af051.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAU3Vhc3nlsI_mmJM=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><p>弹出如下界面，勾选 <strong>Office&#x2F;SharePoint 开发 并点击修改</strong>。</p><img src="https://img-blog.csdnimg.cn/2404d73cf4e34a5686f8ba332d2bc207.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAU3Vhc3nlsI_mmJM=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><p>等待安装完成，然后重启 VS2019，就可以在引用管理器里看到 Microsoft.Office.XXX 等包了，并且编译也不会出现其他版本问题了。</p><img src="https://img-blog.csdnimg.cn/c1dfaa53c5014dd99d037710c29cce50.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAU3Vhc3nlsI_mmJM=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><blockquote><p><strong>Kill(xlApp);</strong> 这个没有实现</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">dataGridViewToExcel</span>(<span class="params">DataGridView dataGridView</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dataGridView.Rows.Count == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        MessageBox.Show(<span class="string">&quot;没有数据可导出!&quot;</span>, <span class="string">&quot;提示&quot;</span>, MessageBoxButtons.OK, MessageBoxIcon.Information);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">string</span> fileName = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="built_in">string</span> saveFileName = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    SaveFileDialog saveDialog = <span class="keyword">new</span> SaveFileDialog();</span><br><span class="line">    saveDialog.DefaultExt = <span class="string">&quot;xlsx&quot;</span>;</span><br><span class="line">    saveDialog.Filter = <span class="string">&quot;Excel文件|*.xlsx&quot;</span>;</span><br><span class="line">    saveDialog.FileName = fileName;</span><br><span class="line">    saveDialog.ShowDialog();</span><br><span class="line">    saveFileName = saveDialog.FileName;</span><br><span class="line">    <span class="keyword">if</span> (saveFileName.IndexOf(<span class="string">&quot;:&quot;</span>) &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//被点了取消</span></span><br><span class="line">    Microsoft.Office.Interop.Excel.Application xlApp = <span class="keyword">new</span> Microsoft.Office.Interop.Excel.Application();</span><br><span class="line">    <span class="keyword">if</span> (xlApp == <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        MessageBox.Show(<span class="string">&quot;无法创建Excel对象，您的电脑可能未安装Excel&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Microsoft.Office.Interop.Excel.Workbooks workbooks = xlApp.Workbooks;</span><br><span class="line">    Microsoft.Office.Interop.Excel.Workbook workbook =</span><br><span class="line">                workbooks.Add(Microsoft.Office.Interop.Excel.XlWBATemplate.xlWBATWorksheet);</span><br><span class="line">    Microsoft.Office.Interop.Excel.Worksheet worksheet =</span><br><span class="line">                (Microsoft.Office.Interop.Excel.Worksheet)workbook.Worksheets[<span class="number">1</span>];<span class="comment">//取得sheet1 </span></span><br><span class="line">                                                                                 <span class="comment">//写入标题             </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; dataGridView.ColumnCount; i++)</span><br><span class="line">    &#123; worksheet.Cells[<span class="number">1</span>, i + <span class="number">1</span>] = dataGridView.Columns[i].HeaderText; &#125;</span><br><span class="line">    <span class="comment">//写入数值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> r = <span class="number">0</span>; r &lt; dataGridView.Rows.Count; r++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; dataGridView.ColumnCount; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            worksheet.Cells[r + <span class="number">2</span>, i + <span class="number">1</span>] = dataGridView.Rows[r].Cells[i].Value;</span><br><span class="line">        &#125;</span><br><span class="line">        System.Windows.Forms.Application.DoEvents();</span><br><span class="line">    &#125;</span><br><span class="line">    worksheet.Columns.EntireColumn.AutoFit();<span class="comment">//列宽自适应</span></span><br><span class="line">    MessageBox.Show(fileName + <span class="string">&quot;资料保存成功&quot;</span>, <span class="string">&quot;提示&quot;</span>, MessageBoxButtons.OK);</span><br><span class="line">    <span class="keyword">if</span> (saveFileName != <span class="string">&quot;&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            workbook.Saved = <span class="literal">true</span>;</span><br><span class="line">            workbook.SaveCopyAs(saveFileName);  <span class="comment">//fileSaved = true;                 </span></span><br><span class="line">        &#125;</span><br><span class="line">        catch (Exception ex)</span><br><span class="line">        &#123;<span class="comment">//fileSaved = false;                      </span></span><br><span class="line">            MessageBox.Show(<span class="string">&quot;导出文件时出错,文件可能正被打开！\n&quot;</span> + ex.Message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    xlApp.Quit();</span><br><span class="line">    Kill(xlApp);</span><br><span class="line">    GC.Collect();<span class="comment">//强行销毁      </span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="相关链接（侵删）"><a href="#相关链接（侵删）" class="headerlink" title="相关链接（侵删）"></a>相关链接（侵删）</h1><ol><li><a href="https://www.jb51.net/article/246272.htm">C#将DataGridView中的数据保存到CSV和Excel中</a></li><li><a href="https://blog.csdn.net/qq_35353673/article/details/120468554">【C#】VS2019 添加引用中没有 Microsoft.Office.XXX 的解决办法</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">C#将表格数据DataGridView导出为CSV或者Excel，而Excel需要下载安装扩展功能 Office/SharePoint 开发</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="C#" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/C/"/>
    
    <category term="前端" scheme="https://zml3589110.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="文件管理" scheme="https://zml3589110.github.io/categories/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/"/>
    
    <category term="CSV" scheme="https://zml3589110.github.io/categories/CSV/"/>
    
    
    <category term="C#" scheme="https://zml3589110.github.io/tags/C/"/>
    
    <category term="文件管理" scheme="https://zml3589110.github.io/tags/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/"/>
    
    <category term="DataGridView" scheme="https://zml3589110.github.io/tags/DataGridView/"/>
    
    <category term="CSV" scheme="https://zml3589110.github.io/tags/CSV/"/>
    
    <category term="Excel" scheme="https://zml3589110.github.io/tags/Excel/"/>
    
  </entry>
  
  <entry>
    <title>STM32F103的RTC实时时钟功能</title>
    <link href="https://zml3589110.github.io/posts/2076787782.html"/>
    <id>https://zml3589110.github.io/posts/2076787782.html</id>
    <published>2023-01-13T08:42:20.000Z</published>
    <updated>2023-01-13T08:58:05.049Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、STM32F1-RTC介绍"><a href="#一、STM32F1-RTC介绍" class="headerlink" title="一、STM32F1 RTC介绍"></a>一、STM32F1 RTC介绍</h1><h2 id="1-1-RTC简介"><a href="#1-1-RTC简介" class="headerlink" title="1.1 RTC简介"></a>1.1 RTC简介</h2><p>　　STM32 的实时时钟（ RTC）是一个独立的定时器。 STM32 的 RTC 模 块拥有一组连续计数的计数器，在相应软件配置下，可提供时钟日历的 功能。修改计数器的值可以重新设置系统当前的时间和日期。 <strong>RTC模块和时钟配置是在后备区域，无论器件状态如何（运行模式、 低功耗模式或处于复位状态），只要保证后备区域供电正常，RTC便不会 停止工作，</strong>所以通常会在后备区域供电端加一个纽扣电池，即使主电源 停止供电，后备电源也会启动供电，从而保证RTC时钟不停的运行，只有 当主电源和后备纽扣电池都没有电的时，RTC才停止工作。 从 RTC 的定时器特性来说，它是一个 32 位的计数器，只能向上计 数。它的时钟来源有三种，分别为高速外部时钟的 128 分频（ HSE&#x2F;128 ）、 低速内部时钟 LSI 以及低速外部时钟 LSE。</p><h2 id="1-2电源"><a href="#1-2电源" class="headerlink" title="1.2电源"></a>1.2电源</h2><img src="https://img2020.cnblogs.com/blog/1959382/202004/1959382-20200416135606620-1020547463.png"><p>电池备份区域</p><p><strong>使用电池或其他电源连接到VBAT脚上，当VDD断电时，可以保存备份寄存器的内容和维持RTC的</strong></p><p><strong>功能。</strong></p><p>VBAT脚也为RTC、LSE振荡器和PC13至PC15供电，这保证当主要电源被切断时RTC能继续工作。切换到VBAT供电由复位模块中的掉电复位功能控制。</p><p>如果应用中没有使用外部电池，VBAT必须连接到VDD引脚上。</p><h2 id="1-3备份寄存器-BKP-简介"><a href="#1-3备份寄存器-BKP-简介" class="headerlink" title="1.3备份寄存器(BKP)简介"></a>1.3备份寄存器(BKP)简介</h2><p>　　备份寄存器是42个16位的寄存器，可用来存储84个字节的用户应用程序数据。他们处在备份域里，当VDD电源被切断，他们仍然由VBAT维持供电。当系统在待机模式下被唤醒，或系统复位或电源复位时，他们也不会被复位。</p><p>此外，BKP控制寄存器用来管理侵入检测和RTC校准功能。</p><p>复位后，对备份寄存器和RTC的访问被禁止，并且备份域被保护以防止可能存在的意外的写操作。<strong>执行以下操作可以使能对备份寄存器和RTC的访问。</strong></p><p>　　● 通过设置寄存器RCC_APB1ENR的PWREN和BKPEN位来打开电源和后备接口的时钟</p><p>　　● 电源控制寄存器(PWR_CR)的DBP位来使能对后备寄存器和RTC的访问。</p><h2 id="1-4实时时钟-RTC"><a href="#1-4实时时钟-RTC" class="headerlink" title="1.4实时时钟(RTC)"></a>1.4实时时钟(RTC)</h2><p>RTC简介</p><p>　　实时时钟是一个独立的定时器。RTC模块拥有一组连续计数的计数器，在相应软件配置下，可提供时钟日历的功能。修改计数器的值可以重新设置系统当前的时间和日期。</p><p>　　RTC模块和时钟配置系统(RCC_BDCR寄存器)处于后备区域，即在系统复位或从待机模式唤醒后，RTC的设置和时间维持不变。</p><p>　　系统复位后，对后备寄存器和RTC的访问被禁止，这是为了防止对后备区域(BKP)的意外写操作。<strong>执行以下操作将使能对后备寄存器和RTC的访问：（BKP中也提到过）</strong></p><p>　　● 设置寄存器RCC_APB1ENR的PWREN和BKPEN位，使能电源和后备接口时钟</p><p>　　● 设置寄存器PWR_CR的DBP位，使能对后备寄存器和RTC的访问。 </p><h1 id="二、功能描述"><a href="#二、功能描述" class="headerlink" title="二、功能描述"></a>二、功能描述</h1><h2 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h2><p>　　RTC由两个主要部分组成(参见下图)。第一部分(APB1接口)用来和APB1总线相连。此单元还包含一组16位寄存器，可通过APB1总线对其进行读写操作(参见16.4节)。APB1接口由APB1总线时钟驱动，用来与APB1总线接口。</p><p>　　另一部分(RTC核心)由一组可编程计数器组成，分成两个主要模块。</p><p>　　<strong>第一个模块是RTC的预分频模块</strong>，它可编程产生最长为1秒的RTC时间基准TR_CLK。RTC的预分频模块包含了一个20位的可编程分频器(RTC预分频器)。如果在RTC_CR寄存器中设置了相应的允许位，则在每个实时时钟(RTC)TR_CLK周期中RTC产生一个中断(秒中断)。</p><p>　　<strong>第二个模块是一个32位的可编程计数器，</strong>可被初始化为当前的系统时间。系统时间按TR_CLK周期累加并与存储在RTC_ALR寄存器中的可编程时间相比较，如果RTC_CR控制寄存器中设置了相应允许位，比较匹配时将产生一个闹钟中断。</p><img src="https://img2020.cnblogs.com/blog/1959382/202004/1959382-20200416140350814-611247352.png"><h2 id="2、复位过程"><a href="#2、复位过程" class="headerlink" title="2、复位过程"></a>2、复位过程</h2><p>　　除了RTC_PRL、RTC_ALR、RTC_CNT和RTC_DIV寄存器外，所有的系统寄存器都由系统复位或电源复位进行异步复位。</p><p>　　RTC_PRL、RTC_ALR、RTC_CNT和RTC_DIV寄存器仅能通过备份域复位信号复位。</p><h2 id="3、读RTC寄存器"><a href="#3、读RTC寄存器" class="headerlink" title="3、读RTC寄存器"></a>3、读RTC寄存器</h2><p>RTC核完全独立于RTC APB1接口。</p><p>软件通过APB1接口访问RTC的预分频值、计数器值和闹钟值。但是，<strong>相关的可读寄存器只在与RTC与 APB1时钟进行重新同步的RTC时钟的上升沿被更新</strong>。<strong>RTC标志也是如此的</strong>。这意味着，如果APB1接口曾经被关闭，而读操作又是在刚刚重新开启APB1之后，则在第一次的内部寄存器更新之前，从APB1上读出的RTC寄存器数值可能被破坏了(通常读到0)。下述几种情况下能够发生这种情形：</p><p>● 发生系统复位或电源复位</p><p>● 系统刚从待机模式唤醒(参见第4.3节：低功耗模式)。</p><p>● 系统刚从停机模式唤醒(参见第4.3节：低功耗模式)。</p><p>所有以上情况中，APB1接口被禁止时(复位、无时钟或断电)RTC核仍保持运行状态。</p><p><strong>因此，若在读取RTC寄存器时，RTC的APB1接口曾经处于禁止状态，则软件首先必须等待RTC_CRL寄存器中的RSF位(寄存器同步标志)被硬件置’1’。</strong></p><p>注：RTC的 APB1接口不受WFI和WFE等低功耗模式的影响。</p><h2 id="4、写RTC寄存器"><a href="#4、写RTC寄存器" class="headerlink" title="4、写RTC寄存器"></a>4、写RTC寄存器</h2><p>必须设置RTC_CRL寄存器中的CNF位，使RTC进入配置模式后，才能写入RTC_PRL、RTC_CNT、RTC_ALR寄存器。</p><p>另外，对RTC任何寄存器的写操作，都必须在前一次写操作结束后进行。可以通过查询RTC_CR寄存器中的RTOFF状态位，判断RTC寄存器是否处于更新中。仅当RTOFF状态位是1时，才可以写入RTC寄存器。</p><h1 id="三、STM32F1-RTC配置步骤"><a href="#三、STM32F1-RTC配置步骤" class="headerlink" title="三、STM32F1 RTC配置步骤"></a>三、STM32F1 RTC配置步骤</h1><ul><li>使能PWR和BKP时钟。调用函数：RCC_APB1PeriphClockCmd()；</li><li>使能后备寄存器访问。调用函数：PWR_BackupAccessCmd()；</li><li>配置RTC时钟源，使能RTC时钟。调用函数：RCC_RTCCLKConfig()；RCC_RTCCLKCmd()；</li><li>如果使用LSE，要打开LSE：RCC_LSEConfig(RCC_LSE_ON)；</li><li>设置RTC预分频系数。调用函数：RTC_SetPrescaler()；</li><li>设置时间。调用函数：RTC_SetCounter()；</li><li>开启相关中断（如果需要）。调用函数：RTC_ITConfig()；</li><li>编写中断服务函数。调用函数：RTC_IRQHandler()；</li><li><strong>部分操作要等待写操作完成和同步。调用函数：RTC_WaitForLastTask()；RTC_WaitForSynchro()；</strong></li></ul><h1 id="四、程序举例"><a href="#四、程序举例" class="headerlink" title="四、程序举例"></a>四、程序举例</h1><p>编写RTC控制程序 本章所要实现的功能是：设置RTC时间日期初值，在RTC秒中断内使用 串口打印出RTC日期和时间，D1指示灯闪烁提示系统运行。</p><p>程序框架如下 ：</p><p>（1）初始化RTC，设置RTC时间日期初值 （2）开启RTC的秒中断，编写RTC中断函数, （3）在RTC中断内更新时间并打印输出 （4）编写主函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="meta">#<span class="meta-keyword">ifndef</span> _rtc_H</span></span><br><span class="line"> <span class="number">2</span> <span class="meta">#<span class="meta-keyword">define</span> _rtc_H</span></span><br><span class="line"> <span class="number">3</span> </span><br><span class="line"> <span class="number">4</span> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;system.h&quot;</span></span></span><br><span class="line"> <span class="number">5</span> </span><br><span class="line"> <span class="number">6</span> </span><br><span class="line"> <span class="number">7</span> <span class="function">u8 <span class="title">RTCx_Init</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"> <span class="number">8</span> <span class="function"><span class="keyword">void</span> <span class="title">RTC_GET</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"> <span class="number">9</span> </span><br><span class="line"><span class="number">10</span> <span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">11 &#123;</span></span><br><span class="line"><span class="number">12</span>     u8 hour;</span><br><span class="line"><span class="number">13</span>     u8 min;</span><br><span class="line"><span class="number">14</span>     u8 sec;</span><br><span class="line"><span class="number">15</span> &#125;_calender;</span><br><span class="line"><span class="number">16</span> </span><br><span class="line"><span class="number">17</span> <span class="keyword">extern</span> _calender  calender;</span><br><span class="line"><span class="number">18</span> </span><br><span class="line"><span class="number">19</span> </span><br><span class="line"><span class="number">20</span> </span><br><span class="line"><span class="number">21</span> <span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p><strong>分析RTC_Init()函数：RTC初始化函数。</strong></p><p>　　初始化时按照之前的RTC一般步骤进行配置，这里需要注意的是，为了区分是否是第一次执行RTC_Init()函数，必须判断后配寄存器中是否写如果某个值（向BKP_DR1寄存器写入0xA0A0，写入其他的数字也可以）如果写入不用再初始化。</p><p><strong>为什么要区分是否执行过RTC_Init？</strong></p><p>　　如果由于 断电&#x2F; 复位&#x2F;唤醒等待 等因素，程序中断但RTC时钟以及后备寄存器区域还在执行；等恢复供电重新启动程序时，这不能再对RTC时钟进行初始化，否则一直初始化，那么RTC作为时钟就没什么实际作用。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">if</span> (BKP_ReadBackupRegister(BKP_DR1) != <span class="number">0xA0A0</span><span class="comment">//（从指定的后备寄存器中读出数据）判断是否初始化过</span></span><br><span class="line"><span class="number">2</span> &#123;                 </span><br><span class="line"><span class="number">3</span>         　　<span class="comment">//第一次进行初始化（RTC_Init）</span></span><br><span class="line"><span class="number">4</span> 　　BKP_WriteBackupRegister(BKP_DR1, <span class="number">0XA0A0</span>);    <span class="comment">//向指定的后备寄存器中写入用户程序数据</span></span><br><span class="line"><span class="number">5</span> &#125;</span><br><span class="line"><span class="number">6</span> <span class="keyword">else</span><span class="comment">//（已经初始化过）系统继续计时</span></span><br><span class="line"><span class="number">7</span> &#123;</span><br><span class="line"><span class="number">8</span>    <span class="comment">//不是第一次进行初始化（RTC_Init）</span></span><br><span class="line"><span class="number">9</span> &#125;</span><br></pre></td></tr></table></figure><p><strong>代码44：使用外部低速晶振（LSE）时需要检查指定的RCC相应的标志位是否设置，等待低速晶振就绪。</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;rtc.h&quot;</span></span></span><br><span class="line"> <span class="number">2</span> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;systick.h&quot;</span></span></span><br><span class="line"> <span class="number">3</span> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ustrt.h&quot;</span></span></span><br><span class="line"> <span class="number">4</span> </span><br><span class="line"> <span class="number">5</span> </span><br><span class="line"> <span class="number">6</span> _calender  calender;</span><br><span class="line"> <span class="number">7</span> </span><br><span class="line"> <span class="number">8</span> </span><br><span class="line"> <span class="number">9</span> <span class="function"><span class="keyword">void</span> <span class="title">RTC_NVIC_Config</span><span class="params">()</span> <span class="comment">//设置RTC中断优先级</span></span></span><br><span class="line"><span class="function">10 </span>&#123;</span><br><span class="line"><span class="number">11</span>     NVIC_InitTypeDef    NVIC_InitStruct;</span><br><span class="line"><span class="number">12</span>     </span><br><span class="line"><span class="number">13</span>     NVIC_InitStruct.NVIC_IRQChannel=RTC_IRQn;</span><br><span class="line"><span class="number">14</span>     NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority=<span class="number">2</span>;</span><br><span class="line"><span class="number">15</span>     NVIC_InitStruct.NVIC_IRQChannelSubPriority=<span class="number">3</span>;</span><br><span class="line"><span class="number">16</span>     NVIC_InitStruct.NVIC_IRQChannelCmd=ENABLE ;</span><br><span class="line"><span class="number">17</span>     NVIC_Init(&amp;NVIC_InitStruct);</span><br><span class="line"><span class="number">18</span>     </span><br><span class="line"><span class="number">19</span> &#125;    </span><br><span class="line"><span class="number">20</span> </span><br><span class="line"><span class="number">21</span> <span class="function"><span class="keyword">void</span> <span class="title">RTC_GET</span><span class="params">()</span> <span class="comment">//获取 RTC 计数器的值并进行处理</span></span></span><br><span class="line"><span class="function">22 </span>&#123;</span><br><span class="line"><span class="number">23</span>     u32 timedata;</span><br><span class="line"><span class="number">24</span>     timedata=RTC_GetCounter();</span><br><span class="line"><span class="number">25</span>     calender.hour=timedata/<span class="number">3600</span>;</span><br><span class="line"><span class="number">26</span>     calender.min=timedata%<span class="number">3600</span>/<span class="number">60</span>;</span><br><span class="line"><span class="number">27</span>     calender.sec=timedata%<span class="number">3600</span>%<span class="number">60</span>;</span><br><span class="line"><span class="number">28</span> &#125;</span><br><span class="line"><span class="number">29</span> </span><br><span class="line"><span class="number">30</span> <span class="comment">//返回0：初始化失败</span></span><br><span class="line"><span class="number">31</span> <span class="comment">//返回1：初始化成功</span></span><br><span class="line"><span class="number">32</span> <span class="function">u8 <span class="title">RTCx_Init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">33 </span>&#123;</span><br><span class="line"><span class="number">34</span>     u8 time;</span><br><span class="line"><span class="number">35</span>     RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR, ENABLE);</span><br><span class="line"><span class="number">36</span>     RCC_APB1PeriphClockCmd(RCC_APB1Periph_BKP, ENABLE);</span><br><span class="line"><span class="number">37</span>     PWR_BackupAccessCmd(ENABLE);</span><br><span class="line"><span class="number">38</span>     </span><br><span class="line"><span class="number">39</span>     </span><br><span class="line"><span class="number">40</span>     <span class="keyword">if</span>(BKP_ReadBackupRegister(BKP_DR1)!=<span class="number">0xA0a0</span>) <span class="comment">//从指定的后备寄存器读数据）检查是不是第一次配置时钟</span></span><br><span class="line"><span class="number">41</span>     &#123;                       </span><br><span class="line"><span class="number">42</span>         BKP_DeInit();    <span class="comment">//将后备寄存器初始化</span></span><br><span class="line"><span class="number">43</span>         RCC_LSEConfig(RCC_LSE_ON);     <span class="comment">//将RCC_LSE时钟开启</span></span><br><span class="line"><span class="number">44</span>         <span class="keyword">while</span>(RCC_GetFlagStatus(RCC_FLAG_LSERDY)==RESET &amp;&amp; time&lt;<span class="number">250</span>) <span class="comment">//检测LSE时钟是否开启</span></span><br><span class="line"><span class="number">45</span>         &#123;</span><br><span class="line"><span class="number">46</span>             time++;</span><br><span class="line"><span class="number">47</span>             delay_ms(<span class="number">10</span>);</span><br><span class="line"><span class="number">48</span>         &#125;</span><br><span class="line"><span class="number">49</span>         <span class="keyword">if</span>(time&gt;=<span class="number">250</span>)</span><br><span class="line"><span class="number">50</span>         &#123;</span><br><span class="line"><span class="number">51</span>             <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="number">52</span>         &#125;</span><br><span class="line"><span class="number">53</span>         RCC_RTCCLKConfig(RCC_RTCCLKSource_LSE);     <span class="comment">//配置RTC的时钟为LSE</span></span><br><span class="line"><span class="number">54</span>         RCC_RTCCLKCmd(ENABLE);    <span class="comment">//RTC时钟输入开启</span></span><br><span class="line"><span class="number">55</span>         RTC_WaitForLastTask();    <span class="comment">//等待直到RTC寄存器上的上一次写操作完成。</span></span><br><span class="line"><span class="number">56</span>         RTC_WaitForSynchro();    <span class="comment">//等待，直到RTC寄存器(RTC_CNT、RTC_ALR和RTC_PRL)与RTC APB时钟同步。</span></span><br><span class="line"><span class="number">57</span>         RTC_ITConfig(RTC_IT_SEC, ENABLE);</span><br><span class="line"><span class="number">58</span>         RTC_WaitForLastTask();  <span class="comment">//等待直到RTC寄存器上的上一次写操作完成。</span></span><br><span class="line"><span class="number">59</span>         RTC_EnterConfigMode();    <span class="comment">// 允许配置</span></span><br><span class="line"><span class="number">60</span>         RTC_SetPrescaler(<span class="number">32767</span>); <span class="comment">//设置 RTC 预分频的值</span></span><br><span class="line"><span class="number">61</span>         RTC_WaitForLastTask();   <span class="comment">//等待直到RTC寄存器上的上一次写操作完成。</span></span><br><span class="line"><span class="number">62</span>         RTC_SetCounter(<span class="number">0x1111</span>);     <span class="comment">//设置 RTC 计数器的值 初始化时间17：34：55</span></span><br><span class="line"><span class="number">63</span>         RTC_ExitConfigMode();    <span class="comment">//退出 RTC 配置模式</span></span><br><span class="line"><span class="number">64</span>         BKP_WriteBackupRegister(BKP_DR1,<span class="number">0xA0a0</span>);    <span class="comment">//向指定的后备寄存器中写入用户程序数据</span></span><br><span class="line"><span class="number">65</span>         </span><br><span class="line"><span class="number">66</span>     &#125;</span><br><span class="line"><span class="number">67</span>     <span class="keyword">else</span> <span class="comment">//（系统之前已经进行过相应初始化）系统继续计时</span></span><br><span class="line"><span class="number">68</span>     &#123;</span><br><span class="line"><span class="number">69</span>         RTC_WaitForLastTask();    <span class="comment">//等待直到RTC寄存器上的上一次写操作完成。</span></span><br><span class="line"><span class="number">70</span>         RTC_WaitForSynchro();    <span class="comment">//等待，直到RTC寄存器(RTC_CNT、RTC_ALR和RTC_PRL)与RTC APB时钟同步。</span></span><br><span class="line"><span class="number">71</span>         RTC_ITConfig(RTC_IT_SEC, ENABLE);    <span class="comment">//使能或者失能指定的 RTC 中断</span></span><br><span class="line"><span class="number">72</span>     &#125;</span><br><span class="line"><span class="number">73</span>     </span><br><span class="line"><span class="number">74</span>     RTC_NVIC_Config(); <span class="comment">//RCT中断优先级别设置    </span></span><br><span class="line"><span class="number">75</span>     RTC_GET(); <span class="comment">//获取 RTC 计数器的值</span></span><br><span class="line"><span class="number">76</span>     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="number">77</span> &#125;</span><br><span class="line"><span class="number">78</span> </span><br><span class="line"><span class="number">79</span> <span class="function"><span class="keyword">void</span> <span class="title">RTC_IRQHandler</span><span class="params">(<span class="keyword">void</span>)</span> <span class="comment">//RTC中断函数</span></span></span><br><span class="line"><span class="function">80 </span>&#123;</span><br><span class="line"><span class="number">81</span>     <span class="keyword">if</span>(RTC_GetITStatus(RTC_IT_SEC)!=<span class="number">0</span>) <span class="comment">//检查指定的 RTC 中断发生与否（秒中断）</span></span><br><span class="line"><span class="number">82</span>     &#123;</span><br><span class="line"><span class="number">83</span>         RTC_GET();</span><br><span class="line"><span class="number">84</span>         <span class="built_in">printf</span>(<span class="string">&quot;RTC_Time:%d:%d:%d\r\n&quot;</span>,calender.hour,calender.min,calender.sec);</span><br><span class="line"><span class="number">85</span>     &#125;</span><br><span class="line"><span class="number">86</span>     RTC_ClearITPendingBit(RTC_IT_SEC); <span class="comment">//清除 RTC 的中断待处理位</span></span><br><span class="line"><span class="number">87</span> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;system.h&quot;</span></span></span><br><span class="line"> <span class="number">2</span> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;led.h&quot;</span></span></span><br><span class="line"> <span class="number">3</span> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;systick.h&quot;</span></span></span><br><span class="line"> <span class="number">4</span> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ustrt.h&quot;</span></span></span><br><span class="line"> <span class="number">5</span> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;rtc.h&quot;</span></span></span><br><span class="line"> <span class="number">6</span> </span><br><span class="line"> <span class="number">7</span> <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> 8 </span>&#123;</span><br><span class="line"> <span class="number">9</span>     u8 i=<span class="number">0</span>;</span><br><span class="line"><span class="number">10</span> </span><br><span class="line"><span class="number">11</span>     </span><br><span class="line"><span class="number">12</span>     SysTick_Init(<span class="number">72</span>);</span><br><span class="line"><span class="number">13</span>     NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);</span><br><span class="line"><span class="number">14</span>     LED_Init();</span><br><span class="line"><span class="number">15</span>     ustrt_Init(<span class="number">9600</span>);</span><br><span class="line"><span class="number">16</span>     RTCx_Init();</span><br><span class="line"><span class="number">17</span>     </span><br><span class="line"><span class="number">18</span>     <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line"><span class="number">19</span>     &#123;</span><br><span class="line"><span class="number">20</span>     </span><br><span class="line"><span class="number">21</span>         i++;</span><br><span class="line"><span class="number">22</span>         <span class="keyword">if</span>(i%<span class="number">20</span>==<span class="number">0</span>)</span><br><span class="line"><span class="number">23</span>         &#123;</span><br><span class="line"><span class="number">24</span>             led1=!led1;</span><br><span class="line"><span class="number">25</span>         &#125;</span><br><span class="line"><span class="number">26</span>         delay_ms(<span class="number">10</span>);    </span><br><span class="line"><span class="number">27</span>     &#125;</span><br><span class="line"><span class="number">28</span> &#125;</span><br></pre></td></tr></table></figure><h1 id="配置RCT基本步骤（参考二）-添加了程序但没接42khz晶振，因此在初始化阶段不通过"><a href="#配置RCT基本步骤（参考二）-添加了程序但没接42khz晶振，因此在初始化阶段不通过" class="headerlink" title="配置RCT基本步骤（参考二）-添加了程序但没接42khz晶振，因此在初始化阶段不通过"></a>配置RCT基本步骤（参考二）-添加了程序但没接42khz晶振，因此在初始化阶段不通过</h1><ol><li>使能PWR和BKP外设时钟</li><li>使能后备寄存器访问  </li><li>判断从指定的后备寄存器中读出数据：<br>如果读出数据与写入的数据相同，说明已经配置过了不需要重新配置，只要等待最近一次对RTC寄存器的写操作完成和使能RTC秒中断即可，如果读出数据与写入数据不相同，则需要重新配置。修改写入时间时一定要记得把两个0x5051修改成其他任意十六位数据。这样才可以重新修改写入时间。</li><li>复位备份区域     </li><li>设置外部低速晶振(LSE),使用外设低速晶振</li><li>检查指定的RCC标志位设置与否,等待低速晶振就绪，这一步尤为重要，<br>如果晶振出现问题整个系统是不会正常运行的。如果是硬件问题不容查出来。</li><li>设置RTC时钟(RTCCLK),选择LSE作为RTC时钟</li><li>使能RTC时钟 </li><li>等待最近一次对RTC寄存器的写操作完成</li><li>等待RTC寄存器同步<br>（注意9、10两步很重要，每次操作RTC寄存器时都要重复一次9、10两步）</li><li>使能RTC秒中断</li><li>等待最近一次对RTC寄存器的写操作完成</li><li>允许配置</li><li>设置RTC预分频的值：<br>计算方式32768&#x2F;(32767+1) &#x3D; 1Hz 周期刚好是1秒。</li><li>等待最近一次对RTC寄存器的写操作完成</li><li>设置时间</li><li>退出配置模式，防止误操作</li><li>向指定的后备寄存器中写入用户程序数据</li><li>RCT中断分组设置</li><li>更新时间</li></ol><h2 id="配置代码参考"><a href="#配置代码参考" class="headerlink" title="配置代码参考"></a>配置代码参考</h2><p><strong>RTC.c文件</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/************************************RTC.c文件***************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;sys.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;usart.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;rtc.h&quot;</span> </span></span><br><span class="line">   </span><br><span class="line">_calendar_obj calendar;<span class="comment">//时钟结构体 </span></span><br><span class="line"> </span><br><span class="line">u32 timecount=<span class="number">0</span>;  </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">RTC_NVIC_Config</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  NVIC_InitTypeDef NVIC_InitStructure;</span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannel = RTC_IRQn;<span class="comment">//RTC全局中断</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = <span class="number">0</span>;<span class="comment">//先占优先级1位,从优先级3位</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">0</span>;<span class="comment">//先占优先级0位,从优先级4位</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;<span class="comment">//使能该通道中断</span></span><br><span class="line">NVIC_Init(&amp;NVIC_InitStructure);<span class="comment">//根据NVIC_InitStruct中指定的参数初始化外设NVIC寄存器</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//实时时钟配置</span></span><br><span class="line"><span class="comment">//初始化RTC时钟,同时检测时钟是否工作正常</span></span><br><span class="line"><span class="comment">//BKP-&gt;DR1用于保存是否第一次配置的设置</span></span><br><span class="line"><span class="comment">//返回0:正常</span></span><br><span class="line"><span class="comment">//其他:错误代码</span></span><br><span class="line"><span class="function">u8 <span class="title">RTC_Init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//检查是不是第一次配置时钟</span></span><br><span class="line">u8 temp=<span class="number">0</span>;</span><br><span class="line">RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR | RCC_APB1Periph_BKP, ENABLE);<span class="comment">//使能PWR和BKP外设时钟   </span></span><br><span class="line">PWR_BackupAccessCmd(ENABLE);<span class="comment">//使能后备寄存器访问  </span></span><br><span class="line"><span class="keyword">if</span> (BKP_ReadBackupRegister(BKP_DR1) != <span class="number">0x5051</span>)<span class="comment">//从指定的后备寄存器中读出数据:读出了与写入的指定数据不相乎</span></span><br><span class="line">&#123; </span><br><span class="line">BKP_DeInit();<span class="comment">//复位备份区域 </span></span><br><span class="line">RCC_LSEConfig(RCC_LSE_ON);<span class="comment">//设置外部低速晶振(LSE),使用外设低速晶振</span></span><br><span class="line"><span class="keyword">while</span> (RCC_GetFlagStatus(RCC_FLAG_LSERDY) == RESET&amp;&amp;temp&lt;<span class="number">250</span>)<span class="comment">//检查指定的RCC标志位设置与否,等待低速晶振就绪</span></span><br><span class="line">&#123;</span><br><span class="line">temp++;</span><br><span class="line">delay_ms(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(temp&gt;=<span class="number">250</span>)<span class="keyword">return</span> <span class="number">1</span>;<span class="comment">//初始化时钟失败,晶振有问题    </span></span><br><span class="line">RCC_RTCCLKConfig(RCC_RTCCLKSource_LSE);<span class="comment">//设置RTC时钟(RTCCLK),选择LSE作为RTC时钟    </span></span><br><span class="line">RCC_RTCCLKCmd(ENABLE);<span class="comment">//使能RTC时钟  </span></span><br><span class="line">RTC_WaitForLastTask();<span class="comment">//等待最近一次对RTC寄存器的写操作完成</span></span><br><span class="line">RTC_WaitForSynchro();<span class="comment">//等待RTC寄存器同步  </span></span><br><span class="line">RTC_ITConfig(RTC_IT_SEC, ENABLE);<span class="comment">//使能RTC秒中断</span></span><br><span class="line">RTC_WaitForLastTask();<span class="comment">//等待最近一次对RTC寄存器的写操作完成</span></span><br><span class="line">RTC_EnterConfigMode();<span class="comment">// 允许配置</span></span><br><span class="line">RTC_SetPrescaler(<span class="number">32767</span>); <span class="comment">//设置RTC预分频的值，计算方式32768/(32767+1) = 1Hz 周期刚好是1秒。</span></span><br><span class="line">RTC_WaitForLastTask();<span class="comment">//等待最近一次对RTC寄存器的写操作完成</span></span><br><span class="line">RTC_Set(<span class="number">2020</span>,<span class="number">2</span>,<span class="number">16</span>,<span class="number">22</span>,<span class="number">16</span>,<span class="number">00</span>);  <span class="comment">//设置时间</span></span><br><span class="line">RTC_ExitConfigMode(); <span class="comment">//退出配置模式  </span></span><br><span class="line">BKP_WriteBackupRegister(BKP_DR1, <span class="number">0X5051</span>);<span class="comment">//向指定的后备寄存器中写入用户程序数据</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="comment">//系统继续计时</span></span><br><span class="line">&#123;</span><br><span class="line">RTC_WaitForSynchro();<span class="comment">//等待最近一次对RTC寄存器的写操作完成</span></span><br><span class="line">RTC_ITConfig(RTC_IT_SEC, ENABLE);<span class="comment">//使能RTC秒中断</span></span><br><span class="line">RTC_WaitForLastTask();<span class="comment">//等待最近一次对RTC寄存器的写操作完成</span></span><br><span class="line">&#125;</span><br><span class="line">RTC_NVIC_Config();<span class="comment">//RCT中断分组设置         </span></span><br><span class="line">RTC_Get();<span class="comment">//更新时间</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//ok</span></span><br><span class="line"> </span><br><span class="line">&#125;     </span><br><span class="line"><span class="comment">//RTC时钟中断</span></span><br><span class="line"><span class="comment">//每秒触发一次  </span></span><br><span class="line"><span class="comment">//extern u16 tcnt; </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RTC_IRQHandler</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">if</span> (RTC_GetITStatus(RTC_IT_SEC) != RESET)<span class="comment">//秒钟中断</span></span><br><span class="line">&#123;</span><br><span class="line">RTC_Get();<span class="comment">//更新时间   </span></span><br><span class="line"> &#125;</span><br><span class="line"><span class="keyword">if</span>(RTC_GetITStatus(RTC_IT_ALR)!= RESET)<span class="comment">//闹钟中断</span></span><br><span class="line">&#123;</span><br><span class="line">RTC_ClearITPendingBit(RTC_IT_ALR);<span class="comment">//清闹钟中断  </span></span><br><span class="line">  RTC_Get();<span class="comment">//更新时间   </span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Alarm Time:%d-%d-%d %d:%d:%d\n&quot;</span>,calendar.w_year,calendar.w_month,calendar.w_date,calendar.hour,calendar.min,calendar.sec);<span class="comment">//输出闹铃时间</span></span><br><span class="line"></span><br><span class="line">  &#125;    </span><br><span class="line">RTC_ClearITPendingBit(RTC_IT_SEC|RTC_IT_OW);<span class="comment">//清闹钟中断</span></span><br><span class="line">RTC_WaitForLastTask();           </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断是否是闰年函数</span></span><br><span class="line"><span class="comment">//月份   1  2  3  4  5  6  7  8  9  10 11 12</span></span><br><span class="line"><span class="comment">//闰年   31 29 31 30 31 30 31 31 30 31 30 31</span></span><br><span class="line"><span class="comment">//非闰年 31 28 31 30 31 30 31 31 30 31 30 31</span></span><br><span class="line"><span class="comment">//输入:年份</span></span><br><span class="line"><span class="comment">//输出:该年份是不是闰年.1,是.0,不是</span></span><br><span class="line"><span class="function">u8 <span class="title">Is_Leap_Year</span><span class="params">(u16 year)</span></span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line"><span class="keyword">if</span>(year%<span class="number">4</span>==<span class="number">0</span>) <span class="comment">//必须能被4整除</span></span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">if</span>(year%<span class="number">100</span>==<span class="number">0</span>) </span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">if</span>(year%<span class="number">400</span>==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">1</span>;<span class="comment">//如果以00结尾,还要能被400整除    </span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;   </span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>;   </span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;    </span><br><span class="line"><span class="comment">//设置时钟</span></span><br><span class="line"><span class="comment">//把输入的时钟转换为秒钟</span></span><br><span class="line"><span class="comment">//以1970年1月1日为基准</span></span><br><span class="line"><span class="comment">//1970~2099年为合法年份</span></span><br><span class="line"><span class="comment">//返回值:0,成功;其他:错误代码.</span></span><br><span class="line"><span class="comment">//月份数据表 </span></span><br><span class="line">u8 <span class="keyword">const</span> table_week[<span class="number">12</span>]=&#123;<span class="number">0</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">5</span>&#125;; <span class="comment">//月修正数据表  </span></span><br><span class="line"><span class="comment">//平年的月份日期表</span></span><br><span class="line"><span class="keyword">const</span> u8 mon_table[<span class="number">12</span>]=&#123;<span class="number">31</span>,<span class="number">28</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>&#125;;</span><br><span class="line"><span class="function">u8 <span class="title">RTC_Set</span><span class="params">(u16 syear,u8 smon,u8 sday,u8 hour,u8 min,u8 sec)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u16 t;</span><br><span class="line">u32 seccount=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(syear&lt;<span class="number">1970</span>||syear&gt;<span class="number">2099</span>)<span class="keyword">return</span> <span class="number">1</span>;   </span><br><span class="line"><span class="keyword">for</span>(t=<span class="number">1970</span>;t&lt;syear;t++)<span class="comment">//把所有年份的秒钟相加</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(Is_Leap_Year(t))seccount+=<span class="number">31622400</span>;<span class="comment">//闰年的秒钟数</span></span><br><span class="line"><span class="keyword">else</span> seccount+=<span class="number">31536000</span>;  <span class="comment">//平年的秒钟数</span></span><br><span class="line">&#125;</span><br><span class="line">smon-=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(t=<span class="number">0</span>;t&lt;smon;t++)   <span class="comment">//把前面月份的秒钟数相加</span></span><br><span class="line">&#123;</span><br><span class="line">seccount+=(u32)mon_table[t]*<span class="number">86400</span>;<span class="comment">//月份秒钟数相加</span></span><br><span class="line"><span class="keyword">if</span>(Is_Leap_Year(syear)&amp;&amp;t==<span class="number">1</span>)seccount+=<span class="number">86400</span>;<span class="comment">//闰年2月份增加一天的秒钟数   </span></span><br><span class="line">&#125;</span><br><span class="line">seccount+=(u32)(sday<span class="number">-1</span>)*<span class="number">86400</span>;<span class="comment">//把前面日期的秒钟数相加 </span></span><br><span class="line">seccount+=(u32)hour*<span class="number">3600</span>;<span class="comment">//小时秒钟数</span></span><br><span class="line">seccount+=(u32)min*<span class="number">60</span>; <span class="comment">//分钟秒钟数</span></span><br><span class="line">seccount+=sec;<span class="comment">//最后的秒钟加上去</span></span><br><span class="line"> </span><br><span class="line">RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR | RCC_APB1Periph_BKP, ENABLE);<span class="comment">//使能PWR和BKP外设时钟  </span></span><br><span class="line">PWR_BackupAccessCmd(ENABLE);<span class="comment">//使能RTC和后备寄存器访问 </span></span><br><span class="line">RTC_SetCounter(seccount);<span class="comment">//设置RTC计数器的值</span></span><br><span class="line"> </span><br><span class="line">RTC_WaitForLastTask();<span class="comment">//等待最近一次对RTC寄存器的写操作完成  </span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;    </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//初始化闹钟  </span></span><br><span class="line"><span class="comment">//以1970年1月1日为基准</span></span><br><span class="line"><span class="comment">//1970~2099年为合法年份</span></span><br><span class="line"><span class="comment">//syear,smon,sday,hour,min,sec：闹钟的年月日时分秒   </span></span><br><span class="line"><span class="comment">//返回值:0,成功;其他:错误代码.</span></span><br><span class="line"><span class="function">u8 <span class="title">RTC_Alarm_Set</span><span class="params">(u16 syear,u8 smon,u8 sday,u8 hour,u8 min,u8 sec)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u16 t;</span><br><span class="line">u32 seccount=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(syear&lt;<span class="number">1970</span>||syear&gt;<span class="number">2099</span>)<span class="keyword">return</span> <span class="number">1</span>;   </span><br><span class="line"><span class="keyword">for</span>(t=<span class="number">1970</span>;t&lt;syear;t++)<span class="comment">//把所有年份的秒钟相加</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(Is_Leap_Year(t))seccount+=<span class="number">31622400</span>;<span class="comment">//闰年的秒钟数</span></span><br><span class="line"><span class="keyword">else</span> seccount+=<span class="number">31536000</span>;  <span class="comment">//平年的秒钟数</span></span><br><span class="line">&#125;</span><br><span class="line">smon-=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(t=<span class="number">0</span>;t&lt;smon;t++)   <span class="comment">//把前面月份的秒钟数相加</span></span><br><span class="line">&#123;</span><br><span class="line">seccount+=(u32)mon_table[t]*<span class="number">86400</span>;<span class="comment">//月份秒钟数相加</span></span><br><span class="line"><span class="keyword">if</span>(Is_Leap_Year(syear)&amp;&amp;t==<span class="number">1</span>)seccount+=<span class="number">86400</span>;<span class="comment">//闰年2月份增加一天的秒钟数   </span></span><br><span class="line">&#125;</span><br><span class="line">seccount+=(u32)(sday<span class="number">-1</span>)*<span class="number">86400</span>;<span class="comment">//把前面日期的秒钟数相加 </span></span><br><span class="line">seccount+=(u32)hour*<span class="number">3600</span>;<span class="comment">//小时秒钟数</span></span><br><span class="line">    seccount+=(u32)min*<span class="number">60</span>; <span class="comment">//分钟秒钟数</span></span><br><span class="line">seccount+=sec;<span class="comment">//最后的秒钟加上去     </span></span><br><span class="line"><span class="comment">//设置时钟</span></span><br><span class="line">RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR | RCC_APB1Periph_BKP, ENABLE);<span class="comment">//使能PWR和BKP外设时钟   </span></span><br><span class="line">PWR_BackupAccessCmd(ENABLE);<span class="comment">//使能后备寄存器访问  </span></span><br><span class="line"><span class="comment">//上面三步是必须的!</span></span><br><span class="line"></span><br><span class="line">RTC_SetAlarm(seccount);</span><br><span class="line"> </span><br><span class="line">RTC_WaitForLastTask();<span class="comment">//等待最近一次对RTC寄存器的写操作完成  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;    </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//得到当前的时间</span></span><br><span class="line"><span class="comment">//返回值:0,成功;其他:错误代码.</span></span><br><span class="line"><span class="function">u8 <span class="title">RTC_Get</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">static</span> u16 daycnt=<span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">u32 temp=<span class="number">0</span>;</span><br><span class="line">u16 temp1=<span class="number">0</span>;  </span><br><span class="line">    timecount=RTC_GetCounter(); </span><br><span class="line"> temp=timecount/<span class="number">86400</span>;   <span class="comment">//得到天数(秒钟数对应的)</span></span><br><span class="line"><span class="keyword">if</span>(daycnt!=temp)<span class="comment">//超过一天了</span></span><br><span class="line">&#123;  </span><br><span class="line">daycnt=temp;</span><br><span class="line">temp1=<span class="number">1970</span>;<span class="comment">//从1970年开始</span></span><br><span class="line"><span class="keyword">while</span>(temp&gt;=<span class="number">365</span>)<span class="comment">//计算出来的天数大于等于一年的天数</span></span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">if</span>(Is_Leap_Year(temp1))<span class="comment">//是闰年</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(temp&gt;=<span class="number">366</span>)</span><br><span class="line">&#123;</span><br><span class="line">temp-=<span class="number">366</span>;<span class="comment">//闰年的秒钟数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line">temp1++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> temp-=<span class="number">365</span>;  <span class="comment">//平年 </span></span><br><span class="line">temp1++;  </span><br><span class="line">&#125;   </span><br><span class="line">calendar.w_year=temp1;<span class="comment">//得到年份</span></span><br><span class="line">temp1=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(temp&gt;=<span class="number">28</span>)<span class="comment">//超过了一个月</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(Is_Leap_Year(calendar.w_year)&amp;&amp;temp1==<span class="number">1</span>)<span class="comment">//当年是不是闰年/2月份</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(temp&gt;=<span class="number">29</span>)<span class="comment">//如果天数超过29天</span></span><br><span class="line">&#123;</span><br><span class="line">temp-=<span class="number">29</span>;<span class="comment">//闰年的秒钟数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">break</span>; <span class="comment">//小于29天，不到闰年3月，直接跳出。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(temp&gt;=mon_table[temp1])</span><br><span class="line">&#123;</span><br><span class="line">temp-=mon_table[temp1];<span class="comment">//平年</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">temp1++;  </span><br><span class="line">&#125;</span><br><span class="line">calendar.w_month=temp1+<span class="number">1</span>;<span class="comment">//得到月份</span></span><br><span class="line">calendar.w_date=temp+<span class="number">1</span>;  <span class="comment">//得到日期 </span></span><br><span class="line">&#125;</span><br><span class="line">temp=timecount%<span class="number">86400</span>;     <span class="comment">//得到秒钟数      </span></span><br><span class="line">calendar.hour=temp/<span class="number">3600</span>;     <span class="comment">//小时</span></span><br><span class="line">calendar.min=(temp%<span class="number">3600</span>)/<span class="number">60</span>; <span class="comment">//分钟</span></span><br><span class="line">calendar.sec=(temp%<span class="number">3600</span>)%<span class="number">60</span>; <span class="comment">//秒钟</span></span><br><span class="line">calendar.week=RTC_Get_Week(calendar.w_year,calendar.w_month,calendar.w_date);<span class="comment">//获取星期   </span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//获得现在是星期几</span></span><br><span class="line"><span class="comment">//功能描述:输入公历日期得到星期(只允许1901-2099年)</span></span><br><span class="line"><span class="comment">//输入参数：公历年月日 </span></span><br><span class="line"><span class="comment">//返回值：星期号 </span></span><br><span class="line"><span class="function">u8 <span class="title">RTC_Get_Week</span><span class="params">(u16 year,u8 month,u8 day)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u16 temp2;</span><br><span class="line">u8 yearH,yearL;</span><br><span class="line"></span><br><span class="line">yearH=year/<span class="number">100</span>;yearL=year%<span class="number">100</span>; </span><br><span class="line"><span class="comment">// 如果为21世纪,年份数加100  </span></span><br><span class="line"><span class="keyword">if</span> (yearH&gt;<span class="number">19</span>)yearL+=<span class="number">100</span>;</span><br><span class="line"><span class="comment">// 所过闰年数只算1900年之后的  </span></span><br><span class="line">temp2=yearL+yearL/<span class="number">4</span>;</span><br><span class="line">temp2=temp2%<span class="number">7</span>; </span><br><span class="line">temp2=temp2+day+table_week[month<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">if</span> (yearL%<span class="number">4</span>==<span class="number">0</span>&amp;&amp;month&lt;<span class="number">3</span>)temp2--;</span><br><span class="line"><span class="keyword">return</span>(temp2%<span class="number">7</span>);</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p><strong>RTC.h文件</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/************************************RTC.h文件***************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __RTC_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __RTC_H    </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;sys.h&quot;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//时间结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">vu8 hour;</span><br><span class="line">vu8 min;</span><br><span class="line">vu8 sec;</span><br><span class="line"><span class="comment">//公历日月年周</span></span><br><span class="line">vu16 w_year;</span><br><span class="line">vu8  w_month;</span><br><span class="line">vu8  w_date;</span><br><span class="line">vu8  week; </span><br><span class="line">&#125;_calendar_obj; </span><br><span class="line"><span class="keyword">extern</span> _calendar_obj calendar;<span class="comment">//日历结构体</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">extern</span> u8 <span class="keyword">const</span> mon_table[<span class="number">12</span>];<span class="comment">//月份日期数据表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Disp_Time</span><span class="params">(u8 x,u8 y,u8 size)</span></span>;<span class="comment">//在制定位置开始显示时间</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Disp_Week</span><span class="params">(u8 x,u8 y,u8 size,u8 lang)</span></span>;<span class="comment">//在指定位置显示星期</span></span><br><span class="line"><span class="function">u8 <span class="title">RTC_Init</span><span class="params">(<span class="keyword">void</span>)</span></span>;        <span class="comment">//初始化RTC,返回0,失败;1,成功;</span></span><br><span class="line"><span class="function">u8 <span class="title">Is_Leap_Year</span><span class="params">(u16 year)</span></span>;<span class="comment">//平年,闰年判断</span></span><br><span class="line"><span class="function">u8 <span class="title">RTC_Alarm_Set</span><span class="params">(u16 syear,u8 smon,u8 sday,u8 hour,u8 min,u8 sec)</span></span>;</span><br><span class="line"><span class="function">u8 <span class="title">RTC_Get</span><span class="params">(<span class="keyword">void</span>)</span></span>;         <span class="comment">//更新时间   </span></span><br><span class="line"><span class="function">u8 <span class="title">RTC_Get_Week</span><span class="params">(u16 year,u8 month,u8 day)</span></span>;</span><br><span class="line"><span class="function">u8 <span class="title">RTC_Set</span><span class="params">(u16 syear,u8 smon,u8 sday,u8 hour,u8 min,u8 sec)</span></span>;<span class="comment">//设置时间 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本次使用的是STM32F103开发板，很多参考程序使用的是STM32F4，因此，其中很多定义和函数都没有！本程序其实还得添加许多头文件<br><strong>例如：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stm32f10x_pwr.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stm32f10x_bkp.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stm32f10x_rtc.h&quot;</span></span></span><br></pre></td></tr></table></figure><p>由于开发板没有32.768KHz辅助晶振，需要等以后买了再继续测试！</p><p><strong>注意：</strong></p><blockquote><p>F1没有F4的这个功能，F1只有一个计数器，所以需要自己根据这个计数器来计算出来得到，F4就有4个寄存器，所以可以直接读出来</p></blockquote><hr><h1 id="相关链接-侵删"><a href="#相关链接-侵删" class="headerlink" title="相关链接(侵删)"></a>相关链接(侵删)</h1><ol><li><a href="https://www.cnblogs.com/zhjblogs/p/12712575.html">（stm32f103学习总结）—RTC独立定时器—实时时钟实验 </a></li><li><a href="https://blog.csdn.net/zhai17863966493/article/details/104361466">STM32F103的RTC实时时钟配置</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">使用STM32F103开发板实现RTC实时时钟功能</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="C" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/C/"/>
    
    <category term="STM32" scheme="https://zml3589110.github.io/categories/STM32/"/>
    
    <category term="RTC" scheme="https://zml3589110.github.io/categories/RTC/"/>
    
    
    <category term="STM32" scheme="https://zml3589110.github.io/tags/STM32/"/>
    
    <category term="C" scheme="https://zml3589110.github.io/tags/C/"/>
    
    <category term="RTC" scheme="https://zml3589110.github.io/tags/RTC/"/>
    
    <category term="实时时钟" scheme="https://zml3589110.github.io/tags/%E5%AE%9E%E6%97%B6%E6%97%B6%E9%92%9F/"/>
    
    <category term="STM32F103" scheme="https://zml3589110.github.io/tags/STM32F103/"/>
    
  </entry>
  
  <entry>
    <title>ESP32开发SDK-IDF环境搭建(Ubuntu)</title>
    <link href="https://zml3589110.github.io/posts/2870405859.html"/>
    <id>https://zml3589110.github.io/posts/2870405859.html</id>
    <published>2023-01-03T02:50:20.000Z</published>
    <updated>2023-01-03T07:20:38.465Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ubuntu系统跟常用工具安装"><a href="#Ubuntu系统跟常用工具安装" class="headerlink" title="Ubuntu系统跟常用工具安装"></a>Ubuntu系统跟常用工具安装</h1><p>因为之前安装过esp8266 SDK-3.0版本，所以本次就在这个系统内安装<a href="https://zml3589110.github.io/posts/2171885577.html">传送门</a></p><ol><li><p>在安装中发现新版本的编译形式有变化，不能使用虚拟机自带的共享进行编译，需要使用Samba网络共享！因编译过程需要建立软链接。</p></li><li><p>记得将Python版本调整为Python 3</p></li></ol><h1 id="下载-SDK-IDF"><a href="#下载-SDK-IDF" class="headerlink" title="下载 SDK-IDF"></a>下载 SDK-IDF</h1><p><strong>开始使用的是 guthub 上的库，那速度要多慢有多慢，毕竟没有搭上梯子，后来就参考使用了 gittee 码云上的库，直接换飞机的速度了啊</strong></p><h2 id="一、下载重定向脚本-esp-gitee-tools"><a href="#一、下载重定向脚本-esp-gitee-tools" class="headerlink" title="一、下载重定向脚本 esp-gitee-tools"></a>一、下载重定向脚本 esp-gitee-tools</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://gitee.com/EspressifSystems/esp-gitee-tools.git</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="二、下载SDK"><a href="#二、下载SDK" class="headerlink" title="二、下载SDK"></a>二、下载SDK</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://gitee.com/EspressifSystems/esp-idf.git -b release/v5.0</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="三、使用-esp-gitee-tools-拉取子模块"><a href="#三、使用-esp-gitee-tools-拉取子模块" class="headerlink" title="三、使用 esp-gitee-tools 拉取子模块"></a>三、使用 esp-gitee-tools 拉取子模块</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> esp-gitee-tools </span><br><span class="line"><span class="built_in">export</span> EGT_PATH=$(<span class="built_in">pwd</span>) </span><br><span class="line"><span class="built_in">cd</span> .. </span><br><span class="line"><span class="built_in">cd</span> esp-idf </span><br><span class="line"><span class="variable">$EGT_PATH</span>/submodule-update.sh</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="四、安装编译工具链"><a href="#四、安装编译工具链" class="headerlink" title="四、安装编译工具链"></a>四、安装编译工具链</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">. install.sh</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个步骤是自动安装编译所需要的各类软件，比如编译器、调试器等</p><p>由于是从 github 上下载下来，所以速度奇慢无比，总共花了两天才下载完成！</p><p><strong>再执行：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">. ./export.sh</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="补充：下载主要文件"><a href="#补充：下载主要文件" class="headerlink" title="补充：下载主要文件"></a>补充：下载主要文件</h2><p>install.sh 下载工具文件路径为 $HOME&#x2F;.espressif&#x2F;dist</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">总用量 332M</span><br><span class="line">drwxrwxr-x 2 yichen yichen 4.0K 1月   2 11:38 ./</span><br><span class="line">drwxrwxr-x 5 yichen yichen 4.0K 1月   2 11:38 ../</span><br><span class="line">-rwxrwxrwx 1 yichen yichen  11M 1月   2 11:32 esp32ulp-elf-2.35_20220830-linux-amd64.tar.gz*</span><br><span class="line">-rwxrwxrwx 1 yichen yichen 2.4M 1月   2 11:37 esp-rom-elfs-20220823.tar.gz*</span><br><span class="line">-rwxrwxrwx 1 yichen yichen 2.0M 1月   2 11:34 openocd-esp32-linux-amd64-0.11.0-esp32-20221026.tar.gz*</span><br><span class="line">-rwxrwxrwx 1 yichen yichen 106M 1月   2 11:31 riscv32-esp-elf-gcc11_2_0-esp-2022r1-linux-amd64.tar.xz*</span><br><span class="line">-rwxrwxrwx 1 yichen yichen  26M 1月   2 11:25 riscv32-esp-elf-gdb-11.2_20220823-x86_64-linux-gnu.tar.gz*</span><br><span class="line">-rwxrwxrwx 1 yichen yichen  62M 1月   2 11:26 xtensa-esp32-elf-gcc11_2_0-esp-2022r1-linux-amd64.tar.xz*</span><br><span class="line">-rwxrwxrwx 1 yichen yichen  50M 1月   2 11:28 xtensa-esp32s2-elf-gcc11_2_0-esp-2022r1-linux-amd64.tar.xz*</span><br><span class="line">-rwxrwxrwx 1 yichen yichen  50M 1月   2 11:29 xtensa-esp32s3-elf-gcc11_2_0-esp-2022r1-linux-amd64.tar.xz*</span><br><span class="line">-rwxrwxrwx 1 yichen yichen  26M 1月   2 11:19 xtensa-esp-elf-gdb-11.2_20220823-x86_64-linux-gnu.tar.gz*</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用的是 5.0版本 SDK 下载，放到共享里，给有需要的人下载后解压到该目录下应该就可以通过！（未测试过）<br><a href="https://download.csdn.net/download/zml3589110/87360531">传送门</a></p><h1 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h1><p>因为需要多环境共存，毕竟还要玩esp8266嘛，所以就使用 aliases 方式进行别名命令设置，每次仅对跟窗体有效</p><p>这是我的ubuntu下编译esp32所需要的两个环境变量，将其添加到 ~&#x2F;.bash_aliases 文件中，然后重启即可<br>之后打开命令窗口时执行 get_esp32 和 get_e32 后就可以快速设置 ESP32环境了！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> get_esp32=<span class="string">&#x27;export PATH=$PATH:/home/yichen/.espressif/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> get_e32=<span class="string">&#x27;. $HOME/esp/esp-idf/export.sh&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="复制例程工程"><a href="#复制例程工程" class="headerlink" title="复制例程工程"></a>复制例程工程</h1><p>可以选择 idf 目录下的 example 文件中的例程，将它复制到 共享 share 文件中，这样也方便 Windows下查看编辑代码！（注意：不是虚拟机共享的文件夹，而是Samba共享的文件夹）</p><p>例如可以使用 $HOME&#x2F;esp&#x2F;esp-idf&#x2F;examples&#x2F;get-started&#x2F;hello_world 文件来测试</p><h1 id="配置编译工程"><a href="#配置编译工程" class="headerlink" title="配置编译工程"></a>配置编译工程</h1><ol><li>设置esp32系列模组</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">idf.py set-target esp32</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>通过 menuconfig 菜单配置参数</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">idf.py menuconfig</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以设置Wi-Fi 网络名称、密码以及各种组件配置等，不过每次配置完之后都得全部编译一遍！</p><ol start="3"><li>编译所选工程</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">idf.py build</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第一次编译得构建 build 文件，所以慢很多！如果环境正常基本上能出结果，否则就根据错误提示一个个排查处理。<br>最后会得到 二进制文件 bootloader.bin、partition-table.bin 和 hello_world.bin（你构建的工程文件名）</p><ol start="4"><li>烧录到设备</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">idf.py flash monitor</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这是两个命令组合起来，意思是烧录程序到 ESP32 并打开 监视窗口。<br>其中烧录波特率默认为 460800</p><p>如果想要自定义波特率则可以自己设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">idf.py -p PORT [-b BAUD] flash</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>由于我的开发板BOOT按键独立，没有自动下载功能，需要在下载前按住 BOOT 按键至识别到 ESP32 ，连接监视窗口也是如此！开始还一直以为没有连接好USB，或者需另外设置</strong></p><hr><h1 id="相关链接（侵删）"><a href="#相关链接（侵删）" class="headerlink" title="相关链接（侵删）"></a>相关链接（侵删）</h1><ol><li><a href="https://blog.csdn.net/chenbenzhen/article/details/124523241">【ESP32】虚拟机ubuntu下搭建 ESP-IDF 开发环境（详细）</a></li><li><a href="https://blog.csdn.net/weixin_38016446/article/details/128028260">ESP32-ESP-IDF-CMD编译烧写（自用）</a></li><li><a href="https://gitee.com/EspressifSystems/esp-idf/tree/release%2Fv5.0/">乐鑫gitee库</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">Ubuntu下搭建ESP32开发环境，完成example参考程序编译</summary>
    
    
    
    <category term="Linux" scheme="https://zml3589110.github.io/categories/Linux/"/>
    
    <category term="文件共享" scheme="https://zml3589110.github.io/categories/%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB/"/>
    
    <category term="乐鑫" scheme="https://zml3589110.github.io/categories/%E4%B9%90%E9%91%AB/"/>
    
    <category term="ESP32" scheme="https://zml3589110.github.io/categories/ESP32/"/>
    
    
    <category term="Ubuntu" scheme="https://zml3589110.github.io/tags/Ubuntu/"/>
    
    <category term="物联网" scheme="https://zml3589110.github.io/tags/%E7%89%A9%E8%81%94%E7%BD%91/"/>
    
    <category term="乐鑫" scheme="https://zml3589110.github.io/tags/%E4%B9%90%E9%91%AB/"/>
    
    <category term="ESP32" scheme="https://zml3589110.github.io/tags/ESP32/"/>
    
    <category term="SDK-IDF" scheme="https://zml3589110.github.io/tags/SDK-IDF/"/>
    
    <category term="开发环境" scheme="https://zml3589110.github.io/tags/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    
  </entry>
  
  <entry>
    <title>GIT更新子模块</title>
    <link href="https://zml3589110.github.io/posts/970792788.html"/>
    <id>https://zml3589110.github.io/posts/970792788.html</id>
    <published>2023-01-03T02:25:20.000Z</published>
    <updated>2023-01-03T07:20:38.451Z</updated>
    
    <content type="html"><![CDATA[<p><strong>当主项目中用Git管理源代码，并且项目中用submodule方式引入了子模块，当子模块更新代码后，在主项目中如何更新子模块最新代码呢？</strong></p><h1 id="执行之模块更新步骤"><a href="#执行之模块更新步骤" class="headerlink" title="执行之模块更新步骤"></a>执行之模块更新步骤</h1><h2 id="1-如果是第一次pull子项目代码"><a href="#1-如果是第一次pull子项目代码" class="headerlink" title="1.如果是第一次pull子项目代码"></a>1.如果是第一次pull子项目代码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule init</span><br></pre></td></tr></table></figure><h2 id="2-然后执行："><a href="#2-然后执行：" class="headerlink" title="2.然后执行："></a>2.然后执行：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule update --remote --recursive</span><br></pre></td></tr></table></figure><p><strong>这个命令，只是更新子模块的branch和commit id信息，并不会pull新代码</strong></p><h2 id="3-然后，进入主项目中子项目的目录"><a href="#3-然后，进入主项目中子项目的目录" class="headerlink" title="3. 然后，进入主项目中子项目的目录"></a>3. 然后，进入主项目中子项目的目录</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure><h2 id="4-后续，如果主项目所引用的子项目的branch发生了变化，则在第3步时执行："><a href="#4-后续，如果主项目所引用的子项目的branch发生了变化，则在第3步时执行：" class="headerlink" title="4. 后续，如果主项目所引用的子项目的branch发生了变化，则在第3步时执行："></a>4. 后续，如果主项目所引用的子项目的branch发生了变化，则在第3步时执行：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git fetch</span><br><span class="line"></span><br><span class="line">git checkout submodule_newBranch submodule_newBranch</span><br><span class="line"></span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><p>另：</p><p>在第4步中，在 git fetch 之后，如果使用的用jetbrain的IDE工具，比如IDEA &#x2F; GoLand等，它们会管理远程仓库，此时可以通过点击右下角的branch弹出窗口，来选择需要checkout子项目哪个分支。 </p><hr><blockquote><p><strong>说明：本文是收集参考文档，以方便查看(侵删)</strong></p></blockquote><hr><h1 id="信息链接"><a href="#信息链接" class="headerlink" title="信息链接:"></a>信息链接:</h1><ol><li><a href="https://blog.csdn.net/bglmmz/article/details/127755543">Git submodule update，如何更新子模块</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">GIT更新子模块</summary>
    
    
    
    <category term="Git" scheme="https://zml3589110.github.io/categories/Git/"/>
    
    
    <category term="常用命令" scheme="https://zml3589110.github.io/tags/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
    <category term="版本控制" scheme="https://zml3589110.github.io/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
    <category term="git" scheme="https://zml3589110.github.io/tags/git/"/>
    
    <category term="子模块" scheme="https://zml3589110.github.io/tags/%E5%AD%90%E6%A8%A1%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu开启Samba服务</title>
    <link href="https://zml3589110.github.io/posts/2332243333.html"/>
    <id>https://zml3589110.github.io/posts/2332243333.html</id>
    <published>2023-01-03T02:07:20.000Z</published>
    <updated>2023-01-03T07:20:38.420Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ubuntu开启samba"><a href="#Ubuntu开启samba" class="headerlink" title="Ubuntu开启samba"></a>Ubuntu开启samba</h1><h2 id="安装samba"><a href="#安装samba" class="headerlink" title="安装samba"></a>安装samba</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install samba</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="修改samba配置文件"><a href="#修改samba配置文件" class="headerlink" title="修改samba配置文件"></a>修改samba配置文件</h2><blockquote><p>如遇到未安装vim的提示，先输入安装vim指令（sudo apt-get install vim）</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/samba/smb.conf</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>文件末尾添加以下代码<br>—①按下G跳可快速转到文件末尾<br>—②按下i进入输入模式</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[share]</span><br><span class="line">path = /home/username   <span class="comment">#path 测试机需要共享的路径，可自定义</span></span><br><span class="line">valid users = username  <span class="comment">#username 可以自定义</span></span><br><span class="line">available = yes</span><br><span class="line">browseable = yes</span><br><span class="line">writable = yes</span><br><span class="line">public = no</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>按下ESC切换到命令模式，输入:wq保存并退出vi</p><ul><li><p>创建samba用户<br>—新密码需要两次</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo smbpasswd -a username       <span class="comment">#username 可以自定义</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">test</span>@ubuntu：~$ sudo smbpasswd -a username</span><br><span class="line">New SMB password：</span><br><span class="line">Retype new SMB password：</span><br><span class="line">Adder user username.</span><br><span class="line"><span class="built_in">test</span>@ubuntu：~$</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>重启samba</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo service smbd restart</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="验证是否启动成功-在Windows上连接"><a href="#验证是否启动成功-在Windows上连接" class="headerlink" title="验证是否启动成功(在Windows上连接)"></a>验证是否启动成功(在Windows上连接)</h1><ul><li>查看测试机的IP地址的指令 <code>ifconfig</code>(如提示无次命令需要暗转，输入安装指令<code>sudo apt install net-tools</code>)<br>—-这里192.168.150.129是测试机的IP地址</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">test</span>@ubuntu：~$ ifconfig</span><br><span class="line">ens33: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.150.129  netmask 255.255.255.0  broadcast 192.168.150.255</span><br><span class="line">        inet6 fe80::8545:a880:67f0:36c4  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:2c:a8:cc  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 3296121  bytes 4268278683 (4.2 GB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 764829  bytes 541486956 (541.4 MB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 7323  bytes 949831 (949.8 KB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 7323  bytes 949831 (949.8 KB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>在Windows上连接，按 win+R 弹出运行窗口，输入\192.168.150.129，点确定,然后输入用户名和密码就可以访问了</li></ul><img src="https://img-blog.csdnimg.cn/e958da999d3c4ee0829eac16bb686331.png"><ul><li>如下图share文件夹就是对应测试机共享的文件夹</li></ul><img src="https://img-blog.csdnimg.cn/f84169f374904a6692d216e36a688bf1.png"><ul><li>把共享文件夹映射成磁盘</li></ul><img src="https://img-blog.csdnimg.cn/074efa9b2bab4079ad255a1ecfbc0aa7.png"><p><strong>也可以直接使用ubuntu计算机名称来连接-这样IP地址改变时也不影响</strong></p><hr><h1 id="相关链接（侵删）"><a href="#相关链接（侵删）" class="headerlink" title="相关链接（侵删）"></a>相关链接（侵删）</h1><ol><li><a href="https://blog.csdn.net/qq_21312147/article/details/126500453">最靠谱的解决方案之Linux系列（1.ubuntu开启Samba服务）</a></li><li><a href="https://blog.csdn.net/qq_22870815/article/details/125113580">Ubuntu开启samba共享文件夹</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">Ubuntu开启Samba服务，主要是针对esp32编译环境需要软链接，之前用虚拟机共享出现Windows没有软链接功能导致异常</summary>
    
    
    
    <category term="Linux" scheme="https://zml3589110.github.io/categories/Linux/"/>
    
    <category term="文件共享" scheme="https://zml3589110.github.io/categories/%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB/"/>
    
    
    <category term="Ubuntu" scheme="https://zml3589110.github.io/tags/Ubuntu/"/>
    
    <category term="文件共享" scheme="https://zml3589110.github.io/tags/%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB/"/>
    
    <category term="Samba" scheme="https://zml3589110.github.io/tags/Samba/"/>
    
  </entry>
  
  <entry>
    <title>GIT改当前项目仓库地址</title>
    <link href="https://zml3589110.github.io/posts/2885709092.html"/>
    <id>https://zml3589110.github.io/posts/2885709092.html</id>
    <published>2023-01-02T02:56:20.000Z</published>
    <updated>2023-01-03T07:20:38.443Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近公司将gitlab整体迁移了，换了新的地址，虽然在迁移的时候将相关分支信息、代码拷过去了；<br>但是我们开发人员在迁移过程中也会有新的代码产出；或者由于项目原因，没有及时更新地址，造成大量新的代码产出！</p><p>怎么样将自己新产出的代码提交的新库呢？<br><strong>方法：更新仓库地址</strong></p><h1 id="怎么更改已有仓库地址"><a href="#怎么更改已有仓库地址" class="headerlink" title="怎么更改已有仓库地址"></a>怎么更改已有仓库地址</h1><hr><p><strong>注意：以下操作均在 右键 &#x3D;&gt; Git Bash Here 窗口中执行</strong></p><hr><h2 id="方法1："><a href="#方法1：" class="headerlink" title="方法1："></a>方法1：</h2><p>删除本地仓库当前关联的无效远程地址，再为本地仓库添加新的远程仓库地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git remote -v                       // 查看git对应的远程仓库地址</span><br><span class="line">git remote rm origin                // 删除关联对应的远程仓库地址</span><br><span class="line">git remote -v                       // 查看是否删除成功，如果没有任何返回结果，表示OK</span><br><span class="line">git remote add origin <span class="string">&quot;新的仓库地址&quot;</span> // 重新关联git远程仓库地址</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="方法2："><a href="#方法2：" class="headerlink" title="方法2："></a>方法2：</h2><p>直接修改本地仓库所关联的远程仓库的地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git remote      // 查看远程仓库名称：origin </span><br><span class="line">git remote get-url origin                  // 查看远程仓库地址</span><br><span class="line">git remote set-url origin <span class="string">&quot;新的仓库地址&quot;</span>    // ( 如果未设置ssh-key，此处仓库地址为 http://... 开头)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="方法3："><a href="#方法3：" class="headerlink" title="方法3："></a>方法3：</h2><p>修改 .git&#x2F;config 配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> .git      // 进入.git目录</span><br><span class="line">vim config   // 修改config配置文件，快速找到remote <span class="string">&quot;origin&quot;</span>下面的url并替换即可实现快速关联和修改</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><blockquote><p><strong>说明：本文是收集参考文档，以方便查看(侵删)</strong></p></blockquote><hr><h1 id="信息链接"><a href="#信息链接" class="headerlink" title="信息链接:"></a>信息链接:</h1><ol><li><a href="https://blog.csdn.net/halo1416/article/details/123566471">git修改当前项目仓库地址的三种方法</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">GIT改当前项目仓库地址</summary>
    
    
    
    <category term="Git" scheme="https://zml3589110.github.io/categories/Git/"/>
    
    
    <category term="版本控制" scheme="https://zml3589110.github.io/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
    <category term="git" scheme="https://zml3589110.github.io/tags/git/"/>
    
    <category term="仓库地址" scheme="https://zml3589110.github.io/tags/%E4%BB%93%E5%BA%93%E5%9C%B0%E5%9D%80/"/>
    
  </entry>
  
  <entry>
    <title>LVGL模拟器NXP GUI Guider使用</title>
    <link href="https://zml3589110.github.io/posts/278272964.html"/>
    <id>https://zml3589110.github.io/posts/278272964.html</id>
    <published>2022-12-31T01:31:20.000Z</published>
    <updated>2023-01-03T07:20:38.454Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GUI-Guider说明"><a href="#GUI-Guider说明" class="headerlink" title="GUI Guider说明"></a>GUI Guider说明</h1><p>GUI Guider是恩智浦提供的用户友好型图形用户界面开发工具，可通过<a href="https://www.nxp.com.cn/design/software/embedded-software/lvgl-open-source-graphics-library:LITTLEVGL-OPEN-SOURCE-GRAPHICS-LIBRARY">开源LVGL图形库</a>快速开发高品质的显示。GUI Guider的拖放编辑器可以轻松利用LVGL的众多特性，如小部件、动画和样式来创建GUI，而只需少量代码或根本无需任何代码。</p><p>下载地址  <a href="https://www.nxp.com.cn/design/software/development-software/gui-guider:GUI-GUIDER">GUI Guider_NXP 半导体</a>  可能需要注册nxp的账号 目前最新的是1.04  。运行需要安装jave环境 jre 。里边自带了mingw编译器使用sdl驱动用来跑模拟器，如果使用8.3的lvgl库还可以导出micropython文件。这个比lvgl官方的SquareLine Studio 好在没有免费账号屏幕数跟wigt数量限制，并且还有中文界面 可以改显示语言 主题 调整屏幕刷新率可以提高帧率 ，其实是每一帧的渲染时间 修改过lv-conf.h的就明白</p><img src="https://img2022.cnblogs.com/blog/2109578/202208/2109578-20220819202726655-1228122971.png"><p>能看出来界面是基于elctron的，代码是基于java加模板生成的</p><p>还可以很简单的给控件加事件  甚至都不用写一行代码    下图里给按钮的clicked 添加事件 使按键自己隐藏</p><img src="https://img2022.cnblogs.com/blog/2109578/202208/2109578-20220819203246759-944758677.png"><p>更好玩的是可以用这个模拟器来练习lvgl库里的例程  。先看工程导出的文件夹</p><img src="https://img2022.cnblogs.com/blog/2109578/202208/2109578-20220820092036530-562638066.png"><p>custom是自定义的程序，generated就是自动生成的代码，包含gui设计与事件，这里不要动，每次点运行模拟器都会重新生成代码。</p><img src="https://img2022.cnblogs.com/blog/2109578/202208/2109578-20220820092516260-1329959598.png"><p>lvgl-simulator是模拟的用的代码，可以参考里边的main.c来移植到别的硬件，观察他的初始化</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*Create a GUI-Guider app  创造app */</span></span><br><span class="line">   setup_ui(&amp;guider_ui);<span class="comment">//设计小部件的ui布局</span></span><br><span class="line">   events_init(&amp;guider_ui);<span class="comment">//设置小部件的事件</span></span><br><span class="line">   custom_init(&amp;guider_ui);<span class="comment">//运行自定义的程序</span></span><br><span class="line">   </span><br></pre></td></tr></table></figure><p>我们要测试代码片段的话就在 custom文件夹里修改   这里做个小测试，找到从github上拖下来的lvgl库里的例子 在这个地方</p><img src="https://img2022.cnblogs.com/blog/2109578/202208/2109578-20220820093137112-1961924878.png"><p>把回调函数跟测试函数拷贝到 刚才的guiguider的 custom.c里  就像这样</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line"><span class="comment">// Copyright 2020 NXP</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file custom.c</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*********************</span></span><br><span class="line"><span class="comment"> *      INCLUDES</span></span><br><span class="line"><span class="comment"> *********************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;lvgl.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;custom.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*********************</span></span><br><span class="line"><span class="comment"> *      DEFINES</span></span><br><span class="line"><span class="comment"> *********************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**********************</span></span><br><span class="line"><span class="comment"> *      TYPEDEFS</span></span><br><span class="line"><span class="comment"> **********************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**********************</span></span><br><span class="line"><span class="comment"> *  STATIC PROTOTYPES</span></span><br><span class="line"><span class="comment"> **********************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**********************</span></span><br><span class="line"><span class="comment"> *  STATIC VARIABLES</span></span><br><span class="line"><span class="comment"> **********************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Create a demo application</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">event_cb</span><span class="params">(<span class="keyword">lv_event_t</span> * e)</span><span class="comment">//事件声明</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LV_LOG_USER(<span class="string">&quot;Clicked&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">uint32_t</span> cnt = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">lv_obj_t</span> * btn = lv_event_get_target(e);</span><br><span class="line">    <span class="keyword">lv_obj_t</span> * label = lv_obj_get_child(btn, <span class="number">0</span>);</span><br><span class="line">    lv_label_set_text_fmt(label, <span class="string">&quot;%&quot;</span>LV_PRIu32, cnt);</span><br><span class="line">    cnt++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lv_example_event_1</span><span class="params">(<span class="keyword">void</span>)</span>  <span class="comment">//创建一个带标签的按钮</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">lv_obj_t</span> * btn = lv_btn_create(lv_scr_act());</span><br><span class="line">    lv_obj_set_size(btn, <span class="number">100</span>, <span class="number">50</span>);</span><br><span class="line">    lv_obj_center(btn);</span><br><span class="line">    lv_obj_add_event_cb(btn, event_cb, LV_EVENT_CLICKED, <span class="literal">NULL</span>);<span class="comment">//把刚才的回调函数添加到按钮上</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">lv_obj_t</span> * label = lv_label_create(btn);</span><br><span class="line">    lv_label_set_text(label, <span class="string">&quot;Click me!&quot;</span>);</span><br><span class="line">    lv_obj_center(label);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">custom_init</span><span class="params">(lv_ui *ui)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    lv_example_event_1();    在custom-init里运行自定义函数，主要不要把回调函数写到custom-init里，会导致无法运行</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>保存文件，点guider的绿色三角按键运行。可以看到除了我们在guider里设计的按钮，还出现了自定义的按钮。点击这个按钮上边的数字会加1.这比每次测试都要烧录单片机快多了。注意这里必须要先给当前屏幕里随便添加个带事件的widget（标签不带事件不能使用），要不然不会自动生成某些代码导致报错</p><img src="https://img2022.cnblogs.com/blog/2109578/202208/2109578-20220820094207266-489501388.png"><h1 id="Gui-Guider使用"><a href="#Gui-Guider使用" class="headerlink" title="Gui-Guider使用"></a>Gui-Guider使用</h1><p>最近NXP给LVGL出了一款组态软件，让我们coding LVGL组件之外，又多了一种开发方式，可以简化为：拖拖控件，点点鼠标就能完成简单的嵌入式GUI</p><p>虽然他仅仅支持NXP的版本，但是你可以把生成的代码copy出来直接用在自己的板子上！爽歪歪？需要改善的地方就是启动太慢！！！</p><p>下面我们上一张图来看下效果</p><img src="https://img-blog.csdnimg.cn/20210224183317457.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1hpYW9YaWFvUGVuZ0Jv,size_16,color_FFFFFF,t_70"><p>视频效果如下：</p><iframe id="Y9YQDnfK-1614164354713" src="https://player.bilibili.com/player.html?aid=971784786" allowfullscreen="true" data-mediaembed="bilibili" style="box-sizing: border-box; outline: 0px; margin: 0px; padding: 0px; font-weight: normal; overflow-wrap: break-word; display: block; width: 730px; height: 365px;"></iframe><p>LVGL出PC拖控件软件了！</p><p>目前仅支持WIN10以及ubuntu,截止到2021&#x2F;02&#x2F;24最新的版本是V1.0，官网如下：</p><p><a href="https://www.nxp.com/design/software/development-software/gui-guider:GUI-GUIDER">https://www.nxp.com/design/software/development-software/gui-guider:GUI-GUIDER</a></p><p>为了简化你们的下载流程（NXP官网下载有点麻烦，需要填各种信息），我特意把软件以及user guide上传到公众号了</p><p>关注如下，发送LVGL电脑软件就会自动获取下载地址：</p><img src="https://img-blog.csdnimg.cn/20210224185847177.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1hpYW9YaWFvUGVuZ0Jv,size_16,color_FFFFFF,t_70"><hr><h1 id="相关链接-侵删"><a href="#相关链接-侵删" class="headerlink" title="相关链接(侵删)"></a>相关链接(侵删)</h1><ol><li><a href="https://www.cnblogs.com/kyo413/p/16607189.html">NXP GUI-Guider，lvgl的好伴侣 拖曳式设计并自动生成代码，而且还可以当模拟器练习代码，如何使用gui guider自定义代码</a></li><li><a href="https://blog.csdn.net/XiaoXiaoPengBo/article/details/114033697">NXP给LVGL出组态软件啦！！撒花！Gui-Guider使用</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">LVGL使用模拟器NXP GUI Guider完成界面拖拽和代码生成</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="C" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/C/"/>
    
    <category term="GUI" scheme="https://zml3589110.github.io/categories/GUI/"/>
    
    <category term="LVGL" scheme="https://zml3589110.github.io/categories/LVGL/"/>
    
    
    <category term="C" scheme="https://zml3589110.github.io/tags/C/"/>
    
    <category term="GUI" scheme="https://zml3589110.github.io/tags/GUI/"/>
    
    <category term="LVGL" scheme="https://zml3589110.github.io/tags/LVGL/"/>
    
    <category term="模拟器" scheme="https://zml3589110.github.io/tags/%E6%A8%A1%E6%8B%9F%E5%99%A8/"/>
    
    <category term="NXP" scheme="https://zml3589110.github.io/tags/NXP/"/>
    
    <category term="GUI Guider" scheme="https://zml3589110.github.io/tags/GUI-Guider/"/>
    
  </entry>
  
  <entry>
    <title>STM32实现SPI跟DMA功能</title>
    <link href="https://zml3589110.github.io/posts/423287766.html"/>
    <id>https://zml3589110.github.io/posts/423287766.html</id>
    <published>2022-12-30T12:16:20.000Z</published>
    <updated>2023-01-03T07:20:38.438Z</updated>
    
    <content type="html"><![CDATA[<p>一是想总结一下SPI总线的特点与注意点，二是总结一下SPI DMA的使用</p><h1 id="SPI总线"><a href="#SPI总线" class="headerlink" title="SPI总线"></a>SPI总线</h1><h2 id="SPI信号线说明"><a href="#SPI信号线说明" class="headerlink" title="SPI信号线说明"></a>SPI信号线说明</h2><p>通常SPI通过4个引脚与外部器件相连：</p><ul><li>MISO：主设备输入&#x2F;从设备输出引脚。该引脚在从模式下发送数据，在主模式下接收数据。</li><li>MOSI：主设备输出&#x2F;从设备输入引脚。该引脚在主模式下发送数据，在从模式下接收数据。</li><li>SCK：串口时钟，作为主设备的输出，从设备的输入</li><li>NSS：从设备选择。这是一个可选的引脚，用来选择主&#x2F;从设备。它的功能是用来作为“片选引脚”，让主设备可以单独地与特定从设备通讯，避免数据线上的冲突。</li></ul><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>MOSI脚相互连接，MISO脚相互连接。这样，数据在主和从之间串行地传输(MSB位在前)。</p><p>通信总是由主设备发起。主设备通过MOSI脚把数据发送给从设备，从设备通过MISO引脚回传数据。这意味全双工通信的数据输出和数据输入是用同一个时钟信号同步的；时钟信号由主设备通过SCK脚提供。</p><img src="https://img-blog.csdnimg.cn/img_convert/9ddeb43117eecfcfd19dfaae933c13c4.png"><h2 id="NSS说明与注意点"><a href="#NSS说明与注意点" class="headerlink" title="NSS说明与注意点"></a>NSS说明与注意点</h2><img src="https://img-blog.csdnimg.cn/img_convert/acf2381be4d45baae87331ce53abb813.png"><p>NSS分为内部引脚和外部引脚。</p><p>　　NSS外部引脚可以作为输入信号或者输出信号，输入信号一般用作硬件方式从机的片选，而输出信号一般用于主SPI去片选与之相连的从SPI。</p><p>　　NSS从设备选择有两种模式：</p><p><strong>1、软件模式</strong></p><p>　　可以通过设置SPI_CR1寄存器的SSM位来使能这种模式，当它为1时，NSS引脚上的电平由SSI决定。在这种模式下NSS外部引脚可以用作它用，而内部NSS信号电平可以通过写SPI_CR1的SSI位来驱动。　 </p><p><strong>2、硬件模式</strong></p><p>​    两种方式：</p><p>（1）对于主SPI，NSS可以直接接高电平，对于从SPI，可以直接接低电平。　　</p><p>（2）当STM32F10xxx工作为主SPI，并且NSS输出已经通过SPI_CR2寄存器的SSOE位使能，这时主机的NSS讲作为输出信号，引脚信号被拉低，所有NSS引脚与这个主SPI的NSS引脚相连并配置为硬件NSS的SPI设备，将自动变成从SPI设备。</p><p>　　此时两个的NSS信号线可以接个上拉电阻直连。</p><h1 id="DMA说明"><a href="#DMA说明" class="headerlink" title="DMA说明"></a>DMA说明</h1><p>DMA是AMBA的先进高性能总线(AHB)上的设备，它有2个AHB端口：一个是从端口，用于配置DMA，另一个是主端口，使得DMA可以在不同的从设备之间传输数据。</p><p>　　DMA的作用是在没有Cortex-M3核心的干预下，在后台完成数据传输。在传输数据的过程中，主处理器可以执行其它任务，只有在整个数据块传输结束后，需要处理这些数据时才会中断主处理器的操作。它可以在对系统性能产生较小影响的情况下，实现大量数据的传输。</p><h2 id="DMA原理"><a href="#DMA原理" class="headerlink" title="DMA原理"></a>DMA原理</h2><img src="https://img-blog.csdnimg.cn/138381ccb0ff43cd9bb719cd8017f29b.png"><p>1.CPU配置好DMA。</p><p>2.SPI发出DMA请求。（在DMA_Mode_Normal模式下，该请求实际上需要CPU命令SPI发出请求）</p><p>3.若该通道有多个请求，DMA控制器通过仲裁器判断，根据配置的优先级，选择先回应该通道高优先级的请求，再回应低优先级的请求。（此过程不需要CPU参与）</p><p>4.DMA控制器回应请求后，自动根据配置，进行数据传输。（此过程不需要CPU参与）</p><h2 id="DMA通道资源分配"><a href="#DMA通道资源分配" class="headerlink" title="DMA通道资源分配"></a>DMA通道资源分配</h2><p><strong>DMA1通道</strong></p><img src="https://img-blog.csdnimg.cn/31268ec27cad48b7a00f79f4dbdb8dec.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5Y-r5oiR6LCi5biD5pav,size_20,color_FFFFFF,t_70,g_se,x_16"><p><strong>DMA2通道</strong></p><img src="https://img-blog.csdnimg.cn/4588f91124354944b34e22e937e7c960.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5Y-r5oiR6LCi5biD5pav,size_20,color_FFFFFF,t_70,g_se,x_16"><h1 id="SPI-DMA的通信过程"><a href="#SPI-DMA的通信过程" class="headerlink" title="SPI_DMA的通信过程"></a>SPI_DMA的通信过程</h1><ul><li><p>设置外设地址</p></li><li><p>设置存储器地址</p></li><li><p>设置传输数据量</p></li><li><p>设置通道的配置信息</p></li><li><p>使能DMA通道，启动传输</p></li><li><p>发送时，在每次TXE被设置为’1’时发出DMA请求，DMA控制器则写数据至SPI_DR寄存器，TXE标志因此而被清除。</p></li><li><p>接收时，在每次RXNE被设置为’1’时发出DMA请求，DMA控制器则从SPI_DR寄存器读出数据，RXNE标志因此而被清除。</p></li></ul><h2 id="相关配置代码（方法一）"><a href="#相关配置代码（方法一）" class="headerlink" title="相关配置代码（方法一）"></a>相关配置代码（方法一）</h2><p>这里使用的是SPI1</p><p><strong>SPI_DMA配置</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment">* Function Name  : SPI1_DMA_Configuration</span></span><br><span class="line"><span class="comment">* Description    : 配置SPI1_RX的DMA通道2，SPI1_TX的DMA通道3</span></span><br><span class="line"><span class="comment">* Input          : None</span></span><br><span class="line"><span class="comment">* Output         : None</span></span><br><span class="line"><span class="comment">* Return         : None</span></span><br><span class="line"><span class="comment">* Attention             :</span></span><br><span class="line"><span class="comment">*******************************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SPI1_DMA_Configuration</span><span class="params">( <span class="keyword">void</span> )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DMA_InitTypeDef DMA_InitStructure;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* DMA1 Channel2 (triggered by SPI1 Rx event) Config */</span></span><br><span class="line">  DMA_DeInit(DMA1_Channel2);</span><br><span class="line">  DMA_InitStructure.DMA_PeripheralBaseAddr = SPI1_DR_Addr;                          <span class="comment">//设置 SPI1 发送外设(0x4001300C) 地址(目的地址)</span></span><br><span class="line">  DMA_InitStructure.DMA_MemoryBaseAddr = (<span class="keyword">uint32_t</span>)SPI1_RX_Buff;                    <span class="comment">//设置 SRAM 存储地址(目的地址)</span></span><br><span class="line">  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;                                <span class="comment">//传输方向 外设-内存</span></span><br><span class="line">  DMA_InitStructure.DMA_BufferSize = SPI1_ReciveBufferSize;                         <span class="comment">//设置 SPI1 发送长度</span></span><br><span class="line">  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;</span><br><span class="line">  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;</span><br><span class="line">  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;</span><br><span class="line">  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;</span><br><span class="line">  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;</span><br><span class="line">  DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;</span><br><span class="line">  DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;</span><br><span class="line">  DMA_Init(DMA1_Channel2, &amp;DMA_InitStructure);</span><br><span class="line"> </span><br><span class="line">  DMA_ITConfig(DMA1_Channel2, DMA_IT_TC, ENABLE);</span><br><span class="line">  <span class="comment">/* Enable SPI1 DMA RX request */</span></span><br><span class="line">  SPI1-&gt;CR2 |= <span class="number">1</span>&lt;&lt;<span class="number">0</span>;                                                                 <span class="comment">//接收缓冲区DMA使能</span></span><br><span class="line">  DMA_Cmd(DMA1_Channel2, ENABLE);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* DMA1 Channel3 (triggered by SPI1 Tx event) Config */</span></span><br><span class="line">  DMA_DeInit(DMA1_Channel3);</span><br><span class="line">  DMA_InitStructure.DMA_PeripheralBaseAddr = SPI1_DR_Addr;                          <span class="comment">//设置  接收外设(0x4001300C) 地址(源地址)</span></span><br><span class="line">  DMA_InitStructure.DMA_MemoryBaseAddr = (<span class="keyword">uint32_t</span>)SPI1_TX_Buff;                    <span class="comment">//设置 SRAM 存储地址(源地址)</span></span><br><span class="line">  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST;                                <span class="comment">//传输方向 内存-外设</span></span><br><span class="line">  DMA_InitStructure.DMA_BufferSize = SPI1_SendBufferSize;                           <span class="comment">//设置 SPI1 接收长度</span></span><br><span class="line">  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;                  <span class="comment">//外设地址增量(不变)</span></span><br><span class="line">  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;                           <span class="comment">//内存地址增量(变化)</span></span><br><span class="line">  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;           <span class="comment">//外设传输宽度(字节)</span></span><br><span class="line">  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;                   <span class="comment">//内存传输宽度(字节)</span></span><br><span class="line">  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;                                     <span class="comment">//传输方式,一次传输完停止,不重新加载</span></span><br><span class="line">  DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;                           <span class="comment">//中断方式-高(三级)</span></span><br><span class="line">  DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;                                      <span class="comment">//内存到内存方式禁止</span></span><br><span class="line">  DMA_Init(DMA1_Channel3, &amp;DMA_InitStructure);</span><br><span class="line"> </span><br><span class="line">  DMA_ITConfig(DMA1_Channel3, DMA_IT_TC, ENABLE);                                   <span class="comment">//开启 DMA1_Channel3 传输完成中断</span></span><br><span class="line">  DMA_ITConfig(DMA1_Channel3, DMA_IT_TE, ENABLE);                                   <span class="comment">//开启 DMA1_Channel3 传输错误中断</span></span><br><span class="line">  <span class="comment">/* Enable SPI1 DMA TX request */</span></span><br><span class="line">  SPI1-&gt;CR2 |= <span class="number">1</span>&lt;&lt;<span class="number">1</span>;                                                                <span class="comment">//发送缓冲区DMA使能</span></span><br><span class="line">  DMA_Cmd(DMA1_Channel3, DISABLE);                                                  <span class="comment">//开启 DMA 通道 DMA1_Channel3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>SPI发送</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment">* Function Name  : SPI1_Send</span></span><br><span class="line"><span class="comment">* Description    : SPI1的DMA方式发送</span></span><br><span class="line"><span class="comment">* Input          : SPI1_TX_Buff[SPI1_SendBufferSize]</span></span><br><span class="line"><span class="comment">* Output         : None</span></span><br><span class="line"><span class="comment">* Return         : None</span></span><br><span class="line"><span class="comment">* Attention             : 关闭DMA通道3之前必须等待TXE为1，等待忙标志为0</span></span><br><span class="line"><span class="comment">*******************************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SPI1_Send</span><span class="params">( u8 *buff, u32 len )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DMA1_Channel3-&gt;CPAR = SPI1_DR_Addr; <span class="comment">//外设地址</span></span><br><span class="line">    DMA1_Channel3-&gt;CMAR = (u32) buff; <span class="comment">//mem地址</span></span><br><span class="line">    DMA1_Channel3-&gt;CNDTR = len ; <span class="comment">//传输长度</span></span><br><span class="line">    DMA1_Channel3-&gt;CCR = (<span class="number">0</span> &lt;&lt; <span class="number">14</span>) | <span class="comment">// 非存储器到存储器模式</span></span><br><span class="line">            (<span class="number">2</span> &lt;&lt; <span class="number">12</span>) | <span class="comment">// 通道优先级高</span></span><br><span class="line">            (<span class="number">0</span> &lt;&lt; <span class="number">11</span>) | <span class="comment">// 存储器数据宽度8bit</span></span><br><span class="line">            (<span class="number">0</span> &lt;&lt; <span class="number">10</span>) | <span class="comment">// 存储器数据宽度8bit</span></span><br><span class="line">            (<span class="number">0</span> &lt;&lt;  <span class="number">9</span>) | <span class="comment">// 外设数据宽度8bit</span></span><br><span class="line">            (<span class="number">0</span> &lt;&lt;  <span class="number">8</span>) | <span class="comment">// 外设数据宽度8bit</span></span><br><span class="line">            (<span class="number">1</span> &lt;&lt;  <span class="number">7</span>) | <span class="comment">// 存储器地址增量模式</span></span><br><span class="line">            (<span class="number">0</span> &lt;&lt;  <span class="number">6</span>) | <span class="comment">// 外设地址增量模式(不增)</span></span><br><span class="line">            (<span class="number">0</span> &lt;&lt;  <span class="number">5</span>) | <span class="comment">// 非循环模式</span></span><br><span class="line">            (<span class="number">1</span> &lt;&lt;  <span class="number">4</span>) | <span class="comment">// 从存储器读</span></span><br><span class="line">            (<span class="number">1</span> &lt;&lt;  <span class="number">3</span>) | <span class="comment">// 允许传输错误中断</span></span><br><span class="line">            (<span class="number">0</span> &lt;&lt;  <span class="number">2</span>) | <span class="comment">// 允许半传输中断</span></span><br><span class="line">            (<span class="number">1</span> &lt;&lt;  <span class="number">1</span>) | <span class="comment">// 允许传输完成中断</span></span><br><span class="line">            (<span class="number">1</span>);        <span class="comment">// 通道开启</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>SPI接收</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment">* Function Name  : SPI1_Recive</span></span><br><span class="line"><span class="comment">* Description    : SPI1的DMA方式接收</span></span><br><span class="line"><span class="comment">* Input          : None</span></span><br><span class="line"><span class="comment">* Output         : SPI1_RX_Buff[SPI1_ReciveBufferSize]</span></span><br><span class="line"><span class="comment">* Return         : None</span></span><br><span class="line"><span class="comment">* Attention             : 必须要先关闭通道2,然后再配置通道2的参数</span></span><br><span class="line"><span class="comment">*******************************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SPI1_Recive</span><span class="params">( u8 *buff, u32 len )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DMA1_Channel2-&gt;CCR &amp;= ~( <span class="number">1</span> &lt;&lt; <span class="number">0</span> );          <span class="comment">//关闭DMA通道2</span></span><br><span class="line"> </span><br><span class="line">    DMA1_Channel2-&gt;CPAR = SPI1_DR_Addr; <span class="comment">//外设地址</span></span><br><span class="line">    DMA1_Channel2-&gt;CMAR = (<span class="keyword">uint32_t</span>)buff; <span class="comment">//mem地址</span></span><br><span class="line">    DMA1_Channel2-&gt;CNDTR = len ; <span class="comment">//传输长度</span></span><br><span class="line">    DMA1_Channel2-&gt;CCR = (<span class="number">0</span> &lt;&lt; <span class="number">14</span>) | <span class="comment">// 非存储器到存储器模式</span></span><br><span class="line">            (<span class="number">2</span> &lt;&lt; <span class="number">12</span>) | <span class="comment">// 通道优先级高</span></span><br><span class="line">            (<span class="number">0</span> &lt;&lt; <span class="number">11</span>) | <span class="comment">// 存储器数据宽度8bit</span></span><br><span class="line">            (<span class="number">0</span> &lt;&lt; <span class="number">10</span>) | <span class="comment">// 存储器数据宽度8bit</span></span><br><span class="line">            (<span class="number">0</span> &lt;&lt;  <span class="number">9</span>) | <span class="comment">// 外设数据宽度8bit</span></span><br><span class="line">            (<span class="number">0</span> &lt;&lt;  <span class="number">8</span>) | <span class="comment">// 外设数据宽度8bit</span></span><br><span class="line">            (<span class="number">1</span> &lt;&lt;  <span class="number">7</span>) | <span class="comment">// 存储器地址增量模式</span></span><br><span class="line">            (<span class="number">0</span> &lt;&lt;  <span class="number">6</span>) | <span class="comment">// 外设地址增量模式(不增)</span></span><br><span class="line">            (<span class="number">0</span> &lt;&lt;  <span class="number">5</span>) | <span class="comment">// 非循环模式</span></span><br><span class="line">            (<span class="number">0</span> &lt;&lt;  <span class="number">4</span>) | <span class="comment">// 传输方向 外设-内存</span></span><br><span class="line">            (<span class="number">0</span> &lt;&lt;  <span class="number">3</span>) | <span class="comment">// 允许传输错误中断</span></span><br><span class="line">            (<span class="number">0</span> &lt;&lt;  <span class="number">2</span>) | <span class="comment">// 允许半传输中断</span></span><br><span class="line">            (<span class="number">1</span> &lt;&lt;  <span class="number">1</span>) | <span class="comment">// 允许传输完成中断</span></span><br><span class="line">            (<span class="number">1</span>);        <span class="comment">// 通道开启</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="相关配置代码（方法二）"><a href="#相关配置代码（方法二）" class="headerlink" title="相关配置代码（方法二）"></a>相关配置代码（方法二）</h2><p><em>既然使用的是SPI+DMA,必定要使能SPI，详细请参考</em></p><p><em><a href="https://blog.csdn.net/m0_67530207/article/details/127021750">SPI配置</a></em></p><p><em>配置完SPI后，配置DMA，如下</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dma_init</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> SendBuff,<span class="keyword">unsigned</span> <span class="keyword">int</span> buffer_size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> </span><br><span class="line">DMA_InitTypeDef DMA_InitStructure;</span><br><span class="line">RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1,ENABLE);</span><br><span class="line">DMA_DeInit(DMA1_Channel3);</span><br><span class="line"><span class="comment">/*DMA配置*/</span></span><br><span class="line"> </span><br><span class="line">DMA_InitStructure.DMA_PeripheralBaseAddr = (<span class="keyword">uint32_t</span>)&amp;SPI1-&gt;DR;</span><br><span class="line"><span class="comment">//SPI数据寄存器地址</span></span><br><span class="line">DMA_InitStructure.DMA_MemoryBaseAddr = (<span class="keyword">uint32_t</span>)SendBuff; </span><br><span class="line"><span class="comment">//内存地址(要传输的变量的指针)</span></span><br><span class="line">DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST; </span><br><span class="line"><span class="comment">//方向(从内存到外设)</span></span><br><span class="line"><span class="comment">//DMA_DIR_PeripheralSRC为从外设到内存</span></span><br><span class="line">DMA_InitStructure.DMA_BufferSize = buffer_size; </span><br><span class="line"><span class="comment">//传输内容的大小</span></span><br><span class="line">DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable; </span><br><span class="line"><span class="comment">//外设地址不增</span></span><br><span class="line">DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable; </span><br><span class="line"><span class="comment">//内存地址自增</span></span><br><span class="line">DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte ; </span><br><span class="line"><span class="comment">//外设数据单位</span></span><br><span class="line">DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte ; </span><br><span class="line"><span class="comment">//内存数据单位</span></span><br><span class="line">DMA_InitStructure.DMA_Mode = DMA_Mode_Normal ; </span><br><span class="line"><span class="comment">//DMA模式：一次传输</span></span><br><span class="line">DMA_InitStructure.DMA_Priority = DMA_Priority_Medium ; </span><br><span class="line"><span class="comment">//优先级：高</span></span><br><span class="line">DMA_InitStructure.DMA_M2M = DMA_M2M_Disable; </span><br><span class="line"><span class="comment">//禁止内存到内存的传输</span></span><br><span class="line"> </span><br><span class="line">DMA_Init(DMA1_Channel3, &amp;DMA_InitStructure); </span><br><span class="line"><span class="comment">//配置DMA1的3通道</span></span><br><span class="line">DMA_Cmd(DMA1_Channel3, ENABLE);       <span class="comment">//使能DMA</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：DMA_PeripheralBaseAddr不是SPI外设的地址，而是SPI1-&gt;DR即SPI数据寄存器的地址</strong></p><p><strong>因为DMA_Mode_Normal模式使用一次后DMA_BufferSize会清零，如下代码用于重置DMA_BufferSize</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DMA_Buffercounter_reset</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> buffer_size)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">DMA_Cmd(DMA1_Channel3, DISABLE );     </span><br><span class="line"><span class="comment">//失能DMA，使得DMA_SetCurrDataCounter能够使用</span></span><br><span class="line"> DMA_SetCurrDataCounter(DMA1_Channel3,buffer_size); </span><br><span class="line"><span class="comment">//一次传输模式，DMA_BufferSize执行一次后会清零</span></span><br><span class="line"><span class="comment">//后续需要重复传输的时候，需要使用该函数再次设置DMA_BufferSize</span></span><br><span class="line"> DMA_Cmd(DMA1_Channel3, ENABLE);       </span><br><span class="line"><span class="comment">//使能DMA</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="主函数编写如下"><a href="#主函数编写如下" class="headerlink" title="主函数编写如下"></a>主函数编写如下</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> buff_size 256</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> sendbuff[buff_size];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mian</span><span class="params">(coid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dma_init((<span class="keyword">unsigned</span> <span class="keyword">int</span>)sendbuff,buff_size);</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span> ;i&lt;buff_size;i++)</span><br><span class="line">&#123;</span><br><span class="line">          sendbuff[i]=color;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span> ; i&lt;(<span class="number">32768</span>/buff_size); i++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  SPI_I2S_DMACmd(SPI1,SPI_I2S_DMAReq_Tx,ENABLE); </span><br><span class="line">          <span class="comment">//SPI向DMA发出请求，DMA会通过仲裁器自动回应请求 </span></span><br><span class="line">  DMA_Buffercounter_reset(buff_size);</span><br><span class="line">          <span class="comment">//重置DMA_BufferSize，为下一次DMA传送做好准备</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(DMA_GetFlagStatus(DMA1_FLAG_TC3)!=RESET)<span class="comment">//判断DMA是否传输完成</span></span><br><span class="line">&#123;</span><br><span class="line">DMA_ClearFlag(DMA1_FLAG_TC3);<span class="comment">//DMA传输完成，清除标志位</span></span><br><span class="line"><span class="keyword">break</span>; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="相关链接-侵删"><a href="#相关链接-侵删" class="headerlink" title="相关链接(侵删)"></a>相关链接(侵删)</h1><ol><li><a href="https://blog.csdn.net/ba_wang_mao/article/details/109166336">STM32 SPI DMA 的使用</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">STM32实现SPI跟DMA传输功能</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="C" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/C/"/>
    
    <category term="STM32" scheme="https://zml3589110.github.io/categories/STM32/"/>
    
    <category term="DMA" scheme="https://zml3589110.github.io/categories/DMA/"/>
    
    <category term="SPI" scheme="https://zml3589110.github.io/categories/SPI/"/>
    
    
    <category term="STM32" scheme="https://zml3589110.github.io/tags/STM32/"/>
    
    <category term="C" scheme="https://zml3589110.github.io/tags/C/"/>
    
    <category term="SPI" scheme="https://zml3589110.github.io/tags/SPI/"/>
    
    <category term="keil" scheme="https://zml3589110.github.io/tags/keil/"/>
    
    <category term="DMA" scheme="https://zml3589110.github.io/tags/DMA/"/>
    
  </entry>
  
  <entry>
    <title>STM32通过SPI驱动ST7789(使用DMA)</title>
    <link href="https://zml3589110.github.io/posts/944314574.html"/>
    <id>https://zml3589110.github.io/posts/944314574.html</id>
    <published>2022-12-30T09:03:20.000Z</published>
    <updated>2023-01-03T07:20:38.428Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DMA简单介绍"><a href="#DMA简单介绍" class="headerlink" title="DMA简单介绍"></a>DMA简单介绍</h1><p>DMA 直接内存搬运技术，使数据不经过cpu，直接从内存搬运到spi的发送的寄存器里面，这样做的好处是减少cpu的负担，而且能大大提升显示屏的刷新速率</p><h1 id="使用spi直接驱动ST7789显示屏"><a href="#使用spi直接驱动ST7789显示屏" class="headerlink" title="使用spi直接驱动ST7789显示屏"></a>使用spi直接驱动ST7789显示屏</h1><p>最开始我是用spi直接驱动 显示屏幕，但我发现即使是使用spi的最大频率发送数据，刷屏的速率依旧很慢</p><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;sys.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;st7789.h&quot;</span></span></span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"> </span>&#123; </span><br><span class="line"> delay_init();     <span class="comment">//ÑÓÊ±º¯Êý³õÊ¼»¯  </span></span><br><span class="line"> initlcd();</span><br><span class="line"> <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"> fillScreen(<span class="number">0xf800</span>);</span><br><span class="line">   <span class="comment">//delay_us(100);</span></span><br><span class="line"> fillScreen(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// delay_us(100);</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>&lt;st7789.h&gt;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;sys.h&quot;</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DC    PBout(11) <span class="comment">//DC  </span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initlcd</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">writeData</span><span class="params">(u8 data)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">writeCommand</span><span class="params">(u8 data)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fillScreen</span><span class="params">(u16 color)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SPI1_Init</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SPI1_SetSpeed</span><span class="params">(u8 SpeedSet)</span></span>;   </span><br><span class="line"><span class="function">u8 <span class="title">SPI1_ReadWriteByte</span><span class="params">(u8 TxData)</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>&lt;st7789.c&gt;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;st7789.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;delay.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">SPI_InitTypeDef  SPI_InitStructure;</span><br><span class="line"><span class="comment">//spi1的初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SPI1_Init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">    </span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA|RCC_APB2Periph_SPI1, ENABLE );</span><br><span class="line"> </span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7;</span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;  <span class="comment">//¸´ÓÃÍÆÍìÊä³ö</span></span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line"> GPIO_SetBits(GPIOA,GPIO_Pin_5|GPIO_Pin_6|GPIO_Pin_7);</span><br><span class="line"></span><br><span class="line">SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;  <span class="comment">//</span></span><br><span class="line">SPI_InitStructure.SPI_Mode = SPI_Mode_Master;<span class="comment">//</span></span><br><span class="line">SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;<span class="comment">//</span></span><br><span class="line">SPI_InitStructure.SPI_CPOL = SPI_CPOL_High;<span class="comment">//</span></span><br><span class="line">SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;<span class="comment">//</span></span><br><span class="line">SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;</span><br><span class="line">SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_256;<span class="comment">//</span></span><br><span class="line">SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;<span class="comment">//</span></span><br><span class="line">SPI_InitStructure.SPI_CRCPolynomial = <span class="number">7</span>;<span class="comment">//</span></span><br><span class="line">SPI_Init(SPI1, &amp;SPI_InitStructure);  <span class="comment">//</span></span><br><span class="line"> </span><br><span class="line">SPI_Cmd(SPI1, ENABLE); <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">SPI1_ReadWriteByte(<span class="number">0xff</span>);<span class="comment">// </span></span><br><span class="line">&#125;   </span><br><span class="line"></span><br><span class="line"> <span class="comment">//设置spi的传输速率</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SPI1_SetSpeed</span><span class="params">(u8 SpeedSet)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SPI_InitStructure.SPI_BaudRatePrescaler = SpeedSet ;</span><br><span class="line">  SPI_Init(SPI1, &amp;SPI_InitStructure);</span><br><span class="line">SPI_Cmd(SPI1,ENABLE);</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//spi 读写</span></span><br><span class="line"><span class="function">u8 <span class="title">SPI1_ReadWriteByte</span><span class="params">(u8 TxData)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u8 retry=<span class="number">0</span>; </span><br><span class="line"><span class="keyword">while</span> (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET) <span class="comment">//</span></span><br><span class="line">&#123;</span><br><span class="line">retry++;</span><br><span class="line"><span class="keyword">if</span>(retry&gt;<span class="number">200</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br><span class="line">SPI_I2S_SendData(SPI1, TxData); </span><br><span class="line">retry=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET)<span class="comment">//</span></span><br><span class="line">&#123;</span><br><span class="line">retry++;</span><br><span class="line"><span class="keyword">if</span>(retry&gt;<span class="number">200</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;      </span><br><span class="line"><span class="keyword">return</span> SPI_I2S_ReceiveData(SPI1); <span class="comment">//    </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化显示屏</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initlcd</span><span class="params">()</span></span>&#123;</span><br><span class="line"> RCC-&gt;APB2ENR|=<span class="number">1</span>&lt;&lt;<span class="number">3</span>;<span class="comment">//时钟使能 </span></span><br><span class="line">GPIOB-&gt;CRH&amp;=<span class="number">0XFFFF0FFF</span>;<span class="comment">//设置为输出模式</span></span><br><span class="line">GPIOB-&gt;CRH|=<span class="number">0X00003000</span>;</span><br><span class="line">GPIOB-&gt;ODR|=<span class="number">1</span>&lt;<span class="number">11</span>;     <span class="comment">//dc high</span></span><br><span class="line"></span><br><span class="line">    SPI1_Init();</span><br><span class="line">SPI1_SetSpeed(SPI_BaudRatePrescaler_2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    writeCommand(<span class="number">0x01</span>);</span><br><span class="line">delay_us(<span class="number">150</span>);</span><br><span class="line">writeCommand(<span class="number">0x11</span>);</span><br><span class="line">delay_us(<span class="number">120</span>);</span><br><span class="line">writeCommand(<span class="number">0x3A</span>);</span><br><span class="line">writeData(<span class="number">0x55</span>);</span><br><span class="line">writeCommand(<span class="number">0x36</span>);</span><br><span class="line">writeData(<span class="number">0x00</span>);</span><br><span class="line">writeCommand(<span class="number">0x21</span>);</span><br><span class="line">writeCommand(<span class="number">0x13</span>);</span><br><span class="line">writeCommand(<span class="number">0x29</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">writeData</span><span class="params">(u8 data)</span></span>&#123;</span><br><span class="line">   DC = <span class="number">1</span>;</span><br><span class="line">   SPI1_ReadWriteByte(data);</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">writeCommand</span><span class="params">(u8 cmd)</span></span>&#123;</span><br><span class="line"> DC = <span class="number">0</span>;</span><br><span class="line">   SPI1_ReadWriteByte(cmd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fillScreen</span><span class="params">(u16 color)</span></span>&#123;</span><br><span class="line">  u16 i ,j;</span><br><span class="line">  writeCommand(<span class="number">0x2A</span>);</span><br><span class="line">  writeData(<span class="number">0</span>);</span><br><span class="line">  writeData(<span class="number">0</span>);</span><br><span class="line">  writeData(<span class="number">0</span>);</span><br><span class="line">  writeData(<span class="number">240</span>);</span><br><span class="line">  writeCommand(<span class="number">0X2B</span>);</span><br><span class="line">  writeData(<span class="number">0</span>);</span><br><span class="line">  writeData(<span class="number">0</span>);</span><br><span class="line">  writeData(<span class="number">0X01</span>);</span><br><span class="line">  writeData(<span class="number">0X40</span>);</span><br><span class="line">  writeCommand(<span class="number">0X2C</span>);</span><br><span class="line">  <span class="keyword">for</span>(i = <span class="number">0</span> ; i&lt;<span class="number">240</span> ; i++)&#123;</span><br><span class="line">  <span class="keyword">for</span>(j = <span class="number">0</span> ; j&lt;<span class="number">320</span> ; j++)&#123;</span><br><span class="line">       writeData(color&gt;&gt;<span class="number">8</span>);  </span><br><span class="line">          writeData(color);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p><strong>刷新频率约 1秒3帧</strong></p><img src="https://img-blog.csdnimg.cn/20200523130634474.gif#pic_center"><h1 id="使用spi加dma驱动ST7789显示屏"><a href="#使用spi加dma驱动ST7789显示屏" class="headerlink" title="使用spi加dma驱动ST7789显示屏"></a>使用spi加dma驱动ST7789显示屏</h1><blockquote><p>在使dma搬运数据后刷新速率有了明显的提升</p></blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;sys.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;st7789.h&quot;</span>    </span></span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"> </span>&#123; </span><br><span class="line"> delay_init();       </span><br><span class="line"> initlcd();</span><br><span class="line"> <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">   fillScreen(<span class="number">0xf800</span>);</span><br><span class="line">   fillScreen(<span class="number">0xffff</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>&lt;st7789.h&gt;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;sys.h&quot;</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DC    PBout(11) <span class="comment">//DC  </span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initlcd</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">writeData</span><span class="params">(u8 data)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">writeCommand</span><span class="params">(u8 data)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fillScreen</span><span class="params">(u16 color)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SPI1_Init</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SPI1_SetSpeed</span><span class="params">(u8 SpeedSet)</span></span>;   </span><br><span class="line"><span class="function">u8 <span class="title">SPI1_ReadWriteByte</span><span class="params">(u8 TxData)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MYDMA_Config</span><span class="params">(DMA_Channel_TypeDef*DMA_CHx,u32 cpar,u32 cmar,u16 cndtr)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MYDMA_Enable</span><span class="params">(DMA_Channel_TypeDef*DMA_CHx)</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>&lt;st7789.c&gt;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;st7789.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;sys.h&quot;</span></span></span><br><span class="line">u8 SendBuff[<span class="number">480</span>];</span><br><span class="line">DMA_InitTypeDef DMA_InitStructure;</span><br><span class="line">u16 DMA1_MEM_LEN;    </span><br><span class="line"><span class="comment">//配置dma</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MYDMA_Config</span><span class="params">(DMA_Channel_TypeDef* DMA_CHx,u32 cpar,u32 cmar,u16 cndtr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);<span class="comment">//Ê¹ÄÜDMA´«Êä</span></span><br><span class="line"></span><br><span class="line">    DMA_DeInit(DMA_CHx);   <span class="comment">//将dma1的某通道</span></span><br><span class="line">DMA1_MEM_LEN=cndtr;</span><br><span class="line">DMA_InitStructure.DMA_PeripheralBaseAddr = cpar;  <span class="comment">//dma 要搬运到的外设地址</span></span><br><span class="line">DMA_InitStructure.DMA_MemoryBaseAddr = cmar;  <span class="comment">//dma要搬运的内存的地址</span></span><br><span class="line">DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST;  <span class="comment">//搬运方向， 从内存到外设</span></span><br><span class="line">DMA_InitStructure.DMA_BufferSize = cndtr; <span class="comment">//要搬运的内存的大小</span></span><br><span class="line">DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable; <span class="comment">//  传输过程中外设的基地址不变</span></span><br><span class="line">DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;  <span class="comment">//传输过程中内存地址递增</span></span><br><span class="line">DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;  <span class="comment">//数据宽度为八位</span></span><br><span class="line">DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;<span class="comment">//数据宽度为八位 </span></span><br><span class="line">DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;  <span class="comment">//正常传输模式</span></span><br><span class="line">DMA_InitStructure.DMA_Priority = DMA_Priority_Medium; <span class="comment">//优先级设置</span></span><br><span class="line">DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;  <span class="comment">//没有内存到内存的传输</span></span><br><span class="line">DMA_Init(DMA_CHx, &amp;DMA_InitStructure);  <span class="comment">//</span></span><br><span class="line">  </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//使能dma1的通道3，因为spi输出对应的是此通道</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MYDMA_Enable</span><span class="params">(DMA_Channel_TypeDef*DMA_CHx)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">DMA_Cmd(DMA_CHx, DISABLE );    </span><br><span class="line"> DMA_SetCurrDataCounter(DMA1_Channel3,DMA1_MEM_LEN);</span><br><span class="line"> DMA_Cmd(DMA_CHx, ENABLE);  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SPI_InitTypeDef  SPI_InitStructure;</span><br><span class="line"><span class="comment">//spi1的初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SPI1_Init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">  </span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA|RCC_APB2Periph_SPI1, ENABLE );</span><br><span class="line"> </span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7;</span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;  </span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line"> GPIO_SetBits(GPIOA,GPIO_Pin_5|GPIO_Pin_6|GPIO_Pin_7);</span><br><span class="line"></span><br><span class="line">SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;  </span><br><span class="line">SPI_InitStructure.SPI_Mode = SPI_Mode_Master;</span><br><span class="line">SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;</span><br><span class="line">SPI_InitStructure.SPI_CPOL = SPI_CPOL_High;</span><br><span class="line">SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;</span><br><span class="line">SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;</span><br><span class="line">SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_256;<span class="comment">//</span></span><br><span class="line">SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;</span><br><span class="line">SPI_InitStructure.SPI_CRCPolynomial = <span class="number">7</span>;</span><br><span class="line">SPI_Init(SPI1, &amp;SPI_InitStructure); <span class="comment">//´æÆ÷</span></span><br><span class="line"> </span><br><span class="line">SPI_Cmd(SPI1, ENABLE); </span><br><span class="line"></span><br><span class="line">SPI1_ReadWriteByte(<span class="number">0xff</span>); </span><br><span class="line">&#125;   </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SPI1_SetSpeed</span><span class="params">(u8 SpeedSet)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SPI_InitStructure.SPI_BaudRatePrescaler = SpeedSet ;</span><br><span class="line">  SPI_Init(SPI1, &amp;SPI_InitStructure);</span><br><span class="line">SPI_Cmd(SPI1,ENABLE);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">u8 <span class="title">SPI1_ReadWriteByte</span><span class="params">(u8 TxData)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u8 retry=<span class="number">0</span>; </span><br><span class="line"><span class="keyword">while</span> (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET) <span class="comment">//</span></span><br><span class="line">&#123;</span><br><span class="line">retry++;</span><br><span class="line"><span class="keyword">if</span>(retry&gt;<span class="number">200</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br><span class="line">SPI_I2S_SendData(SPI1, TxData); </span><br><span class="line">retry=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET)<span class="comment">//</span></span><br><span class="line">&#123;</span><br><span class="line">retry++;</span><br><span class="line"><span class="keyword">if</span>(retry&gt;<span class="number">200</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;      </span><br><span class="line"><span class="keyword">return</span> SPI_I2S_ReceiveData(SPI1);     </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initlcd</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"> RCC-&gt;APB2ENR|=<span class="number">1</span>&lt;&lt;<span class="number">3</span>;<span class="comment">//?????IO PORTC??  </span></span><br><span class="line">GPIOB-&gt;CRH&amp;=<span class="number">0XFFFF0FFF</span>;<span class="comment">//PC11/12 </span></span><br><span class="line">GPIOB-&gt;CRH|=<span class="number">0X00003000</span>;</span><br><span class="line">GPIOB-&gt;ODR|=<span class="number">1</span>&lt;<span class="number">11</span>;     <span class="comment">//PC11,12 ???</span></span><br><span class="line">  </span><br><span class="line">  SPI1_Init();</span><br><span class="line">SPI1_SetSpeed(SPI_BaudRatePrescaler_2);</span><br><span class="line"><span class="comment">//配置dma</span></span><br><span class="line">MYDMA_Config(DMA1_Channel3,(u32)&amp;SPI1-&gt;DR,(u32)SendBuff,<span class="number">480</span>);</span><br><span class="line"></span><br><span class="line">  writeCommand(<span class="number">0x01</span>);</span><br><span class="line">delay_us(<span class="number">150</span>);</span><br><span class="line">writeCommand(<span class="number">0x11</span>);</span><br><span class="line">delay_us(<span class="number">120</span>);</span><br><span class="line">writeCommand(<span class="number">0x3A</span>);</span><br><span class="line">writeData(<span class="number">0x55</span>);</span><br><span class="line">writeCommand(<span class="number">0x36</span>);</span><br><span class="line">writeData(<span class="number">0x00</span>);</span><br><span class="line">writeCommand(<span class="number">0x21</span>);</span><br><span class="line">writeCommand(<span class="number">0x13</span>);</span><br><span class="line">writeCommand(<span class="number">0x29</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">writeData</span><span class="params">(u8 data)</span></span>&#123;</span><br><span class="line">   DC = <span class="number">1</span>;</span><br><span class="line">   SPI1_ReadWriteByte(data);</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">writeCommand</span><span class="params">(u8 cmd)</span></span>&#123;</span><br><span class="line"> DC = <span class="number">0</span>;</span><br><span class="line">   SPI1_ReadWriteByte(cmd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fillScreen</span><span class="params">(u16 color)</span></span>&#123;</span><br><span class="line">u16 i ,j;</span><br><span class="line"><span class="comment">//DC = 0;</span></span><br><span class="line">  writeCommand(<span class="number">0x2A</span>);</span><br><span class="line">  writeData(<span class="number">0</span>);</span><br><span class="line">  writeData(<span class="number">0</span>);</span><br><span class="line">writeData(<span class="number">0</span>);</span><br><span class="line">writeData(<span class="number">240</span>);</span><br><span class="line">  writeCommand(<span class="number">0X2B</span>);</span><br><span class="line">  writeData(<span class="number">0</span>);</span><br><span class="line">  writeData(<span class="number">0</span>);</span><br><span class="line">writeData(<span class="number">0X01</span>);</span><br><span class="line">writeData(<span class="number">0X40</span>);</span><br><span class="line">  writeCommand(<span class="number">0X2C</span>);</span><br><span class="line">DC = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span> ;j&lt;<span class="number">480</span>;)&#123;</span><br><span class="line">      SendBuff[j] = color&gt;&gt;<span class="number">8</span>;</span><br><span class="line">  SendBuff[j+<span class="number">1</span>] = color;</span><br><span class="line">  j += <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(i = <span class="number">0</span> ; i&lt;<span class="number">320</span> ; i++)&#123;</span><br><span class="line"></span><br><span class="line">  SPI_I2S_DMACmd(SPI1,SPI_I2S_DMAReq_Tx,ENABLE); <span class="comment">//????1?DMA?? </span></span><br><span class="line">      MYDMA_Enable(DMA1_Channel3);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(DMA_GetFlagStatus(DMA1_FLAG_TC3)!=RESET)<span class="comment">//µÈ´ýÍ¨µÀ4´«ÊäÍê³É</span></span><br><span class="line">&#123;</span><br><span class="line">DMA_ClearFlag(DMA1_FLAG_TC3);<span class="comment">//Çå³ýÍ¨µÀ4´«ÊäÍê³É±êÖ¾</span></span><br><span class="line"><span class="keyword">break</span>; </span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h2><p><strong>刷新速率约一秒十多帧</strong></p><img src="https://img-blog.csdnimg.cn/20200523130804683.gif#pic_center"><h1 id="连线"><a href="#连线" class="headerlink" title="连线"></a>连线</h1><p>DC(A0)———— PB11<br>CLK———– PA5<br>MISO——— PA6<br>MOSI(SDA)——— PA7<br>CS———— GND</p><p>RESET———— VDD<br>BL———— VDD</p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p>dma和spi部分参考正点原子代码，示例使用的主控芯片是stm32f103</p><hr><h1 id="相关链接-侵删"><a href="#相关链接-侵删" class="headerlink" title="相关链接(侵删)"></a>相关链接(侵删)</h1><ol><li><a href="https://blog.csdn.net/fengli1995/article/details/106298491">基于stm32 标准库spi驱动st7789(使用DMA)</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">STM32使用DMA通过SPI驱动ST7789，点亮屏幕</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="C" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/C/"/>
    
    <category term="STM32" scheme="https://zml3589110.github.io/categories/STM32/"/>
    
    <category term="FreeRTOS" scheme="https://zml3589110.github.io/categories/FreeRTOS/"/>
    
    <category term="DMA" scheme="https://zml3589110.github.io/categories/DMA/"/>
    
    <category term="ST7789" scheme="https://zml3589110.github.io/categories/ST7789/"/>
    
    
    <category term="STM32" scheme="https://zml3589110.github.io/tags/STM32/"/>
    
    <category term="C" scheme="https://zml3589110.github.io/tags/C/"/>
    
    <category term="SPI" scheme="https://zml3589110.github.io/tags/SPI/"/>
    
    <category term="keil" scheme="https://zml3589110.github.io/tags/keil/"/>
    
    <category term="DMA" scheme="https://zml3589110.github.io/tags/DMA/"/>
    
    <category term="FreeRTOS" scheme="https://zml3589110.github.io/tags/FreeRTOS/"/>
    
    <category term="LCD" scheme="https://zml3589110.github.io/tags/LCD/"/>
    
    <category term="TFT" scheme="https://zml3589110.github.io/tags/TFT/"/>
    
    <category term="ST7789" scheme="https://zml3589110.github.io/tags/ST7789/"/>
    
  </entry>
  
  <entry>
    <title>KEIL下载完程序后自动启动</title>
    <link href="https://zml3589110.github.io/posts/4258229454.html"/>
    <id>https://zml3589110.github.io/posts/4258229454.html</id>
    <published>2022-12-30T08:45:20.000Z</published>
    <updated>2023-01-03T07:20:38.425Z</updated>
    
    <content type="html"><![CDATA[<h1 id="勾选自动运行选项"><a href="#勾选自动运行选项" class="headerlink" title="勾选自动运行选项"></a>勾选自动运行选项</h1><p>勾选-&gt; Flash Download -&gt; Reset and Run 选项</p><img src="https://img-blog.csdnimg.cn/4a6f3487c7ee4d068f3f702bcc746922.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55-z5aS054mb,size_20,color_FFFFFF,t_70,g_se,x_16"><h1 id="取消勾选pack功能"><a href="#取消勾选pack功能" class="headerlink" title="取消勾选pack功能"></a>取消勾选pack功能</h1><p>取消勾选-&gt; Pack -&gt; Enable</p><img src="https://img-blog.csdnimg.cn/b748d9e401594748b7e154942a21fa03.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55-z5aS054mb,size_20,color_FFFFFF,t_70,g_se,x_16"><hr><blockquote><p><strong>说明：本文是收集参考网络文档，以方便查看（侵删）</strong></p></blockquote><hr><h1 id="信息链接"><a href="#信息链接" class="headerlink" title="信息链接:"></a>信息链接:</h1><ol><li><a href="https://blog.csdn.net/weixin_43869518/article/details/123950248">KEIL下载完程序,芯片程序自动重启必要的两个配置</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">KEIL下载完程序后自动启动,而不需要按复位按键</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="KEIL" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/KEIL/"/>
    
    
    <category term="KEIL5" scheme="https://zml3589110.github.io/tags/KEIL5/"/>
    
    <category term="下载程序" scheme="https://zml3589110.github.io/tags/%E4%B8%8B%E8%BD%BD%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>STM32系统学习(FreeRTOS)(一)之移植FreeRTOS</title>
    <link href="https://zml3589110.github.io/posts/789507877.html"/>
    <id>https://zml3589110.github.io/posts/789507877.html</id>
    <published>2022-12-24T03:34:20.000Z</published>
    <updated>2022-12-24T07:23:24.509Z</updated>
    
    <content type="html"><![CDATA[<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="下载FreeRTOS系统"><a href="#下载FreeRTOS系统" class="headerlink" title="下载FreeRTOS系统"></a>下载FreeRTOS系统</h2><p><strong>在移植之前，我们首先要获取到FreeRTOS的官方的源码包。这里我们提供两个下载链接:</strong></p><blockquote><p>一个是官网：<a href="http://www.freertos.org/">http://www.freertos.org/</a><br>另外一个是代码托管网站：<a href="https://sourceforge.net/projects/freertos/files/FreeRTOS/">https://sourceforge.net/projects/freertos/files/FreeRTOS/</a></p></blockquote><p>这里我们演示如何在代码托管网站里面下载。打开网站链接之后，我们选择FreeRTOS的最新版本V9.0.0（2016年），尽管现在FreeRTOS的版本已经更新到V10.0.1了，但是我们还是选择V9.0.0，因为内核很稳定，并且网上资料很多，因为V10.0.0版本之后是亚马逊收购了FreeRTOS之后才出来的版本，主要添加了一些云端组件，我们本书所讲的FreeRTOS是实时内核，采用V9.0.0版本足以。</p><p><strong>注：本次自己测试使用的是官网中下载最新版本 FreeRTOSv202112.00</strong></p><ul><li>打开官网后如图所示，并点击右上角绿色按钮</li></ul><img src="https://img-blog.csdnimg.cn/37daecc952f149d9a2c1dbd744307de9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATENJT1Q=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><ul><li>跳转到如下页面之后，点击下载即可</li></ul><img src="https://img-blog.csdnimg.cn/3b449f5cadbd4ea1a0857f1f14158a85.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATENJT1Q=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><ul><li>下载完成之后解压，如图所示</li></ul><img src="https://img-blog.csdnimg.cn/7c796a6edba64079867b0b65756494e3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATENJT1Q=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><h2 id="简单介绍FreeRTOS"><a href="#简单介绍FreeRTOS" class="headerlink" title="简单介绍FreeRTOS"></a>简单介绍FreeRTOS</h2><p>FreeRTOS包含Demo例程和内核源码（比较重要，我们就需要提取该目录下的大部分文件）。<br><strong>Source</strong>文件夹里面包含的是FreeRTOS内核的源代码，我们移植FreeRTOS的时候就需要这部分源代码；<br><strong>Demo</strong> 文件夹里面包含了FreeRTOS官方为各个单片机移植好的工程代码，FreeRTOS为了推广自己，会给各种半导体厂商的评估板写好完整的工程程序，这些程序就放在Demo这个目录下，这部分Demo非常有参考价值。</p><img src="https://img2018.cnblogs.com/blog/1834930/201910/1834930-20191015211446972-80282122.png"><h3 id="Source文件夹"><a href="#Source文件夹" class="headerlink" title="Source文件夹"></a>Source文件夹</h3><p>这里我们再重点分析下FreeRTOS&#x2F; Source文件夹下的文件，①和③包含的是FreeRTOS的通用的头文件和C文件，这两部分的文件试用于各种编译器和处理器，是通用的。需要移植的头文件和C文件放在②portblle这个文件夹。</p><img src="https://img2018.cnblogs.com/blog/1834930/201910/1834930-20191015211447309-2081394159.png"><p>portblle文件夹，是与编译器相关的文件夹，在不同的编译器中使用不同的支持文件。①中的KEIL就是我们就是我们使用的编译器，其实KEIL里面的内容跟RVDS里面的内容一样，所以我们只需要③RVDS文件夹里面的内容即可，里面包含了各种处理器相关的文件夹，从文件夹的名字我们就非常熟悉了，我们学习的STM32有M0、M3、M4等各种系列，FreeRTOS是一个软件，单片机是一个硬件，FreeRTOS要想运行在一个单片机上面，它们就必须关联在一起。MemMang文件夹下存放的是跟内存管理相关的源文件。</p><img src="https://img2018.cnblogs.com/blog/1834930/201910/1834930-20191015211447629-790327210.png"><h2 id="使用简单基本STM32工程"><a href="#使用简单基本STM32工程" class="headerlink" title="使用简单基本STM32工程"></a>使用简单基本STM32工程</h2><p>要移植 FreeRTOS，肯定需要一个基础工程，基础工程越简单越好，这里我使用的是STM32F103RET6的板子，例程则选择最基础的OLED实验来作为基础工程<br>复制 stm32f103vet6_OLED_I2C 到工程位置即可</p><h1 id="移植过程参考一（这个测试）"><a href="#移植过程参考一（这个测试）" class="headerlink" title="移植过程参考一（这个测试）"></a>移植过程参考一（这个测试）</h1><p><strong>注意：这个方法是跑不起来，进不去任务，是因为配置文件不对，在使用了后边方法修改的配置文件后才实现！</strong></p><h2 id="2-1、添加FreeRTOS-源码"><a href="#2-1、添加FreeRTOS-源码" class="headerlink" title="2.1、添加FreeRTOS 源码"></a>2.1、添加FreeRTOS 源码</h2><blockquote><p>在基础工程中新建一个名为 FreeRTOS 的文件夹，如图所示</p></blockquote><img src="https://img-blog.csdnimg.cn/5d186f8ba890426aa3d126d6e752991f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATENJT1Q=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><blockquote><p>创建 FreeRTOS 文件夹以后就可以将 FreeRTOS 的源码添加到这个文件夹中，打开刚刚下载的FreeRTOS源码，找到路径为：FreeRTOSv202111.00\FreeRTOS\Source下的文件</p></blockquote><img src="https://img-blog.csdnimg.cn/33f5aac8f52f40efba5a9c9b0ec4807a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATENJT1Q=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><blockquote><p>将所有.c文件以及include、portable两个文件夹复制到基础工程下刚刚创建的FreeRTOS 文件夹中，如下图所示：</p></blockquote><img src="https://img-blog.csdnimg.cn/b499afd4026f463a94a8640d09871203.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATENJT1Q=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><blockquote><p>复制完成之后打开portable文件夹，我们只需要留下 keil、MemMang 和 RVDS 这三个文件夹，其他的都可以删除掉，删除完成之后如下图所示</p></blockquote><img src="https://img-blog.csdnimg.cn/067b726c6c5f4d6db1a33f446bfc1747.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATENJT1Q=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><p>接着打开FreeRTOS源码，找到路径为：FreeRTOSv202111.00\FreeRTOS\Demo\CORTEX_STM32F103_Keil下的 FreeRTOSConfig.h文件，将其复制到基础工程路径为：实验1 LED灯闪烁\FreeRTOS\include下，如下图所示：</p><img src="https://img-blog.csdnimg.cn/fc7c96ad96464f3fa2516241289dcce3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATENJT1Q=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><img src="https://img-blog.csdnimg.cn/f0f9a9d1f6a14de790fb6b8ba20775dc.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATENJT1Q=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><h2 id="2-2、向工程分组中添加文件"><a href="#2-2、向工程分组中添加文件" class="headerlink" title="2.2、向工程分组中添加文件"></a>2.2、向工程分组中添加文件</h2><blockquote><p>打开基础工程，新建分组 FreeRTOS_CORE 和 FreeRTOS_PORTABLE</p></blockquote><img src="https://img-blog.csdnimg.cn/18107e3ad9974853b0cb99654185955e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATENJT1Q=,size_14,color_FFFFFF,t_70,g_se,x_16#pic_center"><blockquote><p>接着往这两个分组里添加文件，FreeRTOS_CORE 分组添加路径为：实验1 LED灯闪烁\FreeRTOS下的所有.c文件</p></blockquote><img src="https://img-blog.csdnimg.cn/448f6907d3dc443ca207cb9c4d1931d7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATENJT1Q=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><blockquote><p>FreeRTOS_PORTABLE分组添加路径为：实验1 LED灯闪烁\FreeRTOS\portable\MemMang下的heap_4.c文件以及路径为：实验1 LED灯闪烁\FreeRTOS\portable\RVDS\ARM_CM3下的port.c文件</p></blockquote><img src="https://img-blog.csdnimg.cn/34e33db805f14efdba88487386a1ad8e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATENJT1Q=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><img src="https://img-blog.csdnimg.cn/cfcf1479d17745c8913e27e76919656e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATENJT1Q=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><blockquote><p>添加完成如下图所示：</p></blockquote><img src="https://img-blog.csdnimg.cn/c45e060994a04201a11a12e624b0cabc.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATENJT1Q=,size_15,color_FFFFFF,t_70,g_se,x_16#pic_center"><h2 id="2-3、添加相对应的头文件路径"><a href="#2-3、添加相对应的头文件路径" class="headerlink" title="2.3、添加相对应的头文件路径"></a>2.3、添加相对应的头文件路径</h2><p>添加完 FreeRTOS 源码中的 C 文件以后还要添加 FreeRTOS 源码的头文件路径，头文件路径如下图所示：</p><img src="https://img-blog.csdnimg.cn/23ce9182d3c44acaacc0e11c5be9f2c3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATENJT1Q=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><h2 id="2-4、修改BasicSYSTEM文件"><a href="#2-4、修改BasicSYSTEM文件" class="headerlink" title="2.4、修改BasicSYSTEM文件"></a>2.4、修改BasicSYSTEM文件</h2><p>SYSTEM 文件夹里面的文件一开始是针对UCOS 而编写的，所以如果使用 FreeRTOS 的话 就需要做相应的修改。本来打算让 SYSTEM 文件夹也支持 FreeRTOS，但是这样的话会导致 SYSTEM 里面的文件太过于复杂，这样非常不利于初学者学习，所以这里就专门针对 FreeRTOS 修改了 SYSTEM 里面的文件。<br>1、修改 sys.h 文件 sys.h 文件修改很简单，在 sys.h 文件里面用宏 SYSTEM_SUPPORT_OS 来定义是否使用 OS， 我们使用了 FreeRTOS，所以应该将宏 SYSTEM_SUPPORT_OS 改为 1。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//0,不支持 os</span></span><br><span class="line"><span class="comment">//1,支持 os</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYSTEM_SUPPORT_OS1<span class="comment">//定义系统文件夹是否支持OS</span></span></span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/2fb4d647ecd94c3f8fb0b339020cd24e.png#pic_center"><p>2、修改 usart.c 文件 usart.c 文件修改也很简单，usart.c 文件有两部分要修改，一个是添加 FreeRTOS.h 头文件， 默认是添加的 UCOS 中的 includes.h 头文件，修改以后如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//0,不支持 os</span></span><br><span class="line"><span class="comment">//1,支持 os</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYSTEM_SUPPORT_OS1<span class="comment">//定义系统文件夹是否支持OS</span></span></span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/079ee3e4955f43888d021f924256b189.png#pic_center"><p>另外一个就是 USART1 的中断服务函数，在使用 UCOS 的时候进出中断的时候需要添加 OSIntEnter()和 OSIntExit()，使用 FreeRTOS 的话就不需要了，所以将这两行代码删除掉，修改以后如下：<br><strong>维持了原有，因为用不到</strong></p><img src="https://img-blog.csdnimg.cn/112ca3e502bd4d1281239855730e5d14.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATENJT1Q=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><p>3、修改 delay.c 文件 delay.c 文件修改的就比较大了，因为涉及到 FreeRTOS 的系统时钟，delay.c 文件里面有 4 个函数，先来看一下函数 SysTick_Handler()，此函数是滴答定时器的中断服务函数，代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果使用 os,则包括下面的头文件即可.</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> SYSTEM_SUPPORT_OS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;FreeRTOS.h&quot;</span><span class="comment">// os 使用  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;task.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;event_groups.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">xPortSysTickHandler</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="comment">//systick 中断服务函数,使用 os 时用到</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SysTick_Handler</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line"><span class="keyword">if</span>(xTaskGetSchedulerState()!=taskSCHEDULER_NOT_STARTED)<span class="comment">//系统已经运行</span></span><br><span class="line">&#123;</span><br><span class="line">xPortSysTickHandler();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/f2a3b89968624129bfddff8749426522.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATENJT1Q=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><p>FreeRTOS 的心跳就是由滴答定时器产生的，根据 FreeRTOS 的系统时钟节拍设置好滴答定 时器的周期，这样就会周期触发滴答定时器中断了。在滴答定时器中断服务函数中调用 FreeRTOS 的API函数 xPortSysTickHandler()。 delay_init()是用来初始化滴答定时器和延时函数，代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化延迟函数 </span></span><br><span class="line"><span class="comment">//SYSTICK 的时钟固定为 AHB 时钟,基础例程里面 SYSTICK 的时钟固定为HCLK时钟的1/8</span></span><br><span class="line"><span class="comment">//这里为了兼容FreeTROS，所以将 SYSTICK 的时钟频率改为 AHB 的频率</span></span><br><span class="line"><span class="comment">//SYSCLK:系统时钟频率</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay_init</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u32 reload;</span><br><span class="line">SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK);<span class="comment">//选择外部时钟  HCLK</span></span><br><span class="line">fac_us=SystemCoreClock/<span class="number">1000000</span>;<span class="comment">//不论是否使用 OS,fac_us 都需要使用</span></span><br><span class="line">reload=SystemCoreClock/<span class="number">1000000</span>;<span class="comment">//每秒钟的计数次数 单位为 M</span></span><br><span class="line">reload*=<span class="number">1000000</span>/configTICK_RATE_HZ;<span class="comment">//根据 configTICK_BATE_HZ 设定溢出时间</span></span><br><span class="line"><span class="comment">//时间 reload 为 24 位寄存器,最大值:</span></span><br><span class="line"><span class="comment">//16777216,在 72M 下,约合 0.233s 左右</span></span><br><span class="line">fac_ms=<span class="number">1000</span>/configTICK_RATE_HZ;<span class="comment">//代表 os 可以延时的最少单位 </span></span><br><span class="line">SysTick-&gt;CTRL|=SysTick_CTRL_TICKINT_Msk;   <span class="comment">//开启SYSTICK中断</span></span><br><span class="line">SysTick-&gt;LOAD=reload; <span class="comment">//每1/configTICK_BATE_HZ 秒中断一次</span></span><br><span class="line">SysTick-&gt;CTRL|=SysTick_CTRL_ENABLE_Msk;   <span class="comment">//开启SYSTICK</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/4e503df80ec74cc186a99723eb473e22.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATENJT1Q=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><p>前面我们说了 FreeRTOS 的系统时钟是由滴答定时器提供的，那么肯定要根据 FreeRTOS 的 系统时钟节拍来初始化滴答定时器了，delay_init()就是来完成这个功能的。FreeRTOS 的系统时 钟节拍由宏 configTICK_RATE_HZ 来设置，这个值我们可以自由设置，但是一旦设置好以后我 们就要根据这个值来初始化滴答定时器，其实就是设置滴答定时器的中断周期。在基础例程中 滴答定时器的时钟频率设置的是 AHB 的 1&#x2F;8，这里为了兼容 FreeRTOS 将滴答定时器的时钟频 率改为了 AHB，也就是 72MHz！这一点一定要注意！ 接下来的三个函数都是延时的，代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//延时 nus</span></span><br><span class="line"><span class="comment">//nus:为要延时的 us 数.</span></span><br><span class="line"><span class="comment">//nus:0~204522252(最大值即 2^32/fac_us@fac_us=168)       </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay_us</span><span class="params">(u32 nus)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u32 ticks;</span><br><span class="line">u32 told,tnow,tcnt=<span class="number">0</span>;</span><br><span class="line">u32 reload=SysTick-&gt;LOAD;<span class="comment">//LOAD的值     </span></span><br><span class="line">ticks=nus*fac_us; <span class="comment">//需要的节拍数   </span></span><br><span class="line"><span class="comment">//tcnt=0;</span></span><br><span class="line">told=SysTick-&gt;VAL;        <span class="comment">//刚进入时的计数器值</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">tnow=SysTick-&gt;VAL;</span><br><span class="line"><span class="keyword">if</span>(tnow!=told)</span><br><span class="line">&#123;    </span><br><span class="line"><span class="comment">//这里注意一下 SYSTICK 是一个递减的计数器就可以了.</span></span><br><span class="line"><span class="keyword">if</span>(tnow&lt;told)tcnt+=told-tnow;</span><br><span class="line"><span class="keyword">else</span> tcnt+=reload-tnow+told;    </span><br><span class="line">told=tnow;</span><br><span class="line"><span class="keyword">if</span>(tcnt&gt;=ticks)<span class="keyword">break</span>;<span class="comment">//时间超过/等于要延迟的时间,则退出.</span></span><br><span class="line">&#125;  </span><br><span class="line">&#125;;     </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//延时 nms,会引起任务调度</span></span><br><span class="line"><span class="comment">//nms:要延时的 ms 数</span></span><br><span class="line"><span class="comment">//nms:0~65535</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay_ms</span><span class="params">(u16 nms)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(xTaskGetSchedulerState()!=taskSCHEDULER_NOT_STARTED)<span class="comment">//系统已经运行</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(nms&gt;=fac_ms)<span class="comment">//延时的时间大于 os 的最少时间周期 </span></span><br><span class="line">&#123;</span><br><span class="line">   vTaskDelay(nms/fac_ms);<span class="comment">//FreeRTOS 延时</span></span><br><span class="line">&#125;</span><br><span class="line">nms%=fac_ms;<span class="comment">//os 已经无法提供这么小的延时了,</span></span><br><span class="line"><span class="comment">//采用普通方式延时    </span></span><br><span class="line">&#125;</span><br><span class="line">delay_us((u32)(nms*<span class="number">1000</span>));<span class="comment">//普通方式延时,此时ucos无法启动调度.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//延时 nms,不会引起任务调度</span></span><br><span class="line"><span class="comment">//nms:要延时的 ms 数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay_xms</span><span class="params">(u32 nms)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u32 i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;nms;i++) delay_us(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/d3908341b407477eac243c8f2266f519.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATENJT1Q=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><img src="https://img-blog.csdnimg.cn/911fd424dd274d3eaf01f16ba761cdcb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATENJT1Q=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><p>delay_us()是 us 级延时函数，delay_ms 和 delay_xms()都是 ms 级的延时函数，delay_us()和 delay_xms()不会导致任务切换。delay_ms()其实就是对 FreeRTOS 中的延时函数 vTaskDelay()的 简单封装，所以在使用 delay_ms()的时候就会导致任务切换。 delay.c 修改完成以后编译一下，会提示如下图所示错误：</p><img src="https://img-blog.csdnimg.cn/424e3d3cb7234e7595483017c5b93bf2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATENJT1Q=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><p>上图的错误提示表示在 port.c、delay.c 和 stm32f10x_it.c 中三个重复定义的函数： SysTick_Handler()、SVC_Handler()和 PendSV_Handler()，这三个函数分别为滴答定时器中断服 务函数、SVC 中断服务函数和 PendSV 中断服务函数，将 stm32f10x_it.c 中的三个函数屏蔽掉， 如下图所示：</p><img src="https://img-blog.csdnimg.cn/d4546dc73c0041749a6e194ec053c825.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATENJT1Q=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><p>再次编译代码，应该没有错误了，如果还是错误的话自行根据错误类型修改！至此，SYSTEM 文件夹就修改完成了，接下来我们进行跑马灯测试，测试代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;sys.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;usart.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;oled_bmp.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;oled_font.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;oled.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;led.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;FreeRTOS.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;task.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//任务优先级</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> START_TASK_PRIO1</span></span><br><span class="line"><span class="comment">//任务堆栈大小</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>START_STK_SIZE128</span></span><br><span class="line"><span class="comment">//任务句柄</span></span><br><span class="line">TaskHandle_t StartTask_Handler;</span><br><span class="line"><span class="comment">//任务函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">start_task</span><span class="params">(<span class="keyword">void</span> *pvParameters)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//任务优先级</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LED0_TASK_PRIO2</span></span><br><span class="line"><span class="comment">//任务堆栈大小</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>LED0_STK_SIZE50</span></span><br><span class="line"><span class="comment">//任务句柄</span></span><br><span class="line">TaskHandle_t LED0Task_Handler;</span><br><span class="line"><span class="comment">//任务函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">led0_task</span><span class="params">(<span class="keyword">void</span> *pvParameters)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//任务优先级</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LED1_TASK_PRIO3</span></span><br><span class="line"><span class="comment">//任务堆栈大小</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>LED1_STK_SIZE50</span></span><br><span class="line"><span class="comment">//任务句柄</span></span><br><span class="line">TaskHandle_t LED1Task_Handler;</span><br><span class="line"><span class="comment">//任务函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">led1_task</span><span class="params">(<span class="keyword">void</span> *pvParameters)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">////delay_init();</span></span><br><span class="line"><span class="comment">//OLED_Init();</span></span><br><span class="line"><span class="comment">////</span></span><br><span class="line"><span class="comment">////OLED_ShowString(0,0,&quot;ABCDEFG&quot;,8);</span></span><br><span class="line"><span class="comment">////OLED_ShowString(0,1,&quot;ABCDEFG&quot;,8);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//OLED_ShowString(0,0,&quot;ABCDEFG&quot;,16);</span></span><br><span class="line"><span class="comment">//OLED_ShowString(0,2,&quot;这一切足够了&quot;,16);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//OLED_Draw12864BMP(BMP1);</span></span><br><span class="line"><span class="comment">//while(1)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);<span class="comment">//设置系统中断优先级分组4</span></span><br><span class="line">delay_init();<span class="comment">//延时函数初始化</span></span><br><span class="line"><span class="comment">//uart_init(115200);//初始化串口</span></span><br><span class="line">LED_Init();</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建开始任务</span></span><br><span class="line">xTaskCreate((TaskFunction_t )start_task,<span class="comment">//任务函数</span></span><br><span class="line"> (<span class="keyword">const</span> <span class="keyword">char</span>*    )<span class="string">&quot;start_task&quot;</span>,<span class="comment">//任务名称</span></span><br><span class="line"> (<span class="keyword">uint16_t</span> )START_STK_SIZE,<span class="comment">//任务堆栈大小</span></span><br><span class="line"> (<span class="keyword">void</span>* )<span class="literal">NULL</span>,<span class="comment">//传递给任务函数的参数</span></span><br><span class="line"> (UBaseType_t )START_TASK_PRIO,<span class="comment">//任务优先级</span></span><br><span class="line"> (TaskHandle_t* )&amp;StartTask_Handler);<span class="comment">//任务句柄</span></span><br><span class="line">vTaskStartScheduler();<span class="comment">//开启任务调度</span></span><br><span class="line"><span class="comment">//while(1);</span></span><br><span class="line"><span class="comment">//LED_Init();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//开始任务任务函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">start_task</span><span class="params">(<span class="keyword">void</span> *pvParameters)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">taskENTER_CRITICAL();<span class="comment">//进入临界区</span></span><br><span class="line"><span class="comment">//创建LED0任务</span></span><br><span class="line">xTaskCreate((TaskFunction_t )led0_task,<span class="comment">//任务函数</span></span><br><span class="line"> (<span class="keyword">const</span> <span class="keyword">char</span>*    )<span class="string">&quot;led0_task&quot;</span>,<span class="comment">//任务名称</span></span><br><span class="line"> (<span class="keyword">uint16_t</span> )LED0_STK_SIZE,<span class="comment">//任务堆栈大小</span></span><br><span class="line"> (<span class="keyword">void</span>* )<span class="literal">NULL</span>,<span class="comment">//传递给任务函数的参数</span></span><br><span class="line"> (UBaseType_t )LED0_TASK_PRIO,<span class="comment">//任务优先级</span></span><br><span class="line"> (TaskHandle_t* )&amp;LED0Task_Handler);<span class="comment">//任务句柄</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//创建LED0任务</span></span><br><span class="line">xTaskCreate((TaskFunction_t )led1_task,<span class="comment">//任务函数</span></span><br><span class="line"> (<span class="keyword">const</span> <span class="keyword">char</span>*    )<span class="string">&quot;led1_task&quot;</span>,<span class="comment">//任务名称</span></span><br><span class="line"> (<span class="keyword">uint16_t</span> )LED1_STK_SIZE,<span class="comment">//任务堆栈大小</span></span><br><span class="line"> (<span class="keyword">void</span>* )<span class="literal">NULL</span>,<span class="comment">//传递给任务函数的参数</span></span><br><span class="line"> (UBaseType_t )LED1_TASK_PRIO,<span class="comment">//任务优先级</span></span><br><span class="line"> (TaskHandle_t* )&amp;LED1Task_Handler);<span class="comment">//任务句柄 </span></span><br><span class="line">vTaskDelete(StartTask_Handler);<span class="comment">//删除开始任务 </span></span><br><span class="line">taskEXIT_CRITICAL();<span class="comment">//退出临界区 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//LED0任务函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">led0_task</span><span class="params">(<span class="keyword">void</span> *pvParameters)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vTaskDelay(<span class="number">800</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">LED0=~LED0;</span><br><span class="line"><span class="comment">//GPIO_SetBits(GPIOA,GPIO_Pin_8);</span></span><br><span class="line">vTaskDelay(<span class="number">500</span>);</span><br><span class="line"><span class="comment">//GPIO_ResetBits(GPIOA,GPIO_Pin_8);</span></span><br><span class="line"><span class="comment">//vTaskDelay(500);</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//LED1任务函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">led1_task</span><span class="params">(<span class="keyword">void</span> *pvParameters)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vTaskDelay(<span class="number">800</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">LED1=<span class="number">0</span>;</span><br><span class="line">vTaskDelay(<span class="number">200</span>);</span><br><span class="line">LED1=<span class="number">1</span>;</span><br><span class="line">vTaskDelay(<span class="number">800</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/9fcc5d34a30f45f387cf03510600c9d8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATENJT1Q=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><p>测试代码中创建了 3 个任务：LED0 测试任务、LED1 测试任务和浮点测试任务，它们的任务函数分别为：led0_task()、led1_task()。led0_task()和 led1_task()任务很简单，就是让 LED0 和 LED1 周期性闪烁<br>编译并下载代码到 STM32F103VET6 开发板中，下载进去以后会看到 LED0 和 LED1 开始闪烁， LED0 均匀闪烁，那是因为我们在 LED0 的任务代码中设置好的 LED0 亮 500ms，灭 500ms。 LED1 亮的时间短，灭的时间长，这是因为在 LED1 的任务代码中设置好的亮 200ms，灭 800ms。</p><h2 id="设置配置文件"><a href="#设置配置文件" class="headerlink" title="设置配置文件"></a>设置配置文件</h2><blockquote><p>到这里还是没能跑起来，还需要参考后边设置的 FreeRTOSConfig.h 后才能工作</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * FreeRTOS V202112.00</span></span><br><span class="line"><span class="comment"> * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy of</span></span><br><span class="line"><span class="comment"> * this software and associated documentation files (the &quot;Software&quot;), to deal in</span></span><br><span class="line"><span class="comment"> * the Software without restriction, including without limitation the rights to</span></span><br><span class="line"><span class="comment"> * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of</span></span><br><span class="line"><span class="comment"> * the Software, and to permit persons to whom the Software is furnished to do so,</span></span><br><span class="line"><span class="comment"> * subject to the following conditions:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></span><br><span class="line"><span class="comment"> * copies or substantial portions of the Software.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></span><br><span class="line"><span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS</span></span><br><span class="line"><span class="comment"> * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR</span></span><br><span class="line"><span class="comment"> * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER</span></span><br><span class="line"><span class="comment"> * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN</span></span><br><span class="line"><span class="comment"> * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * http://www.FreeRTOS.org</span></span><br><span class="line"><span class="comment"> * http://aws.amazon.com/freertos</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1 tab == 4 spaces!</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> FREERTOS_CONFIG_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FREERTOS_CONFIG_H</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*-----------------------------------------------------------</span></span><br><span class="line"><span class="comment"> * Application specific definitions.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * These definitions should be adjusted for your particular hardware and</span></span><br><span class="line"><span class="comment"> * application requirements.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * THESE PARAMETERS ARE DESCRIBED WITHIN THE &#x27;CONFIGURATION&#x27; SECTION OF THE</span></span><br><span class="line"><span class="comment"> * FreeRTOS API DOCUMENTATION AVAILABLE ON THE FreeRTOS.org WEB SITE. </span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * See http://www.freertos.org/a00110.html</span></span><br><span class="line"><span class="comment"> *----------------------------------------------------------*/</span></span><br><span class="line"><span class="comment">/************************************************************************</span></span><br><span class="line"><span class="comment"> *               FreeRTOS基础配置配置选项 </span></span><br><span class="line"><span class="comment"> *********************************************************************/</span></span><br><span class="line"><span class="comment">/* 置1：RTOS使用抢占式调度器；置0：RTOS使用协作式调度器（时间片）</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 注：在多任务管理机制上，操作系统可以分为抢占式和协作式两种。</span></span><br><span class="line"><span class="comment"> * 协作式操作系统是任务主动释放CPU后，切换到下一个任务。</span></span><br><span class="line"><span class="comment"> * 任务切换的时机完全取决于正在运行的任务。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_PREEMPTION1</span></span><br><span class="line"><span class="comment">//1使能时间片调度(默认式使能的)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_TIME_SLICING1</span></span><br><span class="line"><span class="comment">/* 某些运行FreeRTOS的硬件有两种方法选择下一个要执行的任务：</span></span><br><span class="line"><span class="comment"> * 通用方法和特定于硬件的方法（以下简称“特殊方法”）。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 通用方法：</span></span><br><span class="line"><span class="comment"> *      1.configUSE_PORT_OPTIMISED_TASK_SELECTION 为 0 或者硬件不支持这种特殊方法。</span></span><br><span class="line"><span class="comment"> *      2.可以用于所有FreeRTOS支持的硬件</span></span><br><span class="line"><span class="comment"> *      3.完全用C实现，效率略低于特殊方法。</span></span><br><span class="line"><span class="comment"> *      4.不强制要求限制最大可用优先级数目</span></span><br><span class="line"><span class="comment"> * 特殊方法：</span></span><br><span class="line"><span class="comment"> *      1.必须将configUSE_PORT_OPTIMISED_TASK_SELECTION设置为1。</span></span><br><span class="line"><span class="comment"> *      2.依赖一个或多个特定架构的汇编指令（一般是类似计算前导零[CLZ]指令）。</span></span><br><span class="line"><span class="comment"> *      3.比通用方法更高效</span></span><br><span class="line"><span class="comment"> *      4.一般强制限定最大可用优先级数目为32</span></span><br><span class="line"><span class="comment"> * 一般是硬件计算前导零指令，如果所使用的，MCU没有这些硬件指令的话此宏应该设置为0！</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_PORT_OPTIMISED_TASK_SELECTION        1    </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">/* 置1：使能低功耗tickless模式；置0：保持系统节拍（tick）中断一直运行</span></span><br><span class="line"><span class="comment"> * 假设开启低功耗的话可能会导致下载出现问题，因为程序在睡眠中,可用以下办法解决</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 下载方法：</span></span><br><span class="line"><span class="comment"> *      1.将开发版正常连接好</span></span><br><span class="line"><span class="comment"> *      2.按住复位按键，点击下载瞬间松开复位按键</span></span><br><span class="line"><span class="comment"> *     </span></span><br><span class="line"><span class="comment"> *      1.通过跳线帽将 BOOT 0 接高电平(3.3V)</span></span><br><span class="line"><span class="comment"> *      2.重新上电，下载</span></span><br><span class="line"><span class="comment"> *    </span></span><br><span class="line"><span class="comment"> * 1.使用FlyMcu擦除一下芯片，然后进行下载</span></span><br><span class="line"><span class="comment"> *STMISP -&gt; 清除芯片(z)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_TICKLESS_IDLE0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 写入实际的CPU内核时钟频率，也就是CPU指令执行频率，通常称为Fclk</span></span><br><span class="line"><span class="comment"> * Fclk为供给CPU内核的时钟信号，我们所说的cpu主频为 XX MHz，</span></span><br><span class="line"><span class="comment"> * 就是指的这个时钟信号，相应的，1/Fclk即为cpu时钟周期；</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configCPU_CLOCK_HZ  (SystemCoreClock)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//RTOS系统节拍中断的频率。即一秒中断的次数，每次中断RTOS都会进行任务调度</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configTICK_RATE_HZ  (( TickType_t )1000)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//可使用的最大优先级</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configMAX_PRIORITIES  (32)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//空闲任务使用的堆栈大小</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configMINIMAL_STACK_SIZE((unsigned short)128)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//任务名字字符串长度</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configMAX_TASK_NAME_LEN(16)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//系统节拍计数器变量数据类型，1表示为16位无符号整形，0表示为32位无符号整形</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_16_BIT_TICKS0   </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//空闲任务放弃CPU使用权给其他同优先级的用户任务</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configIDLE_SHOULD_YIELD1  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//启用队列</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_QUEUE_SETS  1    </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//开启任务通知功能，默认开启</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_TASK_NOTIFICATIONS    1   </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用互斥信号量</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_MUTEXES    1   </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用递归互斥信号量                                            </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_RECURSIVE_MUTEXES1  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//为1时使用计数信号量</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_COUNTING_SEMAPHORES1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设置可以注册的信号量和消息队列个数 */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configQUEUE_REGISTRY_SIZE10     </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_APPLICATION_TASK_TAG  0        </span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*****************************************************************</span></span><br><span class="line"><span class="comment">              FreeRTOS与内存申请有关配置选项                                               </span></span><br><span class="line"><span class="comment">*****************************************************************/</span></span><br><span class="line"><span class="comment">//支持动态内存申请</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configSUPPORT_DYNAMIC_ALLOCATION        1    </span></span><br><span class="line"><span class="comment">//支持静态内存</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configSUPPORT_STATIC_ALLOCATION0</span></span><br><span class="line"><span class="comment">//系统所有总的堆大小</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configTOTAL_HEAP_SIZE((size_t)(36*1024))    </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/***************************************************************</span></span><br><span class="line"><span class="comment">             FreeRTOS与钩子函数有关的配置选项                                            </span></span><br><span class="line"><span class="comment">**************************************************************/</span></span><br><span class="line"><span class="comment">/* 置1：使用空闲钩子（Idle Hook类似于回调函数）；置0：忽略空闲钩子</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 空闲任务钩子是一个函数，这个函数由用户来实现，</span></span><br><span class="line"><span class="comment"> * FreeRTOS规定了函数的名字和参数：void vApplicationIdleHook(void )，</span></span><br><span class="line"><span class="comment"> * 这个函数在每个空闲任务周期都会被调用</span></span><br><span class="line"><span class="comment"> * 对于已经删除的RTOS任务，空闲任务可以释放分配给它们的堆栈内存。</span></span><br><span class="line"><span class="comment"> * 因此必须保证空闲任务可以被CPU执行</span></span><br><span class="line"><span class="comment"> * 使用空闲钩子函数设置CPU进入省电模式是很常见的</span></span><br><span class="line"><span class="comment"> * 不可以调用会引起空闲任务阻塞的API函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_IDLE_HOOK0      </span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 置1：使用时间片钩子（Tick Hook）；置0：忽略时间片钩子</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 时间片钩子是一个函数，这个函数由用户来实现，</span></span><br><span class="line"><span class="comment"> * FreeRTOS规定了函数的名字和参数：void vApplicationTickHook(void )</span></span><br><span class="line"><span class="comment"> * 时间片中断可以周期性的调用</span></span><br><span class="line"><span class="comment"> * 函数必须非常短小，不能大量使用堆栈，</span></span><br><span class="line"><span class="comment"> * 不能调用以”FromISR&quot; 或 &quot;FROM_ISR”结尾的API函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="comment">/*xTaskIncrementTick函数是在xPortSysTickHandler中断函数中被调用的。因此，vApplicationTickHook()函数执行的时间必须很短才行*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_TICK_HOOK0           </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用内存申请失败钩子函数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_MALLOC_FAILED_HOOK0 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 大于0时启用堆栈溢出检测功能，如果使用此功能 </span></span><br><span class="line"><span class="comment"> * 用户必须提供一个栈溢出钩子函数，如果使用的话</span></span><br><span class="line"><span class="comment"> * 此值可以为1或者2，因为有两种栈溢出检测方法 */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configCHECK_FOR_STACK_OVERFLOW0   </span></span><br><span class="line"></span><br><span class="line"><span class="comment">/********************************************************************</span></span><br><span class="line"><span class="comment">          FreeRTOS与运行时间和任务状态收集有关的配置选项   </span></span><br><span class="line"><span class="comment">**********************************************************************/</span></span><br><span class="line"><span class="comment">//启用运行时间统计功能</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configGENERATE_RUN_TIME_STATS        0             </span></span><br><span class="line"><span class="comment">//启用可视化跟踪调试</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_TRACE_FACILITY      0    </span></span><br><span class="line"><span class="comment">/* 与宏configUSE_TRACE_FACILITY同时为1时会编译下面3个函数</span></span><br><span class="line"><span class="comment"> * prvWriteNameToBuffer()</span></span><br><span class="line"><span class="comment"> * vTaskList(),</span></span><br><span class="line"><span class="comment"> * vTaskGetRunTimeStats()</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_STATS_FORMATTING_FUNCTIONS1        </span></span><br><span class="line"></span><br><span class="line"><span class="comment">/********************************************************************</span></span><br><span class="line"><span class="comment">                FreeRTOS与协程有关的配置选项                                                </span></span><br><span class="line"><span class="comment">*********************************************************************/</span></span><br><span class="line"><span class="comment">//启用协程，启用协程以后必须添加文件croutine.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_CO_ROUTINES           0                 </span></span><br><span class="line"><span class="comment">//协程的有效优先级数目</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configMAX_CO_ROUTINE_PRIORITIES       ( 2 )       </span></span><br><span class="line"></span><br><span class="line"><span class="comment">/***********************************************************************</span></span><br><span class="line"><span class="comment">                FreeRTOS与软件定时器有关的配置选项      </span></span><br><span class="line"><span class="comment">**********************************************************************/</span></span><br><span class="line"> <span class="comment">//启用软件定时器</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_TIMERS            1                              </span></span><br><span class="line"><span class="comment">//软件定时器优先级</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configTIMER_TASK_PRIORITY        (configMAX_PRIORITIES-1)        </span></span><br><span class="line"><span class="comment">//软件定时器队列长度</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configTIMER_QUEUE_LENGTH        10                               </span></span><br><span class="line"><span class="comment">//软件定时器任务堆栈大小</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configTIMER_TASK_STACK_DEPTH      (configMINIMAL_STACK_SIZE*2)    </span></span><br><span class="line"></span><br><span class="line"><span class="comment">/************************************************************</span></span><br><span class="line"><span class="comment">            FreeRTOS可选函数配置选项                                                     </span></span><br><span class="line"><span class="comment">************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INCLUDE_xTaskGetSchedulerState       1                       </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INCLUDE_vTaskPrioritySet         1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INCLUDE_uxTaskPriorityGet         1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INCLUDE_vTaskDelete           1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INCLUDE_vTaskCleanUpResources       1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INCLUDE_vTaskSuspend           1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INCLUDE_vTaskDelayUntil         1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INCLUDE_vTaskDelay           1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INCLUDE_eTaskGetState           1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INCLUDE_xTimerPendFunctionCall     1</span></span><br><span class="line"><span class="comment">//#define INCLUDE_xTaskGetCurrentTaskHandle       1</span></span><br><span class="line"><span class="comment">//#define INCLUDE_uxTaskGetStackHighWaterMark     0</span></span><br><span class="line"><span class="comment">//#define INCLUDE_xTaskGetIdleTaskHandle          0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************************************</span></span><br><span class="line"><span class="comment">            FreeRTOS与中断有关的配置选项                                                 </span></span><br><span class="line"><span class="comment">******************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __NVIC_PRIO_BITS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configPRIO_BITS       __NVIC_PRIO_BITS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configPRIO_BITS       4                  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="comment">//中断最低优先级</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configLIBRARY_LOWEST_INTERRUPT_PRIORITY15     </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//系统可管理的最高中断优先级</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY5 </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configKERNEL_INTERRUPT_PRIORITY ( configLIBRARY_LOWEST_INTERRUPT_PRIORITY &lt;&lt; (8 - configPRIO_BITS) )<span class="comment">/* 240 */</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configMAX_SYSCALL_INTERRUPT_PRIORITY ( configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY &lt;&lt; (8 - configPRIO_BITS) )</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/****************************************************************</span></span><br><span class="line"><span class="comment">            FreeRTOS与中断服务函数有关的配置选项                         </span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> xPortPendSVHandler PendSV_Handler</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vPortSVCHandler SVC_Handler</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 以下为使用Percepio Tracealyzer需要的东西，不需要时将 configUSE_TRACE_FACILITY 定义为 0 */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> ( configUSE_TRACE_FACILITY == 1 )</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;trcRecorder.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INCLUDE_xTaskGetCurrentTaskHandle               1   <span class="comment">// 启用一个可选函数（该函数被 Trace源码使用，默认该值为0 表示不用）</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//#define configUSE_IDLE_HOOK0</span></span><br><span class="line"><span class="comment">//#define configUSE_TICK_HOOK0</span></span><br><span class="line"><span class="comment">//#define configCPU_CLOCK_HZ( ( unsigned long ) 72000000 )</span></span><br><span class="line"><span class="comment">//#define configTICK_RATE_HZ( ( TickType_t ) 1000 )</span></span><br><span class="line"><span class="comment">//#define configMAX_PRIORITIES( 5 )</span></span><br><span class="line"><span class="comment">//#define configMINIMAL_STACK_SIZE( ( unsigned short ) 128 )</span></span><br><span class="line"><span class="comment">//#define configTOTAL_HEAP_SIZE( ( size_t ) ( 17 * 1024 ) )</span></span><br><span class="line"><span class="comment">//#define configMAX_TASK_NAME_LEN( 16 )</span></span><br><span class="line"><span class="comment">//#define configUSE_TRACE_FACILITY0</span></span><br><span class="line"><span class="comment">//#define configUSE_16_BIT_TICKS0</span></span><br><span class="line"><span class="comment">//#define configIDLE_SHOULD_YIELD1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Co-routine definitions. */</span></span><br><span class="line"><span class="comment">//#define configUSE_CO_ROUTINES 0</span></span><br><span class="line"><span class="comment">//#define configMAX_CO_ROUTINE_PRIORITIES ( 2 )</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Set the following definitions to 1 to include the API function, or zero</span></span><br><span class="line"><span class="comment">to exclude the API function. */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#define INCLUDE_vTaskPrioritySet1</span></span><br><span class="line"><span class="comment">//#define INCLUDE_uxTaskPriorityGet1</span></span><br><span class="line"><span class="comment">//#define INCLUDE_vTaskDelete1</span></span><br><span class="line"><span class="comment">//#define INCLUDE_vTaskCleanUpResources0</span></span><br><span class="line"><span class="comment">//#define INCLUDE_vTaskSuspend1</span></span><br><span class="line"><span class="comment">//#define INCLUDE_vTaskDelayUntil1</span></span><br><span class="line"><span class="comment">//#define INCLUDE_vTaskDelay1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#define INCLUDE_xTaskGetSchedulerState1</span></span><br><span class="line"><span class="comment">//#define INCLUDE_xTaskGetCurrentTaskHandle1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* This is the raw value as per the Cortex-M3 NVIC.  Values can be 255</span></span><br><span class="line"><span class="comment">(lowest) to 0 (1?) (highest). */</span></span><br><span class="line"><span class="comment">//#define configKERNEL_INTERRUPT_PRIORITY 255</span></span><br><span class="line"><span class="comment">/* !!!! configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to zero !!!!</span></span><br><span class="line"><span class="comment">See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html. */</span></span><br><span class="line"><span class="comment">//#define configMAX_SYSCALL_INTERRUPT_PRIORITY 191 /* equivalent to 0xb0, or priority 11. */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* This is the value being used as per the ST library which permits 16</span></span><br><span class="line"><span class="comment">priority values, 0 to 15.  This must correspond to the</span></span><br><span class="line"><span class="comment">configKERNEL_INTERRUPT_PRIORITY setting.  Here 15 corresponds to the lowest</span></span><br><span class="line"><span class="comment">NVIC value of 255. */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configLIBRARY_KERNEL_INTERRUPT_PRIORITY15</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* FREERTOS_CONFIG_H */</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="移植过程参考二（超详细说明）"><a href="#移植过程参考二（超详细说明）" class="headerlink" title="移植过程参考二（超详细说明）"></a>移植过程参考二（超详细说明）</h1><h2 id="提取源码"><a href="#提取源码" class="headerlink" title="提取源码"></a>提取源码</h2><ol><li>首先在我们的STM32裸机工程模板根目录下新建一个文件夹，命名为“FreeRTOS”，并且在FreeRTOS文件夹下新建两个空文件夹，分别命名为“src”与“port”，src文件夹用于保存FreeRTOS中的核心源文件，也就是我们常说的‘.c文件’，port文件夹用于保存内存管理以及处理器架构相关代码，这些代码FreeRTOS官方已经提供给我们的，直接使用即可，在前面已经说了，FreeRTOS是软件，我们的开发版是硬件，软硬件必须有桥梁来连接，这些与处理器架构相关的代码，可以称之为RTOS硬件接口层，它们位于FreeRTOS&#x2F;Source&#x2F;Portable文件夹下。</li><li>打开FreeRTOS V9.0.0源码，在“FreeRTOSv9.0.0\FreeRTOS\Source”目录下找到所有的‘.c文件’，将它们拷贝到我们新建的src文件夹中，</li></ol><p><img src="https://img2018.cnblogs.com/blog/1834930/201910/1834930-20191015211447870-1007359084.png" alt="在这里插入图片描述"></p><ol><li>打开FreeRTOS V9.0.0源码，在“FreeRTOSv9.0.0\FreeRTOS\Source\portable”目录下找到“MemMang”文件夹与“RVDS”文件夹，将它们拷贝到我们新建的port文件夹中</li></ol><p><img src="https://img2018.cnblogs.com/blog/1834930/201910/1834930-20191015211448127-1332532196.png" alt="在这里插入图片描述"></p><ol><li>打开FreeRTOS V9.0.0源码，在“FreeRTOSv9.0.0\ FreeRTOS\Source”目录下找到“include”文件夹，它是我们需要用到FreeRTOS的一些头文件，将它直接拷贝到我们新建的FreeRTOS文件夹中，完成这一步之后就可以看到我们新建的FreeRTOS文件夹已经有3个文件夹，这3个文件夹就包含FreeRTOS的核心文件，至此，FreeRTOS的源码就提取完成。</li></ol><p><img src="https://img2018.cnblogs.com/blog/1834930/201910/1834930-20191015211448601-1848993234.png" alt="在这里插入图片描述"></p><h2 id="添加到工程"><a href="#添加到工程" class="headerlink" title="添加到工程"></a>添加到工程</h2><p><strong>添加FreeRTOSConfig.h文件</strong><br>FreeRTOSConfig.h文件是FreeRTOS的工程配置文件，因为FreeRTOS是可以裁剪的实时操作内核，应用于不同的处理器平台，用户可以通过修改这个FreeRTOS内核的配置头文件来裁剪FreeRTOS的功能，所以我们把它拷贝一份放在user这个文件夹下面。<br>打开FreeRTOSv9.0.0源码，在“FreeRTOSv9.0.0\FreeRTOS\Demo”文件夹下面找到“CORTEX_STM32F103_Keil”这个文件夹，双击打开，在其根目录下找到这个“FreeRTOSConfig.h”文件，然后拷贝到我们工程的user文件夹下即可，等下我们需要对这个文件进行修改。</p><p><strong>创建工程分组</strong><br>接下来我们在mdk里面新建FreeRTOS&#x2F;src和FreeRTOS&#x2F;port两个组文件夹，其中FreeRTOS&#x2F;src用于存放src文件夹的内容，FreeRTOS&#x2F;port用于存放port\MemMang文件夹 与port\RVDS\ARM_CM3文件夹的内容。<br>然后我们将工程文件中FreeRTOS的内容添加到工程中去，按照已经新建的分组添加我们的FreeRTOS工程源码。<br>在FreeRTOS&#x2F;port分组中添加MemMang文件夹中的文件只需选择其中一个即可，我们选择“heap_4.c”，这是FreeRTOS的一个内存管理源码文件。<br>添加完成后：</p><p><img src="https://img2018.cnblogs.com/blog/1834930/201910/1834930-20191015211448785-6286460.png" alt="在这里插入图片描述"></p><p>** 添加头文件路径**<br>FreeRTOS的源码已经添加到开发环境的组文件夹下面，编译的时候需要为这些源文件指定头文件的路径，不然编译会报错。FreeRTOS的源码里面只有FreeRTOS\include和FreeRTOS\port\RVDS\ARM_CM3这两个文件夹下面有头文件，只需要将这两个头文件的路径在开发环境里面指定即可。同时我们还将FreeRTOSConfig.h这个头文件拷贝到了工程根目录下的user文件夹下，所以user的路径也要加到开发环境里面。<br><img src="https://img2018.cnblogs.com/blog/1834930/201910/1834930-20191015211449084-364826338.png" alt="在这里插入图片描述"></p><h2 id="修改FreeRTOSConfig-h"><a href="#修改FreeRTOSConfig-h" class="headerlink" title="修改FreeRTOSConfig.h"></a>修改FreeRTOSConfig.h</h2><p>FreeRTOSConfig.h是直接从demo文件夹下面拷贝过来的，该头文件对裁剪整个FreeRTOS所需的功能的宏均做了定义，有些宏定义被使能，有些宏定义被失能，一开始我们只需要配置最简单的功能即可。要想随心所欲的配置FreeRTOS的功能，我们必须对这些宏定义的功能有所掌握，下面我们先简单的介绍下这些宏定义的含义，然后再对这些宏定义进行修改。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> FREERTOS_CONFIG_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FREERTOS_CONFIG_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bsp_usart.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//针对不同的编译器调用不同的stdint.h文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(__ICCARM__) || defined(__CC_ARM) || defined(__GNUC__)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line">    <span class="keyword">extern</span> <span class="keyword">uint32_t</span> SystemCoreClock;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//断言</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vAssertCalled(char,int) printf(<span class="meta-string">&quot;Error:%s,%d\r\n&quot;</span>,char,int)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configASSERT(x) <span class="meta-keyword">if</span>((x)==0) vAssertCalled(__FILE__,__LINE__)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/************************************************************************</span></span><br><span class="line"><span class="comment"> *               FreeRTOS基础配置配置选项 </span></span><br><span class="line"><span class="comment"> *********************************************************************/</span></span><br><span class="line"><span class="comment">/* 置1：RTOS使用抢占式调度器；置0：RTOS使用协作式调度器（时间片）</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 注：在多任务管理机制上，操作系统可以分为抢占式和协作式两种。</span></span><br><span class="line"><span class="comment"> * 协作式操作系统是任务主动释放CPU后，切换到下一个任务。</span></span><br><span class="line"><span class="comment"> * 任务切换的时机完全取决于正在运行的任务。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_PREEMPTION  1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1使能时间片调度(默认式使能的)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_TIME_SLICING1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 某些运行FreeRTOS的硬件有两种方法选择下一个要执行的任务：</span></span><br><span class="line"><span class="comment"> * 通用方法和特定于硬件的方法（以下简称“特殊方法”）。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 通用方法：</span></span><br><span class="line"><span class="comment"> *      1.configUSE_PORT_OPTIMISED_TASK_SELECTION 为 0 或者硬件不支持这种特殊方法。</span></span><br><span class="line"><span class="comment"> *      2.可以用于所有FreeRTOS支持的硬件</span></span><br><span class="line"><span class="comment"> *      3.完全用C实现，效率略低于特殊方法。</span></span><br><span class="line"><span class="comment"> *      4.不强制要求限制最大可用优先级数目</span></span><br><span class="line"><span class="comment"> * 特殊方法：</span></span><br><span class="line"><span class="comment"> *      1.必须将configUSE_PORT_OPTIMISED_TASK_SELECTION设置为1。</span></span><br><span class="line"><span class="comment"> *      2.依赖一个或多个特定架构的汇编指令（一般是类似计算前导零[CLZ]指令）。</span></span><br><span class="line"><span class="comment"> *      3.比通用方法更高效</span></span><br><span class="line"><span class="comment"> *      4.一般强制限定最大可用优先级数目为32</span></span><br><span class="line"><span class="comment"> * 一般是硬件计算前导零指令，如果所使用的，MCU没有这些硬件指令的话此宏应该设置为0！</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_PORT_OPTIMISED_TASK_SELECTION        1                       </span></span><br><span class="line">                                                                        </span><br><span class="line"><span class="comment">/* 置1：使能低功耗tickless模式；置0：保持系统节拍（tick）中断一直运行</span></span><br><span class="line"><span class="comment"> * 假设开启低功耗的话可能会导致下载出现问题，因为程序在睡眠中,可用以下办法解决</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 下载方法：</span></span><br><span class="line"><span class="comment"> *      1.将开发版正常连接好</span></span><br><span class="line"><span class="comment"> *      2.按住复位按键，点击下载瞬间松开复位按键</span></span><br><span class="line"><span class="comment"> *     </span></span><br><span class="line"><span class="comment"> *      1.通过跳线帽将 BOOT 0 接高电平(3.3V)</span></span><br><span class="line"><span class="comment"> *      2.重新上电，下载</span></span><br><span class="line"><span class="comment"> *    </span></span><br><span class="line"><span class="comment"> * 1.使用FlyMcu擦除一下芯片，然后进行下载</span></span><br><span class="line"><span class="comment"> *STMISP -&gt; 清除芯片(z)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_TICKLESS_IDLE0   </span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 写入实际的CPU内核时钟频率，也就是CPU指令执行频率，通常称为Fclk</span></span><br><span class="line"><span class="comment"> * Fclk为供给CPU内核的时钟信号，我们所说的cpu主频为 XX MHz，</span></span><br><span class="line"><span class="comment"> * 就是指的这个时钟信号，相应的，1/Fclk即为cpu时钟周期；</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configCPU_CLOCK_HZ  (SystemCoreClock)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//RTOS系统节拍中断的频率。即一秒中断的次数，每次中断RTOS都会进行任务调度</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configTICK_RATE_HZ  (( TickType_t )1000)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//可使用的最大优先级</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configMAX_PRIORITIES  (32)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//空闲任务使用的堆栈大小</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configMINIMAL_STACK_SIZE((unsigned short)128)</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//任务名字字符串长度</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configMAX_TASK_NAME_LEN(16)</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">//系统节拍计数器变量数据类型，1表示为16位无符号整形，0表示为32位无符号整形</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_16_BIT_TICKS0                      </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//空闲任务放弃CPU使用权给其他同优先级的用户任务</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configIDLE_SHOULD_YIELD1           </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//启用队列</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_QUEUE_SETS  1    </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//开启任务通知功能，默认开启</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_TASK_NOTIFICATIONS    1   </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用互斥信号量</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_MUTEXES    1    </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用递归互斥信号量                                            </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_RECURSIVE_MUTEXES1   </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//为1时使用计数信号量</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_COUNTING_SEMAPHORES1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设置可以注册的信号量和消息队列个数 */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configQUEUE_REGISTRY_SIZE10                                 </span></span><br><span class="line">                                                                       </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_APPLICATION_TASK_TAG  0                       </span></span><br><span class="line">                      </span><br><span class="line"></span><br><span class="line"><span class="comment">/*****************************************************************</span></span><br><span class="line"><span class="comment">              FreeRTOS与内存申请有关配置选项                                               </span></span><br><span class="line"><span class="comment">*****************************************************************/</span></span><br><span class="line"><span class="comment">//支持动态内存申请</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configSUPPORT_DYNAMIC_ALLOCATION        1    </span></span><br><span class="line"><span class="comment">//支持静态内存</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configSUPPORT_STATIC_ALLOCATION0</span></span><br><span class="line"><span class="comment">//系统所有总的堆大小</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configTOTAL_HEAP_SIZE((size_t)(36*1024))    </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/***************************************************************</span></span><br><span class="line"><span class="comment">             FreeRTOS与钩子函数有关的配置选项                                            </span></span><br><span class="line"><span class="comment">**************************************************************/</span></span><br><span class="line"><span class="comment">/* 置1：使用空闲钩子（Idle Hook类似于回调函数）；置0：忽略空闲钩子</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 空闲任务钩子是一个函数，这个函数由用户来实现，</span></span><br><span class="line"><span class="comment"> * FreeRTOS规定了函数的名字和参数：void vApplicationIdleHook(void )，</span></span><br><span class="line"><span class="comment"> * 这个函数在每个空闲任务周期都会被调用</span></span><br><span class="line"><span class="comment"> * 对于已经删除的RTOS任务，空闲任务可以释放分配给它们的堆栈内存。</span></span><br><span class="line"><span class="comment"> * 因此必须保证空闲任务可以被CPU执行</span></span><br><span class="line"><span class="comment"> * 使用空闲钩子函数设置CPU进入省电模式是很常见的</span></span><br><span class="line"><span class="comment"> * 不可以调用会引起空闲任务阻塞的API函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_IDLE_HOOK0      </span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 置1：使用时间片钩子（Tick Hook）；置0：忽略时间片钩子</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 时间片钩子是一个函数，这个函数由用户来实现，</span></span><br><span class="line"><span class="comment"> * FreeRTOS规定了函数的名字和参数：void vApplicationTickHook(void )</span></span><br><span class="line"><span class="comment"> * 时间片中断可以周期性的调用</span></span><br><span class="line"><span class="comment"> * 函数必须非常短小，不能大量使用堆栈，</span></span><br><span class="line"><span class="comment"> * 不能调用以”FromISR&quot; 或 &quot;FROM_ISR”结尾的API函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="comment">/*xTaskIncrementTick函数是在xPortSysTickHandler中断函数中被调用的。因此，vApplicationTickHook()函数执行的时间必须很短才行*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_TICK_HOOK0           </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用内存申请失败钩子函数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_MALLOC_FAILED_HOOK0 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 大于0时启用堆栈溢出检测功能，如果使用此功能 </span></span><br><span class="line"><span class="comment"> * 用户必须提供一个栈溢出钩子函数，如果使用的话</span></span><br><span class="line"><span class="comment"> * 此值可以为1或者2，因为有两种栈溢出检测方法 */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configCHECK_FOR_STACK_OVERFLOW0   </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/********************************************************************</span></span><br><span class="line"><span class="comment">          FreeRTOS与运行时间和任务状态收集有关的配置选项   </span></span><br><span class="line"><span class="comment">**********************************************************************/</span></span><br><span class="line"><span class="comment">//启用运行时间统计功能</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configGENERATE_RUN_TIME_STATS        0             </span></span><br><span class="line"> <span class="comment">//启用可视化跟踪调试</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_TRACE_FACILITY      0    </span></span><br><span class="line"><span class="comment">/* 与宏configUSE_TRACE_FACILITY同时为1时会编译下面3个函数</span></span><br><span class="line"><span class="comment"> * prvWriteNameToBuffer()</span></span><br><span class="line"><span class="comment"> * vTaskList(),</span></span><br><span class="line"><span class="comment"> * vTaskGetRunTimeStats()</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_STATS_FORMATTING_FUNCTIONS1                       </span></span><br><span class="line">                                                                        </span><br><span class="line">                                                                        </span><br><span class="line"><span class="comment">/********************************************************************</span></span><br><span class="line"><span class="comment">                FreeRTOS与协程有关的配置选项                                                </span></span><br><span class="line"><span class="comment">*********************************************************************/</span></span><br><span class="line"><span class="comment">//启用协程，启用协程以后必须添加文件croutine.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_CO_ROUTINES           0                 </span></span><br><span class="line"><span class="comment">//协程的有效优先级数目</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configMAX_CO_ROUTINE_PRIORITIES       ( 2 )                   </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/***********************************************************************</span></span><br><span class="line"><span class="comment">                FreeRTOS与软件定时器有关的配置选项      </span></span><br><span class="line"><span class="comment">**********************************************************************/</span></span><br><span class="line"> <span class="comment">//启用软件定时器</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_TIMERS            1                              </span></span><br><span class="line"><span class="comment">//软件定时器优先级</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configTIMER_TASK_PRIORITY        (configMAX_PRIORITIES-1)        </span></span><br><span class="line"><span class="comment">//软件定时器队列长度</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configTIMER_QUEUE_LENGTH        10                               </span></span><br><span class="line"><span class="comment">//软件定时器任务堆栈大小</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configTIMER_TASK_STACK_DEPTH      (configMINIMAL_STACK_SIZE*2)    </span></span><br><span class="line"></span><br><span class="line"><span class="comment">/************************************************************</span></span><br><span class="line"><span class="comment">            FreeRTOS可选函数配置选项                                                     </span></span><br><span class="line"><span class="comment">************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INCLUDE_xTaskGetSchedulerState       1                       </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INCLUDE_vTaskPrioritySet         1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INCLUDE_uxTaskPriorityGet         1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INCLUDE_vTaskDelete           1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INCLUDE_vTaskCleanUpResources       1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INCLUDE_vTaskSuspend           1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INCLUDE_vTaskDelayUntil         1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INCLUDE_vTaskDelay           1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INCLUDE_eTaskGetState           1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INCLUDE_xTimerPendFunctionCall     1</span></span><br><span class="line"><span class="comment">//#define INCLUDE_xTaskGetCurrentTaskHandle       1</span></span><br><span class="line"><span class="comment">//#define INCLUDE_uxTaskGetStackHighWaterMark     0</span></span><br><span class="line"><span class="comment">//#define INCLUDE_xTaskGetIdleTaskHandle          0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************************************</span></span><br><span class="line"><span class="comment">            FreeRTOS与中断有关的配置选项                                                 </span></span><br><span class="line"><span class="comment">******************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __NVIC_PRIO_BITS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configPRIO_BITS       __NVIC_PRIO_BITS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configPRIO_BITS       4                  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="comment">//中断最低优先级</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configLIBRARY_LOWEST_INTERRUPT_PRIORITY15     </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//系统可管理的最高中断优先级</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY5 </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configKERNEL_INTERRUPT_PRIORITY ( configLIBRARY_LOWEST_INTERRUPT_PRIORITY &lt;&lt; (8 - configPRIO_BITS) )<span class="comment">/* 240 */</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configMAX_SYSCALL_INTERRUPT_PRIORITY ( configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY &lt;&lt; (8 - configPRIO_BITS) )</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/****************************************************************</span></span><br><span class="line"><span class="comment">            FreeRTOS与中断服务函数有关的配置选项                         </span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> xPortPendSVHandler PendSV_Handler</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vPortSVCHandler SVC_Handler</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 以下为使用Percepio Tracealyzer需要的东西，不需要时将 configUSE_TRACE_FACILITY 定义为 0 */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> ( configUSE_TRACE_FACILITY == 1 )</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;trcRecorder.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INCLUDE_xTaskGetCurrentTaskHandle               1   <span class="comment">// 启用一个可选函数（该函数被 Trace源码使用，默认该值为0 表示不用）</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* FREERTOS_CONFIG_H */</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="修改stm32f10x-it-c"><a href="#修改stm32f10x-it-c" class="headerlink" title="修改stm32f10x_it.c"></a>修改stm32f10x_it.c</h2><p>SysTick中断服务函数是一个非常重要的函数，FreeRTOS所有跟时间相关的事情都在里面处理，SysTick就是FreeRTOS的一个心跳时钟，驱动着FreeRTOS的运行，就像人的心跳一样，假如没有心跳，我们就相当于“死了”，同样的，FreeRTOS没有了心跳，那么它就会卡死在某个地方，不能进行任务调度，不能运行任何的东西，因此我们需要实现一个FreeRTOS的心跳时钟，FreeRTOS帮我们实现了SysTick的启动的配置：在port.c文件中已经实现vPortSetupTimerInterrupt()函数，并且FreeRTOS通用的SysTick中断服务函数也实现了：在port.c文件中已经实现xPortSysTickHandler()函数，所以移植的时候只需要我们在stm32f10x_it.c文件中实现我们对应（STM32）平台上的SysTick_Handler()函数即可。FreeRTOS为开发者考虑得特别多，PendSV_Handler()与SVC_Handler()这两个很重要的函数都帮我们实现了，在在port.c文件中已经实现xPortPendSVHandler()与vPortSVCHandler()函数，防止我们自己实现不了，那么在stm32f10x_it.c中就需要我们注释掉PendSV_Handler()与SVC_Handler()这两个函数了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//void SVC_Handler(void)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//void PendSV_Handler(void)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">xPortSysTickHandler</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//systick中断服务函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SysTick_Handler</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">if</span> (INCLUDE_xTaskGetSchedulerState  == 1 )</span></span><br><span class="line">      <span class="keyword">if</span> (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)</span><br><span class="line">      &#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span>  <span class="comment">/* INCLUDE_xTaskGetSchedulerState */</span>  </span></span><br><span class="line">        xPortSysTickHandler();</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">if</span> (INCLUDE_xTaskGetSchedulerState  == 1 )</span></span><br><span class="line">      &#125;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span>  <span class="comment">/* INCLUDE_xTaskGetSchedulerState */</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="创建任务"><a href="#创建任务" class="headerlink" title="创建任务"></a>创建任务</h3><p>这里，我们创建一个单任务，任务使用的栈和任务控制块是在创建任务的时候FreeRTOS动态分配的。<br>任务必须是一个死循环，否则任务将通过LR返回，如果LR指向了非法的内存就会产生HardFault_Handler，而FreeRTOS指向一个死循环，那么任务返回之后就在死循环中执行，这样子的任务是不安全的，所以避免这种情况，任务一般都是死循环并且无返回值的。<br><strong>并且每个任务循环主体中应该有阻塞任务的函数，否则就会饿死比它优先级更低的任务！！！</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* FreeRTOS头文件 */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;FreeRTOS.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;task.h&quot;</span></span></span><br><span class="line"><span class="comment">/* 开发板硬件bsp头文件 */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bsp_led.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">AppTaskCreate</span><span class="params">(<span class="keyword">void</span>)</span></span>;<span class="comment">/* AppTask任务 */</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">/* 创建任务句柄 */</span></span><br><span class="line"><span class="keyword">static</span> TaskHandle_t AppTask_Handle = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  BaseType_t xReturn = pdPASS;<span class="comment">/* 定义一个创建信息返回值，默认为pdPASS */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 开发板硬件初始化 */</span></span><br><span class="line">  BSP_Init();</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 创建AppTaskCreate任务 */</span></span><br><span class="line">  xReturn = xTaskCreate((TaskFunction_t )AppTask,  <span class="comment">/* 任务入口函数 */</span></span><br><span class="line">                        (<span class="keyword">const</span> <span class="keyword">char</span>*    )<span class="string">&quot;AppTask&quot;</span>,<span class="comment">/* 任务名字 */</span></span><br><span class="line">                        (<span class="keyword">uint16_t</span>       )<span class="number">512</span>,  <span class="comment">/* 任务栈大小 */</span></span><br><span class="line">                        (<span class="keyword">void</span>*          )<span class="literal">NULL</span>,<span class="comment">/* 任务入口函数参数 */</span></span><br><span class="line">                        (UBaseType_t    )<span class="number">1</span>, <span class="comment">/* 任务的优先级 */</span></span><br><span class="line">                        (TaskHandle_t*  )&amp;AppTask_Handle);<span class="comment">/* 任务控制块指针 */</span> </span><br><span class="line">  <span class="comment">/* 启动任务调度 */</span>           </span><br><span class="line">  <span class="keyword">if</span>(pdPASS == xReturn)</span><br><span class="line">    vTaskStartScheduler();   <span class="comment">/* 启动任务，开启调度 */</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;  </span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span>(<span class="number">1</span>);   <span class="comment">/* 正常不会执行到这里 */</span>    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">AppTask</span><span class="params">(<span class="keyword">void</span>* parameter)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        LED1_ON;</span><br><span class="line">        vTaskDelay(<span class="number">500</span>);   <span class="comment">/* 延时500个tick */</span></span><br><span class="line">        LED1_OFF;     </span><br><span class="line">        vTaskDelay(<span class="number">500</span>);   <span class="comment">/* 延时500个tick */</span> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="相关链接-侵删"><a href="#相关链接-侵删" class="headerlink" title="相关链接(侵删)"></a>相关链接(侵删)</h1><ol><li><a href="https://www.cnblogs.com/iot-dev/p/11681067.html">超详细的FreeRTOS移植全教程——基于srm32</a></li><li><a href="https://blog.csdn.net/hao1__/article/details/122038566">STM32F1+FreeRTOS系统移植例程</a></li><li><a href="https://blog.csdn.net/cs953575/article/details/118443722">https://blog.csdn.net/cs953575/article/details/118443722</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">基于 keil 基础工程实现最新 FreeRTOS 的移植,并在任务中实现 LED 灯闪烁</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="C" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/C/"/>
    
    <category term="STM32" scheme="https://zml3589110.github.io/categories/STM32/"/>
    
    <category term="FreeRTOS" scheme="https://zml3589110.github.io/categories/FreeRTOS/"/>
    
    
    <category term="STM32" scheme="https://zml3589110.github.io/tags/STM32/"/>
    
    <category term="C" scheme="https://zml3589110.github.io/tags/C/"/>
    
    <category term="keil" scheme="https://zml3589110.github.io/tags/keil/"/>
    
    <category term="FreeRTOS" scheme="https://zml3589110.github.io/tags/FreeRTOS/"/>
    
    <category term="移植" scheme="https://zml3589110.github.io/tags/%E7%A7%BB%E6%A4%8D/"/>
    
  </entry>
  
  <entry>
    <title>LVGL学习(一)之模拟器搭建</title>
    <link href="https://zml3589110.github.io/posts/1814094880.html"/>
    <id>https://zml3589110.github.io/posts/1814094880.html</id>
    <published>2022-12-22T06:47:20.000Z</published>
    <updated>2022-12-22T07:25:37.899Z</updated>
    
    <content type="html"><![CDATA[<h1 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h1><img src="https://img-blog.csdnimg.cn/52c6cb43948f4c23aef162e9c03cec90.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5oyo6Lii5rCR5belYml1Yml1,size_20,color_FFFFFF,t_70,g_se,x_16"><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>lvgl提供了非常多的部件(30多个)给用户使用，这些部件的所有样式都是可以修改的。它们都有默认的样式，但是当我们觉得默认的样式不合适自己项目的时候可以就需要进行修改了，本文来教大家怎么修改 tabview部件顶部框(选项卡)的默认样式。</p><p>配置：</p><ul><li>codeblocks 20.03</li><li>lvgl v 8.1</li></ul><h1 id="修改样式"><a href="#修改样式" class="headerlink" title="修改样式"></a>修改样式</h1><p><strong>默认的样式</strong><br>正常我们这样就可以创建出一个 tabview部件：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">lv_obj_t</span>* tv;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">lv_obj_t</span>* t1;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">lv_obj_t</span>* t2;</span><br><span class="line"></span><br><span class="line">tv = lv_tabview_create(lv_scr_act(), LV_DIR_TOP, LV_DPI_DEF / <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">t1 = lv_tabview_add_tab(tv, <span class="string">&quot;Selectors&quot;</span>);</span><br><span class="line">t2 = lv_tabview_add_tab(tv, <span class="string">&quot;Text input&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">lv_obj_t</span>* tab_btns = lv_tabview_get_tab_btns(tv);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>它的选项卡的默认样式是这样的：</p><img src="https://img-blog.csdnimg.cn/58d8e25b08074e9ea5ac0b254fdd77de.png"><h2 id="背景色"><a href="#背景色" class="headerlink" title="背景色"></a>背景色</h2><p><strong>修改背景色</strong><br>我们一下它的被选中时的背景色，我们只需要后面添加修改样式的代码即可，这里我使用本地样式修改，你也可以使用共享样式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lv_obj_set_style_bg_color(tab_btns, lv_palette_main(LV_PALETTE_RED), LV_PART_ITEMS | LV_STATE_CHECKED);</span><br></pre></td></tr></table></figure><p>然后我们就能看到选中时的背景颜色被修改了：</p><img src="https://img-blog.csdnimg.cn/b25418def3d64f7fa84a5ac386404ecb.png"><p><strong>去除背景色</strong><br>如果我不想要背景色呢？那我们让背景色为透明即可：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lv_obj_set_style_bg_opa(tab_btns, LV_OPA_0, LV_PART_ITEMS | LV_STATE_CHECKED);</span><br></pre></td></tr></table></figure><p>这样我们就能看到选中时没有高亮的背景色了：</p><img src="https://img-blog.csdnimg.cn/5dd852291bfd4688b062e342a4457dea.png"><h2 id="边框颜色"><a href="#边框颜色" class="headerlink" title="边框颜色"></a>边框颜色</h2><p><strong>修改边框颜色</strong><br>我们也可以修改选中时的边框颜色，我们只需要后面添加修改样式的代码即可，这里我是用本地样式修改，你也可以使用共享样式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lv_obj_set_style_border_color(tab_btns, lv_palette_main(LV_PALETTE_GREEN), LV_PART_ITEMS | LV_STATE_CHECKED);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后我们就能看到选中时的边框颜色被修改了：</p><img src="https://img-blog.csdnimg.cn/992641e298cb4cf4ae9e6e748c3ec99c.png"><p><strong>去除边框</strong><br>如果我不想要边框呢？那我们让边框为透明即可：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lv_obj_set_style_border_opa(tab_btns, LV_OPA_0, LV_PART_ITEMS | LV_STATE_CHECKED);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样我们就能看到选中时没有边框了：</p><img src="https://img-blog.csdnimg.cn/0d265fd734d0449889cd07efb480e42f.png"><h2 id="文字"><a href="#文字" class="headerlink" title="文字"></a>文字</h2><p><strong>文字颜色</strong><br>我们也可以修改文字颜色，我们只需要后面添加修改样式的代码即可，这里我是用本地样式修改，你也可以使用共享样式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//本地样式修改选中时的文字颜色</span></span><br><span class="line">   <span class="comment">//lv_obj_set_style_text_color(tab_btns, lv_palette_main(LV_PALETTE_RED), LV_PART_ITEMS | LV_STATE_CHECKED);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//本地样式修改未选中时的文字颜色</span></span><br><span class="line">   <span class="comment">//lv_obj_set_style_text_color(tab_btns, lv_palette_main(LV_PALETTE_RED), 0);</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样我们就能看到文字颜色被改变了：</p><img src="https://img-blog.csdnimg.cn/c8ee0746cfaa485c84f348314b4f5039.png"><p><strong>文字大小</strong><br>我们也可以修改文字的大小(lvgl内置字体)，我们只需要后面添加修改样式的代码即可，这里我是用本地样式修改，你也可以使用共享样式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//本地样式修改选中时的文字颜色</span></span><br><span class="line">   <span class="comment">//lv_obj_set_style_text_color(tab_btns, lv_palette_main(LV_PALETTE_RED), LV_PART_ITEMS | LV_STATE_CHECKED);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//本地样式修改未选中时的文字颜色</span></span><br><span class="line">   <span class="comment">//lv_obj_set_style_text_color(tab_btns, lv_palette_main(LV_PALETTE_RED), 0);</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样我们就能看到文字大小被改变了：</p><img src="https://img-blog.csdnimg.cn/499d58b87fe14404920285a0f09be820.png"><p><strong>显示中文</strong></p><p>通过学习 <a href="https://www.bilibili.com/video/BV1Ya411r7K2?p=15">lvgl使用中文字库</a>教程，我们就知道怎么在lvgl中快速使用中文字库了： <a href="https://www.bilibili.com/video/BV1Ya411r7K2?p=15">https://www.bilibili.com/video/BV1Ya411r7K2?p=15</a></p><p>下面我们可以让tabview的选项卡显示中文，我们只需要后面添加修改样式的代码即可，这里我是用本地样式修改，你也可以使用共享样式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 本地样式修改字体(使用自定义字体-中文)</span></span><br><span class="line">   LV_FONT_DECLARE(lv_font_source_han_sans_bold_20);</span><br><span class="line">   lv_obj_set_style_text_font(tab_btns, &amp;lv_font_source_han_sans_bold_20, <span class="number">0</span>);   <span class="comment">// 使用自定义的字库</span></span><br><span class="line">   lv_obj_set_style_text_font(tab_btns, &amp;lv_font_source_han_sans_bold_20, LV_PART_ITEMS | LV_STATE_CHECKED);   <span class="comment">// 使用自定义的字库</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样我们就能看到显示中文了：</p><img src="https://img-blog.csdnimg.cn/a81d77a9222b4656aef78372c303e6f2.png"><h1 id="代码总结"><a href="#代码总结" class="headerlink" title="代码总结"></a>代码总结</h1><p>以上的代码贴在下面了，大家可以参考自己实验看看：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">static</span> <span class="keyword">lv_obj_t</span>* tv;</span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">lv_obj_t</span>* t1;</span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">lv_obj_t</span>* t2;</span><br><span class="line"></span><br><span class="line">   tv = lv_tabview_create(lv_scr_act(), LV_DIR_TOP, LV_DPI_DEF / <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">   t1 = lv_tabview_add_tab(tv, <span class="string">&quot;Selectors&quot;</span>);</span><br><span class="line">   t2 = lv_tabview_add_tab(tv, <span class="string">&quot;Text input&quot;</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">lv_obj_t</span>* tab_btns = lv_tabview_get_tab_btns(tv);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//本地样式修改背景色</span></span><br><span class="line">   <span class="comment">//lv_obj_set_style_bg_color(tab_btns, lv_palette_main(LV_PALETTE_RED), LV_PART_ITEMS | LV_STATE_CHECKED);</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//本地样式修改透明度</span></span><br><span class="line">   <span class="comment">//lv_obj_set_style_bg_opa(tab_btns, LV_OPA_0, LV_PART_ITEMS | LV_STATE_CHECKED);</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//修改选中时边框的颜色</span></span><br><span class="line">   <span class="comment">//lv_obj_set_style_border_color(tab_btns, lv_palette_main(LV_PALETTE_GREEN), LV_PART_ITEMS | LV_STATE_CHECKED);</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//修改选中时边框的颜色透明度</span></span><br><span class="line">   <span class="comment">//lv_obj_set_style_border_opa(tab_btns, LV_OPA_0, LV_PART_ITEMS | LV_STATE_CHECKED);</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//本地样式修改选中时的文字颜色</span></span><br><span class="line">   <span class="comment">//lv_obj_set_style_text_color(tab_btns, lv_palette_main(LV_PALETTE_RED), LV_PART_ITEMS | LV_STATE_CHECKED);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//本地样式修改未选中时的文字颜色</span></span><br><span class="line">   <span class="comment">//lv_obj_set_style_text_color(tab_btns, lv_palette_main(LV_PALETTE_RED), 0);</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 本地样式修改字体(使用内置字体)</span></span><br><span class="line">   <span class="comment">//lv_obj_set_style_text_font(tab_btns, &amp;lv_font_montserrat_28, LV_PART_ITEMS | LV_STATE_CHECKED);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 本地样式修改字体(使用自定义字体-中文)</span></span><br><span class="line">   <span class="comment">//LV_FONT_DECLARE(lv_font_source_han_sans_bold_20);</span></span><br><span class="line">   <span class="comment">//lv_obj_set_style_text_font(tab_btns, &amp;lv_font_source_han_sans_bold_20, 0);   // 使用自定义的字库</span></span><br><span class="line">   <span class="comment">//lv_obj_set_style_text_font(tab_btns, &amp;lv_font_source_han_sans_bold_20, LV_PART_ITEMS | LV_STATE_CHECKED);   // 使用自定义的字库</span></span><br><span class="line">   </span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p><strong>获取LVGL内置调色板的颜色：</strong><br>lv_palette_main(LV_PALETTE_…)<br>其中 LV_PALETTE_… 有这些可选：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">    LV_PALETTE_RED,</span><br><span class="line">    LV_PALETTE_PINK,</span><br><span class="line">    LV_PALETTE_PURPLE,</span><br><span class="line">    LV_PALETTE_DEEP_PURPLE,</span><br><span class="line">    LV_PALETTE_INDIGO,</span><br><span class="line">    LV_PALETTE_BLUE,</span><br><span class="line">    LV_PALETTE_LIGHT_BLUE,</span><br><span class="line">    LV_PALETTE_CYAN,</span><br><span class="line">    LV_PALETTE_TEAL,</span><br><span class="line">    LV_PALETTE_GREEN,</span><br><span class="line">    LV_PALETTE_LIGHT_GREEN,</span><br><span class="line">    LV_PALETTE_LIME,</span><br><span class="line">    LV_PALETTE_YELLOW,</span><br><span class="line">    LV_PALETTE_AMBER,</span><br><span class="line">    LV_PALETTE_ORANGE,</span><br><span class="line">    LV_PALETTE_DEEP_ORANGE,</span><br><span class="line">    LV_PALETTE_BROWN,</span><br><span class="line">    LV_PALETTE_BLUE_GREY,</span><br><span class="line">    LV_PALETTE_GREY,</span><br><span class="line">    _LV_PALETTE_LAST,</span><br><span class="line">    LV_PALETTE_NONE = <span class="number">0xff</span>,</span><br><span class="line">&#125; <span class="keyword">lv_palette_t</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>使用自定义颜色</strong></p><p>除了使用 <code>lv_palette_main(LV_PALETTE_...)</code> 我们可以使用自定义的颜色值：</p><ul><li>十六进制颜色码： lv_color_hex(0x000000)</li><li>RGB值：LV_COLOR_MAKE(0x00, 0x00, 0x00)</li></ul><p>使用示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lv_obj_set_style_bg_color(tab_btns, lv_color_hex(<span class="number">0x000000</span>), LV_PART_ITEMS | LV_STATE_CHECKED);</span><br><span class="line">lv_obj_set_style_bg_color(tab_btns,  LV_COLOR_MAKE(<span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>), LV_PART_ITEMS | LV_STATE_CHECKED);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>lvgl视频教程</strong><br><a href="https://www.bilibili.com/video/av209749730">https://www.bilibili.com/video/av209749730</a></p><p>百问网LVGL(v8)系列课程(韦东山·监制) 教程基于lvgl v8.2版本，课程适配多个平台、多款板子</p><p>百问网LVGL(v8)视频课程(韦东山·监制) 教程基于lvgl v8.2版本，课程适配多个平台、多款板子！视频学习地址：<a href="https://www.bilibili.com/video/BV1Ya411r7K2">https://www.bilibili.com/video/BV1Ya411r7K2</a></p><p>视频教程配套资料<br><a href="https://gitee.com/weidongshan/lvgl_100ask_course_materials">https://gitee.com/weidongshan/lvgl_100ask_course_materials</a><br>相关学习资源<br>lvgl官网：<a href="https://lvgl.io/">https://lvgl.io</a><br>lvgl官方文档：<a href="https://docs.lvgl.io/">https://docs.lvgl.io</a><br>百问网lvgl中文文档：<a href="http://lvgl.100ask.net/">http://lvgl.100ask.net</a><br>百问网lvgl论坛：<a href="https://forums.100ask.net/c/13-category/13">https://forums.100ask.net/c/13-category/13</a><br>百问网lvgl学习交流群：<a href="http://lvgl.100ask.net/master/contact_us/index.html">http://lvgl.100ask.net/master/contact_us/index.html</a><br>百问网lvgl视频教程：<br><a href="https://www.bilibili.com/video/BV1Ya411r7K2">https://www.bilibili.com/video/BV1Ya411r7K2</a><br><a href="https://www.100ask.net/detail/p_61c5a317e4b0cca4a4e8b6f1/6">https://www.100ask.net/detail/p_61c5a317e4b0cca4a4e8b6f1/6</a><br>————————————————<br>版权声明：本文为CSDN博主「挨踢民工biubiu」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/qq_35181236/article/details/122121775">https://blog.csdn.net/qq_35181236/article/details/122121775</a></p><hr><h1 id="相关链接-侵删"><a href="#相关链接-侵删" class="headerlink" title="相关链接(侵删)"></a>相关链接(侵删)</h1><ol><li><a href="https://blog.csdn.net/qq_35181236/article/details/122121775">LVGL|lvgl教程之修改lvgl tabview部件顶部框(选项卡)的默认样式</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">通过Visual Studio 搭建lvgl模拟开发平台</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="C" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/C/"/>
    
    <category term="GUI" scheme="https://zml3589110.github.io/categories/GUI/"/>
    
    
    <category term="C" scheme="https://zml3589110.github.io/tags/C/"/>
    
    <category term="GUI" scheme="https://zml3589110.github.io/tags/GUI/"/>
    
    <category term="LVGL" scheme="https://zml3589110.github.io/tags/LVGL/"/>
    
    <category term="lvgl tabview" scheme="https://zml3589110.github.io/tags/lvgl-tabview/"/>
    
  </entry>
  
</feed>
