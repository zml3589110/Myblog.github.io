<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>赵逸尘个人博客</title>
  
  <subtitle>记录工作生活</subtitle>
  <link href="https://zml3589110.github.io/atom.xml" rel="self"/>
  
  <link href="https://zml3589110.github.io/"/>
  <updated>2024-04-15T13:23:39.318Z</updated>
  <id>https://zml3589110.github.io/</id>
  
  <author>
    <name>ZhaoYichen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>c#硬件温度获取</title>
    <link href="https://zml3589110.github.io/posts/3247989740.html"/>
    <id>https://zml3589110.github.io/posts/3247989740.html</id>
    <published>2024-04-15T13:00:20.000Z</published>
    <updated>2024-04-15T13:23:39.318Z</updated>
    
    <content type="html"><![CDATA[<h1 id="作用缘由"><a href="#作用缘由" class="headerlink" title="作用缘由"></a>作用缘由</h1><p>想通过命令来获取到当前硬件状态后通过MQTT发送到相应服务器。相应的也能学习到C#获取方法，刚开始查询到的是使用 OpenHardwareMonitor 获取状态，其实这个软件也一直在使用，而且也能通过tcp端口查询到win环境下的硬件状态。不过，尝试之后发现当前net6.0版本并不适合，或者说这个如今已经不维护了，这也是在一片评论中看到，并且也提到了 LibreHardwareMonitor 这个库。不过之前的也是有参考价值。</p><h1 id="OpenHardwareMonitor-方法跟步骤"><a href="#OpenHardwareMonitor-方法跟步骤" class="headerlink" title="OpenHardwareMonitor 方法跟步骤"></a>OpenHardwareMonitor 方法跟步骤</h1><p>C# 去获取电脑相关的基础信息，还是需要借助 外部的库，我这边尝试了自己去实现它</p><p>网上有一些信息，但不太完整，都比较零碎，这边尽量将代码完整的去展示出来</p><p>OpenHardwareMonitor获取CPU的温度和频率需要管理员权限<br>在没有开权限的时候就是无法使用</p><h2 id="首先添加相关应用的dll文件"><a href="#首先添加相关应用的dll文件" class="headerlink" title="首先添加相关应用的dll文件"></a>首先添加相关应用的dll文件</h2><p><strong>引用–&gt;添加引用—&gt;浏览（选择文件）–&gt;确定</strong></p><img src="/posts/3247989740/8b65374aa73d4ea2ade6e8ddbb93d7be.png" class="" title="在这里插入图片描述"><h2 id="添加头文件"><a href="#添加头文件" class="headerlink" title="添加头文件"></a>添加头文件</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> OpenHardwareMonitor.Hardware;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br></pre></td></tr></table></figure><h2 id="添加相关代码，我这边就将整个form的代码贴上来了，这样也方便查看"><a href="#添加相关代码，我这边就将整个form的代码贴上来了，这样也方便查看" class="headerlink" title="添加相关代码，我这边就将整个form的代码贴上来了，这样也方便查看"></a>添加相关代码，我这边就将整个form的代码贴上来了，这样也方便查看</h2><p>代码中注释掉的部分是循环显示的一个循环逻辑</p><p>代码的功能可以将主板的名称显示出来，还有将第一个CPU的情况显示，可以根据实际情况进行修改。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.ComponentModel;</span><br><span class="line"><span class="keyword">using</span> System.Data;</span><br><span class="line"><span class="keyword">using</span> System.Drawing;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> OpenHardwareMonitor.Hardware;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">cpuGpu</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Form1</span> : <span class="title">Form</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UpdateVisitor</span> : <span class="title">IVisitor</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">VisitComputer</span>(<span class="params">IComputer computer</span>)</span></span><br><span class="line"><span class="function"></span>            &#123;</span><br><span class="line">                computer.Traverse(<span class="keyword">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">VisitHardware</span>(<span class="params">IHardware hardware</span>)</span></span><br><span class="line"><span class="function"></span>            &#123;</span><br><span class="line">                hardware.Update();</span><br><span class="line">                <span class="keyword">foreach</span> (IHardware subHardware <span class="keyword">in</span> hardware.SubHardware)</span><br><span class="line">                    subHardware.Accept(<span class="keyword">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">VisitSensor</span>(<span class="params">ISensor sensor</span>)</span> &#123; &#125;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">VisitParameter</span>(<span class="params">IParameter parameter</span>)</span> &#123; &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Form1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button2_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            UpdateVisitor updateVisitor = <span class="keyword">new</span> UpdateVisitor();</span><br><span class="line">            Computer myComputer = <span class="keyword">new</span> Computer();</span><br><span class="line">            myComputer.Open();</span><br><span class="line">            <span class="comment">//启动主板监测</span></span><br><span class="line">            myComputer.MainboardEnabled = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">//启动CPU监测</span></span><br><span class="line">            myComputer.CPUEnabled = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">//启动内存监测</span></span><br><span class="line">            myComputer.RAMEnabled = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">//启动GPU监测</span></span><br><span class="line">            myComputer.GPUEnabled = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">//启动风扇监测</span></span><br><span class="line">            myComputer.FanControllerEnabled = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">//启动硬盘监测</span></span><br><span class="line">            myComputer.HDDEnabled = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">do</span></span><br><span class="line">            &#123;</span><br><span class="line">                myComputer.Accept(updateVisitor);</span><br><span class="line">                Console.Clear();</span><br><span class="line">                <span class="comment">//foreach (var hardwareItem in myComputer.Hardware)</span></span><br><span class="line">                <span class="comment">//&#123;</span></span><br><span class="line">                <span class="comment">//    Console.WriteLine(hardwareItem.HardwareType + &quot;型号是：&quot; + hardwareItem.Name);</span></span><br><span class="line">                <span class="comment">//    foreach (var sensor in hardwareItem.Sensors)</span></span><br><span class="line">                <span class="comment">//    &#123;</span></span><br><span class="line">                <span class="comment">//        Console.WriteLine(sensor.Name + &quot;的&quot; + sensor.SensorType + &quot;是&quot; + sensor.Value);</span></span><br><span class="line">                <span class="comment">//    &#125;</span></span><br><span class="line">                <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">                <span class="built_in">string</span> BroadName = myComputer.Hardware[<span class="number">0</span>].Name.ToString();</span><br><span class="line">                <span class="built_in">string</span> CPUdata = myComputer.Hardware[<span class="number">1</span>].Sensors[<span class="number">0</span>].Value.ToString();</span><br><span class="line"></span><br><span class="line">                System.Threading.Thread.Sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">while</span> (<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="上述OpenHardwareMonitor方法被弃用了"><a href="#上述OpenHardwareMonitor方法被弃用了" class="headerlink" title="上述OpenHardwareMonitor方法被弃用了"></a>上述OpenHardwareMonitor方法被弃用了</h2><img src="/posts/3247989740/image-20240415211403556.png" class="" title="image-20240415211403556"><h1 id="LibreHardwareMonitorLib-方法完成"><a href="#LibreHardwareMonitorLib-方法完成" class="headerlink" title="LibreHardwareMonitorLib 方法完成"></a>LibreHardwareMonitorLib 方法完成</h1><p><strong>库添加方法跟前面一样</strong></p><p>win10温度获取的方法，在win11已经不行了<br>下面是win11获取温度代码 先安装包 LibreHardwareMonitorLib 用管理员身份运行</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> LibreHardwareMonitor.Hardware;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line">namespace 硬件温度2</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UpdateVisitor</span> : <span class="title">IVisitor</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">VisitComputer</span>(<span class="params">IComputer computer</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            computer.Traverse(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">VisitHardware</span>(<span class="params">IHardware hardware</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            hardware.Update();</span><br><span class="line">            <span class="keyword">foreach</span> (IHardware subHardware <span class="keyword">in</span> hardware.SubHardware) subHardware.Accept(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">VisitSensor</span>(<span class="params">ISensor sensor</span>)</span> &#123; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">VisitParameter</span>(<span class="params">IParameter parameter</span>)</span> &#123; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Monitor</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Computer computer = <span class="keyword">new</span> Computer</span><br><span class="line">            &#123;</span><br><span class="line">                IsCpuEnabled = <span class="literal">true</span>,</span><br><span class="line">                IsGpuEnabled = <span class="literal">true</span>,</span><br><span class="line">                IsMemoryEnabled = <span class="literal">true</span>,</span><br><span class="line">                IsMotherboardEnabled = <span class="literal">true</span>,</span><br><span class="line">                IsControllerEnabled = <span class="literal">true</span>,</span><br><span class="line">                IsNetworkEnabled = <span class="literal">true</span>,</span><br><span class="line">                IsStorageEnabled = <span class="literal">true</span></span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            computer.Open();</span><br><span class="line">            computer.Accept(<span class="keyword">new</span> UpdateVisitor());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> (IHardware hardware <span class="keyword">in</span> computer.Hardware)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Hardware: &#123;0&#125;&quot;</span>, hardware.Name);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">foreach</span> (IHardware subhardware <span class="keyword">in</span> hardware.SubHardware)</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">&quot;\tSubhardware: &#123;0&#125;&quot;</span>, subhardware.Name);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">foreach</span> (ISensor sensor <span class="keyword">in</span> subhardware.Sensors)</span><br><span class="line">                    &#123;</span><br><span class="line">                        Console.WriteLine(<span class="string">&quot;\t\tSensor: &#123;0&#125;, value: &#123;1&#125;&quot;</span>, sensor.Name, sensor.Value);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">foreach</span> (ISensor sensor <span class="keyword">in</span> hardware.Sensors)</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">&quot;\tSensor: &#123;0&#125;, value: &#123;1&#125;&quot;</span>, sensor.Name, sensor.Value);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            computer.Close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Monitor();</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="自己调整的方法"><a href="#自己调整的方法" class="headerlink" title="自己调整的方法"></a>自己调整的方法</h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HardwareMonitor</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UpdateVisitor</span> : <span class="title">IVisitor</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">VisitComputer</span>(<span class="params">IComputer computer</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            computer.Traverse(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">VisitHardware</span>(<span class="params">IHardware hardware</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            hardware.Update();</span><br><span class="line">            <span class="keyword">foreach</span> (IHardware subHardware <span class="keyword">in</span> hardware.SubHardware)</span><br><span class="line">                subHardware.Accept(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">VisitSensor</span>(<span class="params">ISensor sensor</span>)</span> &#123; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">VisitParameter</span>(<span class="params">IParameter parameter</span>)</span> &#123; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">HardwareMonitorRead</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">//UpdateVisitor updateVisitor = new();</span></span><br><span class="line">        <span class="comment">//Computer myComputer = new();</span></span><br><span class="line">        <span class="comment">//myComputer.Open();</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span>/启动主板监测</span></span><br><span class="line">        <span class="comment">//myComputer.MainboardEnabled = true;</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span>/启动CPU监测</span></span><br><span class="line">        <span class="comment">//myComputer.CPUEnabled = true;</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span>/启动内存监测</span></span><br><span class="line">        <span class="comment">//myComputer.RAMEnabled = true;</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span>/启动GPU监测</span></span><br><span class="line">        <span class="comment">//myComputer.GPUEnabled = true;</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span>/启动风扇监测</span></span><br><span class="line">        <span class="comment">//myComputer.FanControllerEnabled = true;</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span>/启动硬盘监测</span></span><br><span class="line">        <span class="comment">//myComputer.HDDEnabled = true;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//myComputer.Accept(updateVisitor);</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span>/Console.Clear();</span></span><br><span class="line">        <span class="comment">//foreach (var hardwareItem in myComputer.Hardware)</span></span><br><span class="line">        <span class="comment">//&#123;</span></span><br><span class="line">        <span class="comment">//    Debug.WriteLine(hardwareItem.HardwareType + &quot;型号是：&quot; + hardwareItem.Name);</span></span><br><span class="line">        <span class="comment">//    foreach (var sensor in hardwareItem.Sensors)</span></span><br><span class="line">        <span class="comment">//    &#123;</span></span><br><span class="line">        <span class="comment">//        Debug.WriteLine(sensor.Name + &quot;的&quot; + sensor.SensorType + &quot;是&quot; + sensor.Value);</span></span><br><span class="line">        <span class="comment">//    &#125;</span></span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">        Computer computer = <span class="keyword">new</span>()</span><br><span class="line">        &#123;</span><br><span class="line">            IsCpuEnabled = <span class="literal">true</span>,    <span class="comment">//启动CPU监测</span></span><br><span class="line">            IsGpuEnabled = <span class="literal">true</span>,    <span class="comment">//启动GPU监测</span></span><br><span class="line">            IsMemoryEnabled = <span class="literal">true</span>, <span class="comment">//启动内存监测</span></span><br><span class="line">            IsMotherboardEnabled = <span class="literal">true</span>,    <span class="comment">//启动主板监测</span></span><br><span class="line">            IsControllerEnabled = <span class="literal">true</span>,     <span class="comment">//启动控制器监测</span></span><br><span class="line">            <span class="comment">//IsNetworkEnabled = true,</span></span><br><span class="line">            IsStorageEnabled = <span class="literal">true</span> <span class="comment">//启动硬盘监测</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        computer.Open();</span><br><span class="line">        computer.Accept(<span class="keyword">new</span> UpdateVisitor());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> hardwareItem <span class="keyword">in</span> computer.Hardware)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.WriteLine(hardwareItem.HardwareType + <span class="string">&quot;型号是：&quot;</span> + hardwareItem.Name);</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> sensor <span class="keyword">in</span> hardwareItem.Sensors)</span><br><span class="line">            &#123;</span><br><span class="line">                Debug.WriteLine(sensor.Name + <span class="string">&quot;的&quot;</span> + sensor.SensorType + <span class="string">&quot;是&quot;</span> + sensor.Value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//foreach (IHardware hardware in computer.Hardware)</span></span><br><span class="line">        <span class="comment">//&#123;</span></span><br><span class="line">        <span class="comment">//    Debug.WriteLine(&quot;Hardware: &#123;0&#125;&quot;, hardware.Name);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//    foreach (IHardware subhardware in hardware.SubHardware)</span></span><br><span class="line">        <span class="comment">//    &#123;</span></span><br><span class="line">        <span class="comment">//        Debug.WriteLine(&quot;\tSubhardware: &#123;0&#125;&quot;, subhardware.Name);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//        foreach (ISensor sensor in subhardware.Sensors)</span></span><br><span class="line">        <span class="comment">//        &#123;</span></span><br><span class="line">        <span class="comment">//            Debug.WriteLine(&quot;\t\tSensor: &#123;0&#125;, value: &#123;1&#125;&quot;, sensor.Name, sensor.Value);</span></span><br><span class="line">        <span class="comment">//        &#125;</span></span><br><span class="line">        <span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//    foreach (ISensor sensor in hardware.Sensors)</span></span><br><span class="line">        <span class="comment">//    &#123;</span></span><br><span class="line">        <span class="comment">//        Debug.WriteLine(&quot;\tSensor: &#123;0&#125;, value: &#123;1&#125;&quot;, sensor.Name, sensor.Value);</span></span><br><span class="line">        <span class="comment">//    &#125;</span></span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">        computer.Close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h1 id="相关链接（侵删）"><a href="#相关链接（侵删）" class="headerlink" title="相关链接（侵删）"></a>相关链接（侵删）</h1><ol><li><a href="https://www.cnblogs.com/txwtech/p/16179740.html">（就是参照的这个）win11 c#硬件温度获取</a></li><li><a href="https://blog.csdn.net/chen1658137632/article/details/135343556">C#使用 OpenHardwareMonitor 获取CPU或显卡温度、使用率、时钟频率相关方式</a></li><li><a href="https://stackoverflow.com/questions/1195112/how-can-i-get-the-cpu-temperature">How can I get the CPU temperature?</a></li><li><a href="https://q.cnblogs.com/q/42203">C#如何获取电脑CPU温度，硬盘温度，主板温度，CPU转速</a></li></ol><hr><center><font color=red>=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">C# 程序编译时自动更新版本号方法</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="C#" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/C/"/>
    
    <category term="前端" scheme="https://zml3589110.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="硬件温度" scheme="https://zml3589110.github.io/categories/%E7%A1%AC%E4%BB%B6%E6%B8%A9%E5%BA%A6/"/>
    
    
    <category term="C#" scheme="https://zml3589110.github.io/tags/C/"/>
    
    <category term="硬件温度" scheme="https://zml3589110.github.io/tags/%E7%A1%AC%E4%BB%B6%E6%B8%A9%E5%BA%A6/"/>
    
    <category term="OpenHardwareMonitor" scheme="https://zml3589110.github.io/tags/OpenHardwareMonitor/"/>
    
    <category term="LibreHardwareMonitor" scheme="https://zml3589110.github.io/tags/LibreHardwareMonitor/"/>
    
  </entry>
  
  <entry>
    <title>电磁炉主要元器件</title>
    <link href="https://zml3589110.github.io/posts/203927772.html"/>
    <id>https://zml3589110.github.io/posts/203927772.html</id>
    <published>2024-04-13T08:43:20.000Z</published>
    <updated>2024-04-13T09:08:27.605Z</updated>
    
    <content type="html"><![CDATA[<h1 id="主要元器件"><a href="#主要元器件" class="headerlink" title="主要元器件"></a>主要元器件</h1><p><strong>完整内部图</strong></p><img src="/posts/203927772/image-20240413164824837.png" class="" title="image-20240413164824837"><ol><li>炉盘线圈</li></ol><img src="/posts/203927772/image-20240413164659643.png" class="" title="image-20240413164659643"><ol start="2"><li>热敏电阻</li></ol><img src="/posts/203927772/image-20240413164904574.png" class="" title="image-20240413164904574"><ol start="3"><li>主电路板</li></ol><img src="/posts/203927772/image-20240413165003252.png" class="" title="image-20240413165003252"><ol start="4"><li><p>显示电路板</p><img src="/posts/203927772/image-20240413165033420.png" class="" title="image-20240413165033420"></li><li><p>风扇</p><img src="/posts/203927772/image-20240413165331961.png" class="" title="image-20240413165331961"></li><li><p>散热器</p><img src="/posts/203927772/image-20240413165345163.png" class="" title="image-20240413165345163"></li><li><p>谐振、滤波电容</p><img src="/posts/203927772/image-20240413165357093.png" class="" title="image-20240413165357093"></li><li><p>共模电感</p><img src="/posts/203927772/image-20240413165422942.png" class="" title="image-20240413165422942"></li><li><p>压敏电阻</p><img src="/posts/203927772/image-20240413165432736.png" class="" title="image-20240413165432736"></li><li><p>保险丝</p>  <img src="/posts/203927772/image-20240413165432736.png" class="" title="image-20240413165432736"></li><li><p>电源线和磁环</p></li></ol><img src="/posts/203927772/image-20240413165502914.png" class="" title="image-20240413165502914"><p>电磁炉的整流桥和功率管TGBT并不像组装电脑时主板、CPU、内存、硬盘等必须要相互匹配才能够使用，整流桥和IGBT可以分别独立考虑，没有必须相互匹配这一说，只要它们的耐压、电流、功率等参数完全能够满足电路系统设计要求即可。</p><img src="/posts/203927772/image-20240413165535331.png" class="" title="image-20240413165535331"><img src="/posts/203927772/image-20240413165550622.png" class="" title="image-20240413165550622"><p>1、电磁炉的整流桥</p><p>电磁炉的整流桥应用在220V高压交流电后端，直接将输入的220V交流电整流，得到310V左右的高压直流电，其主要功率回路为滤波电感、磁盘线圈（锅具线盘）、功率管IGBT，可见310V只要功率负载为电磁炉线盘，家用电磁炉的功率一般3000W左右，比如3000W、2200W、2000W等。</p><p>整流桥选型时，需要根据电磁炉的功率进行选取，比如3000W的电磁炉，整流桥的输入电流约15A，再加上70%~80%的降额设计，整流桥的电流应选择20A以上；关于耐压值，220V交流电整流后最高电压约311V，考虑220V交流电输入有可能偏高，再加上降额设计，其耐压值选取必须400V以上，比如常用的电磁炉整流桥D20ⅩB60其参数为20A&#x2F;600V，D20ⅩB80参数为20A&#x2F;800V，GBJ2508参数为25A&#x2F;800V，GBJ2510参数为25A&#x2F;1000V。由于整流桥属于电磁炉易坏元器件，故在元器件选型更换时，最好选择耐压值较高的，比如800V、1000V，可防止较高的雷电及电路反峰冲击；电流选择偏大一些，比如3000W以内的电磁炉整流桥电流可选择25A以上的，降额越大元器件更可靠、更耐用。</p><img src="/posts/203927772/%E7%94%B5%E7%A3%81%E7%82%89%E7%9A%84%E6%95%B4%E6%B5%81%E6%A1%A5.webp" class="" title="电磁炉的整流桥"><p>2、电磁炉的功率管IGBT</p><img src="/posts/203927772/%E7%94%B5%E7%A3%81%E7%82%89%E7%9A%84%E5%8A%9F%E7%8E%87%E7%AE%A1IGBT.webp" class="" title="电磁炉的功率管IGBT"><p>电磁炉的功率管IGBT用于控制电磁炉线盘接通&#x2F;断开，以及通过脉宽调制调节电磁炉的功率。功率管IGBT工作在310V高压直流回路当中，控制线圈加热，电磁炉内部的系统检测电路，比如功率管温度检测、锅底温度检测、过压欠压检测、电流检测最终都是反馈到控制电路当中，控制执行器件IGBT。电磁炉功率档位选择是通过改变PWM脉冲宽度实现的，输出脉冲信号高电平占空比越大，电磁炉的功率越大。</p><img src="/posts/203927772/%E7%94%B5%E7%A3%81%E7%82%89%E7%9A%84%E5%8A%9F%E7%8E%87%E7%AE%A1IGBT1.webp" class="" title="电磁炉的功率管IGBT1"><p>电磁炉功率管IGBT该如何选型呢？选择电磁炉的IGBT最关键的两个技术指标为工作电压和工作电流，这两个参数直接取决于该管子能不能够使用，其它参数比如饱和压降、最大冲击电流、工作温度等只影响电路的性能。</p><p>对于工作电压最好选择1000V以上，虽然正常回路电压只有310V左右，但是由于开关管高速开通&#x2F;断开，会产生高频干扰信号，而且加热线盘属于电感，断开瞬间会产生很高的反电动势；<br>其次是最大集电极电流，需参考电磁炉的最大功率，比如3000W的电磁炉，其工作电流为10A左右，管子最大电流最好按2倍电流以上选取，比如20A、25A等，因为电磁炉的功率经过脉宽调制，其最大电流瞬态远超计算的额定电流。<br>比如常用的电磁炉功率管IGBT：H20R1202&#x2F;H20R1203其最高工作电压1200V，最大集电极电流20A；H20R1203其最高工作电压1000V，最大集电极电流40A等。</p><img src="/posts/203927772/image-20240413165900612.png" class="" title="image-20240413165900612"><p>还有其它其参数，比如饱和压降越小越好，压降越小管子的功耗越低；工作温度范围越宽越好，比如商业级元器件工作温度0℃<del>70℃，工业级元器件-40℃</del>85℃，汽车级元器件-40℃<del>125℃，军工级元器件-55℃</del>125℃，从温度范围也可以看出，商业级元器件性能最差，军工级最高！还有开关频率等。</p><p><strong>总结：</strong><br>元器件选型也是设计能力的体现，元器件的质量直接影响产品的功能、性能。电磁炉整流桥和IGBT选型时，没有必然的匹配关系，可根据相关参数独立选取，对于整流桥而言关键参数为工作电压、工作电流、功率等，相关参数满足即可；对于功率管IGBT而言，关键参数为最高工作电压和最大工作电流，其次还有饱和压降、工作频率、工作温度等，参数满足即可。</p><hr><h1 id="相关链接（侵删）"><a href="#相关链接（侵删）" class="headerlink" title="相关链接（侵删）"></a>相关链接（侵删）</h1><ol><li><a href="https://mp.weixin.qq.com/s/OHDhzf0jJzHoHa9lP9N5PQ">电磁炉电路主要元器件，整流桥和TGBT不用必须相互匹配？</a></li></ol><hr><center><font color=red>=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">电磁炉主要元器件</summary>
    
    
    
    <category term="电磁炉" scheme="https://zml3589110.github.io/categories/%E7%94%B5%E7%A3%81%E7%82%89/"/>
    
    <category term="器件" scheme="https://zml3589110.github.io/categories/%E5%99%A8%E4%BB%B6/"/>
    
    
    <category term="电磁炉" scheme="https://zml3589110.github.io/tags/%E7%94%B5%E7%A3%81%E7%82%89/"/>
    
    <category term="主要元器件" scheme="https://zml3589110.github.io/tags/%E4%B8%BB%E8%A6%81%E5%85%83%E5%99%A8%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>电磁炉保护及检测单元电路</title>
    <link href="https://zml3589110.github.io/posts/1863675241.html"/>
    <id>https://zml3589110.github.io/posts/1863675241.html</id>
    <published>2024-04-13T06:53:20.000Z</published>
    <updated>2024-04-13T09:08:27.614Z</updated>
    
    <content type="html"><![CDATA[<h1 id="高低压检测保护电路"><a href="#高低压检测保护电路" class="headerlink" title="高低压检测保护电路"></a>高低压检测保护电路</h1><img src="/posts/1863675241/%E9%AB%98%E4%BD%8E%E5%8E%8B%E4%BF%9D%E6%8A%A4.webp" class="" title="高低压保护"><img src="/posts/1863675241/%E5%8F%8D%E5%8E%8B%E4%BF%9D%E6%8A%A4.webp" class="" title="反压保护"><img src="/posts/1863675241/%E6%B5%AA%E6%B6%8C.webp" class="" title="浪涌"><ol><li>浪涌保护电路主要是针对市电电网电压中出现的异常浪涌冲击，及时关断IGBT的工作，防止爆管而进行的保护。</li><li>浪涌保护电路的取样形式有两种，一种是在市电输入端，另一种是在+300V处。</li><li>浪涌保护电路的工作原理如图2.21所示。</li></ol><img src="/posts/1863675241/%E6%B5%AA%E6%B6%8C%E7%94%B5%E8%B7%AF%E5%8E%9F%E7%90%86.webp" class="" title="浪涌电路原理"><h1 id="电流检测电路"><a href="#电流检测电路" class="headerlink" title="电流检测电路"></a>电流检测电路</h1><ol><li><p>电流检测电路的主要作用是为单片机提供整机的精确电流参数，让单片机根据此参数判断锅具加热面积的大小、是否有锅；同时，检测整机的工作电流，并以此参数进行输出功率的闭环控制。</p></li><li><p>电流检测电路主要由电流互感器CT1、全波整流桥D10~D13、微调电阻VR1等组成，其工作原理如图2.22所示。</p></li><li><p>电流检测电路原理：电流互感器CT1二次侧的AC电压，经过D10~D13组成的桥式整流桥整流、EC5平滑后的直流电压送到CPU的I-AD口，CPU根据检测此电压信号的变化来计算电磁炉的输入电流，从而自动做出各种动作。</p></li></ol><img src="/posts/1863675241/%E7%94%B5%E6%B5%81%E4%BA%92%E6%84%9F%E5%99%A8%E7%94%B5%E8%B7%AF.webp" class="" title="电流互感器电路"><p>①检测到有锅后，将会用2s的时间来检测电流的变化，通过电流变化的差值确定锅具的材质、大小和尺寸。</p><p>②工作时，单片机时刻检测电流的变化，根据检测到的电压及电流信号，自动调整PWM,进行功率恒定处理。</p><p>③工作时，单片机时刻检测电流的变化，当电流变化过大时，做无锅具的判断。</p><p>该电流信号可以用于检测锅具和调整输出功率。标准板采用的电流互感器CT1的电流比为1：3000，电流比较大，因而其在大电流的工作时感应出来的电流特性线性度较好。VR1是10k2的可调电阻，主要通过调节此电阻值来调整因结构误差引起的功率偏差，改变电流检测的基准，达到调节电磁炉输出功率大小的目的。当VR1增大时，相应的电流检测的电压会提高。在CT1一次电流一定的情况下，CT1二次侧感应出来的电压相应提高，那么电流检测的AD值会提高，根据软件设定的恒定功率的要求，功率会相对下降。</p><p>D23为钳位保护二极管，防止当电压异常升高超过+5V时，烧毁单片机。</p><h2 id="两种采样电路"><a href="#两种采样电路" class="headerlink" title="两种采样电路"></a>两种采样电路</h2><p>电流采样单元是在电磁炉工作时提供给单片机电流采样信号的采样电路。单片机时刻检测输入电流的变化，根据检测到的电流采样信号，自动调整PWM信号，使电磁炉做输出功率的恒定处理，单片机也会根据检测电流采样信号的变化来检测电磁炉的输入电流，从而自动做出各种动作。当单片机在同步电路检测到合适的有锅具的脉冲数后，将会用0.5～2s的时间来检测电流的变化，通过电流变化的差值确定加热锅具的材质、加热面积的大小尺寸是否符合加热要求，当电流采样信号变化过大时，单片机做无锅具的判断。现在市场上主流的电磁炉电路中有两种常用的电流采样单元电路，分别是采用电流互感器采样的电流采样单元和采用电阻压降采样的电流采样单元。</p><p><strong>下面将分别介绍这两种采样电路的工作原理。</strong><br>电流采样单元是在电磁炉工作时提供给单片机电流采样信号的采样电路。单片机时刻检测输入电流的变化，根据检测到的电流采样信号，自动调整PWM信号，使电磁炉做输出功率的恒定处理，单片机也会根据检测电流采样信号的变化来检测电磁炉的输入电流，从而自动做出各种动作。当单片机在同步电路检测到合适的有锅具的脉冲数后，将会用0.5～2s的时间来检测电流的变化，通过电流变化的差值确定加热锅具的材质、加热面积的大小尺寸是否符合加热要求，当电流采样信号变化过大时，单片机做无锅具的判断。现在市场上主流的电磁炉电路中有两种常用的电流采样单元电路，分别是采用电流互感器采样的电流采样单元和采用电阻压降采样的电流采样单元。下面将分别介绍这两种采样电路的工作原理。</p><p>(1)采用电流互感器采样的电流采样单元如下图(a)所示。电流互感器CT1二次测得的交流电压，经过D10～D13组成的桥式整流器整流。经EC5平滑后的直流电压送到CPU的I-A&#x2F;D口，CPU根据此电压信号的变化来检测电磁炉的输入电流。电流互感器CT1的匝数比为1：3000，匝数比大，则其在大电流的工作时感应出来的电流线性好。VR1是0～10kΩ的可调电阻，主要用来调整因为结构误差引起的功率偏差，也可通过调节此电阻来改变电流检测的基准，达到调节电磁炉输出功率大小的目的。当VR1阻值增大时，相应的电流检测的电压会提高。在CT1初级电流一定的情况下，CT1次级感应出来的电压相应提高，程序根据A&#x2F;D口模拟量信号的变化进行相应的控制，根据软件恒功的要求，功率会相对下降。</p><img src="/posts/1863675241/%E7%94%B5%E6%B5%81%E4%BA%92%E6%84%9F%E5%99%A8%E7%94%B5%E8%B7%AF.webp" class="" title="电流互感器电路"><p>(2)采用电阻采样的电流采样单元如下图(b)所示。电阻R320是串接在IGBT管e极与电源负极之间的采样电阻，一般选取0.01Ω，使其在通过10A电流时压降达到0.1V的技术要求。比较器IC4A和外围电路组成放大系数为100倍的正向直流放大器，在VR端即可获得放大100倍后的电流采样电压，此电压送到CPU的I-A&#x2F;D口，使单片机做出相应动作。可变电阻VR作用与电流互感器采样的电流采样单元中的VR1作用相同，在此不在复述。</p><img src="/posts/1863675241/%E7%94%B5%E6%B5%81%E7%94%B5%E9%98%BB%E9%87%87%E6%A0%B7.webp" class="" title="电流电阻采样"><h2 id="电流互感器"><a href="#电流互感器" class="headerlink" title="电流互感器"></a>电流互感器</h2><p>电流检测的电路有很多，一般都是通过电流信号转化为电压信号，然后通过单片机AD口检测电压，对于大电压大电流场合一般都要降压处理后再进行检测，电流互感器就是这个原理，它利用的是电磁感应原理，将初级的大电流转换到次级的小电流的一种器件。</p><img src="/posts/1863675241/%E7%94%B5%E6%B5%81%E4%BA%92%E6%84%9F%E5%99%A81.webp" class="" title="电流互感器1"><p>电流互感器是的初级绕组匝数一般很少，串在所测量的电流的线路中，如下图是电流互感器</p><img src="/posts/1863675241/%E7%94%B5%E6%B5%81%E4%BA%92%E6%84%9F%E5%99%A82.webp" class="" title="电流互感器2"><p>电流互感器在电磁炉应用过流检测方面很广泛，如下图是某电流互感器检测电流线路一部分，它的最终目的是测试电路的工作电流，从而不断调整电磁炉功率输出，使其工作保持稳定，该电路主要由电流互感器、电阻、电容等组成。工作原理：市电经过电力互感器后再次级得到交流电压，经过整流二极管D1-D4整流后，并由电解电容MC1滤波得到较为平滑的直流电，并经R3和R4分压后得到的信号送至IC，IC检测送过来的电压大小来判断电流的大小，电压越大电流也就越大，这样IC会控制IGBT开关管的导通时间来保证功率输出的稳定。有些电流检测电路用LM339组成，比较两者电压从而输出一个信号，有些由三极管组成，通过判断高低电平来判断是否过流。</p><img src="/posts/1863675241/%E7%94%B5%E6%B5%81%E4%BA%92%E6%84%9F%E5%99%A83.webp" class="" title="电流互感器3"><h1 id="炉温、管温检测电路"><a href="#炉温、管温检测电路" class="headerlink" title="炉温、管温检测电路"></a>炉温、管温检测电路</h1><p>炉温（锅具温度）检测电路的主要作用是检测锅具的实际温度，以及防止电磁炉对锅具干烧。炉温检测电路的原理如图2.23所示，主要由热敏电阻RT2(负温度系数)、R4、电容C11及插排CN1等组成。随着热敏电阻通过陶瓷板对锅具底部温度采样，送到单片机6脚的电压也会随着温度变化而变化。单片机通过主控程序的设定值与该电压进行比较，从而做出相应的动作来控制电磁炉的温度。</p><p>管温(IGBT管温度)检测电路的主要作用是对IGBT管、高压整流全桥等的工作温度进行实际检测，防止它们因过热而烧毁。管温检测电路原理如图2.23所示，主要由热敏电阻RT1(负温度系数)、电阻R5、电容C18及插排CN3等组成。管温检测电路的工作原理和锅具检测电路的工作原理相似，只不过是检测信号输入至单片机的5脚。</p><img src="/posts/1863675241/%E7%82%89%E9%9D%A2IGBT%E6%B8%A9%E5%BA%A6%E6%A3%80%E6%B5%8B.webp" class="" title="炉面IGBT温度检测"><h1 id="电磁炉的同步电路分析"><a href="#电磁炉的同步电路分析" class="headerlink" title="电磁炉的同步电路分析"></a>电磁炉的同步电路分析</h1><p>在电磁炉的电路都存在有一个重要的单元电路，那就是同步电路，它由炉盘线圈两端的取样电阻和比较器构成。设计这个电路的目的是为了避免在线圈电流突变引起IGBT功率管集电极高压时打开，以防IGBT功率管由于高压冲击而损坏。</p><p>下面来看一个实际电磁炉的同步电路的典型应用。</p><p>在电磁炉炉盘线圈的左侧电压取样电路包括R11、R12、R17、R52，通过电阻串联分压后的A点电压，再经C17、C9高频滤波，给到LM339的第6引脚(反相输入端)。</p><p>在电磁炉炉盘线圈的右侧电压取样电路包括R13、R14、R15、R16，R18、R19、R51，通过R16与R18串联、R19与R51串联，然后并联，再于R13、R14、R15串联分压后，再R16，R18串联分压，得到的B点电压，再经C8、C9高频滤波，给到LM339的第7引脚(正相输入端)。</p><img src="/posts/1863675241/%E5%90%8C%E6%AD%A5%E7%94%B5%E8%B7%AF.webp" class="" title="同步电路"><ol><li><p>当电磁炉的开关按钮被按压，触发信号给到微处理器，微处理器发出开机信号，经震荡单元电路处理，震荡脉冲使IGBT功率管导通，炉盘线圈的感生电动势为左正右负，A点电压&gt;B点电压，即:反相输入端电压＞正相输入端电压，LM339的第1引脚输出端低电平。</p></li><li><p>当IGBT功率管被关断，炉盘线圈的感生电动势为右正左负，A点电压＜B点电压，即:反相输入端电压＜正相输入端电压，LM339的第1引脚输出端高电平。</p></li><li><p>在炉盘线圈的感生电动势右正左负给谐振电容充电，到谐振电容充电完成，再到谐振电容放电给炉盘线圈的初期，B点电压＞A点电压，LM339的第1引脚输出端始终输出高电平。</p></li><li><p>当谐振电容放电给炉盘线圈的电流减小，炉盘线圈的感生电动势突变为左正右负，A点电压&gt;B点电压，即:反相输入端电压＞正相输入端电压，LM339的第1引脚输出端低电平，这时作用于震荡单元电路，使震荡单元电路输出高电平脉冲IGBT再次导通，进入下一个周期。</p></li></ol><p><strong>总结一下:</strong></p><ul><li>炉盘线圈的感生电动势为左正右负，A点电压&gt;B点电压，LM339的第1引脚输出端低电平，震荡单元电路输出高电平，IGBT导通；</li><li>在炉盘线圈的感生电动势右正左负，B点电压＞A点电压，LM339的第1引脚输出端输出高电平，震荡单元电路输出低电平，IGBT处于关断状态。</li><li>防止在高压期间打开，由于高压冲击造成IGBT损坏。</li></ul><h1 id="电磁炉IGBT驱动电路解析"><a href="#电磁炉IGBT驱动电路解析" class="headerlink" title="电磁炉IGBT驱动电路解析"></a>电磁炉IGBT驱动电路解析</h1><p><strong>在同步单元电路协同下，震荡单元电路输出相对应的占空比方波脉冲驱动由图腾柱组成的推挽电路，再由其来驱动IGBT的导通与截止。</strong></p><ol><li>当震荡单元电路输出高电平，由于S8050是NPN三极管导通，S8550PNP三极管截止，首先经S8050的基极、发射极、R35、R48、R49、接地构成电流回路。</li></ol><img src="/posts/1863675241/IGBT%E9%A9%B1%E5%8A%A8%E7%94%B5%E8%B7%AF1.webp" class="" title="IGBT驱动电路1"><ol start="2"><li>18V经S8050的集电极、发射极、R35、R48加到IGBT功率管的栅极，给栅极与发射极极间电容充电，使栅极与发射极形成高电平。</li></ol><img src="/posts/1863675241/IGBT%E9%A9%B1%E5%8A%A8%E7%94%B5%E8%B7%AF2.webp" class="" title="IGBT驱动电路2"><ol start="3"><li>整流后L1、C4滤波后，在C4形成310V平滑直流，经炉盘线圈、IGBT的集电极、发射极、接地、回到C4负，构成电流回路，给炉盘线圈储能。</li></ol><img src="/posts/1863675241/IGBT%E9%A9%B1%E5%8A%A8%E7%94%B5%E8%B7%AF3.webp" class="" title="IGBT驱动电路3"><ol start="4"><li>当震荡单元电路输出低电平(接地0V)，S8050是NPN三极管截止，S8550PNP三极管导通，首先IGBT的栅极与发射极的极间电容所存电荷，经R48、S8550的发射极、基极、震荡单元电路输出端，构成电流回路。图示箭头→</li></ol><img src="/posts/1863675241/IGBT%E9%A9%B1%E5%8A%A8%E7%94%B5%E8%B7%AF4.webp" class="" title="IGBT驱动电路4"><ol start="5"><li>栅极与发射极的极间电容所存电荷，经R48、S8550的发射极、集电极、接地，构成极间电容放电电流回路。将IGBT的栅极拉低为低电平，IGBT集电极到发射极变为截止。</li></ol><img src="/posts/1863675241/IGBT%E9%A9%B1%E5%8A%A8%E7%94%B5%E8%B7%AF5.webp" class="" title="IGBT驱动电路5"><h1 id="反压保护电路"><a href="#反压保护电路" class="headerlink" title="反压保护电路"></a>反压保护电路</h1><blockquote><p>准确的说是IGBT功率管ce极高压保护，当IGBT功率管ce极电压超过设定值，该电路输出给震荡单元电路，震荡单元电路输出的调制脉冲占空比降低，IGBT功率管导通时间缩短，截止时间变长，使IGBT功率管8ce极高压值回到额定范围内，防止因IGBT功率管ce极电压过高而造成IGBT功率管损坏。</p></blockquote><img src="/posts/1863675241/%E5%8F%8D%E5%8E%8B%E4%BF%9D%E6%8A%A4%E7%94%B5%E8%B7%AF.webp" class="" title="反压保护电路"><p>该电路包括R13、R14、R15、R16、R18、R51、R19、LM339的U2C比较器、R20、R21、R22组成。</p><p>首先LM339的U2C比较器的第9脚引正相输入端的电压是一个固定值，由R20、R21电阻串联分压得到，为:20&#x2F;(20+3.9)*5&#x3D;4.18V。</p><p>LM339的U2C比较器的第8脚引反相输入端的电压是IGBT功率管集电极(C)电压R13、R14、R15、R16、R18、R51、R19按图中的串并联关系在C点得到电压，</p><p>当C点电压低于4.18V，LM339的第14引脚U2C比较器的输出端输出为高阻态；</p><p>当C点电压高于4.18V，LM339的第14引脚U2C比较器的输出端输出为低电平(0V)。</p><p>接下来反推一下当C点为4.18时的IGBT功率管集电极、发射极间电压。</p><ul><li><p>R13、R14、R15三个电阻串联后的阻值为240+240+240&#x3D;720；</p></li><li><p>R16、R18串联后的电阻值为240+27&#x3D;267；</p></li><li><p>R51、R19串联后的电阻值为240+5.6&#x3D;245.6；</p></li><li><p>R16、R18串联，R51、R19串联再并联后的电阻值为1&#x2F;((1&#x2F;267)+(1&#x2F;245.6))&#x3D;127.9266485；</p></li></ul><p>R13、R14、R15、R16、R18、R51、R19串并联后的阻值为720+127.9266485&#x3D;847.9266485；</p><p>R51、R19串联分压，C点的电压为4.18V，B点的电压为4.18*245.6&#x2F;5.6&#x3D;183.3228571；</p><p>A点的电压为183.3228571*847.9266485&#x2F;127.9266485&#x3D;1215.1052；</p><p><strong>得出结论:</strong><br>当IGBT功率管ce极电压高于1215.1052V，LM339的第14引脚U2C比较器的输出端输出为低电平(0V)，经R22并联到震荡单元电路的正相输入端，<br>使震荡单元电路(U2D)正相输入端的电压下降，输出驱动脉冲的占空比降低，IGBT功率管导通时间缩短，截止时间变长，<br>使IGBT功率管8ce极高压值回到额定范围内，防止因IGBT功率管ce极电压过高而造成IGBT功率管损坏。</p><h1 id="震荡驱动单元电路"><a href="#震荡驱动单元电路" class="headerlink" title="震荡驱动单元电路"></a>震荡驱动单元电路</h1><blockquote><p>该电路是在同步单元电路、脉宽调制协同下，由比较器输出对应占空比方波脉冲，使IGBT功率管有序开关。</p></blockquote><img src="/posts/1863675241/%E6%8C%AF%E8%8D%A1%E7%94%B5%E8%B7%AF1.webp" class="" title="振荡电路1"><ol><li>PWM是根据使用者所选择的档位，对应的功率，微处理器所发出的对应占空比方波信号，首先经R23、EC5、C11进行低通滤波，形成平滑的直流，再叠加在由R25、R24串联分压组成的静态工作点上(2.5V)给到LM339的第11引脚(U2D的正相输入端)，该电压在某一档位下是一个相对固定值的电压(最小值＞2.5V)，在平面坐标系中，为平行横轴的直线。</li></ol><img src="/posts/1863675241/%E6%8C%AF%E8%8D%A1%E7%94%B5%E8%B7%AF2.webp" class="" title="振荡电路2"><ol start="2"><li>下面是一个锯齿波发生电路，它的构成下图所示。当C点获得一个短暂低电平(0V)触发脉冲(开机信号)，A点会是低电平，由于C6的两端电压不能突变，B点的电压也是低电平。B点的电压是给到LM339的第10引脚(U2D的反相输入端)，由于U2D的正相输入端电压＞反相输入端电压，U2D输出端为高电平(严谨的说为高阻态通过上拉电阻R33上接18V输出高电平)驱动由8050和8550组成的图腾电路，图腾电路再驱动IGBT功率管导通，LM339的U2B输出端会变成持续低电平(缘由可以参看前期的《电磁炉并联谐振的震荡过程》及《电磁炉的同步单元电路解析》)，18V通过R28给C6定时电容充电，随着C6定时电容充电，C6右端的电压会逐渐升高，即:B点电压升高，LM339的第10引脚(U2D的反相输入端)的电压会升高。</li></ol><img src="/posts/1863675241/%E6%8C%AF%E8%8D%A1%E7%94%B5%E8%B7%AF3.webp" class="" title="振荡电路3"><p>当LM339的第10引脚(U2D的反相输入端)的电压大于＞第11引脚(U2D的正相输入端)的电压，LM339的第13引脚(U2D的输出端输出低电平，由8050和8550组成的图腾电路，下管导通接地，IGBT功率管栅极变为低电平，IGBT功率管截止，炉盘线圈的感生电动势变为右正左负，同步单元电路的U2B输出端变为高阻态。(详细技术细节请前期的《电磁炉并联谐振的震荡过程》及《电磁炉的同步单元电路解析》)；C6计时电容由于D17钳位作用而放电或者说5V经R26、R27给C6电容反向充电，使C6计时电容两端差变小，最高为0.7V(左端为5v,右端为5.7v)。当炉盘线圈和谐振电容间的谐振使炉盘线圈的感生电动势变为左正右负时，同步单元电路的U2B输出端变为低电平(0V)，由于C6两端电压不能突变，即C6两端电压差为0.7V，使C6左端电压变为0V，逐使C6右端电压为0.7V，与其相连的B点的电压，LM339的第10引脚(U2D的反相输入端)电压也为0.7V，由于U2D的正相输入端电压＞反相输入端电压，U2D输出端为高电平(严谨的说为高阻态通过上拉电阻R33上接18V输出高电平)驱动由8050和8550组成的图腾电路，图腾电路再驱动IGBT功率管导通，进入下一个周期。</p><img src="/posts/1863675241/%E6%8C%AF%E8%8D%A1%E7%94%B5%E8%B7%AF4.webp" class="" title="振荡电路4"><h1 id="5V电源电路"><a href="#5V电源电路" class="headerlink" title="5V电源电路"></a>5V电源电路</h1><h2 id="电磁炉5V电源输出电压，测量结果显示312V？"><a href="#电磁炉5V电源输出电压，测量结果显示312V？" class="headerlink" title="电磁炉5V电源输出电压，测量结果显示312V？"></a>电磁炉5V电源输出电压，测量结果显示312V？</h2><blockquote><p>如果没有测错地方，那一定是电磁炉5V电源的地方发生了故障。</p></blockquote><p>电磁炉的型号很多，其内部原理设计也是多种多样，针对电磁炉的5V电源系统而言，常的有以下几种设计方式：220V交流电经过变压器转换为低压交流电然后整流、滤波，再经过7805进行稳压；有的经过变压器降压、整流、滤波，先经过7812得到12V，然后再经过7805得到5V；有的经过变压器降压、整流，然后经过限流电阻+稳压管的方式得到5V电源；有的是将220V交流电直接整流然后通过开关管脉宽调制的方式得到（采用开关电源的原理）；有的直接采用容阻降压的方式+整流+限流电阻+5V稳压管的方式得到5V电源。</p><img src="/posts/1863675241/5V%E7%94%B5%E8%B7%AF1.webp" class="" title="5V电路1"><p><strong>电磁炉5V电源系统主要给比较器及驱动芯片等供电，负载电流一般不大，有些电磁炉为了节约成本，直接采用限流电阻+稳压管的方式降压稳压。</strong></p><img src="/posts/1863675241/5V%E7%94%B5%E8%B7%AF2.webp" class="" title="5V电路2"><img src="/posts/1863675241/5V%E7%94%B5%E8%B7%AF3.webp" class="" title="5V电路3"><p>如上图容阻降压方式原理，无论是图1或图2当5V稳压管开路时，测量5V电源都是约311V左右。因为当稳压管开路时，桥式整流和半波整流输出端相当于开路（空载），无论是桥式整流还是半波整流，滤波后空载输出电压约交流电的1.414倍，即220V×1.414≈311V。虽然有容阻降压模块，但是因为没有负载电流，所以容阻降压部分几乎没有压降，整流前端的电压依然为220V，所以整流滤波后空载电压约为311V，符合提问者所测试得的312V电压，估计该电磁炉5V电源采用的原理和该原理类似，稳压管已开路。</p><h1 id="18V电源电路"><a href="#18V电源电路" class="headerlink" title="18V电源电路"></a>18V电源电路</h1><h2 id="电磁炉的基本原理"><a href="#电磁炉的基本原理" class="headerlink" title="电磁炉的基本原理"></a>电磁炉的基本原理</h2><blockquote><p>电磁炉主要由线圈盘、主控电路板、风扇、按键显示面板、陶瓷面板、上下壳等组成，其中主控电路板主要主要元器件有滤波电容、谐振电容、抗干扰电容、大功率IGBT开关管、整流桥、互感线圈、蜂鸣器、变压器、驱动芯片、LM339、8050&#x2F;8550三极管等。</p></blockquote><p>电磁炉的基本工作原理是：炉盘线圈工作电压约300V左右，300V的直流高压是220V交流电经过整流桥整流得到的，220V交流整流后最高电压为220V*1.414≈311V。其高压主回路是220VAC经过保险丝、电流互感器、电感、炉盘线圈、IGBT，通过控制IGBT开关管导通&#x2F;断开来控制炉盘线圈是否工作。IGBT控制方式一般采用PWM调制，通过调节PWM的占空比来调节电磁炉的功率，其它功能还包括功率控制、温度控制、无锅检测、电压报警、电流过大报警、IGBT温度过高报警、锅底温度过高报警、风扇故障报警等，其基本原理框图如下图所示。</p><img src="/posts/1863675241/18V%E7%94%B5%E8%B7%AF1.webp" class="" title="18V电路1"><p>下图为某款电磁炉详细原理图，关注公众号“电路一点通” 回复 进群 .其主要的电源电压有输入端220V，内部电压有300V，电磁炉功率主回路，给炉盘线圈供电；5V，控制芯片、蜂鸣器等供电；18V或15V或12V；不同型号电磁炉其电压不同，主要用于驱动IGBT开关管以及为风扇提供电源。</p><img src="/posts/1863675241/18V%E7%94%B5%E8%B7%AF2.webp" class="" title="18V电路2"><h2 id="18V电源是怎么来的呢？"><a href="#18V电源是怎么来的呢？" class="headerlink" title="18V电源是怎么来的呢？"></a>18V电源是怎么来的呢？</h2><p>了解了电磁炉的基本原理之后，下面重点说一下18V电源的原理，以其中一款电磁炉原理进行详细说明，其原理如下图所示，18V电源是由220V交流电经过变压器进行降压，再通过一个整流二极管进行半波整流，然后经过220μF&#x2F;35V的电容进行滤波，最后通过串联510Ω的限流电阻再并联18V的稳压管，将最后输出电压稳定在18V，有的电磁炉直接使用三端稳压器7818进行稳压。</p><img src="/posts/1863675241/18V%E7%94%B5%E8%B7%AF3.webp" class="" title="18V电路3"><p>同理，5V电源的原理也类似，如上图，经过变压器次级线圈降压后的低压交流电经过4个二极管组成的桥式整流电路整流，然后经过470μF&#x2F;25V的电容滤波，最后通过三端稳压器7805进行降压稳压得到5V电源。</p><p>那么没有具体电路板原理图的情况下怎么快速找到18V电源部分呢？如下图，紧贴散热器的那两个元器件，三个引脚的为IGBT开关管，四个引脚的为整流桥，找到小功率变压器，这就是提供5V、18V电源的变压器，因此附近这部分电路就是5V、18V电源电路，如下图红圈标识的地方。</p><img src="/posts/1863675241/18V%E7%94%B5%E8%B7%AF4.webp" class="" title="18V电路4"><p><strong>注意：18V电源并不是直接连接IGBT驱动端，而是经过由NPN和PNP三极管8050、8550组成的对管来驱动IGBT，因为这样才可以通过控制8050、8550导通&#x2F;截止实现PWM调制，调节电磁炉的功率。</strong></p><img src="/posts/1863675241/18V%E7%94%B5%E8%B7%AF5.webp" class="" title="18V电路5"><h2 id="18V电源故障怎么检修？"><a href="#18V电源故障怎么检修？" class="headerlink" title="18V电源故障怎么检修？"></a>18V电源故障怎么检修？</h2><p>18V电源的负载：风扇和IGBT驱动，若是因为测量IGBT无驱动电压，并不代表18V电源故障，极有可能是用于驱动IGBT的8050&#x2F;8550三极管故障，由8050、8550组成的三极管对管是易坏器件。最好测量IGBT附近的NPN三极管8050的集电极对地的电压，若无18V输出，确实极有可能是18V电源部分故障。</p><p>若18V电源输出输出不正常，先将后端负载去除再测量，有可能是负载短路引起。先把风扇插头拔掉，再测量，若输出正常，是由于风扇故障引起，可检查一下风扇扇叶是否被其它异物卡住？若没有，可能是马达故障，购买一个新的换上。若去掉负载输出仍不正常，可详细检查一下电源转换部分电路，先量一下变压器二侧线圈是否有大于18V的交流电输出，然后再检查整流二极管是否故障？限流电阻是否烧断？18V稳压二极管是否正常等。</p><p><strong>总结：</strong>电磁炉内部一般有三种电压：300V、5V、18V（或12V、15V）。若想学习电磁炉维修，最好多研究一下电磁炉的详细原理，熟悉电路板每个元器件的功能，了解电磁炉常见的故障模式，哪些属于易损坏器件等。</p><hr><h1 id="相关链接（侵删）"><a href="#相关链接（侵删）" class="headerlink" title="相关链接（侵删）"></a>相关链接（侵删）</h1><ol><li><a href="https://mp.weixin.qq.com/s/OHDhzf0jJzHoHa9lP9N5PQ">电磁炉保护及检测单元电路</a></li><li><a href="https://mp.weixin.qq.com/s/auqbp_ztNRHopcbQIOxByQ">电磁炉的同步电路分析</a></li><li><a href="https://mp.weixin.qq.com/s/BBzcq0jF0QYg3IJOfJAqtw">电磁炉IGBT驱动电路解析</a></li><li><a href="https://mp.weixin.qq.com/s/mHb9GH2kfYDQ2R3PLYIzXQ">电磁炉的高压保护电路解析</a></li><li><a href="https://mp.weixin.qq.com/s/LdLcGNN3u8QwU9BnYJggfQ">电磁炉的震荡驱动单元电路解析</a></li><li><a href="https://mp.weixin.qq.com/s/LYNYp0nQuURfOddS-1o9lw">电磁炉电流2种采样电路图</a></li><li><a href="https://mp.weixin.qq.com/s/Tnl7FY51pYIVWRlc6Faq5A">电磁炉5V电源输出电压，测量结果显示312V？</a></li><li><a href="https://mp.weixin.qq.com/s/tDB03qYvsxJeJvS06DakLQ">电磁炉18V电源故障怎么检修（电磁炉详细原理图）</a></li></ol><hr><center><font color=red>=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">电磁炉常用电路，主要是看到有电流互感器CT1电路分享</summary>
    
    
    
    <category term="电磁炉" scheme="https://zml3589110.github.io/categories/%E7%94%B5%E7%A3%81%E7%82%89/"/>
    
    <category term="电路" scheme="https://zml3589110.github.io/categories/%E7%94%B5%E8%B7%AF/"/>
    
    <category term="保护" scheme="https://zml3589110.github.io/categories/%E4%BF%9D%E6%8A%A4/"/>
    
    
    <category term="电磁炉" scheme="https://zml3589110.github.io/tags/%E7%94%B5%E7%A3%81%E7%82%89/"/>
    
    <category term="检测" scheme="https://zml3589110.github.io/tags/%E6%A3%80%E6%B5%8B/"/>
    
    <category term="保护" scheme="https://zml3589110.github.io/tags/%E4%BF%9D%E6%8A%A4/"/>
    
    <category term="电流" scheme="https://zml3589110.github.io/tags/%E7%94%B5%E6%B5%81/"/>
    
    <category term="同步电路" scheme="https://zml3589110.github.io/tags/%E5%90%8C%E6%AD%A5%E7%94%B5%E8%B7%AF/"/>
    
    <category term="IGBT驱动电路" scheme="https://zml3589110.github.io/tags/IGBT%E9%A9%B1%E5%8A%A8%E7%94%B5%E8%B7%AF/"/>
    
    <category term="反压保护" scheme="https://zml3589110.github.io/tags/%E5%8F%8D%E5%8E%8B%E4%BF%9D%E6%8A%A4/"/>
    
    <category term="振荡电路" scheme="https://zml3589110.github.io/tags/%E6%8C%AF%E8%8D%A1%E7%94%B5%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>davfs连接WebDav常见问题</title>
    <link href="https://zml3589110.github.io/posts/2420949935.html"/>
    <id>https://zml3589110.github.io/posts/2420949935.html</id>
    <published>2024-04-11T12:42:20.000Z</published>
    <updated>2024-04-11T13:26:21.475Z</updated>
    
    <content type="html"><![CDATA[<h1 id="（超级重要）阿里云盘通过-rsync-传输失败"><a href="#（超级重要）阿里云盘通过-rsync-传输失败" class="headerlink" title="（超级重要）阿里云盘通过 rsync 传输失败"></a>（超级重要）阿里云盘通过 rsync 传输失败</h1><h2 id="问题一：无法复制到云盘目录"><a href="#问题一：无法复制到云盘目录" class="headerlink" title="问题一：无法复制到云盘目录"></a>问题一：无法复制到云盘目录</h2><p>在前面装好 alist 且通过 davfs 连接 WebDAV 完成后，以为一切顺风顺水来着。<br>因为自己测试了几个小文件复制都能正常上传。<br>直到备份 docker 大文件有2.7G左右的时候，一直复制不成功</p><p>最开始是发现使用 rsync 将压缩文件发送到相应位置时，总提示IO异常，是因为内存问题，排查发现是系统硬盘不够，他在传送时会先放到 <strong>&#x2F;var&#x2F;cache&#x2F;davfs2</strong> 目录下，几次不成功以后，就一直缓存下来，直至把硬盘内存占满！这是之后使用文件查询工具一步步才排查出来！</p><p>系统硬盘占用率过高，通过 以下 命令针对每个文件见查询发现的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du -sh /var/cache/davfs2/* |sort -nr</span><br></pre></td></tr></table></figure><p>锁定问题就好办，其实可以直接清除，不过后边做了软链接，将这个地址指向外接硬盘上来了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">命令：ln -s /path/to/original_file /path/to/symlink</span><br><span class="line">结果：在/path/to/目录下创建一个名为symlink的软连接，该连接指向/path/to/original_file文件。</span><br></pre></td></tr></table></figure><p><strong>注：这两个linux方法后边再开新的一篇</strong></p><h2 id="问题二：无法上传到云盘内"><a href="#问题二：无法上传到云盘内" class="headerlink" title="问题二：无法上传到云盘内"></a>问题二：无法上传到云盘内</h2><p>上边问题解决了以后，以为可以顺利备份了，谁知道文件复制到云盘文件夹以后却不上传到云端，开始以为是 WebDAV 的问题，查了好多地方也没找到解决办法，然后又怀疑起了 alist 的问题，认为是没有开启大文件导致，但压根就没找到地方。</p><p>搜索一圈都没找到解决方案，也在快要放弃时看到了几篇文章，才找到问题根源。</p><h3 id="1-付费求alist百度网盘rclone挂载webdav可上传大文件方案"><a href="#1-付费求alist百度网盘rclone挂载webdav可上传大文件方案" class="headerlink" title="1.付费求alist百度网盘rclone挂载webdav可上传大文件方案"></a>1.<a href="https://github.com/alist-org/alist/discussions/4859">付费求alist百度网盘rclone挂载webdav可上传大文件方案</a></h3><p>这个还特地下载了 rclone 来尝试，其实只是解决了问题一，就是能正常复制到云盘文件夹</p><img src="/posts/2420949935/image-20240411210824151.png" class="" title="image-20240411210824151"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rclone sync <span class="string">&#x27;/mnt/aaaa&#x27;</span> <span class="string">&#x27;baidu:/bbbbb&#x27;</span> --buffer-size=256M --use-mmap -v --transfers 1 --timeout 60m</span><br></pre></td></tr></table></figure><p>这个办法虽然没有解决这个问题，但从评论看知道了超时没多大作用，也就是说问题不在这儿。</p><h3 id="2-（根据这个解决了问题）阿里云盘通过-rsync-传输失败"><a href="#2-（根据这个解决了问题）阿里云盘通过-rsync-传输失败" class="headerlink" title="2.（根据这个解决了问题）阿里云盘通过 rsync 传输失败"></a>2.（根据这个解决了问题）<a href="https://github.com/alist-org/alist/issues/5512">阿里云盘通过 rsync 传输失败</a></h3><img src="/posts/2420949935/image-20240411211209863.png" class="" title="image-20240411211209863"><p>从这个问题描述来看，基本跟目前遇到的问题一模一样<br><strong>以下就是给出的解决方案，经过验证，完全可行：</strong></p><img src="/posts/2420949935/image-20240411211316808.png" class="" title="image-20240411211316808"><p>从中可以看出来真正的问题出在了 davfs2 上，折腾一圈这才是问题关键！</p><ul><li><strong>这依然为客户端超时取消了上传。请使用支持设置超时时间的客户端并设置超时时间。rsync并不是客户端 davfs2才是</strong></li></ul><p><strong>解决方法：调整 davfs2 配置参数 read_timeout 从默认的30 (seconds) 为7200之后，确实可以上传成功。</strong></p><p>该文件位置为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/davfs2/davfs2.conf</span><br></pre></td></tr></table></figure><hr><h1 id="相关链接（侵删）"><a href="#相关链接（侵删）" class="headerlink" title="相关链接（侵删）"></a>相关链接（侵删）</h1><ol><li><a href="https://github.com/alist-org/alist/issues/5512">docker版本挂载夸克上传文件会在5分钟超时</a></li><li><a href="https://github.com/alist-org/alist/issues/5403">阿里云盘 dav上传反复失败</a></li></ol><hr><center><font color=red>=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">davfs连接WebDav的一些常见问题</summary>
    
    
    
    <category term="WebDAV" scheme="https://zml3589110.github.io/categories/WebDAV/"/>
    
    <category term="davfs2" scheme="https://zml3589110.github.io/categories/davfs2/"/>
    
    <category term="alist" scheme="https://zml3589110.github.io/categories/alist/"/>
    
    
    <category term="linux" scheme="https://zml3589110.github.io/tags/linux/"/>
    
    <category term="debain" scheme="https://zml3589110.github.io/tags/debain/"/>
    
    <category term="webdav" scheme="https://zml3589110.github.io/tags/webdav/"/>
    
    <category term="ubuntu" scheme="https://zml3589110.github.io/tags/ubuntu/"/>
    
    <category term="alist" scheme="https://zml3589110.github.io/tags/alist/"/>
    
    <category term="davfs2" scheme="https://zml3589110.github.io/tags/davfs2/"/>
    
    <category term="共享" scheme="https://zml3589110.github.io/tags/%E5%85%B1%E4%BA%AB/"/>
    
    <category term="mnt" scheme="https://zml3589110.github.io/tags/mnt/"/>
    
    <category term="rsync" scheme="https://zml3589110.github.io/tags/rsync/"/>
    
    <category term="cp" scheme="https://zml3589110.github.io/tags/cp/"/>
    
  </entry>
  
  <entry>
    <title>在ubuntu上挂载WebDAV</title>
    <link href="https://zml3589110.github.io/posts/2683898239.html"/>
    <id>https://zml3589110.github.io/posts/2683898239.html</id>
    <published>2024-04-08T02:12:20.000Z</published>
    <updated>2024-04-11T13:23:34.848Z</updated>
    
    <content type="html"><![CDATA[<h1 id="alist安装挂载"><a href="#alist安装挂载" class="headerlink" title="alist安装挂载"></a>alist安装挂载</h1><ul><li>参考选择:<br><a href="https://www.iplaysoft.com/alist.html">AList 白嫖网盘空间神器 - 免费开源挂载百度&#x2F;阿里&#x2F;OneDrive等云盘到本地工具</a></li></ul><p><a href="https://blog.csdn.net/dragonballs/article/details/135384413">网盘可以当本地硬盘用？没错！使用Alist挂载云盘到本地Linux系统方法</a><br><strong>备注：参考这个使用davfs2挂载没成功，不过安装alist步骤可以参考</strong></p><h1 id="WebDAV挂载"><a href="#WebDAV挂载" class="headerlink" title="WebDAV挂载"></a>WebDAV挂载</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install davfs2</span><br></pre></td></tr></table></figure><h2 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">&#x27;s/# use_locks       1/use_locks       0/g&#x27;</span> /etc/davfs2/davfs2.conf</span><br></pre></td></tr></table></figure><ul><li>保存用户名密码，以后挂载的时候不会要求输入用户名密码！</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;你的WebDAV地址 用户名 密码&quot;</span> &gt;&gt; /etc/davfs2/secrets</span><br></pre></td></tr></table></figure><p>挂载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount -t davfs &lt;WebDAV地址&gt; &lt;挂载目录&gt;</span><br></pre></td></tr></table></figure><p>例如<code>mount -t davfs https://ena.teracloud.jp/dav/ /TeraCloud</code></p><ul><li>注意：挂载目录必须提前创建好</li></ul><h2 id="可能遇到的报错"><a href="#可能遇到的报错" class="headerlink" title="可能遇到的报错"></a>可能遇到的报错</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">报错 /sbin/mount.davfs:user &lt;username&gt; must be member of group davfs2</span><br></pre></td></tr></table></figure><ul><li>这个错误提示意味着在尝试使用 mount.davfs 工具挂载 WebDAV 文件共享时，当前用户 不属于 davfs2 用户组。在使用 mount.davfs 工具挂载 WebDAV 文件共享时，需要具有足够的权限才能访问 WebDAV 服务器上的共享资源，因此必须将当前用户添加到 davfs2 用户组中。</li></ul><ol><li><p>确认用户帐户 还没有属于 <code>davfs2</code> 用户组。</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groups ldh</span><br></pre></td></tr></table></figure></li><li><p>如果 <code>davfs2</code> 不在当前用户的<a href="https://so.csdn.net/so/search?q=%E7%94%A8%E6%88%B7%E7%BB%84&spm=1001.2101.3001.7020">用户组</a>列表中，则需要将其添加到该列表中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -a -G davfs2 ldh</span><br></pre></td></tr></table></figure></li><li><p>重新登录以使更改生效。可以注销并重新登录，也可以使用以下命令重新启动 <code>mount.davfs</code> 以使更改生效：</p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart davfs2</span><br></pre></td></tr></table></figure><p>现在，可以使用 <code>mount.davfs</code> 工具挂载 WebDAV <a href="https://so.csdn.net/so/search?q=%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB&spm=1001.2101.3001.7020">文件共享</a>了。</p></li></ol><h1 id="Linux通过安装davfs2来挂载webdav网盘"><a href="#Linux通过安装davfs2来挂载webdav网盘" class="headerlink" title="Linux通过安装davfs2来挂载webdav网盘"></a>Linux通过安装davfs2来挂载webdav网盘</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>什么是<code>webdav</code>，是一组基于超文本传输协议的技术集合，有利于用户间协同编辑和管理存储在万维网服务器文档。国外的很多网盘，包括<code>owncloud</code>都支持<code>webdav</code>,本文以<code>yandex</code>为例子介绍，挂载在<code>Linux</code>上。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><strong>Linux</strong></p><ul><li><code>davfs2</code>或者<code>fusedav</code>将<code>WebDAV</code>共享挂载成<code>Coda</code>或者<code>FUSE</code>文件系统。</li><li><code>KDE</code>将<code>WebDAV</code>作为<code>kio_http</code>的一部分提供原生支持。<code>Dolphin</code>，<code>Konqueror</code>等其他<code>KDE</code>应用程序可以直接与<code>WebDAV</code>服务器交互。</li><li><code>Nautilus</code>也提供内置支持。</li><li><code>cadaver</code>命令行工具提供类<code>FTP</code>命令集，也包含在很多<code>Linux</code>发行版中。</li><li><code>Apache HTTP</code>服务 提供基于<code>davfs</code>和<code>Apache Subversion</code>的<code>WebDAV</code>模块。</li></ul><p><strong>Windows</strong></p><ul><li><code>NetDrive</code>：挂载为网络硬盘机</li></ul><p><strong>Mac</strong></p><ul><li><code>Finder</code>：系统内置程式</li></ul><p>本文就是利用<code>davfs2</code>挂载<code>wendav</code>。</p><h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><p><code>Linux</code>主要的源中都有<code>davfs2</code>,也可以自己编译，需要准备好环境。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">apt-get install davfs2</span><br><span class="line">mkdir /mnt/webdav</span><br><span class="line">mount -t davfs https://webdav.yandex.ru /mnt/webdav</span><br><span class="line">Please enter the username to authenticate with server</span><br><span class="line">https://webdav.yandex.ru or hit enter <span class="keyword">for</span> none.</span><br><span class="line">  Username: <span class="built_in">test</span></span><br><span class="line">Please enter the password to authenticate user <span class="built_in">test</span> with server</span><br><span class="line">https://webdav.yandex.ru or hit enter <span class="keyword">for</span> none.</span><br><span class="line">  Password:</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>可以把账号密码写入配置文件，以普通用户来挂载。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod -a -G network username</span><br></pre></td></tr></table></figure><p>编辑<code>/etc/fstab</code>文件，在后面添加（<code>username</code>自己替换）:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;webdav.example.com &#x2F;home&#x2F;username&#x2F;webdav davfs user,noauto,uid&#x3D;username,file_mode&#x3D;600,dir_mode&#x3D;700 0 1</span><br></pre></td></tr></table></figure><p>创建账号密码配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~&#x2F;.davfs2&#x2F;</span><br><span class="line">echo &quot;https:&#x2F;&#x2F;webdav.example.com webdavuser webdavpassword&quot; &gt;&gt; ~&#x2F;.davfs2&#x2F;secrets </span><br><span class="line">chmod 0600 ~&#x2F;.davfs2&#x2F;secrets</span><br></pre></td></tr></table></figure><p><code>yandex url</code>是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;webdav.yandex.ru</span><br></pre></td></tr></table></figure><p>如果是<code>owncloud</code>, <code>url</code>是:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;webdav.example.com&#x2F;remote.php&#x2F;webdav</span><br></pre></td></tr></table></figure><p>多用户配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;home&#x2F;username&#x2F;disk1 webdavuser1 &quot;webdavpassword1&quot;</span><br><span class="line">&#x2F;home&#x2F;username&#x2F;disk2 webdavuser1 &quot;webdavpassword2&quot;</span><br><span class="line">.........</span><br><span class="line">&#x2F;home&#x2F;username&#x2F;diskN webdavuserN &quot;webdavpasswordN&quot;</span><br></pre></td></tr></table></figure><p>Now you should be able to mount and unmount ~&#x2F;webdav:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount ~&#x2F;webdav</span><br></pre></td></tr></table></figure><p>取消挂载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fusermount -u ~&#x2F;webdav</span><br></pre></td></tr></table></figure><h2 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h2><p>如果在复制剪切文件遇到错误，编辑<code>/etc/davfs2/davfs2.conf</code>，修改配置如下，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[...]</span><br><span class="line">use_locks 0</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure><p>一个动漫网站：<a href="https://www.leimulamu.com/cn">蕾姆拉姆网</a></p><hr><h1 id="相关链接（侵删）"><a href="#相关链接（侵删）" class="headerlink" title="相关链接（侵删）"></a>相关链接（侵删）</h1><ol><li><a href="https://blog.csdn.net/qq_66623299/article/details/134733329">（参考了这个在玩客云上挂载成功）在ubuntu上挂载WebDAV</a></li><li><a href="https://www.moerats.com/archives/317/">Linux通过安装davfs2来挂载webdav网盘</a></li></ol><hr><center><font color=red>=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">通过安装 davfs2 完成将 alist 挂载到指定目录</summary>
    
    
    
    <category term="WebDAV" scheme="https://zml3589110.github.io/categories/WebDAV/"/>
    
    <category term="davfs2" scheme="https://zml3589110.github.io/categories/davfs2/"/>
    
    <category term="alist" scheme="https://zml3589110.github.io/categories/alist/"/>
    
    
    <category term="linux" scheme="https://zml3589110.github.io/tags/linux/"/>
    
    <category term="debain" scheme="https://zml3589110.github.io/tags/debain/"/>
    
    <category term="webdav" scheme="https://zml3589110.github.io/tags/webdav/"/>
    
    <category term="ubuntu" scheme="https://zml3589110.github.io/tags/ubuntu/"/>
    
    <category term="alist" scheme="https://zml3589110.github.io/tags/alist/"/>
    
    <category term="davfs2" scheme="https://zml3589110.github.io/tags/davfs2/"/>
    
    <category term="共享" scheme="https://zml3589110.github.io/tags/%E5%85%B1%E4%BA%AB/"/>
    
    <category term="mnt" scheme="https://zml3589110.github.io/tags/mnt/"/>
    
  </entry>
  
  <entry>
    <title>Linux命令SSH连接其他linux</title>
    <link href="https://zml3589110.github.io/posts/4056013172.html"/>
    <id>https://zml3589110.github.io/posts/4056013172.html</id>
    <published>2024-03-19T01:22:20.000Z</published>
    <updated>2024-03-19T01:37:35.929Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>1、linux服务器下一般都会安装<strong>ssh服务</strong>，<strong>ssh服务可以建立安全的远程连接</strong>，方便日常通过一台linux设备维护其他的服务器设备。</p><p>2、SSH是一种网络协议，用于计算机之间的加密登录。如果一个用户从本地计算机，使用SSH协议登录另一台远程计算机，我们就可以认为，这种登录是安全的，即使被中途截获，密码也不会泄露。最早的时候，互联网通信都是明文通信，一旦被截获，内容就暴露无疑。1995年，芬兰学者Tatu Ylonen设计了SSH协议，将登录信息全部加密，成为互联网安全的一个基本解决方案，迅速在全世界获得推广，目前已经成为Linux系统的标准配置。</p><p>3、SSH之所以能够保证安全，原因在于它采用了公钥加密。整个过程是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">（1）远程主机收到用户的登录请求，把自己的公钥发给用户。</span><br><span class="line">（2）用户使用这个公钥，将登录密码加密后，发送回来。</span><br><span class="line">（3）远程主机用自己的私钥，解密登录密码，如果密码正确，就同意用户登录。</span><br></pre></td></tr></table></figure><h1 id="安装SSH服务"><a href="#安装SSH服务" class="headerlink" title="安装SSH服务"></a>安装SSH服务</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1、如果你用的是redhat，fedora，centos等系列linux发行版，那么敲入以下命令：</span><br><span class="line">sudo yum install sshd 或</span><br><span class="line">sudo yum install openssh-server（由osc网友 火耳提供）</span><br><span class="line"> </span><br><span class="line">2、如果你使用的是debian，ubuntu，linux mint等系列的linux发行版，那么敲入以下命令：</span><br><span class="line">sudo apt-get install sshd 或</span><br><span class="line">sudo apt-get install openssh-server（由osc网友 火耳提供）</span><br><span class="line"> </span><br><span class="line">然后按照提示，安装就好了。</span><br></pre></td></tr></table></figure><p>由于本机在之前就已经安装好了SSH服务，所以提示如下：</p><img src="/posts/4056013172/2289881-20220418093146937-1569352766.png" class="" title="img"><h2 id="开启SSH服务"><a href="#开启SSH服务" class="headerlink" title="开启SSH服务"></a>开启SSH服务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service sshd start</span><br></pre></td></tr></table></figure><p>执行命令结果如下：</p><img src="/posts/4056013172/2289881-20220418093344586-1343415066.png" class="" title="img"><h2 id="卸载SSH服务"><a href="#卸载SSH服务" class="headerlink" title="卸载SSH服务"></a>卸载SSH服务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、如果你用的是redhat，fedora，centos等系列linux发行版，那么敲入以下命令：</span><br><span class="line">yum remove sshd</span><br><span class="line">2、如果你使用的是debian，ubuntu，linux mint等系列的linux发行版，那么敲入以下命令：</span><br><span class="line">sudo apt-get –purge remove sshd</span><br></pre></td></tr></table></figure><p>执行命令结果如下：</p><img src="/posts/4056013172/2289881-20220418093521296-1553651543.png" class="" title="img"><h1 id="Linux操作系统从一台服务器SSH远程连接至另一台服务器"><a href="#Linux操作系统从一台服务器SSH远程连接至另一台服务器" class="headerlink" title="Linux操作系统从一台服务器SSH远程连接至另一台服务器"></a>Linux操作系统从一台服务器SSH远程连接至另一台服务器</h1><h2 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h2><p>直接连接远程主机端口</p><p>前提条件：</p><p>两台服务器A、B；当前所在位置：服务器A；SSH服务已安装。</p><p>判断：</p><p>在服务器A中执行命令 ping B的IP地址 ，在能ping通的前提条件下</p><p>进入服务器A后，输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -l 主机名 IP</span><br></pre></td></tr></table></figure><ol><li>主机名：要跳转的Linux服务器的主机名</li><li>IP：要跳转的Linux服务器的ip地址</li></ol><p>或者：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh 用户名@服务器地址</span><br></pre></td></tr></table></figure><p>然后回车输入服务器B的用户密码就可以跳转到另一台服务器B。如 ssh <a href="mailto:&#x72;&#111;&#111;&#x74;&#x40;&#49;&#50;&#x37;&#46;&#x30;&#46;&#48;&#46;&#49;">&#x72;&#111;&#111;&#x74;&#x40;&#49;&#50;&#x37;&#46;&#x30;&#46;&#48;&#46;&#49;</a> </p><h2 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h2><p>1、假定你要以用户名user，登录远程主机host，只要一条简单命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh username@remote_host </span><br><span class="line">如：ssh pika@192.168.0.111</span><br></pre></td></tr></table></figure><p>2、如果本地主机用户名与远程主机用户名一致，登录时可以省略用户名：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh remote_host </span><br><span class="line">如：ssh 192.168.0.111</span><br></pre></td></tr></table></figure><p>3、SSH服务的默认端口是22：你的登录请求会送进远程主机的22端口。使用p参数，可以修改这个端口。（指定端口连接）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh username@remote_host -p 2222</span><br><span class="line">如：$ ssh user@host -p 2222   该条命令表示，ssh直接连接远程主机的2222端口。</span><br></pre></td></tr></table></figure><p>4、第一次登录远程主机：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">如果你是第一次登录对方主机</span><br><span class="line"></span><br><span class="line">$ ssh root@12.18.429.21</span><br><span class="line"></span><br><span class="line">系统会出现下面的提示：：</span><br><span class="line"></span><br><span class="line">The authenticity of host &#39;host (12.18.429.21)&#39; can&#39;t be established.</span><br><span class="line"></span><br><span class="line">RSA key fingerprint is 98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d.</span><br><span class="line"></span><br><span class="line">Are you sure you want to continue connecting (yes&#x2F;no)?</span><br><span class="line"></span><br><span class="line">这段话的意思是，无法确认host主机的真实性，只知道它的公钥指纹，问你还想继续连接吗？</span><br><span class="line"></span><br><span class="line">所谓&quot;公钥指纹&quot;，是指公钥长度较长（这里采用RSA算法，长达1024位），很难比对，所以对其进行MD5计算，将它变成一个128位的指纹。上例中是98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d，再进行比较，就容易多了。</span><br><span class="line"></span><br><span class="line">很自然的一个问题就是，用户怎么知道远程主机的公钥指纹应该是多少？回答是没有好办法，远程主机必须在自己的网站上贴出公钥指纹，以便用户自行核对。</span><br><span class="line"></span><br><span class="line">假定经过风险衡量以后，用户决定接受这个远程主机的公钥。</span><br><span class="line"></span><br><span class="line">Are you sure you want to continue connecting (yes&#x2F;no)? yes</span><br><span class="line"></span><br><span class="line">系统会出现一句提示，表示host主机已经得到认可。</span><br><span class="line"></span><br><span class="line">Warning: Permanently added &#39;host,12.18.429.21&#39; (RSA) to the list of known hosts.</span><br><span class="line"></span><br><span class="line">然后，会要求输入密码。</span><br><span class="line"></span><br><span class="line">Password: (enter password)</span><br><span class="line"></span><br><span class="line">如果密码正确，就可以登录了。</span><br><span class="line"></span><br><span class="line">当远程主机的公钥被接受以后，它就会被保存在文件$HOME&#x2F;.ssh&#x2F;known_hosts之中。下次再连接这台主机，系统就会认出它的公钥已经保存在本地了，从而跳过警告部分，直接提示输入密码。</span><br><span class="line"></span><br><span class="line">每个SSH用户都有自己的known_hosts文件，此外系统也有一个这样的文件，通常是&#x2F;etc&#x2F;ssh&#x2F;ssh_known_hosts，保存一些对所有用户都可信赖的远程主机的公钥。</span><br></pre></td></tr></table></figure><h2 id="示例3"><a href="#示例3" class="headerlink" title="示例3"></a>示例3</h2><p>1、使用密码登录，用户每次都必须输入密码，非常麻烦。好在SSH还提供了公钥登录，可以省去输入密码的步骤。</p><p>2、所谓”公钥登录”，原理很简单，就是用户将自己的公钥储存在远程主机上。登录的时候，远程主机会向用户发送一段随机字符串，用户用自己的私钥加密后，再发回来。远程主机用事先储存的公钥进行解密，如果成功，就证明用户是可信的，直接允许登录shell，不再要求密码。</p><p>3、这种方法要求用户必须提供自己的公钥。如果没有现成的，可以直接用 ssh-keygen 命令生成一个：</p><p>运行上面的命令以后，系统会出现一系列提示，可以一路回车。其中有一个问题是，要不要对私钥设置口令（passphrase），如果担心私钥的安全，这里可以设置一个。</p><img src="/posts/4056013172/2289881-20220623094705926-812029543.png" class="" title="img"><p>运行结束以后，在$HOME&#x2F;.ssh&#x2F;目录下，会新生成两个文件：id_rsa.pub和id_rsa。前者是你的公钥，后者是你的私钥。 </p><img src="/posts/4056013172/2289881-20220623095047939-4098033.png" class="" title="img"><p>4、这时再输入下面的命令，将公钥传送到远程主机host上面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-copy-id user@host</span><br></pre></td></tr></table></figure><p>好了，从此你再登录，就不需要输入密码了。</p><p>5、如果还是不行，就打开远程主机的 &#x2F;etc&#x2F;ssh&#x2F;sshd_config 这个文件，检查下面几行前面”#”注释是否取掉。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">RSAAuthentication yes</span><br><span class="line"></span><br><span class="line">PubkeyAuthentication yes</span><br><span class="line"></span><br><span class="line">AuthorizedKeysFile .ssh&#x2F;authorized_keys</span><br></pre></td></tr></table></figure><p>然后，重启远程主机的ssh服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; ubuntu系统</span><br><span class="line"></span><br><span class="line">service ssh restart</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; debian系统</span><br><span class="line"></span><br><span class="line">&#x2F;etc&#x2F;init.d&#x2F;ssh restart</span><br></pre></td></tr></table></figure><h2 id="示例4"><a href="#示例4" class="headerlink" title="示例4"></a>示例4</h2><p>通过密钥连接：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -i path&#x2F;to&#x2F;key_file username@remote_host</span><br></pre></td></tr></table></figure><h2 id="示例5"><a href="#示例5" class="headerlink" title="示例5"></a>示例5</h2><p>ssh跳板:通过跳板机器连接远程主机；多个跳板使用逗号隔开</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -J username@jump_host username@remote_host</span><br></pre></td></tr></table></figure><h2 id="实例6"><a href="#实例6" class="headerlink" title="实例6"></a>实例6</h2><p>本实例的客户端和服务端均为Ubuntu操作系统。</p><p>ssh客户端：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">用户名(user_name): alpha</span><br><span class="line">IP地址(client_ip): 192.168.0.33</span><br></pre></td></tr></table></figure><p>ssh服务端：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">用户名(user_name): omega</span><br><span class="line">IP地址(server_ip): 119.9.90.190</span><br></pre></td></tr></table></figure><h2 id="ssh服务器远程登录"><a href="#ssh服务器远程登录" class="headerlink" title="ssh服务器远程登录"></a>ssh服务器远程登录</h2><h3 id="1-普通登录-ssh-user-name-server-ip"><a href="#1-普通登录-ssh-user-name-server-ip" class="headerlink" title="1 普通登录: ssh user_name@server_ip"></a>1 普通登录: <code>ssh user_name@server_ip</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[alpha@客户端] :~$ ssh omega@119.9.90.190</span><br><span class="line">输入omega@119.9.90.190的密码:</span><br><span class="line">loading omega@119.9.90.190 ...</span><br><span class="line">welcome!</span><br><span class="line">[omega@服务端] :~$ </span><br></pre></td></tr></table></figure><h3 id="2-免ip登录-ssh-Host"><a href="#2-免ip登录-ssh-Host" class="headerlink" title="2 免ip登录: ssh Host"></a>2 免ip登录: <code>ssh Host</code></h3><h4 id="2-1-客户端alpha用户进入隐藏ssh目录"><a href="#2-1-客户端alpha用户进入隐藏ssh目录" class="headerlink" title="2.1 客户端alpha用户进入隐藏ssh目录"></a>2.1 客户端alpha用户进入隐藏ssh目录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[alpha@客户端] :~$ cd ~&#x2F;.ssh</span><br><span class="line">[alpha@客户端] :~&#x2F;.ssh$ pwd</span><br><span class="line">&#x2F;home&#x2F;exia&#x2F;.ssh </span><br></pre></td></tr></table></figure><h4 id="2-2-新建-x2F-修改config文件-sudo-vim-config"><a href="#2-2-新建-x2F-修改config文件-sudo-vim-config" class="headerlink" title="2.2 新建&#x2F;修改config文件: sudo vim config"></a>2.2 新建&#x2F;修改config文件: <code>sudo vim config</code></h4><p>config文件单元构成:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Host: 登录名</span><br><span class="line">----HostName: 将要登录ssh服务器ip</span><br><span class="line">----User: 将要登录服务器用户名</span><br><span class="line">----Port: 将要登录服务器端口</span><br></pre></td></tr></table></figure><p>config文件中可以设置多个Host：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[alpha@客户端] :~$ cat config</span><br><span class="line">Host omi</span><br><span class="line">    HostName 119.9.90.190</span><br><span class="line">    User omega</span><br><span class="line">    Port 22</span><br><span class="line"></span><br><span class="line">Host theroot</span><br><span class="line">     HostName 119.9.90.190</span><br><span class="line">    User root</span><br><span class="line">    Port 22</span><br></pre></td></tr></table></figure><h4 id="2-3-实现免ip登录"><a href="#2-3-实现免ip登录" class="headerlink" title="2.3 实现免ip登录"></a>2.3 实现免ip登录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[alpha@客户端] :~$ ssh omi</span><br><span class="line"></span><br><span class="line">输入omega@119.9.90.190的密码:</span><br><span class="line">loading omega@119.9.90.190 ...</span><br><span class="line">welcome!</span><br><span class="line"></span><br><span class="line">[omega@服务端] :~$ </span><br></pre></td></tr></table></figure><h3 id="3-免密登录-ssh-i-id-rsa-Host-和-ssh-Host"><a href="#3-免密登录-ssh-i-id-rsa-Host-和-ssh-Host" class="headerlink" title="3 免密登录: ssh -i id_rsa Host 和 ssh Host"></a>3 免密登录: <code>ssh -i id_rsa Host</code> 和 <code>ssh Host</code></h3><h4 id="3-1-客户端alpha用户进入隐藏ssh目录"><a href="#3-1-客户端alpha用户进入隐藏ssh目录" class="headerlink" title="3.1 客户端alpha用户进入隐藏ssh目录"></a>3.1 客户端alpha用户进入隐藏ssh目录</h4><h4 id="3-2-生成ssh登录密钥与公钥-若之前未生成"><a href="#3-2-生成ssh登录密钥与公钥-若之前未生成" class="headerlink" title="3.2 生成ssh登录密钥与公钥(若之前未生成)"></a>3.2 生成ssh登录密钥与公钥(若之前未生成)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[alpha@客户端] :~&#x2F;.ssh$ ls</span><br><span class="line">config</span><br><span class="line">[alpha@客户端] :~&#x2F;.ssh$ ssh-keygen</span><br><span class="line">[alpha@客户端] :~&#x2F;.ssh$ ls</span><br><span class="line">config  id_rsa  id_rsa.pub</span><br></pre></td></tr></table></figure><h4 id="3-3-将公钥发送给需要免密登录的服务器的用户"><a href="#3-3-将公钥发送给需要免密登录的服务器的用户" class="headerlink" title="3.3 将公钥发送给需要免密登录的服务器的用户"></a>3.3 将公钥发送给需要免密登录的服务器的用户</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[alpha@客户端] :~&#x2F;.ssh$ ssh-copy-id omega@119.9.90.190;echo &quot;ssh-copy-id omi 也行&quot;</span><br><span class="line">ssh-copy-id omi 也行</span><br><span class="line">[alpha@客户端] :~&#x2F;.ssh$ echo &quot;开始免密登录&quot;</span><br><span class="line"># 开始免密登录</span><br><span class="line">[alpha@客户端] :~&#x2F;.ssh$ </span><br><span class="line">[alpha@客户端] :~&#x2F;.ssh$ </span><br><span class="line">[alpha@客户端] :~&#x2F;.ssh$ ssh -i id_rsa omi</span><br><span class="line">loading omega@119.9.90.190 ...</span><br><span class="line">welcome!</span><br><span class="line"></span><br><span class="line">[omega@服务端] :~$ cd ~&#x2F;.ssh</span><br><span class="line">[omega@服务端] :~&#x2F;.ssh$ ls</span><br><span class="line">authorized_keys</span><br></pre></td></tr></table></figure><p>此时,<code>[omega@服务端] :~/.ssh/authorized_keys </code>中已经存放了<code>[alpha@客户端] :~/.ssh/id_rsa.pub</code>中的公钥了。</p><p>当然直接打开<code>[alpha@客户端] :~/.ssh/id_rsa.pub</code> 将其中的内容复制粘贴到 <code>[omega@服务端] :~/.ssh/authorized_keys</code> 中最后一行也是可以的。</p><h4 id="3-4-最后-在config文件中各Host的最后添加IdentityFile-ssh-id-rsa"><a href="#3-4-最后-在config文件中各Host的最后添加IdentityFile-ssh-id-rsa" class="headerlink" title="3.4 最后, 在config文件中各Host的最后添加IdentityFile ~/.ssh/id_rsa:"></a>3.4 最后, 在config文件中各Host的最后添加<code>IdentityFile ~/.ssh/id_rsa</code>:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[alpha@客户端] :~$ cat config</span><br><span class="line">Host omi</span><br><span class="line">    HostName 119.9.90.190</span><br><span class="line">    User omega</span><br><span class="line">    Port 22</span><br><span class="line">    IdentityFile ~&#x2F;.ssh&#x2F;id_rsa</span><br><span class="line"></span><br><span class="line">Host theroot</span><br><span class="line">     HostName 119.9.90.190</span><br><span class="line">    User root</span><br><span class="line">    Port 22</span><br><span class="line">    IdentityFile ~&#x2F;.ssh&#x2F;id_rsa</span><br></pre></td></tr></table></figure><p>即可进一步简化ssh远程登录命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[alpha@客户端] :~&#x2F;.ssh$ ssh omi</span><br><span class="line">loading omega@119.9.90.190 ...</span><br><span class="line">welcome!</span><br><span class="line"></span><br><span class="line">[omega@服务端] :~$ </span><br></pre></td></tr></table></figure><p>如果服务端相应免密用户的密码或是用户名有更改, 需要对客户端中对应用户~&#x2F;.ssh下:</p><p>(1)修改config中Host的信息<br>(2)删除<code>known hosts</code>文件</p><h1 id="补充内容"><a href="#补充内容" class="headerlink" title="补充内容"></a>补充内容</h1><h2 id="补充1：不用输入ssh-i命令行即可携带pem文件快速登录的方法"><a href="#补充1：不用输入ssh-i命令行即可携带pem文件快速登录的方法" class="headerlink" title="补充1：不用输入ssh -i命令行即可携带pem文件快速登录的方法"></a>补充1：不用输入ssh -i命令行即可携带pem文件快速登录的方法</h2><p>1、如果要登录的Linux服务器只允许pem认证。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -i ~&#x2F;.ssh&#x2F;id_rsa.pub azureuser@10.111.12.123</span><br></pre></td></tr></table></figure><p>其中的  -i 选项表明，选择一个和公钥匹配的私钥文件路径。默认是~&#x2F;.ssh&#x2F;id_rsa。</p><p>2、但是每次输入 ssh -i xxxx.pem 用户@ip 地址  就很烦。</p><p>3、有个一劳永逸的方法：</p><p>进入到自己的用户目录，例如&#x2F;home&#x2F;me</p><p>把.pem文件放在当前目录</p><p>然后vi .ssh&#x2F;config</p><p>内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Host *</span><br><span class="line">      ServerAliveInterval 60</span><br><span class="line">  Host denglu</span><br><span class="line">      HostName 你的ip</span><br><span class="line">      User mojie</span><br><span class="line">      IdentityFile    ~&#x2F;.ssh&#x2F;你的pem文件名.pem</span><br></pre></td></tr></table></figure><p>保存后，更改权限： sudo chmod 600 key.pem </p><p>然后在当前目录&#x2F;home&#x2F;me下输入 ssh denglu</p><p>即可登录到目标服务器。再也不用每次输入长长的命令了</p><h2 id="补充2：Linux操作系统中的路径符号"><a href="#补充2：Linux操作系统中的路径符号" class="headerlink" title="补充2：Linux操作系统中的路径符号"></a>补充2：Linux操作系统中的路径符号</h2><img src="/posts/4056013172/2289881-20220623100305140-2101043131.png" class="" title="img"><h2 id="补充3：-exit-退出远程连接服务器，回到本机的命令终端"><a href="#补充3：-exit-退出远程连接服务器，回到本机的命令终端" class="headerlink" title="补充3： exit 退出远程连接服务器，回到本机的命令终端"></a>补充3： exit 退出远程连接服务器，回到本机的命令终端</h2><img src="/posts/4056013172/2289881-20220922143253118-1107541336.png" class="" title="img"><hr><h1 id="相关链接（侵删）"><a href="#相关链接（侵删）" class="headerlink" title="相关链接（侵删）"></a>相关链接（侵删）</h1><ol><li><a href="https://www.cnblogs.com/hls-code/p/16158324.html">Linux操作系统如何使用SSH命令连接另外一台Linux服务器</a></li><li><a href="https://blog.csdn.net/pipisorry/article/details/52269785">ssh用法及命令</a></li></ol><hr><center><font color=red>=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;1、linux服务器下一般都会安装&lt;strong&gt;ssh服务&lt;/strong&gt;，&lt;strong&gt;ssh服务可以建立安全的远程连接&lt;/stro</summary>
      
    
    
    
    <category term="Linux" scheme="https://zml3589110.github.io/categories/Linux/"/>
    
    <category term="ssh" scheme="https://zml3589110.github.io/categories/ssh/"/>
    
    <category term="ssh-keygen" scheme="https://zml3589110.github.io/categories/ssh-keygen/"/>
    
    
    <category term="Ubuntu" scheme="https://zml3589110.github.io/tags/Ubuntu/"/>
    
    <category term="linux" scheme="https://zml3589110.github.io/tags/linux/"/>
    
    <category term="ssh" scheme="https://zml3589110.github.io/tags/ssh/"/>
    
    <category term="控制其他linux" scheme="https://zml3589110.github.io/tags/%E6%8E%A7%E5%88%B6%E5%85%B6%E4%BB%96linux/"/>
    
    <category term="远程登录" scheme="https://zml3589110.github.io/tags/%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95/"/>
    
    <category term="秘钥" scheme="https://zml3589110.github.io/tags/%E7%A7%98%E9%92%A5/"/>
    
    <category term="id_rsa.pub公钥" scheme="https://zml3589110.github.io/tags/id-rsa-pub%E5%85%AC%E9%92%A5/"/>
    
    <category term="id_rsa秘钥" scheme="https://zml3589110.github.io/tags/id-rsa%E7%A7%98%E9%92%A5/"/>
    
    <category term="ssh-keygen" scheme="https://zml3589110.github.io/tags/ssh-keygen/"/>
    
  </entry>
  
  <entry>
    <title>Linux定时任务</title>
    <link href="https://zml3589110.github.io/posts/2711669357.html"/>
    <id>https://zml3589110.github.io/posts/2711669357.html</id>
    <published>2024-03-12T02:05:20.000Z</published>
    <updated>2024-03-19T01:37:35.939Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>如果需要在主机定时或周期启动或运行某一程序或脚本，由于程序或脚本运行的时长并不确定，可能会出现同时重复运行多个该程序或脚本的情况。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="CentOS"><a href="#CentOS" class="headerlink" title="CentOS"></a>CentOS</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yuminstall vixie-cron crontabs &#x2F;&#x2F;安装Crontab</span><br><span class="line">chkconfigcrondon &#x2F;&#x2F;设为开机自启动</span><br><span class="line">service crondstart &#x2F;&#x2F;启动</span><br></pre></td></tr></table></figure><h3 id="Debian-注：平时直接用以下-x2F-etc…-中的cron命令"><a href="#Debian-注：平时直接用以下-x2F-etc…-中的cron命令" class="headerlink" title="Debian(注：平时直接用以下&#x2F;etc… 中的cron命令)"></a>Debian(注：平时直接用以下&#x2F;etc… 中的cron命令)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-getinstall cron &#x2F;&#x2F;大部分情况下Debian都已安装。</span><br><span class="line">&#x2F;etc&#x2F;init.d&#x2F;cron restart &#x2F;&#x2F;重启Crontab</span><br></pre></td></tr></table></figure><h2 id="定时任务目录"><a href="#定时任务目录" class="headerlink" title="定时任务目录"></a><a href="https://so.csdn.net/so/search?q=%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1&spm=1001.2101.3001.7020">定时任务</a>目录</h2><table><thead><tr><th align="left">目录路径</th><th align="left">执行说明</th></tr></thead><tbody><tr><td align="left">&#x2F;etc&#x2F;cron.hourly</td><td align="left">系统定时任务周期每小时执行该目录下的脚本</td></tr><tr><td align="left">&#x2F;etc&#x2F;cron.daily</td><td align="left">系统定时任务周期每一天执行该目录下的脚本</td></tr><tr><td align="left">&#x2F;etc&#x2F;cron.weekly</td><td align="left">系统定时任务周期每一周执行该目录下的脚本</td></tr><tr><td align="left">&#x2F;etc&#x2F;cron.monthly</td><td align="left">系统定时任务周期每个月执行该目录下的脚本</td></tr></tbody></table><p><strong>注意</strong>权限</p><p> 注意：增加.sh脚本可执行权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x ******.sh</span><br></pre></td></tr></table></figure><h2 id="定时任务文件"><a href="#定时任务文件" class="headerlink" title="定时任务文件"></a><strong>定时任务文件</strong></h2><table><thead><tr><th align="left">类型</th><th align="left">路径</th></tr></thead><tbody><tr><td align="left">全局定时任务配置文件</td><td align="left">&#x2F;etc&#x2F;crontab</td></tr><tr><td align="left">用户定时任务配置文件</td><td align="left">&#x2F;var&#x2F;spool&#x2F;cron&#x2F;root</td></tr></tbody></table><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><table><thead><tr><th align="left">基本格式</th><th align="left"></th><th align="left"></th><th align="left"></th><th align="left"></th><th align="left"></th></tr></thead><tbody><tr><td align="left">*</td><td align="left">*</td><td align="left">*</td><td align="left">*</td><td align="left">*</td><td align="left">command</td></tr><tr><td align="left">分（0-59）</td><td align="left">时（0-23）</td><td align="left">日（1-31）</td><td align="left">月（1-12）</td><td align="left">周（0-6）</td><td align="left">定时执行的命令</td></tr></tbody></table><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设定某个用户的cron服务</span></span><br><span class="line">crontab -u </span><br><span class="line"><span class="comment"># 查看定时任务</span></span><br><span class="line">crontab -l</span><br><span class="line"><span class="comment"># 设置定时任务</span></span><br><span class="line">crontab -e</span><br><span class="line"><span class="comment"># 删除定时任务</span></span><br><span class="line">crontab -r</span><br><span class="line"><span class="comment"># 查看帮助</span></span><br><span class="line">crontab -h</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 例如：root查看自己的cron设置</span></span><br><span class="line">crontab -u root -l</span><br><span class="line"><span class="comment"># 例如：root想删除fred的cron设置</span></span><br><span class="line">crontab -u fred -r</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 关闭crontab服务 </span></span><br><span class="line">systemctl stop crond </span><br><span class="line"><span class="comment"># 开启crontab服务 </span></span><br><span class="line">systemctl start crond </span><br><span class="line"><span class="comment"># 重启crontab服务</span></span><br><span class="line">systemctl restart crond</span><br><span class="line"><span class="comment"># 查看crontab服务</span></span><br><span class="line">systemctl status crond</span><br><span class="line"><span class="comment"># 重新载入crontab配置</span></span><br><span class="line">systemctl reload crond</span><br></pre></td></tr></table></figure><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>修改定时任务配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 每天15：30运行一个python脚本：</span></span><br><span class="line">30 17 * * * root python -u script.py &gt; /dev/null</span><br><span class="line"><span class="comment"># 每天凌晨3:00执行备份程序：</span></span><br><span class="line">0 3 * * * /root/backup.sh</span><br><span class="line"><span class="comment"># 每周日8点30分执行日志清理程序：</span></span><br><span class="line">30 8 * * 7 /root/clear.sh</span><br><span class="line"><span class="comment"># 每周1周5 0点整执行test程序：</span></span><br><span class="line">0 0 ** 1,5 <span class="built_in">test</span></span><br><span class="line"><span class="comment"># 每年的5月12日14点执行wenchuan程序：</span></span><br><span class="line">0 14 12 5 * /root/wenchuan</span><br></pre></td></tr></table></figure><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>在实际的使用过程中可能会存在着重复启动定时程序的可能，需要对定时任务进一步改进。</p><p>flock通常会使用一个「锁文件」，也就是建立一个文件来告诉别的进程自己在运行，如果检测到那个文件存在，则认为有操作同样数据的进程在工作，这样就可以防止其它进程访问这个文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flock -xn /tmp/tmp.lock</span><br></pre></td></tr></table></figure><p>改进后的形式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 保证同时只有一个程序运行</span></span><br><span class="line">*/5 * * * * root flock -xn /tmp/tmp.lock python -u  DownLoad.py &gt; /dev/null</span><br></pre></td></tr></table></figure><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p><a href="https://link.zhihu.com/?target=https://blog.csdn.net/bandaoyu/article/details/122623607">Crontab<img src="/posts/2711669357/icon-default.png" class="" title="icon-default.png?t&#x3D;N2N8">https://link.zhihu.com/?target=https%3A//blog.csdn.net/bandaoyu/article/details/122623607</a></p><p><a href="https://www.dandelioncloud.cn/article/details/1531152954367426561">linux Crontab的安装<img src="/posts/2711669357/icon-default.png" class="" title="icon-default.png?t&#x3D;N2N8">https://www.dandelioncloud.cn/article/details/1531152954367426561</a></p><hr><h1 id="相关链接（侵删）"><a href="#相关链接（侵删）" class="headerlink" title="相关链接（侵删）"></a>相关链接（侵删）</h1><ol><li><a href="https://blog.csdn.net/yeyaozhifengqi/article/details/129793823">定时任务——Crontab</a></li><li><a href="https://www.cnblogs.com/qlsem/p/17529838.html">linux 怎么定时去执行一个 .sh 文件</a></li><li><a href="https://www.cnblogs.com/javaxubo/p/17498202.html">(相对详细)Linux新建定时任务crontab</a></li><li><a href="https://blog.csdn.net/u011754972/article/details/116143259">【Linux】23.ubuntu定时执行脚本&#x2F;etc&#x2F;crontab 和 定时任务不执行的解决办法</a></li><li><a href="https://blog.csdn.net/qq_37510195/article/details/129530014">【运维知识基础篇】Linux定时任务</a></li></ol><hr><center><font color=red>=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">linux下运行定时任务</summary>
    
    
    
    <category term="Linux" scheme="https://zml3589110.github.io/categories/Linux/"/>
    
    <category term="定时运行" scheme="https://zml3589110.github.io/categories/%E5%AE%9A%E6%97%B6%E8%BF%90%E8%A1%8C/"/>
    
    <category term="crond" scheme="https://zml3589110.github.io/categories/crond/"/>
    
    
    <category term="Ubuntu" scheme="https://zml3589110.github.io/tags/Ubuntu/"/>
    
    <category term="linux" scheme="https://zml3589110.github.io/tags/linux/"/>
    
    <category term="debain" scheme="https://zml3589110.github.io/tags/debain/"/>
    
    <category term="定时运行" scheme="https://zml3589110.github.io/tags/%E5%AE%9A%E6%97%B6%E8%BF%90%E8%A1%8C/"/>
    
    <category term="crond" scheme="https://zml3589110.github.io/tags/crond/"/>
    
    <category term="crontab" scheme="https://zml3589110.github.io/tags/crontab/"/>
    
  </entry>
  
  <entry>
    <title>系统时间管理</title>
    <link href="https://zml3589110.github.io/posts/1883728245.html"/>
    <id>https://zml3589110.github.io/posts/1883728245.html</id>
    <published>2024-02-20T06:55:20.000Z</published>
    <updated>2024-02-20T07:09:03.088Z</updated>
    
    <content type="html"><![CDATA[<h1 id="时区问题"><a href="#时区问题" class="headerlink" title="时区问题"></a>时区问题</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul><li>中国使用的是东八区上海时间，而linux服务器，一般默认是0时区<code>UTC</code>，所以需要将时区改为东八区<code>CST</code></li><li>将时区改为东八区后，显示的实际仍然不对，仍然差8小时或16小时，这说明时间不对</li><li>时间修改正确后，服务器重启，时间显示又错误了，因为没改硬件时钟时间</li></ul><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><ul><li>linux系统时间，与本地时间不一致，一般有两种情况</li><li>一是时区设置错误，不是当地使用时区</li><li>二是时间设置错误，未联网校时，或者人为不小心设置错了</li></ul><h2 id="处理时区问题"><a href="#处理时区问题" class="headerlink" title="处理时区问题"></a>处理时区问题</h2><h3 id="date查看时间、时区"><a href="#date查看时间、时区" class="headerlink" title="date查看时间、时区"></a>date查看时间、时区</h3><ul><li>首先查看时间是否正确，与当地时间一致，可使用以下命令</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">date</span><br><span class="line">date -R</span><br></pre></td></tr></table></figure><img src="/posts/1883728245/7bcd3ea605734ec2a141d540ef8c67b0.png" class="" title="在这里插入图片描述"><ul><li><code>date</code>查看日期时间，<code>date -R</code>则会把时区一起显示出来</li><li>可以看到上面的时间错了（与当地时间误差几分钟），下面时间虽然对了但是时区不对（应该为+0800）</li></ul><h5 id="timedatectl查看时间、时区"><a href="#timedatectl查看时间、时区" class="headerlink" title="timedatectl查看时间、时区"></a>timedatectl查看时间、时区</h5><ul><li>也可以使用<code>timedatectl</code>查看和设置时区</li></ul><img src="/posts/1883728245/97a60eafb18c441c870739b932c85cd5.png" class="" title="在这里插入图片描述"><ul><li>Local time：当前使用的时区的时间，也就是<code>date</code>命令显示的时间</li><li>Universal time：世界时间，也就是0时区时间，世界通用的协调时间</li><li>RTC time：硬件时钟时间，关机也会</li><li>Time zone：现正使用的时区，可以看到上面是<code>CST</code>，中国时区，是对的</li></ul><h5 id="查看localtime"><a href="#查看localtime" class="headerlink" title="查看localtime"></a>查看localtime</h5><ul><li>也可以直接使用<code>ls -l /etc/localtime</code>查看系统当前的时区</li></ul><img src="/posts/1883728245/112f6f3c72ce4194aa6c3740185aa8e2.png" class="" title="在这里插入图片描述"><h5 id="设置时区"><a href="#设置时区" class="headerlink" title="设置时区"></a>设置时区</h5><ul><li>第一种方式，可以通过<code>zoneinfo</code>直接设置</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br></pre></td></tr></table></figure><ul><li>第二种方式，与第一种类似，使用软连接</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br></pre></td></tr></table></figure><ul><li>第三种方式，使用<code>timedatectl</code>设置时区</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">timedatectl set-timezone Asia/Shanghai</span><br></pre></td></tr></table></figure><h1 id="处理时间问题"><a href="#处理时间问题" class="headerlink" title="处理时间问题"></a>处理时间问题</h1><ul><li>如果时区已经设置对了，时间显示还是不对，可以手动设置下时间，或者使用互联网校时</li><li>需要安装<code>ntpdate</code>，再校时即可，但是需要在联网情况下进行</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install -y ntp ntpdate</span><br><span class="line">ntpdate 0.asia.pool.ntp.org</span><br><span class="line">date</span><br></pre></td></tr></table></figure><ul><li>如果没有联网，只能直接使用<code>date -s 日期 时间</code>设置了</li><li>时间显示正确后，查看下硬件时间，顺便把硬件时间也改对，防止重启失效</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hwclock --show</span><br><span class="line"><span class="meta">#</span><span class="bash"> hc代表硬件时间，sys代表系统时间，即用系统时钟同步硬件时钟</span></span><br><span class="line">hwclock --systohc  </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 或</span></span>   </span><br><span class="line">clock --systohc  </span><br><span class="line">hwclock -w</span><br><span class="line">date</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><h2 id="一、使用date命令查看系统时间"><a href="#一、使用date命令查看系统时间" class="headerlink" title="一、使用date命令查看系统时间"></a>一、使用date命令查看系统时间</h2><p>ate是Linux系统中用来显示或设置系统时间和日期的命令，常用于脚本编写、系统管理等操作中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date</span><br></pre></td></tr></table></figure><p>执行以上命令，系统将输出当前的系统时间，格式为“星期 月 日 时:分:秒 时区 年份”，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Fri Oct 15 14:56:34 CST 2021</span><br></pre></td></tr></table></figure><p>要查看特定时刻的系统时间，可以使用date命令加上时间参数。例如，要查看2021年1月1日零点的系统时间，可以使用以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date` `-d ``&quot;2021-01-01 00:00:00&quot;</span><br></pre></td></tr></table></figure><p>如果要在脚本中获取系统时间并进行操作，可以使用date命令结合格式化参数将系统时间格式化为指定格式。例如，要获取当前系统时间的小时数，可以使用以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date` `+%H</span><br></pre></td></tr></table></figure><h2 id="二、通过-x2F-var-x2F-log-x2F-syslog文件查看系统时间"><a href="#二、通过-x2F-var-x2F-log-x2F-syslog文件查看系统时间" class="headerlink" title="二、通过&#x2F;var&#x2F;log&#x2F;syslog文件查看系统时间"></a>二、通过&#x2F;var&#x2F;log&#x2F;syslog文件查看系统时间</h2><p>&#x2F;var&#x2F;log&#x2F;syslog是Linux系统中保存系统日志信息的文件，其中包含着各种系统事件的详细信息。</p><p>要查看系统启动时间，可以在&#x2F;var&#x2F;log&#x2F;syslog文件中查找“systemd[1]: Started”字符串，该字符串表示系统启动的时间。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep` `&quot;systemd[1]: Started&quot;` `/var/log/syslog</span><br></pre></td></tr></table></figure><p>执行以上命令，系统将输出包含系统启动时间的日志信息。</p><h2 id="三、通过-x2F-proc-x2F-uptime文件查看系统运行时间"><a href="#三、通过-x2F-proc-x2F-uptime文件查看系统运行时间" class="headerlink" title="三、通过&#x2F;proc&#x2F;uptime文件查看系统运行时间"></a>三、通过&#x2F;proc&#x2F;uptime文件查看系统运行时间</h2><p>&#x2F;proc&#x2F;uptime文件记录了系统从启动到当前的运行时间。</p><p>要查看系统的运行时间，可以使用以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat` `/proc/uptime</span><br></pre></td></tr></table></figure><p>系统将输出两个数字，第一个数字表示系统从启动到当前的运行时间，以秒为单位；第二个数字表示系统在空闲状态下运行的时间，以秒为单位。</p><h2 id="四、通过hwclock命令查看硬件时间"><a href="#四、通过hwclock命令查看硬件时间" class="headerlink" title="四、通过hwclock命令查看硬件时间"></a>四、通过hwclock命令查看硬件时间</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hwclock是Linux系统中用来读取和设置硬件时钟的命令。</span><br><span class="line"></span><br><span class="line">要查看硬件时间，可以使用以下命令：</span><br><span class="line">sudo hwclock --show</span><br><span class="line">执行以上命令，系统将输出当前的硬件时间。</span><br></pre></td></tr></table></figure><h2 id="五、通过timedatectl命令设置系统时区"><a href="#五、通过timedatectl命令设置系统时区" class="headerlink" title="五、通过timedatectl命令设置系统时区"></a>五、通过timedatectl命令设置系统时区</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">timedatectl是Linux系统中用来查看和设置系统时间、时区等信息的命令。</span><br><span class="line"></span><br><span class="line">要查看当前系统的时区，可以使用以下命令：</span><br><span class="line"></span><br><span class="line">timedatectl</span><br><span class="line">要设置系统的时区，可以使用以下命令：</span><br><span class="line"></span><br><span class="line">sudo timedatectl set-timezone Asia/Shanghai</span><br><span class="line">执行以上命令，将系统的时区设置为上海。</span><br></pre></td></tr></table></figure><h2 id="六、通过NTP协议同步网络时间"><a href="#六、通过NTP协议同步网络时间" class="headerlink" title="六、通过NTP协议同步网络时间"></a>六、通过NTP协议同步网络时间</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">NTP（Network Time Protocol）是一种用于同步网络时间的协议。</span><br><span class="line"></span><br><span class="line">要通过NTP协议同步网络时间，可以使用以下命令：</span><br><span class="line"></span><br><span class="line">sudo apt-get install ntp</span><br><span class="line">sudo service ntp stop</span><br><span class="line">sudo ntpdate cn.pool.ntp.org</span><br><span class="line">sudo service ntp start</span><br><span class="line">执行以上命令，系统将通过中国NTP服务器cn.pool.ntp.org同步网络时间。</span><br></pre></td></tr></table></figure><h2 id="七、通过ntpstat命令检查NTP同步状态"><a href="#七、通过ntpstat命令检查NTP同步状态" class="headerlink" title="七、通过ntpstat命令检查NTP同步状态"></a>七、通过ntpstat命令检查NTP同步状态</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ntpstat是Linux系统中用来检查NTP同步状态的命令。</span><br><span class="line"></span><br><span class="line">要检查NTP同步状态，可以使用以下命令：</span><br><span class="line"></span><br><span class="line">ntpstat</span><br><span class="line">系统将输出当前的NTP同步状态，例如：</span><br><span class="line"></span><br><span class="line">synchronised to NTP server (210.72.145.44) at stratum 2</span><br><span class="line">   time correct to within 34 ms</span><br><span class="line">   polling server every 64 s</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="八、使用cal命令查看日历"><a href="#八、使用cal命令查看日历" class="headerlink" title="八、使用cal命令查看日历"></a>八、使用cal命令查看日历</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cal是Linux系统中用来显示日历的命令。</span><br><span class="line"></span><br><span class="line">要查看当前月份的日历，可以使用以下命令：</span><br><span class="line"></span><br><span class="line">cal</span><br><span class="line">系统将输出当前月份的日历。</span><br></pre></td></tr></table></figure><h2 id="九、使用clock命令显示时钟"><a href="#九、使用clock命令显示时钟" class="headerlink" title="九、使用clock命令显示时钟"></a>九、使用clock命令显示时钟</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">clock是Linux系统中用来显示时钟的命令。</span><br><span class="line"></span><br><span class="line">要在终端中显示时钟，可以使用以下命令：</span><br><span class="line"></span><br><span class="line">watch -n1 -t &quot;date +%T&quot;</span><br><span class="line">执行以上命令，系统将每秒钟刷新一次终端中的系统时间。</span><br></pre></td></tr></table></figure><h2 id="十、总结"><a href="#十、总结" class="headerlink" title="十、总结"></a>十、总结</h2><p>本文介绍了多种Linux系统查看系统时间的方法，从date命令、系统日志文件、&#x2F;proc&#x2F;uptime文件、hwclock命令、timedatectl命令、NTP协议、ntpstat命令、cal命令、clock命令等多个方面展开阐述。这些方法既能帮助我们了解系统时间和日期，也能为脚本编写、系统管理等操作提供便利。</p><hr><h1 id="相关链接（侵删）"><a href="#相关链接（侵删）" class="headerlink" title="相关链接（侵删）"></a>相关链接（侵删）</h1><ol><li><a href="https://blog.csdn.net/u010882234/article/details/128024735">CentOS7等linux系统时区时间不对显示误差8小时</a></li><li><a href="https://www.jb51.net/jiaoben/297846gya.htm">Linux查看系统时间的详细方法总结</a></li></ol><hr><center><font color=red>=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">linux时间相关</summary>
    
    
    
    <category term="Linux" scheme="https://zml3589110.github.io/categories/Linux/"/>
    
    <category term="时间" scheme="https://zml3589110.github.io/categories/%E6%97%B6%E9%97%B4/"/>
    
    
    <category term="Ubuntu" scheme="https://zml3589110.github.io/tags/Ubuntu/"/>
    
    <category term="时间" scheme="https://zml3589110.github.io/tags/%E6%97%B6%E9%97%B4/"/>
    
    <category term="时区" scheme="https://zml3589110.github.io/tags/%E6%97%B6%E5%8C%BA/"/>
    
  </entry>
  
  <entry>
    <title>linux文件管理</title>
    <link href="https://zml3589110.github.io/posts/1071158144.html"/>
    <id>https://zml3589110.github.io/posts/1071158144.html</id>
    <published>2024-02-20T03:28:20.000Z</published>
    <updated>2024-02-20T06:26:08.945Z</updated>
    
    <content type="html"><![CDATA[<h1 id="查看文件夹大小"><a href="#查看文件夹大小" class="headerlink" title="查看文件夹大小"></a>查看文件夹大小</h1><h2 id="1-ls-命令：列出当前工作目录下的所有文件-x2F-文件夹的名称"><a href="#1-ls-命令：列出当前工作目录下的所有文件-x2F-文件夹的名称" class="headerlink" title="1.ls 命令：列出当前工作目录下的所有文件&#x2F;文件夹的名称"></a>1.ls 命令：列出当前工作目录下的所有文件&#x2F;文件夹的名称</h2><blockquote><p>使用ls -l，会显示成字节大小，ls- lh会以KB、MB等为单位进行显示更加直观</p></blockquote><img src="/posts/1071158144/431942-20230829100154657-1955390267.png" class="" title="img"><h2 id="2-du-命令：查看当前目录和子目录文件夹-x2F-文件大小情况"><a href="#2-du-命令：查看当前目录和子目录文件夹-x2F-文件大小情况" class="headerlink" title="2.du 命令：查看当前目录和子目录文件夹&#x2F;文件大小情况"></a>2.du 命令：查看当前目录和子目录文件夹&#x2F;文件大小情况</h2><blockquote><p>du &#x3D; disk usage 磁盘使用率，输出每个文件或者目录总大小, 其用法如下：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du [OPTION]… [FILE]…</span><br></pre></td></tr></table></figure><ul><li>-c, –total 累计大小</li><li>-d, –max-depth&#x3D;N 决定统计每个目录的深度</li><li>-B, –block-size&#x3D;SIZE 决定显示文件大小的单位;比如 ‘-BM’，就是MB，’-BK’就是KB</li><li>-h, –human-readable 以高可读方式打印 (比如1K 234M 2G)</li><li>-s, –summarize 显示总大小</li><li><code>du -sh</code> 查看当前目录总大小。</li><li><code>du -sh *</code> 查看当前目录所有子目录大小。</li><li><code>du -ach *</code> 查看当前目录和所有子目录大小，最后一行会显示当前目录的总大小，不包括隐藏文件。</li></ul><img src="/posts/1071158144/431942-20230829100545940-391467487.png" class="" title="img"><h2 id="3-df-命令：用于显示磁盘分区上的可使用的磁盘空间"><a href="#3-df-命令：用于显示磁盘分区上的可使用的磁盘空间" class="headerlink" title="3.df 命令：用于显示磁盘分区上的可使用的磁盘空间"></a>3.df 命令：用于显示磁盘分区上的可使用的磁盘空间</h2><p><code>df = disk free</code> 命令用于显示磁盘分区上的可使用的磁盘空间。默认显示单位为KB。可以利用该命令来获取硬盘被占用了多少空间，目前还剩下多少空间等信息。<br><code>df -h</code> 以可读性高的结果展示磁盘分区上的可使用的磁盘空间。</p><img src="/posts/1071158144/431942-20230829100620526-1595981637.png" class="" title="img"><hr><h1 id="相关链接（侵删）"><a href="#相关链接（侵删）" class="headerlink" title="相关链接（侵删）"></a>相关链接（侵删）</h1><ol><li><a href="https://www.cnblogs.com/zakun/p/linux-ls-du-df.html">查看文件夹大小</a></li></ol><hr><center><font color=red>=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">linux文件和文件件相关管理</summary>
    
    
    
    <category term="Linux" scheme="https://zml3589110.github.io/categories/Linux/"/>
    
    <category term="文件管理" scheme="https://zml3589110.github.io/categories/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/"/>
    
    
    <category term="Ubuntu" scheme="https://zml3589110.github.io/tags/Ubuntu/"/>
    
    <category term="文件管理" scheme="https://zml3589110.github.io/tags/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/"/>
    
    <category term="文件夹大小" scheme="https://zml3589110.github.io/tags/%E6%96%87%E4%BB%B6%E5%A4%B9%E5%A4%A7%E5%B0%8F/"/>
    
  </entry>
  
  <entry>
    <title>docker命令合集</title>
    <link href="https://zml3589110.github.io/posts/61889715.html"/>
    <id>https://zml3589110.github.io/posts/61889715.html</id>
    <published>2024-02-20T03:15:20.000Z</published>
    <updated>2024-02-20T06:26:08.953Z</updated>
    
    <content type="html"><![CDATA[<h1 id="linux管理docker"><a href="#linux管理docker" class="headerlink" title="linux管理docker"></a>linux管理docker</h1><h2 id="查看docker安装目录"><a href="#查看docker安装目录" class="headerlink" title="查看docker安装目录"></a>查看docker安装目录</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">whereis docker</span><br><span class="line">docker: /usr/bin/docker /etc/docker /usr/libexec/docker /usr/share/man/man1/docker.1.gz</span><br></pre></td></tr></table></figure><h2 id="查询运行文件所在路径"><a href="#查询运行文件所在路径" class="headerlink" title="查询运行文件所在路径"></a>查询运行文件所在路径</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">which docker</span><br><span class="line">/usr/bin/docker</span><br></pre></td></tr></table></figure><h2 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h2><p>Docker应用需要用到各种端口，逐一去修改防火墙设置。非常麻烦，因此建议大家直接关闭防火墙！</p><p>启动docker前，一定要关闭防火墙后！！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 关闭</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line"><span class="meta">#</span><span class="bash"> 禁止开机启动防火墙</span></span><br><span class="line">systemctl disable firewalld</span><br><span class="line"><span class="meta">#</span><span class="bash">查看是否关闭防火墙</span></span><br><span class="line">systemctl status firewalld</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">systemctl start docker  # 启动docker服务</span><br><span class="line"></span><br><span class="line">systemctl stop docker  # 停止docker服务</span><br><span class="line"></span><br><span class="line">systemctl restart docker  # 重启docker服务</span><br><span class="line"></span><br><span class="line">systemctl status docker  # 查看docker启动状态</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="配置镜像加速"><a href="#配置镜像加速" class="headerlink" title="配置镜像加速"></a>配置镜像加速</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">docker官方镜像仓库网速较差，我们需要设置国内镜像服务：</span><br><span class="line"></span><br><span class="line">参考阿里云的镜像加速文档：https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#创建文件夹</span></span></span><br><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="comment">##在文件夹内新建一个daemon.json文件</span></span></span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://akchsmlh.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#重新加载文件</span></span></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#重启docker</span></span></span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> 7.卸载</span><br><span class="line">yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-selinux \</span><br><span class="line">                  docker-engine-selinux \</span><br><span class="line">                  docker-engine \</span><br><span class="line">                  docker-ce</span><br></pre></td></tr></table></figure><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>首先需要大家虚拟机联网，安装yum工具</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils \</span><br><span class="line">           device-mapper-persistent-data \</span><br><span class="line">           lvm2 --skip-broken</span><br></pre></td></tr></table></figure><p>然后更新本地镜像源：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 设置docker镜像源</span></span><br><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">sed -i &#x27;s/download.docker.com/mirrors.aliyun.com\/docker-ce/g&#x27; /etc/yum.repos.d/docker-ce.repo</span><br><span class="line">yum makecache fast</span><br></pre></td></tr></table></figure><p>最后输入命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y docker-ce</span><br></pre></td></tr></table></figure><h1 id="docker自身命令"><a href="#docker自身命令" class="headerlink" title="docker自身命令"></a>docker自身命令</h1><h2 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker -v 查看docker版本</span><br></pre></td></tr></table></figure><h2 id="镜像相关"><a href="#镜像相关" class="headerlink" title="镜像相关"></a>镜像相关</h2><p><strong>镜像列表：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p><strong>拉取镜像：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull 镜像名</span><br><span class="line">docker pull 镜像名:tag</span><br></pre></td></tr></table></figure><blockquote><p>不加tag(版本号) 即拉取docker仓库中 该镜像的最新版本latest 加:tag 则是拉取指定版本</p></blockquote><p><strong>保存镜像：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker save -o redis.tar redis:latest</span><br></pre></td></tr></table></figure><blockquote><p>docker save 镜像名&#x2F;镜像ID -o 镜像保存的名字 镜像保存的tag</p></blockquote><p><strong>删除镜像：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi -f 镜像名/镜像ID</span><br></pre></td></tr></table></figure><p><strong>加载镜像：</strong><br>docker load -i 镜像保存文件位置<br>例如：docker load -i redis.ta</p><hr><h1 id="相关链接（侵删）"><a href="#相关链接（侵删）" class="headerlink" title="相关链接（侵删）"></a>相关链接（侵删）</h1><ol><li><a href="https://blog.csdn.net/lucylily11/article/details/127598805">安装docker</a></li></ol><hr><center><font color=red>=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">docker命令合集-一个大合集，收集些常用的命令</summary>
    
    
    
    <category term="Docker" scheme="https://zml3589110.github.io/categories/Docker/"/>
    
    <category term="命令" scheme="https://zml3589110.github.io/categories/%E5%91%BD%E4%BB%A4/"/>
    
    
    <category term="linux" scheme="https://zml3589110.github.io/tags/linux/"/>
    
    <category term="Docker" scheme="https://zml3589110.github.io/tags/Docker/"/>
    
    <category term="命令" scheme="https://zml3589110.github.io/tags/%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>docker自动备份</title>
    <link href="https://zml3589110.github.io/posts/2802299989.html"/>
    <id>https://zml3589110.github.io/posts/2802299989.html</id>
    <published>2024-02-20T02:54:20.000Z</published>
    <updated>2024-02-20T06:26:08.965Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HomeAssistant-使用插件备份"><a href="#HomeAssistant-使用插件备份" class="headerlink" title="HomeAssistant 使用插件备份"></a>HomeAssistant 使用插件备份</h1><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h2><p> <strong>集成：</strong>Auto Backup<br> <strong>加载项：</strong><br> Alist <a href="https://gitcode.com/waxgourd/addons">https://gitcode.com/waxgourd/addons</a><br> Rclone Backup <a href="https://github.com/jcwillox/hassio-rclone-backup">https://github.com/jcwillox/hassio-rclone-backup</a></p><h2 id="2-Alist挂载阿里云网盘"><a href="#2-Alist挂载阿里云网盘" class="headerlink" title="2.Alist挂载阿里云网盘"></a>2.Alist挂载阿里云网盘</h2><p>网上有很多教程，比如挂载完得到一个webdav地址为：<strong><a href="http://192.168.101.81:5244/dav">http://192.168.101.81:5244/dav</a></strong> ，挂载的名称为 <strong>AliYunPan</strong></p><h2 id="3-配置Rclone"><a href="#3-配置Rclone" class="headerlink" title="3.配置Rclone"></a>3.配置Rclone</h2><h3 id="3-1-在-x2F-config目录下，新建一个rclone-conf的文件，编辑内容为："><a href="#3-1-在-x2F-config目录下，新建一个rclone-conf的文件，编辑内容为：" class="headerlink" title="3.1 在&#x2F;config目录下，新建一个rclone.conf的文件，编辑内容为："></a>3.1 在&#x2F;config目录下，新建一个rclone.conf的文件，编辑内容为：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[Alist]</span><br><span class="line">type = webdav</span><br><span class="line">url = http://192.168.101.81:5244/dav </span><br><span class="line">vendor = other</span><br></pre></td></tr></table></figure><p> <strong>url填Alist的webdav地址。</strong></p><h3 id="3-2-在加载项页面，修改Rclone配置为"><a href="#3-2-在加载项页面，修改Rclone配置为" class="headerlink" title="3.2 在加载项页面，修改Rclone配置为"></a>3.2 在加载项页面，修改Rclone配置为</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Sync</span> <span class="string">Daily</span> <span class="string">Backups</span></span><br><span class="line">  <span class="attr">schedule:</span> <span class="number">50</span> <span class="number">3</span> <span class="string">*</span> <span class="string">*</span> <span class="string">*</span></span><br><span class="line">  <span class="attr">command:</span> <span class="string">sync</span></span><br><span class="line">  <span class="attr">sources:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/backup</span></span><br><span class="line">  <span class="attr">destination:</span> <span class="string">Alist:/AliYunPan/haos自动备份</span>   </span><br><span class="line">  <span class="attr">include:</span> []</span><br><span class="line">  <span class="attr">exclude:</span> []</span><br><span class="line">  <span class="attr">flags:</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p> <strong>destination填写Alist的挂载的阿里云的路径</strong></p><h3 id="3-3-启动加载项，打开-WEB-UI，点击左侧菜单栏-Configs，会出现一个Alist的配置，选择-Update。"><a href="#3-3-启动加载项，打开-WEB-UI，点击左侧菜单栏-Configs，会出现一个Alist的配置，选择-Update。" class="headerlink" title="3.3 启动加载项，打开 WEB UI，点击左侧菜单栏 Configs，会出现一个Alist的配置，选择 Update。"></a>3.3 启动加载项，打开 WEB UI，点击左侧菜单栏 Configs，会出现一个Alist的配置，选择 Update。</h3><ul><li>第一步直接点击<strong>Next</strong></li><li>第二步填写Alist的webdav的账户密码，如下图，填完继续<strong>Next</strong>，就配置完成了</li></ul><img src="/posts/2802299989/150404h2dwpimzowwwc27h.png" class="" title="img"><ul><li>这时候再打开3.1那里的rclone.conf文件，就已经自动生成user和pass，pass是加密的<br> 这样Rclone就配置好了。</li></ul><h2 id="4-创建自动备份自动化"><a href="#4-创建自动备份自动化" class="headerlink" title="4.创建自动备份自动化"></a>4.创建自动备份自动化</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">alias:</span> <span class="string">自动备份</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">每天晚上3点半，自动备份文件到本地，同时上传到云端</span></span><br><span class="line"><span class="attr">trigger:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">platform:</span> <span class="string">time</span></span><br><span class="line">    <span class="attr">at:</span> <span class="string">&quot;03:30:00&quot;</span></span><br><span class="line"><span class="attr">condition:</span> []</span><br><span class="line"><span class="attr">action:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">service:</span> <span class="string">auto_backup.backup</span></span><br><span class="line">    <span class="attr">data:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">Automatic</span> <span class="string">Backup</span> &#123;&#123; <span class="string">now().strftime(&#x27;%Y-%m-%d&#x27;)</span> &#125;&#125;</span><br><span class="line">      <span class="attr">exclude_addons:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">f1549655_koolsmart*</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">a0d7b954_zerotier</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">15d21743_samba_backup</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">core_mariadb</span></span><br><span class="line">      <span class="attr">exclude_folders:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">media</span></span><br><span class="line">      <span class="attr">keep_days:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">mode:</span> <span class="string">single</span></span><br></pre></td></tr></table></figure><p>上面配置文件我排除了几个体积较大的不常用的加载项和media文件夹，这样就完成了，每天3点半系统备份，3点50同步到阿里云盘。</p><img src="/posts/2802299989/160609rmlejjxmhbjn6tbz.png" class="" title="img"><img src="/posts/2802299989/160334fkhbralbn0nqqo8q.png" class="" title="img"><h1 id="docker直接部署，没有基于ha来备份"><a href="#docker直接部署，没有基于ha来备份" class="headerlink" title="docker直接部署，没有基于ha来备份"></a>docker直接部署，没有基于ha来备份</h1><p><strong>注意：</strong><br>在此之前要使用命令找到自己docker安装位置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker info | grep &quot;Docker Root Dir&quot;</span><br></pre></td></tr></table></figure><img src="/posts/2802299989/image-20240220111050231.png" class="" title="image-20240220111050231"><p>将所有docker volume映射到一个文件夹，定时执行shell备份上传这个文件夹   </p><img src="/posts/2802299989/171625yrlrr1uflzrlbg1r.png" class="" title="img"><p>docker的数据都映射到&#x2F;usr&#x2F;mydocker下<br>webdav挂载跟楼主的方式类似，但是我用的是davfs2<br>定时运行下面的shell就行  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 本地目录变量</span></span><br><span class="line">LOCAL_BACKUP_DIR=&quot;/mnt/mydisk/backup/mydocker&quot;</span><br><span class="line">WEBDAV_MOUNT_POINT=&quot;/mnt/webdav/aliyun/备份/mydocker&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 确保本地备份目录存在</span></span><br><span class="line">mkdir -p &quot;$&#123;LOCAL_BACKUP_DIR&#125;&quot;</span><br><span class="line">mkdir -p &quot;$&#123;WEBDAV_MOUNT_POINT&#125;&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建今天的备份目录</span></span><br><span class="line">TODAY=$(date +%Y-%m-%d)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 压缩/usr/mydocker文件夹，排除photoprism</span></span><br><span class="line">tar -czvf &quot;$&#123;LOCAL_BACKUP_DIR&#125;/backup_$&#123;TODAY&#125;.tar.gz&quot; --exclude=&#x27;/usr/mydocker/photoprism&#x27; --exclude=&#x27;/usr/mydocker/emby2Alist/nginx/embyCache&#x27; /usr/mydocker</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将压缩包拷贝到WebDAV</span></span><br><span class="line">rsync -ah --progress &quot;$&#123;LOCAL_BACKUP_DIR&#125;/backup_$&#123;TODAY&#125;.tar.gz&quot; &quot;$&#123;WEBDAV_MOUNT_POINT&#125;&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在WebDAV目录中删除超过30天的旧备份文件</span></span><br><span class="line">find &quot;$&#123;WEBDAV_MOUNT_POINT&#125;&quot; -name &#x27;backup_*.tar.gz&#x27; -type f -mtime +30 -exec rm &#123;&#125; \;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在本地备份目录中也删除超过30天的旧备份文件</span></span><br><span class="line">find &quot;$&#123;LOCAL_BACKUP_DIR&#125;&quot; -name &#x27;backup_*.tar.gz&#x27; -type f -mtime +30 -exec rm &#123;&#125; \;</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/posts/2802299989/image-20240220110706888.png" class="" title="image-20240220110706888"><img src="/posts/2802299989/image-20240220110731063.png" class="" title="image-20240220110731063"><h1 id="自己参考更改的shell"><a href="#自己参考更改的shell" class="headerlink" title="自己参考更改的shell"></a>自己参考更改的shell</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 本地目录变量</span></span><br><span class="line">DOCKER_ROOT_DIR=&quot;/mnt/share/docker-lib/docker&quot;</span><br><span class="line">LOCAL_BACKUP_DIR=&quot;/mnt/share/mydisk/backup/mydocker&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash">WEBDAV_MOUNT_POINT=<span class="string">&quot;/mnt/webdav/aliyun/备份/mydocker&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 确保本地备份目录存在</span></span><br><span class="line">mkdir -p &quot;$&#123;LOCAL_BACKUP_DIR&#125;&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash">mkdir -p <span class="string">&quot;<span class="variable">$&#123;WEBDAV_MOUNT_POINT&#125;</span>&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建今天的备份目录</span></span><br><span class="line">TODAY=$(date +%Y-%m-%d)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 压缩/usr/mydocker文件夹，排除photoprism</span></span><br><span class="line">tar -czvf &quot;$&#123;LOCAL_BACKUP_DIR&#125;/backup_$&#123;TODAY&#125;.tar.gz&quot; --exclude=&#x27;$&#123;DOCKER_ROOT_DIR&#125;/photoprism&#x27; --exclude=&#x27;$&#123;DOCKER_ROOT_DIR&#125;/emby2Alist/nginx/embyCache&#x27; $&#123;DOCKER_ROOT_DIR&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将压缩包拷贝到WebDAV</span></span><br><span class="line"><span class="meta">#</span><span class="bash">rsync -ah --progress <span class="string">&quot;<span class="variable">$&#123;LOCAL_BACKUP_DIR&#125;</span>/backup_<span class="variable">$&#123;TODAY&#125;</span>.tar.gz&quot;</span> <span class="string">&quot;<span class="variable">$&#123;WEBDAV_MOUNT_POINT&#125;</span>&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在WebDAV目录中删除超过30天的旧备份文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash">find <span class="string">&quot;<span class="variable">$&#123;WEBDAV_MOUNT_POINT&#125;</span>&quot;</span> -name <span class="string">&#x27;backup_*.tar.gz&#x27;</span> -<span class="built_in">type</span> f -mtime +3 -<span class="built_in">exec</span> rm &#123;&#125; \;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在本地备份目录中也删除超过30天的旧备份文件</span></span><br><span class="line">find &quot;$&#123;LOCAL_BACKUP_DIR&#125;&quot; -name &#x27;backup_*.tar.gz&#x27; -type f -mtime +30 -exec rm &#123;&#125; \;</span><br></pre></td></tr></table></figure><hr><h1 id="相关链接（侵删）"><a href="#相关链接（侵删）" class="headerlink" title="相关链接（侵删）"></a>相关链接（侵删）</h1><ol><li><a href="https://bbs.hassbian.com/thread-24005-1-1.html">自动备份到阿里云盘</a></li><li><a href="https://blog.51cto.com/u_16175443/7839734">查看Docker安装路径</a></li></ol><hr><center><font color=red>=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">实现对docker备份，可以直接linux级别，也可以使用 HomeAssistant 集成</summary>
    
    
    
    <category term="Docker" scheme="https://zml3589110.github.io/categories/Docker/"/>
    
    <category term="备份" scheme="https://zml3589110.github.io/categories/%E5%A4%87%E4%BB%BD/"/>
    
    
    <category term="linux" scheme="https://zml3589110.github.io/tags/linux/"/>
    
    <category term="HomeAssistant" scheme="https://zml3589110.github.io/tags/HomeAssistant/"/>
    
    <category term="Docker" scheme="https://zml3589110.github.io/tags/Docker/"/>
    
    <category term="备份" scheme="https://zml3589110.github.io/tags/%E5%A4%87%E4%BB%BD/"/>
    
    <category term="阿里云" scheme="https://zml3589110.github.io/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
    <category term="AliYunPan" scheme="https://zml3589110.github.io/tags/AliYunPan/"/>
    
    <category term="webdav" scheme="https://zml3589110.github.io/tags/webdav/"/>
    
  </entry>
  
  <entry>
    <title>继电器相关</title>
    <link href="https://zml3589110.github.io/posts/2386778146.html"/>
    <id>https://zml3589110.github.io/posts/2386778146.html</id>
    <published>2024-02-20T01:32:20.000Z</published>
    <updated>2024-02-20T01:52:46.054Z</updated>
    
    <content type="html"><![CDATA[<h1 id="三友继电器"><a href="#三友继电器" class="headerlink" title="三友继电器"></a>三友继电器</h1><p><strong>命名：</strong></p><img src="/posts/2386778146/image-20240220093411796.png" class="" title="image-20240220093411796"><p><strong>外形：</strong></p><img src="/posts/2386778146/image-20240220093516554.png" class="" title="image-20240220093516554"><h2 id="SRD-S-112DM（一组常开4脚10A250VAC继电器12v）"><a href="#SRD-S-112DM（一组常开4脚10A250VAC继电器12v）" class="headerlink" title="SRD-S-112DM（一组常开4脚10A250VAC继电器12v）"></a>SRD-S-112DM（一组常开4脚10A250VAC继电器12v）</h2><p><a href="http://m.xgzrelay.com/p/326.html#header">三友SRD-S-112DM继电器</a></p><p><strong>产品型号：</strong>SRD-S-112DM继电器<br><strong>外形尺寸：</strong>19.6×15.4×15.5<br><strong>阳性负载：</strong>10A250VAC<br><strong>线圈功率：</strong>0.36W<br><strong>额定电压：</strong>12v<br><strong>环境温度：</strong>-40℃~ + 105℃<br><strong>适用范围：</strong>家用电器,智能家居,安防设备,照明电子,测量仪器,可穿戴设备,汽车电子,网络通信,3C数码,医疗电子,物联网IoT,新能源,军工&#x2F;航天,广电教育</p><img src="/posts/2386778146/image-20240220093647481.png" class="" title="image-20240220093647481"><img src="/posts/2386778146/image-20240220093709507.png" class="" title="image-20240220093709507"><img src="/posts/2386778146/image-20240220093722802.png" class="" title="image-20240220093722802"><h1 id="AFE-爱福继电器"><a href="#AFE-爱福继电器" class="headerlink" title="AFE 爱福继电器"></a>AFE 爱福继电器</h1><p><strong>命名：</strong></p><img src="/posts/2386778146/5bf29badd228e.jpg" class="" title="img"><p><strong>外形：</strong></p><img src="/posts/2386778146/5bf29bc2cf251.jpg" class="" title="img"><h2 id="BRD-SS-105LM-（一组常开4脚12A250VAC继电器5v）"><a href="#BRD-SS-105LM-（一组常开4脚12A250VAC继电器5v）" class="headerlink" title="BRD-SS-105LM （一组常开4脚12A250VAC继电器5v）"></a>BRD-SS-105LM （一组常开4脚12A250VAC继电器5v）</h2><p><strong>易微联通断器选用了这个继电器</strong></p><p><a href="https://www.aferelay.net/brd/48-89.html">通用功率继电器BRD-SS-105LM</a></p><p><strong>产品特点：</strong><br>1.高触点容量：15A触点高切换能力<br>2.低线圈功耗，低价格<br>3.小型“19<em>15.4</em>15mm，标准印刷板引出脚</p><p>**技术参数：<br>**<img src="/posts/2386778146/5bff4a1082f01.jpg" class="" title="img"></p><img src="/posts/2386778146/65682edc7db1f.jpg" class="" title="通用功率继电器BRD-SS-105LM"><img src="/posts/2386778146/65682eeea4073.jpg" class="" title="BRD-SS-105LM 脚.jpg"><hr><h1 id="相关链接（侵删）"><a href="#相关链接（侵删）" class="headerlink" title="相关链接（侵删）"></a>相关链接（侵删）</h1><hr><center><font color=red>=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">收集硬件继电器相关资料</summary>
    
    
    
    <category term="硬件" scheme="https://zml3589110.github.io/categories/%E7%A1%AC%E4%BB%B6/"/>
    
    <category term="继电器" scheme="https://zml3589110.github.io/categories/%E7%BB%A7%E7%94%B5%E5%99%A8/"/>
    
    
    <category term="硬件" scheme="https://zml3589110.github.io/tags/%E7%A1%AC%E4%BB%B6/"/>
    
    <category term="继电器" scheme="https://zml3589110.github.io/tags/%E7%BB%A7%E7%94%B5%E5%99%A8/"/>
    
    <category term="三友继电器" scheme="https://zml3589110.github.io/tags/%E4%B8%89%E5%8F%8B%E7%BB%A7%E7%94%B5%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>HomeAssistant小米xiaomi_miot报错ipm不存在</title>
    <link href="https://zml3589110.github.io/posts/1140753793.html"/>
    <id>https://zml3589110.github.io/posts/1140753793.html</id>
    <published>2024-02-19T03:29:20.000Z</published>
    <updated>2024-02-20T01:52:46.064Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://github.com/al-one/hass-xiaomi-miot">小米xiaomi_miot集成仓库地址</a></strong></p><h1 id="集成简介"><a href="#集成简介" class="headerlink" title="集成简介"></a>集成简介</h1><p>MIoT-Spec 是小米IoT平台根据硬件产品的联网方式、产品功能的特点、用户使用场景的特征和用户对硬件产品使用体验的要求，设计的描述硬件产品功能定义的标准规范。</p><p>本插件利用了miot协议的规范，可将小米设备自动接入HomeAssistant，目前已支持大部分小米米家智能设备。且该插件支持HA后台界面集成，无需配置yaml即可轻松将小米设备接入HA。</p><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>昨天在研究玩客云静态问题后<strong>（注：后边是找到了解决方法，使用很多都失败，多次dchp绑定后发现每一次重启MAC地址都会改变，因此设置固定MAC即可，走了很多弯路）</strong></p><ul><li><strong>参考文章解决：</strong><a href="https://zhuanlan.zhihu.com/p/556064376">玩客云刷armbian系统后,不能固定mac地址和设置固定IP问题(已解决)</a></li></ul><p>突然发现这个功能无法加载，每次启动都报错！</p><p>昨天尝试了很多方法，重新卸载然后安装，还有恢复homeassistant到之前备份版本等等</p><p><strong>依然报以下错误：</strong></p><img src="/posts/1140753793/image-20240219114451468.png" class="" title="image-20240219114451468"><p>详情如下：</p><img src="/posts/1140753793/image-20240219114522794.png" class="" title="image-20240219114522794"><p>研究了好久，一直以为 xiaomi_miot 集成库问题，或者兼容性问题，所以方向是放在这两个上面，然而尝试很久依然如此。</p><p>有尝试过修改 xiaomi_miot 的py文件，也是一样不行，网上类似问题也没有</p><p>集成中小米集成一直显示如下：</p><img src="/posts/1140753793/image-20240219114740972.png" class="" title="image-20240219114740972"><p>也就是说集成一直没法使用，但之前明明一直正常，不可能因为做了静态IP影响到它吧？</p><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>方法其实很简单，就是把错误点处理即可。<br>根本原因还是新版本 python 3.12 之后将不提供imp模块，使用import imp 发现会报错。</p><p>当定位到问题之后就好解决了！</p><p>在上边报错信息中看出来，报错位置为：</p><img src="/posts/1140753793/image-20240219133945022.png" class="" title="image-20240219133945022"><p>就是这句话问题，看都最后他调用了 imp 模块，所以解决办法就是屏蔽掉 imp 调用即可</p><h2 id="步骤一：打开相应docker镜像并进入"><a href="#步骤一：打开相应docker镜像并进入" class="headerlink" title="步骤一：打开相应docker镜像并进入"></a>步骤一：打开相应docker镜像并进入</h2><p>查看 homeassistant 的 docker ID并进入到 docker 内部中</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><img src="/posts/1140753793/image-20240219134248021.png" class="" title="image-20240219134248021"><p>使用 <strong>docker exec -it <CONTAINER ID>  &#x2F;bin&#x2F;bash</strong> 命令进入</p><p>当前的镜像名称为：ghcr.io&#x2F;home-assistant&#x2F;raspberrypi3-homeassistant:2024.2.2<br>镜像ID为：3f8ac3040249<br>输入以下命令即可进入config中</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it 3f8ac3040249  /bin/bash</span><br></pre></td></tr></table></figure><h2 id="步骤二：打开报错文件-core-py-并屏蔽-imp-调用"><a href="#步骤二：打开报错文件-core-py-并屏蔽-imp-调用" class="headerlink" title="步骤二：打开报错文件 core.py 并屏蔽 imp 调用"></a>步骤二：打开报错文件 core.py 并屏蔽 imp 调用</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/lib/python3.12/site-packages/construct</span><br></pre></td></tr></table></figure><p><strong>修改之前备份一下，养成好习惯</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi core.py</span><br></pre></td></tr></table></figure><p>屏蔽如下：</p><img src="/posts/1140753793/image-20240219134747931.png" class="" title="image-20240219134747931"><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import struct, io, binascii, itertools, collections, pickle, sys, os, tempfile, hashlib, importlib <span class="comment">#, imp</span></span><br></pre></td></tr></table></figure><h2 id="步骤三：退出docker并重启镜像"><a href="#步骤三：退出docker并重启镜像" class="headerlink" title="步骤三：退出docker并重启镜像"></a>步骤三：退出docker并重启镜像</h2><p>退出：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><p>重启：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart 3f8ac3040249</span><br></pre></td></tr></table></figure><p>之后就能正常使用集成了</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>其实问题一早都显示在log里边，只是没仔细查看<br>网上查找的也没那么详细<br>加之对 python 的陌生才白耗费昨天一天<br>不过好在最后能发现问题</p><p>所以说，只有知道问题的根本才好解决问题，做什么事情方向对了的话后边就水到渠成，但方向不对努力就真的白搭了<br>这也算侧面学习 python 了。</p><hr><h1 id="相关链接（侵删）"><a href="#相关链接（侵删）" class="headerlink" title="相关链接（侵删）"></a>相关链接（侵删）</h1><ol><li><a href="https://www.cnblogs.com/bugbreak/p/13331211.html">解决Pycharm提示imp报错</a></li></ol><hr><center><font color=red>=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">xiaomi_miot 集成加载时总是报错，无法加载添加集成，一直报ipm模块找不到</summary>
    
    
    
    <category term="ubuntu" scheme="https://zml3589110.github.io/categories/ubuntu/"/>
    
    <category term="HomeAssistant" scheme="https://zml3589110.github.io/categories/HomeAssistant/"/>
    
    <category term="插件" scheme="https://zml3589110.github.io/categories/%E6%8F%92%E4%BB%B6/"/>
    
    <category term="xiaomi_miot" scheme="https://zml3589110.github.io/categories/xiaomi-miot/"/>
    
    <category term="ipm" scheme="https://zml3589110.github.io/categories/ipm/"/>
    
    <category term="pip" scheme="https://zml3589110.github.io/categories/pip/"/>
    
    
    <category term="智能家居" scheme="https://zml3589110.github.io/tags/%E6%99%BA%E8%83%BD%E5%AE%B6%E5%B1%85/"/>
    
    <category term="HomeAssistant" scheme="https://zml3589110.github.io/tags/HomeAssistant/"/>
    
    <category term="插件" scheme="https://zml3589110.github.io/tags/%E6%8F%92%E4%BB%B6/"/>
    
    <category term="python" scheme="https://zml3589110.github.io/tags/python/"/>
    
    <category term="小米" scheme="https://zml3589110.github.io/tags/%E5%B0%8F%E7%B1%B3/"/>
    
    <category term="xiaomi_miot" scheme="https://zml3589110.github.io/tags/xiaomi-miot/"/>
    
    <category term="imp" scheme="https://zml3589110.github.io/tags/imp/"/>
    
    <category term="错误处理" scheme="https://zml3589110.github.io/tags/%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/"/>
    
    <category term="pip" scheme="https://zml3589110.github.io/tags/pip/"/>
    
  </entry>
  
  <entry>
    <title>Hexo设置文章封面图片</title>
    <link href="https://zml3589110.github.io/posts/2829152218.html"/>
    <id>https://zml3589110.github.io/posts/2829152218.html</id>
    <published>2024-01-16T06:20:20.000Z</published>
    <updated>2024-01-16T06:23:47.161Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设置方法"><a href="#设置方法" class="headerlink" title="设置方法"></a>设置方法</h1><blockquote><p>选择在source文件夹下创建一个medias文件夹，然后里面放入图片，在cover选项下: &#x2F;img&#x2F;图片名字，就可以引入</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">layout: <span class="emphasis">_post</span></span><br><span class="line"><span class="emphasis">title: &#x27;git问题记录&#x27;</span></span><br><span class="line"><span class="emphasis">date: 2022-11-25 18:53:51</span></span><br><span class="line"><span class="emphasis">cover: /medias/git.jpg</span></span><br><span class="line"><span class="emphasis">tags:</span></span><br><span class="line"><span class="emphasis">- git</span></span><br></pre></td></tr></table></figure><p><strong>最终效果如下图：</strong></p><img src="/posts/2829152218/388d94ae0e3c47f18d2237dca7c41c03.png" class="" title="封面效果"><hr><h1 id="相关链接-侵删"><a href="#相关链接-侵删" class="headerlink" title="相关链接(侵删)"></a>相关链接(侵删)</h1><ol><li><a href="https://blog.csdn.net/qq_35536689/article/details/128046360">Hexo+Aurora 文章设置封面图片(banner)</a></li></ol><hr><center><font color=red>=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">Hexo设置文章自定义的封面图片</summary>
    
    
    
    <category term="HEXO" scheme="https://zml3589110.github.io/categories/HEXO/"/>
    
    
    <category term="命令" scheme="https://zml3589110.github.io/tags/%E5%91%BD%E4%BB%A4/"/>
    
    <category term="HEXO技术" scheme="https://zml3589110.github.io/tags/HEXO%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>如何在 ESP8266 上选用合适的引脚</title>
    <link href="https://zml3589110.github.io/posts/3689554134.html"/>
    <id>https://zml3589110.github.io/posts/3689554134.html</id>
    <published>2024-01-15T07:39:20.000Z</published>
    <updated>2024-01-15T08:31:13.935Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/u010262704/article/details/128653533">如何在 ESP8266 上选用合适的引脚</a></p><p><a href="https://blog.csdn.net/sjsnsnsnsi/article/details/134803572">ESP-01S模块测试</a></p><hr><h1 id="相关链接（侵删）"><a href="#相关链接（侵删）" class="headerlink" title="相关链接（侵删）"></a>相关链接（侵删）</h1><hr><center><font color=red>=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">如何在 ESP8266 上选用合适的引脚</summary>
    
    
    
    <category term="Linux" scheme="https://zml3589110.github.io/categories/Linux/"/>
    
    <category term="ESP8266" scheme="https://zml3589110.github.io/categories/ESP8266/"/>
    
    <category term="乐鑫" scheme="https://zml3589110.github.io/categories/%E4%B9%90%E9%91%AB/"/>
    
    
    <category term="Ubuntu" scheme="https://zml3589110.github.io/tags/Ubuntu/"/>
    
    <category term="ESP8266" scheme="https://zml3589110.github.io/tags/ESP8266/"/>
    
    <category term="物联网" scheme="https://zml3589110.github.io/tags/%E7%89%A9%E8%81%94%E7%BD%91/"/>
    
    <category term="乐鑫" scheme="https://zml3589110.github.io/tags/%E4%B9%90%E9%91%AB/"/>
    
    <category term="选型" scheme="https://zml3589110.github.io/tags/%E9%80%89%E5%9E%8B/"/>
    
    <category term="引脚" scheme="https://zml3589110.github.io/tags/%E5%BC%95%E8%84%9A/"/>
    
  </entry>
  
  <entry>
    <title>ESP01S使用homekit上电IO抖动无法直驱三极管以及待机功耗过高解决方法</title>
    <link href="https://zml3589110.github.io/posts/1627973085.html"/>
    <id>https://zml3589110.github.io/posts/1627973085.html</id>
    <published>2024-01-15T06:51:20.000Z</published>
    <updated>2024-01-16T06:00:56.888Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ESP01S上电IO抖动问题处理"><a href="#ESP01S上电IO抖动问题处理" class="headerlink" title="ESP01S上电IO抖动问题处理"></a>ESP01S上电IO抖动问题处理</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p><strong>ESP-01(S) 引脚定义</strong></p><img src="/posts/1627973085/7da37912a4266ce56f4ebd16369cf31f.png" class="" title="ESP-01S引脚"><p>从引脚图中看出，我们能使用的GPIO为GPIO0和GPIO2，尝试过直接用这两个脚位串电阻驱动三极管进而控制继电器，但不知为啥芯片总启动不了了，GPIO0连接FLASH还说得过去，但GPIO2也一样就没法解了（怀疑是IO口驱动能力问题导致ESP01S死掉！），所以硬件电路变成了常用的光耦模式。</p><p><strong>参考光耦电路</strong></p><img src="/posts/1627973085/d74a2fb24a454cd89146aaf207a6b8f8.png" class="" title="继电器插座"><p><strong>电路原理</strong></p><img src="/posts/1627973085/image-20240115150328827.png" class="" title="光耦继电器原理图"><p>修改esp01s继电器控制脚位为GPIO0或GPIO2后即可正常控制！</p><p>开始使用的是 <strong>fullhaaboot.bin</strong> 方式接入，参考<a href="https://www.ounoe.com/archives/149">esp01s接入HomeKit，用Siri控制你的灯</a><br>这个方式虽然也成功，但是配对过程中需要连接github，因为没有魔法所以很慢，还经常失败，所以就给放弃了。</p><p>后来参考这位大佬文章<a href="https://blog.csdn.net/TWTF1998/article/details/86419559">ESP8266控制继电器（支持HOMEKIT）</a><br>连接至HomeKit，正常添加正常控制。</p><p>到这里控制什么都正常了，但有个问题，就是上电过程中有IO抖动，也就是高低电平翻转，这就导致一上电就听到继电器滴答几次开合，有研究过源码程序，屏蔽掉相关脚位还是一样，哪怕在初始化前退出也如此，猜测可能是硬件翻转或者在很前端动作这两个IO口，因此最后还是放弃折腾这个思路！</p><p>最终选择搭GPIO4引脚来使用，就很稳了！</p><h2 id="上电IO抖动处理"><a href="#上电IO抖动处理" class="headerlink" title="上电IO抖动处理"></a>上电IO抖动处理</h2><blockquote><p><strong>网上大家常用解决方案</strong></p></blockquote><ul><li><p>方案一：查找问题原因，重新编译固件。（这个自己尝试过，失败）</p></li><li><p>方案二：在GPIO口直接接电解电容来消除上电抖动。（感觉麻烦就没尝试）</p></li><li><p>方案三：使用硬件实现上电时的消抖，即在上电时的500ms内保证继电器的初级一直是开路状态，此时即使GPIO口抖动，继电器也不会动作。另外四个GPIO口公用一套消抖电路，大大减少了电路元件的数量。（也感觉麻烦也没做）</p></li></ul><blockquote><p><strong>自己的方法</strong></p></blockquote><p>既然这连个脚不行就换一个，说做就做，因此在网上找到ESP8266EX脚位图，发现最靠近的GPIO4可以尝试。<br>所以手动接线出来控制就行，还发现这个脚位能直接控制三极管进而控制继电器，意外之喜。</p><p><a href="https://docs.gizwits.com/en-us/module_source/esp8266/esp8266_datasheet.html">ESP8266EX Datasheet</a></p><p><strong>引脚定义 Pin Definitions Figure 2-1 shows the pin layout for 32-pin QFN package.</strong></p><img src="/posts/1627973085/12.png" class="" title="ESP8266EX Datasheet"><p>从图中可以看出来是第16脚，引线出来就行。</p><p><strong>脚位定义说明</strong></p><img src="/posts/1627973085/6a13b698e3d04d2cbd0d70b549de2740.png" class="" title="gpio管脚定义"><p><strong>引线连接方式</strong></p><img src="/posts/1627973085/image-20240115154633590.png" class="" title="image-20240115154633590"><p><strong>至此，上电IO抖动问题就算完美解决了！</strong></p><h1 id="GPIO0跟GPIO2无法直驱三极管问题"><a href="#GPIO0跟GPIO2无法直驱三极管问题" class="headerlink" title="GPIO0跟GPIO2无法直驱三极管问题"></a>GPIO0跟GPIO2无法直驱三极管问题</h1><p>找不到根本原因，但更换了GPIO4以后就自己解决了。<br>可能是这两个脚位复用或者驱动电流不够的原因吧！</p><h1 id="待机功耗过高"><a href="#待机功耗过高" class="headerlink" title="待机功耗过高"></a>待机功耗过高</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>刚开始是自己搭的电路，在关闭继电器时待机功耗为 1.37W，吸合继电器时待机功耗为 1.86W。这个待机功耗还是挺高，毕竟都接近2W功耗，对于24H通电的机器来说一年功耗还挺高。</p><p>后边拿手头参考替换，发现使用BP2525电源芯片方式比较合适。</p><table><thead><tr><th align="center">型号</th><th align="center">空载</th><th align="center">关继电器</th><th align="center">开继电器</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">天猫蓝牙通断器</td><td align="center">0.2W</td><td align="center">0.244W</td><td align="center">0.509W</td><td align="center"></td></tr><tr><td align="center">小米WIFI插座</td><td align="center">-</td><td align="center">0.88W</td><td align="center">1.36W</td><td align="center"></td></tr><tr><td align="center">国际电工433遥控</td><td align="center">-</td><td align="center">0.65W</td><td align="center">0.68W</td><td align="center"></td></tr><tr><td align="center">易微联WIFI通断器</td><td align="center">-</td><td align="center">0.4W</td><td align="center">1.1W</td><td align="center"></td></tr><tr><td align="center">小米电源插头</td><td align="center">-</td><td align="center">0.825W</td><td align="center">-</td><td align="center"></td></tr><tr><td align="center">个人旧版本ESP01S</td><td align="center">-</td><td align="center">1.37W</td><td align="center">1.86W</td><td align="center"></td></tr><tr><td align="center">整改后</td><td align="center">-</td><td align="center">0.58W</td><td align="center">1.26W</td><td align="center"></td></tr></tbody></table><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>通过这数据对比，发现基本都在1W以下，最终更改还没打板回来，手动搭电路测试。效果还算满意。</p><img src="/posts/1627973085/image-20240115160831237.png" class="" title="image-20240115160831237"><img src="/posts/1627973085/image-20240115160838768.png" class="" title="image-20240115160838768"><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>到这里算是解决了ESP01S问题！结果也还算满意。这样的初衷是连接到HomeKit或者homeassistant里面。<br>到这里算是都解决。动手能力还行的小伙伴也可以试试，其实也就飞线一下。</p><p>软件的话就需要搭建环境，不过网上已经有很多教程，根据发现的问题慢慢处理就行。</p><p><strong>实在不想动手可以有偿让人帮弄改一下。</strong></p><img src="/posts/1627973085/image-20240115161453199.png" class="" title="image-20240115161453199"><hr><h1 id="相关链接（侵删）"><a href="#相关链接（侵删）" class="headerlink" title="相关链接（侵删）"></a>相关链接（侵删）</h1><ol><li><a href="https://blog.csdn.net/sxyandapp/article/details/78330878">Esp8266上电时IO抖动解决方案</a></li><li><a href="https://post.smzdm.com/p/a7d3o2wd/">划水怪的第一个陪玩项目：如何用ESP01S打造一个智能插座</a></li><li><a href="https://cloud.tencent.com/developer/article/2133573">ESP8266 刷esp-homekit-devices 固件原生接入HomeKit实现物联网智能家居</a></li><li><a href="https://blog.csdn.net/wtzszzx/article/details/120273774">ESP8266学习——GPIO Output</a></li></ol><hr><center><font color=red>=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">ESP01S接入homekit，实现苹果家庭控制</summary>
    
    
    
    <category term="Linux" scheme="https://zml3589110.github.io/categories/Linux/"/>
    
    <category term="ESP8266" scheme="https://zml3589110.github.io/categories/ESP8266/"/>
    
    <category term="乐鑫" scheme="https://zml3589110.github.io/categories/%E4%B9%90%E9%91%AB/"/>
    
    <category term="homekit" scheme="https://zml3589110.github.io/categories/homekit/"/>
    
    
    <category term="Ubuntu" scheme="https://zml3589110.github.io/tags/Ubuntu/"/>
    
    <category term="ESP8266" scheme="https://zml3589110.github.io/tags/ESP8266/"/>
    
    <category term="乐鑫" scheme="https://zml3589110.github.io/tags/%E4%B9%90%E9%91%AB/"/>
    
    <category term="ESP01S" scheme="https://zml3589110.github.io/tags/ESP01S/"/>
    
    <category term="homekit" scheme="https://zml3589110.github.io/tags/homekit/"/>
    
    <category term="上电IO抖动" scheme="https://zml3589110.github.io/tags/%E4%B8%8A%E7%94%B5IO%E6%8A%96%E5%8A%A8/"/>
    
    <category term="直驱三极管" scheme="https://zml3589110.github.io/tags/%E7%9B%B4%E9%A9%B1%E4%B8%89%E6%9E%81%E7%AE%A1/"/>
    
    <category term="待机功耗" scheme="https://zml3589110.github.io/tags/%E5%BE%85%E6%9C%BA%E5%8A%9F%E8%80%97/"/>
    
    <category term="光耦" scheme="https://zml3589110.github.io/tags/%E5%85%89%E8%80%A6/"/>
    
  </entry>
  
  <entry>
    <title>HomeAssistant天气插件之和风天气</title>
    <link href="https://zml3589110.github.io/posts/593985454.html"/>
    <id>https://zml3589110.github.io/posts/593985454.html</id>
    <published>2024-01-10T07:45:20.000Z</published>
    <updated>2024-01-10T08:27:39.227Z</updated>
    
    <content type="html"><![CDATA[<h1 id="插件主要功能"><a href="#插件主要功能" class="headerlink" title="插件主要功能"></a>插件主要功能</h1><p>当前天气、空气质量、生活指数建议</p><p>灾害天气预警</p><p>小时级天气预报、七日天气预报</p><h1 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h1><img src="/posts/593985454/image-20240110154841461.png" class="" title="天气预警、天气预报总览"><img src="/posts/593985454/image-20240110154917608.png" class="" title="image-20240110154917608"><img src="/posts/593985454/image-20240110155255963.png" class="" title="image-20240110155255963"><img src="/posts/593985454/image-20240110155311557.png" class="" title="image-20240110155311557"><img src="/posts/593985454/image-20240110155340605.png" class="" title="image-20240110155340605"><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我使用的插件最早引用自瀚思彼岸论坛Golden_Soap大佬的插件(<a href="https://bbs.hassbian.com/thread-3971-1-1.html">https://bbs.hassbian.com/thread-3971-1-1.html</a>),<br>但该插件一直没有更新过配置，导致我的环境一直无法运行，自己肝的原因主要是懒得改之前的参数配置，换插件全得改一遍，有的数据还没了，又正好借着这个机会再学习一边插件，所以就有了这个插件，废话不说上地址</p><h1 id="仓库地址"><a href="#仓库地址" class="headerlink" title="仓库地址"></a>仓库地址</h1><p><a href="https://github.com/c1pher-cn/heweather">https://github.com/c1pher-cn/heweather</a></p><h1 id="插件说明"><a href="#插件说明" class="headerlink" title="插件说明"></a>插件说明</h1><ol><li><p>使用和风官方apiv7版本</p></li><li><p>需要使用开发者账号里的免费api，<strong>普通用户请务必升级到开发者账号</strong>（免费，但要提交身份证审核，api权限会比普通用户高一些）<a href="https://console.qweather.com/#/console">https://console.qweather.com/#/console</a></p></li><li><p>appkey申请需要先<a href="https://console.qweather.com/#/apps">创建应用</a>,后选添加数据key，选wabapi即可</p></li><li><p>配置里的Location_ID 如何获取？详见<a href="https://github.com/qwd/LocationList/blob/master/China-City-List-latest.csv">https://github.com/qwd/LocationList/blob/master/China-City-List-latest.csv</a></p></li></ol><h1 id="配置方法"><a href="#配置方法" class="headerlink" title="配置方法"></a>配置方法</h1><ol start="0"><li>下载相关文件</li></ol><p>先按github上的文件目录格式把对应文件拷贝到HomeAssistant的custom_components目录，</p><p>想用hacs商店的同学需要晚一点（HACS商店的配置预计会在12月底左右上线，9月就提交了，审批进度贼慢，在hacs商店里搜索haweather后安装后进行yaml配置编写）</p><p>正确下载文件后的文件目录格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">custom_components/</span><br><span class="line"></span><br><span class="line">--heweather</span><br><span class="line"></span><br><span class="line">--manifest.json     </span><br><span class="line">    </span><br><span class="line">--sensor.py         </span><br><span class="line">    </span><br><span class="line">--weather.py</span><br></pre></td></tr></table></figure><p><strong>注意，无论使用哪种安装方式，本插件都必须进行下面的yaml配置后才能看到具体信息！！！</strong></p><ol><li>weather下的heweather(七日天气预报)</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">weather:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">platform:</span> <span class="string">heweather</span></span><br><span class="line">    <span class="attr">location:</span> <span class="number">101210106</span>    <span class="comment"># 填写你所在区域代码Location_ID,https://github.com/qwd/LocationList/blob/master/China-City-List-latest.csv</span></span><br><span class="line">    <span class="attr">key:</span> <span class="string">ABCDE</span>             <span class="comment"># api平台申请的key</span></span><br></pre></td></tr></table></figure><ol start="2"><li>sensor下的heweather（天气情况、空气质量、自然灾害预警）<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sensor:</span></span><br><span class="line">　<span class="bullet">-</span> <span class="attr">platform:</span> <span class="string">heweather</span></span><br><span class="line">　　<span class="attr">location:</span> <span class="number">101210106</span>     <span class="comment"># 填写你所在区域代码Location_ID,https://github.com/qwd/LocationList/blob/master/China-City-List-latest.csv</span></span><br><span class="line">　　<span class="attr">key:</span> <span class="string">ABCDE</span>              <span class="comment"># api平台申请的key</span></span><br><span class="line">        　<span class="attr">disasterlevel:</span> <span class="number">3</span></span><br><span class="line">　　<span class="attr">disastermsg:</span> <span class="string">allmsg</span></span><br></pre></td></tr></table></figure>disasterlevel的数字表示关注的自然灾害等级，配置3表示关注 &gt;&#x3D;3级的灾害<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="string">Standard</span></span><br><span class="line"><span class="number">2</span> <span class="string">Minor</span></span><br><span class="line"><span class="number">3</span> <span class="string">Moderate</span></span><br><span class="line"><span class="number">4</span> <span class="string">Major</span></span><br><span class="line"><span class="number">5</span> <span class="string">Severe</span></span><br><span class="line"><span class="number">6</span> <span class="string">Extreme</span></span><br></pre></td></tr></table></figure><strong>disastermsg表示灾害预警是否显示灾害的明细信息</strong></li></ol><p><strong>title  只显示标题</strong></p><p><strong>allmsg 显示标题+明细信息</strong></p><ol start="3"><li>相关传感器名称：</li></ol><p>已有中文翻译配出来就能看到，文档里我就不对应写了，另外如果配置多个heweather或者修改过key和location信息的话，找不到新实体时可以注意一下，新实体id后面会新增一个_2 _3</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">天气预报，７天，２４小时级别都在这里面</span></span><br><span class="line"></span><br><span class="line"><span class="string">weather.he_feng_tian_qi</span></span><br><span class="line"></span><br><span class="line"><span class="string">生活指数</span></span><br><span class="line"></span><br><span class="line"><span class="string">sensor.shu_gua_du_zhi_shu</span></span><br><span class="line"></span><br><span class="line"><span class="string">sensor.kong_qi_wu_ran_kuo_san_tiao_jian_zhi_shu</span></span><br><span class="line"></span><br><span class="line"><span class="string">sensor.lu_xing_zhi_shu</span></span><br><span class="line"></span><br><span class="line"><span class="string">sensor.chuan_yi_zhi_shu</span></span><br><span class="line"></span><br><span class="line"><span class="string">sensor.fang_shai_zhi_shu</span></span><br><span class="line"></span><br><span class="line"><span class="string">sensor.jiao_tong_zhi_shu</span></span><br><span class="line"></span><br><span class="line"><span class="string">sensor.guo_min_zhi_shu</span></span><br><span class="line"></span><br><span class="line"><span class="string">sensor.gan_mou_zhi_shu</span></span><br><span class="line"></span><br><span class="line"><span class="string">sensor.xi_che_zhi_shu</span></span><br><span class="line"></span><br><span class="line"><span class="string">sensor.zi_wai_xian_zhi_shu</span></span><br><span class="line"></span><br><span class="line"><span class="string">sensor.tai_yang_jing_zhi_shu</span></span><br><span class="line"></span><br><span class="line"><span class="string">空气信息</span></span><br><span class="line"></span><br><span class="line"><span class="string">sensor.heweather_level</span></span><br><span class="line"></span><br><span class="line"><span class="string">sensor.heweather_category</span></span><br><span class="line"></span><br><span class="line"><span class="string">sensor.heweather_qlty</span></span><br><span class="line"></span><br><span class="line"><span class="string">sensor.heweather_primary</span></span><br><span class="line"></span><br><span class="line"><span class="string">sensor.heweather_pm25</span></span><br><span class="line"></span><br><span class="line"><span class="string">sensor.heweather_pm10</span></span><br><span class="line"></span><br><span class="line"><span class="string">sensor.heweather_no2</span></span><br><span class="line"></span><br><span class="line"><span class="string">sensor.heweather_so2</span></span><br><span class="line"></span><br><span class="line"><span class="string">sensor.heweather_o3</span></span><br><span class="line"></span><br><span class="line"><span class="string">sensor.heweather_dew</span></span><br><span class="line"></span><br><span class="line"><span class="string">sensor.heweather_cloud</span></span><br><span class="line"></span><br><span class="line"><span class="string">sensor.heweather_precip</span></span><br><span class="line"></span><br><span class="line"><span class="string">sensor.heweather_pressure</span></span><br><span class="line"></span><br><span class="line"><span class="string">sensor.heweather_vis</span></span><br></pre></td></tr></table></figure><ol start="4"><li>关于两个预警信息</li></ol><p>灾害预警有具体有配置实体：sensor.heweather_disaster_warn，为了方便做相关自动化，传感器状态为on时，表示有相关灾害，灾害信息存在States里</p><img src="/posts/593985454/image-20240110160125898.png" class="" title="image-20240110160125898"><p>近一小时天气预警：</p><p>需要自己在template里配置一个sensor模板，可以参考我的配置（读取小时级天气预报，然后判断是否有雨雪天气，有的话sensor的状态会被置为on，同时sensor的states的值即为具体的天气信息和降水概率）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">template:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="attr">trigger:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="attr">platform:</span> <span class="string">time_pattern</span></span><br><span class="line">       <span class="attr">hours:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">   <span class="attr">action:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="attr">service:</span> <span class="string">weather.get_forecast</span></span><br><span class="line">       <span class="attr">target:</span></span><br><span class="line">         <span class="attr">entity_id:</span> <span class="string">weather.he_feng_tian_qi</span></span><br><span class="line">       <span class="attr">data:</span></span><br><span class="line">         <span class="attr">type:</span> <span class="string">hourly</span></span><br><span class="line">       <span class="attr">response_variable:</span> <span class="string">forecast</span></span><br><span class="line">   <span class="attr">sensor:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">heweather_rain_warn</span></span><br><span class="line">       <span class="attr">unique_id:</span> <span class="string">heweather_rain_warn</span></span><br><span class="line">       <span class="attr">state:</span> <span class="string">&gt;</span></span><br><span class="line">          &#123;<span class="string">%</span> <span class="string">if</span> <span class="string">forecast.forecast</span>[<span class="number">0</span>]<span class="string">.condition</span> <span class="string">in</span> <span class="string">(&#x27;sunny&#x27;</span>,<span class="string">&#x27;cloudy&#x27;</span>,<span class="string">&#x27;partlyclou                                                          dy&#x27;</span>,<span class="string">&#x27;windy&#x27;</span><span class="string">)</span> <span class="string">%</span>&#125;</span><br><span class="line">          <span class="string">off</span></span><br><span class="line">          &#123;<span class="string">%</span> <span class="string">else</span> <span class="string">%</span>&#125;</span><br><span class="line">          <span class="string">on</span></span><br><span class="line">          &#123;<span class="string">%</span> <span class="string">endif</span> <span class="string">%</span>&#125;</span><br><span class="line">       <span class="attr">attributes:</span></span><br><span class="line">         <span class="attr">states:</span> <span class="string">&gt;</span></span><br><span class="line">                  &#123;<span class="string">%</span> <span class="string">if</span> <span class="string">forecast.forecast</span>[<span class="number">0</span>]<span class="string">.condition</span> <span class="string">in</span> <span class="string">(&#x27;sunny&#x27;</span>,<span class="string">&#x27;cloudy&#x27;</span>,<span class="string">&#x27;pa                                                          rtlycloudy&#x27;</span>,<span class="string">&#x27;windy&#x27;</span><span class="string">)</span> <span class="string">%</span>&#125;</span><br><span class="line">                   <span class="string">未来一小时，天气&#123;&#123;forecast.forecast[0].text&#125;&#125;，没有降雨</span></span><br><span class="line">                  &#123;<span class="string">%</span> <span class="string">else</span> <span class="string">%</span>&#125;</span><br><span class="line">                   <span class="string">接下来一小时会有&#123;&#123;forecast.forecast[0].text&#125;&#125;，降水概率为</span> &#123;&#123;                                                           <span class="string">forecast.forecast</span>[<span class="number">0</span>]<span class="string">.precipitation_probability</span>&#125;&#125;<span class="string">%</span></span><br><span class="line">                  &#123;<span class="string">%</span> <span class="string">endif</span> <span class="string">%</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/posts/593985454/image-20240110160208167.png" class="" title="image-20240110160208167"><h1 id="自动化能做的"><a href="#自动化能做的" class="headerlink" title="自动化能做的"></a>自动化能做的</h1><p>每日起床第一次出卧室的天气tts播报，或类似的日常播报需求</p><p>根据自然灾害预警的信息发信息通知</p><p>根据小时天气预警的内容进行信息通告 </p><p>》》》<a href="https://www.bilibili.com/read/cv18078640/">和风天气自动化分享</a><br><strong>就是下文内容</strong></p><h1 id="HomeAssistant-和风天气插件的自动化分享"><a href="#HomeAssistant-和风天气插件的自动化分享" class="headerlink" title="HomeAssistant 和风天气插件的自动化分享"></a>HomeAssistant 和风天气插件的自动化分享</h1><h2 id="前置要求"><a href="#前置要求" class="headerlink" title="前置要求"></a>前置要求</h2><ol><li><p>HomeAssistant （这个都没有的话您可以关网页了）</p></li><li><p>和风天气插件<br>github地址：<a href="https://github.com/c1pher-cn/heweather">https://github.com/c1pher-cn/heweather</a><br>之前的专栏介绍：<a href="https://www.bilibili.com/read/cv17792717">https://www.bilibili.com/read/cv17792717</a><br>（优先看github，有些bug修了可能来不及更新文章，另外其他插件也是大同小异，可供参考）</p></li><li><p>tts<br>我这里用的我家的homepodmini，edge_tts 每家的设备不一样，选择适合你的</p></li><li><p>消息推送<br>是我这里使用的是iosApp内置的推送功能，推送给我和我老婆两个人的手机</p></li></ol><h2 id="我做了哪些天气自动化："><a href="#我做了哪些天气自动化：" class="headerlink" title="我做了哪些天气自动化："></a>我做了哪些天气自动化：</h2><ol><li>雨雪天气报，tts播报，手机推送</li><li>自然灾害预警，tts播报，手机推送</li><li>每天起床后的第一次tts天气播报</li></ol><h2 id="天气、灾害预警"><a href="#天气、灾害预警" class="headerlink" title="天气、灾害预警"></a>天气、灾害预警</h2><p>预警中主要使用和风天气插件的这个两个实体<br>sensor.heweather_rain_warn      （模板配置）<br>sensor.heweather_disaster_warn（插件自带）<br>在2023年11月更新heweather之后，天气预警需要手工在template里配置，配置方式详见<a href="https://www.bilibili.com/read/cv17792717">https://www.bilibili.com/read/cv17792717</a></p><p>新的传感器在写代码的时候就考虑了自动化的实现，所以我们只判断传感器状态是否为on即可，on即说明对应传感器有异常天气，然后在tts或者通知里将属性中的status打出来即可，已经提前设置好。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">alias:</span> <span class="string">一小时天气预警</span></span><br><span class="line"><span class="attr">trigger:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">platform:</span> <span class="string">state</span></span><br><span class="line">    <span class="attr">entity_id:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">sensor.heweather_rain_warn</span></span><br><span class="line">    <span class="attr">from:</span> <span class="string">&quot;off&quot;</span></span><br><span class="line">    <span class="attr">to:</span> <span class="string">&quot;on&quot;</span></span><br><span class="line"><span class="attr">action:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">service:</span> <span class="string">notify.mobile_app_iphone_xr_2</span></span><br><span class="line">    <span class="attr">data:</span></span><br><span class="line">      <span class="attr">title:</span> <span class="string">天气预警</span></span><br><span class="line">      <span class="attr">message:</span> <span class="string">&quot;注意注意! <span class="template-variable">&#123;&#123;state_attr(&#x27;sensor.heweather_rain_warn&#x27;, &#x27;states&#x27;)&#125;&#125;</span> &quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">service:</span> <span class="string">tts.edge_tts_say</span></span><br><span class="line">    <span class="attr">data_template:</span></span><br><span class="line">      <span class="attr">entity_id:</span> <span class="string">media_player.ke_ting</span></span><br><span class="line">      <span class="attr">message:</span> <span class="string">&quot;注意注意! <span class="template-variable">&#123;&#123;state_attr(&#x27;sensor.heweather_rain_warn&#x27;, &#x27;states&#x27;)&#125;&#125;</span> &quot;</span></span><br><span class="line"><span class="attr">initial_state:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">alias:</span> <span class="string">自然灾害预警</span></span><br><span class="line"><span class="attr">trigger:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">platform:</span> <span class="string">state</span></span><br><span class="line">    <span class="attr">entity_id:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">sensor.heweather_disaster_warn</span></span><br><span class="line">    <span class="attr">from:</span> <span class="string">&quot;off&quot;</span></span><br><span class="line">    <span class="attr">to:</span> <span class="string">&quot;on&quot;</span></span><br><span class="line"><span class="attr">action:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">service:</span> <span class="string">tts.edge_tts_say</span></span><br><span class="line">    <span class="attr">data_template:</span></span><br><span class="line">      <span class="attr">entity_id:</span> <span class="string">media_player.ke_ting</span></span><br><span class="line">      <span class="attr">message:</span> <span class="string">&quot;注意注意!!! <span class="template-variable">&#123;&#123;state_attr(&#x27;sensor.heweather_disaster_warn&#x27;,&#x27;states&#x27;) &#125;&#125;</span> &quot;</span></span><br><span class="line"><span class="attr">initial_state:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="起床天气播报"><a href="#起床天气播报" class="headerlink" title="起床天气播报"></a>起床天气播报</h2><p>天气播报这里我做了一个脚本来实现的，因为播报这个动作是很多情况都可能需要的，比如起床需要播报，想出家门或者家里其他人也想触发的情况，避免重复，我写了一个播报脚本，然后需要触发播报的时候只要触发脚本即可。</p><ol><li>起床触发-&gt;天气播报</li><li>按钮触发-&gt;天气播报</li></ol><p><strong>天气播报脚本</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">alias:</span> <span class="string">客厅广播</span></span><br><span class="line"><span class="attr">sequence:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">service:</span> <span class="string">tts.edge_tts_say</span></span><br><span class="line">    <span class="attr">data_template:</span></span><br><span class="line">      <span class="attr">entity_id:</span> <span class="string">media_player.ke_ting</span></span><br><span class="line">      <span class="attr">message:</span> <span class="string">&gt;</span></span><br><span class="line">        &#123;<span class="string">%</span> <span class="string">set</span> <span class="string">timenow</span> <span class="string">=</span> <span class="string">now().time().strftime(&quot;%H&quot;)</span> <span class="string">|</span> <span class="string">int</span> <span class="string">%</span>&#125;</span><br><span class="line">          &#123;<span class="string">%</span> <span class="string">if</span> <span class="string">timenow</span> <span class="string">&gt;</span> <span class="number">8</span> <span class="string">and</span> <span class="string">timenow</span> <span class="string">&lt;</span> <span class="number">12</span> <span class="string">%</span>&#125;</span><br><span class="line">          <span class="string">主人，早上好</span></span><br><span class="line">          &#123;<span class="string">%</span> <span class="string">elif</span> <span class="string">timenow</span> <span class="string">&gt;=</span> <span class="number">12</span> <span class="string">and</span> <span class="string">timenow</span> <span class="string">&lt;</span> <span class="number">14</span> <span class="string">%</span>&#125;</span><br><span class="line">          <span class="string">主人，中午好</span></span><br><span class="line">          &#123;<span class="string">%</span> <span class="string">elif</span> <span class="string">timenow</span> <span class="string">&gt;=</span> <span class="number">14</span> <span class="string">and</span> <span class="string">timenow</span> <span class="string">&lt;</span> <span class="number">18</span> <span class="string">%</span>&#125;</span><br><span class="line">          <span class="string">主人，下午好</span></span><br><span class="line">          &#123;<span class="string">%</span> <span class="string">elif</span> <span class="string">timenow</span> <span class="string">&gt;=</span> <span class="number">18</span> <span class="string">and</span> <span class="string">timenow</span> <span class="string">&lt;</span> <span class="number">23</span> <span class="string">%</span>&#125;</span><br><span class="line">          <span class="string">主人，晚上好</span></span><br><span class="line">          &#123;<span class="string">%</span> <span class="string">else</span> <span class="string">%</span>&#125;</span><br><span class="line">          <span class="string">你好。</span></span><br><span class="line">          &#123;<span class="string">%</span> <span class="string">endif</span> <span class="string">%</span>&#125;</span><br><span class="line">          <span class="string">现在天气&#123;&#123;states(&#x27;sensor.heweather_text&#x27;)&#125;&#125;，</span></span><br><span class="line">          <span class="string">空气质量等级为&#123;&#123;states(&#x27;sensor.heweather_category&#x27;)&#125;&#125;</span></span><br><span class="line">          <span class="string">主要污染物为&#123;&#123;states(&#x27;sensor.heweather_primary&#x27;)&#125;&#125;，</span></span><br><span class="line">          <span class="string">室外湿度&#123;&#123;states(&#x27;sensor.heweather_humidity&#x27;)&#125;&#125;%，</span></span><br><span class="line">          <span class="string">室外温度&#123;&#123;states(&#x27;sensor.heweather_temperature&#x27;)&#125;&#125;℃，</span></span><br><span class="line">            <span class="string">室外体感温度&#123;&#123;states(&#x27;sensor.heweather_feelslike&#x27;)&#125;&#125;℃，</span></span><br><span class="line">            <span class="string">室内湿度是&#123;&#123;states(&#x27;sensor.4c65a8dbf864_humidity&#x27;)&#125;&#125;%,</span></span><br><span class="line">            <span class="string">室内温度是&#123;&#123;states(&#x27;sensor.qdhkl_ac_0106_temperature&#x27;)&#125;&#125;℃，</span></span><br><span class="line">            &#123;<span class="string">%</span> <span class="string">if</span> <span class="string">states(&#x27;sensor.heweather_precip&#x27;)</span> <span class="string">|</span> <span class="string">float</span> <span class="string">&gt;</span> <span class="number">0</span> <span class="string">%</span>&#125;</span><br><span class="line">              <span class="string">所在地区的降雨量为&#123;&#123;states(&#x27;sensor.heweather_precip&#x27;)&#125;&#125;毫米</span></span><br><span class="line">            &#123;<span class="string">%</span> <span class="string">else</span> <span class="string">%</span>&#125;</span><br><span class="line">            &#123;<span class="string">%</span> <span class="string">endif</span> <span class="string">%</span>&#125;</span><br><span class="line">             &#123;&#123;<span class="string">state_attr(&#x27;sensor.heweather_rain_warn&#x27;</span>, <span class="string">&#x27;states&#x27;</span><span class="string">)</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="attr">mode:</span> <span class="string">single</span></span><br></pre></td></tr></table></figure><p>如何定义起床？这里我是在客厅装了个人体传感器，把每天早晨第一次有人经过时定义为起床，在这个时候播报，后面再有人经过不再进行播报。所以我这里需要一个计数器，每天定时清零，然后早晨有人经过从0到1时触发起床自动化，启动播报脚本。</p><p> 计数器：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">counter:</span></span><br><span class="line">  <span class="attr">livingroom_counter:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">humancnt</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">mdi:account-plus</span></span><br><span class="line"><span class="string">计数器清零的自动化，这里不要问我为什么配置3点清零，因为我们家都是夜行动物</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">alias:</span> <span class="string">计数器清零</span></span><br><span class="line">  <span class="attr">initial_state:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">trigger:</span></span><br><span class="line">    <span class="attr">platform:</span> <span class="string">time</span></span><br><span class="line">    <span class="attr">at:</span> <span class="number">03</span><span class="string">:00:00</span></span><br><span class="line">  <span class="attr">action:</span></span><br><span class="line">    <span class="attr">service:</span> <span class="string">counter.reset</span></span><br><span class="line">    <span class="attr">target:</span></span><br><span class="line">      <span class="attr">entity_id:</span> <span class="string">counter.livingroom_counter</span></span><br></pre></td></tr></table></figure><p>计数器增加的自动化，人体传感器从off到on计数器就+1</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">alias:</span> <span class="string">有人经过计数器增加</span></span><br><span class="line">  <span class="attr">initial_state:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">trigger:</span></span><br><span class="line">    <span class="attr">platform:</span> <span class="string">state</span></span><br><span class="line">    <span class="attr">entity_id:</span> <span class="string">binary_sensor.motion_sensor_158d000121c2c4</span></span><br><span class="line">    <span class="attr">from:</span> <span class="string">&#x27;off&#x27;</span></span><br><span class="line">    <span class="attr">to:</span> <span class="string">&#x27;on&#x27;</span></span><br><span class="line">  <span class="attr">action:</span></span><br><span class="line">    <span class="attr">service:</span> <span class="string">counter.increment</span></span><br><span class="line">    <span class="attr">target:</span></span><br><span class="line">      <span class="attr">entity_id:</span> <span class="string">counter.livingroom_counter</span></span><br></pre></td></tr></table></figure><p>上面说清楚了，起床就自动化就很简单了，计数器从0到1的时候就是有人起床啦，触发播报脚本即可</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">alias:</span> <span class="string">起床播报</span></span><br><span class="line">  <span class="attr">initial_state:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">trigger:</span></span><br><span class="line">    <span class="attr">platform:</span> <span class="string">state</span></span><br><span class="line">    <span class="attr">entity_id:</span> <span class="string">counter.livingroom_counter</span></span><br><span class="line">    <span class="attr">to:</span> <span class="string">&#x27;1&#x27;</span></span><br><span class="line">  <span class="attr">action:</span></span><br><span class="line">    <span class="attr">service:</span> <span class="string">script.toggle</span></span><br><span class="line">    <span class="attr">target:</span></span><br><span class="line">      <span class="attr">entity_id:</span> <span class="string">script.send_getup_broadcast</span></span><br></pre></td></tr></table></figure><hr><h1 id="相关链接（侵删）"><a href="#相关链接（侵删）" class="headerlink" title="相关链接（侵删）"></a>相关链接（侵删）</h1><ol><li><p><a href="https://www.bilibili.com/read/cv17792717/">和风天气（heweather） HomeAssistant插件使用说明（２０２３年１１月重大更新）</a></p></li><li><p><a href="https://www.bilibili.com/read/cv18078640/">HomeAssistant 和风天气插件的自动化分享</a></p></li></ol><hr><center><font color=red>=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">HomeAssistant使用和风天气插件</summary>
    
    
    
    <category term="ubuntu" scheme="https://zml3589110.github.io/categories/ubuntu/"/>
    
    <category term="HomeAssistant" scheme="https://zml3589110.github.io/categories/HomeAssistant/"/>
    
    <category term="插件" scheme="https://zml3589110.github.io/categories/%E6%8F%92%E4%BB%B6/"/>
    
    <category term="和风天气" scheme="https://zml3589110.github.io/categories/%E5%92%8C%E9%A3%8E%E5%A4%A9%E6%B0%94/"/>
    
    
    <category term="智能家居" scheme="https://zml3589110.github.io/tags/%E6%99%BA%E8%83%BD%E5%AE%B6%E5%B1%85/"/>
    
    <category term="HomeAssistant" scheme="https://zml3589110.github.io/tags/HomeAssistant/"/>
    
    <category term="插件" scheme="https://zml3589110.github.io/tags/%E6%8F%92%E4%BB%B6/"/>
    
    <category term="天气" scheme="https://zml3589110.github.io/tags/%E5%A4%A9%E6%B0%94/"/>
    
    <category term="和风天气" scheme="https://zml3589110.github.io/tags/%E5%92%8C%E9%A3%8E%E5%A4%A9%E6%B0%94/"/>
    
  </entry>
  
  <entry>
    <title>HomeAssistant的Docker配置</title>
    <link href="https://zml3589110.github.io/posts/3638770522.html"/>
    <id>https://zml3589110.github.io/posts/3638770522.html</id>
    <published>2024-01-10T07:24:20.000Z</published>
    <updated>2024-01-10T08:27:39.207Z</updated>
    
    <content type="html"><![CDATA[<p>【通用账号】：能修改的使用root，不能修改的一般为admin</p><h1 id="一、配置Portainer"><a href="#一、配置Portainer" class="headerlink" title="一、配置Portainer"></a>一、配置Portainer</h1><blockquote><p>Portainer 是一个用于 Docker <a href="https://so.csdn.net/so/search?q=%E5%AE%B9%E5%99%A8&spm=1001.2101.3001.7020">容器</a>管理的可视化界面工具。方便管理容器和卷。</p></blockquote><ol><li>创建 Portainer 数据卷：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume create portainer_data</span><br></pre></td></tr></table></figure><ol start="2"><li>运行 Portainer 容器：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 9000:9000 --name portainer --restart always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce</span><br></pre></td></tr></table></figure><p>指令的解释：<br>-d：表示在后台模式运行容器。<br>-p 9000:9000：这将宿主机的 9000 端口映射到容器的 9000 端口。<br>–name portainer：为容器指定一个名称。<br>–restart always：确保容器在任何情况下都会重新启动。<br>-v &#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;var&#x2F;run&#x2F;docker.sock：这允许 Portainer 直接访问 Docker API。<br>-v portainer_data:&#x2F;data：将前面创建的数据卷挂载到容器内。<br>完成上述步骤后，你可以通过浏览器访问 http:&#x2F;&#x2F;&lt;你的服务器IP&gt;:9000 来使用 Portainer 界面进行 Docker 容器的管理。</p><ol start="3"><li>配置<br>访问http:&#x2F;&#x2F;&lt;你的服务器IP&gt;:9000，进行账密配置。</li></ol><h2 id="二、配置HA的docker"><a href="#二、配置HA的docker" class="headerlink" title="二、配置HA的docker"></a>二、配置HA的docker</h2><blockquote><p>要在 Docker 中安装 Home Assistant，你可以使用官方的 Home Assistant Docker 映像。</p></blockquote><ol><li>创建一个数据卷 (用于存储 Home Assistant 的配置和数据)：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume create homeassistant_data</span><br></pre></td></tr></table></figure><ol start="2"><li>运行 Home Assistant 容器：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name=<span class="string">&quot;home-assistant&quot;</span> -v homeassistant_data:/config -e <span class="string">&quot;TZ=Asia/Shanghai&quot;</span> --net=host homeassistant/home-assistant:stable</span><br></pre></td></tr></table></figure><p>指令的解释：<br>-d：表示在后台模式运行容器。<br>–name&#x3D;“home-assistant”：为容器指定一个名称。<br>-v homeassistant_data:&#x2F;config：将前面创建的数据卷挂载到容器内，用于存储 Home Assistant 的配置。<br>-e “TZ&#x3D;Asia&#x2F;Shanghai”：设置时区为上海 (你可以根据需要修改为其他时区)。<br>–net&#x3D;host：这允许 Home Assistant 使用宿主机的网络，有助于自动发现和控制本地网络上的设备。<br>homeassistant&#x2F;home-assistant:stable：使用稳定版的 Home Assistant 映像。<br>完成上述步骤后，你应该可以通过浏览器访问 http:&#x2F;&#x2F;&lt;你的服务器IP&gt;:8123 来访问 Home Assistant 的界面，并进行初始设置。</p><ol start="3"><li>配置<br>访问http:&#x2F;&#x2F;&lt;你的服务器IP&gt;:8123 ，进行账密配置。其他配置在后续说明</li></ol><h1 id="三、配置MQTT服务器（Eclipse-Mosquitto）"><a href="#三、配置MQTT服务器（Eclipse-Mosquitto）" class="headerlink" title="三、配置MQTT服务器（Eclipse Mosquitto）"></a>三、配置MQTT服务器（Eclipse Mosquitto）</h1><blockquote><p>对于 MQTT 服务器，经常推荐使用的是 Eclipse Mosquitto。Mosquitto 是一个开源的 MQTT 代理，非常轻量级且可靠，可以很好地与 Home Assistant 和 Node-RED 配合使用。<br>额外参考：<a href="https://zhuanlan.zhihu.com/p/452896841">https://zhuanlan.zhihu.com/p/452896841</a></p></blockquote><ol><li>创建 Mosquitto 数据卷:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker volume create mosquitto_config</span><br><span class="line">docker volume create mosquitto_data</span><br><span class="line">docker volume create mosquitto_log</span><br></pre></td></tr></table></figure><ol start="2"><li>配置 mosquitto.conf 文件：</li></ol><p>在<code>mosquitto_config</code>下创建文件<code>mosquitto.conf</code>，特别注意，由于使用docker volume创建，应该是在mosquitto_config的_data文件夹下。实际路径如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/docker/volumes/mosquitto_config/_data</span><br><span class="line">touch mosquitto.conf</span><br><span class="line">chmod 755 mosquitto.conf<span class="comment"># 需要给权限，因为容器可能要读写</span></span><br><span class="line">nano mosquitto.conf</span><br></pre></td></tr></table></figure><p>写入以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">persistence <span class="literal">true</span></span><br><span class="line">persistence_location /mosquitto/data/</span><br><span class="line">log_dest file /mosquitto/<span class="built_in">log</span>/mosquitto.log</span><br><span class="line">allow_anonymous <span class="literal">true</span></span><br><span class="line">listener 1883</span><br></pre></td></tr></table></figure><ol start="3"><li>运行 Mosquitto 容器：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --name mosquitto \</span><br><span class="line">  --privileged \</span><br><span class="line">  -p 1883:1883 \</span><br><span class="line">  -p 9001:9001 \</span><br><span class="line">  -v mosquitto_config:/mosquitto/config \</span><br><span class="line">  -v mosquitto_data:/mosquitto/data \</span><br><span class="line">  -v mosquitto_log:/mosquitto/<span class="built_in">log</span> \</span><br><span class="line">  --restart always \</span><br><span class="line">  eclipse-mosquitto</span><br></pre></td></tr></table></figure><h1 id="三、配置MariaDB数据库"><a href="#三、配置MariaDB数据库" class="headerlink" title="三、配置MariaDB数据库"></a>三、配置MariaDB数据库</h1><blockquote><p>Home Assistant 默认使用 SQLite 数据库，但在大型设置或长时间使用后，使用 MariaDB 或 PostgreSQL 可能更高效。<br>为了长时间运行的稳定，那还是设置吧</p></blockquote><ol><li>创建一个持久化存储数据的 Docker 卷：<br>MariaDB 将其数据存储在 &#x2F;var&#x2F;lib&#x2F;mysql，所以为了确保数据的持久性，我们应该为这个路径创建一个 Docker 卷。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume create mariadb_data</span><br></pre></td></tr></table></figure><ol start="2"><li>启动 MariaDB 容器：<br>使用以下命令运行 MariaDB 容器，注意替换 password 为您自己的值。</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --name mariadb \</span><br><span class="line">  --privileged \</span><br><span class="line">  --restart always \</span><br><span class="line">  -e MYSQL_ROOT_PASSWORD=password \</span><br><span class="line">  -e MYSQL_DATABASE=homeassistant \</span><br><span class="line">  -e MYSQL_USER=root \</span><br><span class="line">  -e MYSQL_PASSWORD=password \</span><br><span class="line">  -v mariadb_data:/var/lib/mysql \</span><br><span class="line">  -p <span class="number">3306</span>:<span class="number">3306</span> \</span><br><span class="line">  mariadb:latest</span><br></pre></td></tr></table></figure><ol start="3"><li>配置 Home Assistant 使用 MariaDB：<br>如之前所述，您需要更新 Home Assistant 的 configuration.yaml 文件，指向这个新的 MariaDB 实例。修改password。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">recorder:</span><br><span class="line">  db_url: mysql://root:password@127.0.0.1/homeassistant?charset=utf8</span><br></pre></td></tr></table></figure><ol start="4"><li>之后重启HA<br>使用数据库工具DBeaver，连接这个数据库进行查看，可以看到正常。</li></ol><h2 id="四、配置Node-RED"><a href="#四、配置Node-RED" class="headerlink" title="四、配置Node-RED"></a>四、配置Node-RED</h2><blockquote><p>Node-RED 是一个基于流的开发工具，用于连接硬件设备、API 和在线服务。</p></blockquote><ol><li>创建 Node-RED 数据卷 (用于存储 Node-RED 的配置和数据)：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume create nodered_data</span><br></pre></td></tr></table></figure><ol start="2"><li>运行 Node-RED 容器：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name nodered -p 1880:1880 -v nodered_data:/data --user node-red --restart always nodered/node-red:latest</span><br></pre></td></tr></table></figure><p>指令的解释：<br>-d: 表示在后台模式运行容器。<br>–name nodered: 为容器指定一个名称。<br>-p 1880:1880: 这将宿主机的 1880 端口映射到容器的 1880 端口。<br>-v nodered_data:&#x2F;data: 将前面创建的数据卷挂载到容器内，用于存储 Node-RED 的配置。<br>–user node-red: 以 node-red 用户身份运行 Node-RED，增加安全性。<br>–restart always: 确保容器在任何情况下都会重新启动。<br>nodered&#x2F;node-red:latest: 使用最新版本的 Node-RED Docker 映像。</p><p>完成上述步骤后，你应该可以通过浏览器访问 http:&#x2F;&#x2F;&lt;你的服务器IP&gt;:1880 来访问 Node-RED 的界面并开始构建你的流。</p><h1 id="五、配置ESPHome"><a href="#五、配置ESPHome" class="headerlink" title="五、配置ESPHome"></a>五、配置ESPHome</h1><blockquote><p>ESPHome 是一个很好的选择，尤其是如果你计划使用 ESP8266 或 ESP32 微控制器来扩展你的 Home Assistant 设置。</p></blockquote><ol><li>创建 ESPHome 数据卷 (用于存储 ESPHome 的配置和数据):</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume create esphome_data</span><br></pre></td></tr></table></figure><ol start="2"><li>运行 ESPHome 容器:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --privileged \</span><br><span class="line">  --net=host \</span><br><span class="line">  --name esphome \</span><br><span class="line">  -p 6052:6052 \</span><br><span class="line">  -v esphome_data:/config \</span><br><span class="line">  --restart always \</span><br><span class="line">  esphome/esphome</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>完成上述步骤后，你应该可以通过浏览器访问 http:&#x2F;&#x2F;&lt;你的服务器IP&gt;:6052 来访问 ESPHome 的界面，并开始创建和管理你的设备配置。<br>必须使用host和privileged ，否则esphome无法发现设备。</p><h1 id="六、配置Duplicati"><a href="#六、配置Duplicati" class="headerlink" title="六、配置Duplicati"></a>六、配置Duplicati</h1><blockquote><p>Duplicati 是一个备份软件，用于存储加密的、增量的、压缩的备份到云或本地存储。下面是在 Docker 中安装 Duplicati 的步骤：</p></blockquote><ol><li>创建 Duplicati 的数据卷 (用于存储配置和备份数据):</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker volume create duplicati_backups</span><br><span class="line">docker volume create duplicati_config</span><br><span class="line">docker volume create duplicati_data</span><br></pre></td></tr></table></figure><ol start="2"><li>运行 Duplicati 容器:<br>注意替换&#x2F;opt&#x2F;docker&#x2F;volumes为你需要备份的文件夹。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --name duplicati \</span><br><span class="line">  -p 8200:8200 \</span><br><span class="line">  -v duplicati_backups:/backups \</span><br><span class="line">  -v duplicati_config:/config \</span><br><span class="line">  -v duplicati_data:/data \</span><br><span class="line">  -v /opt/docker/volumes:/<span class="built_in">source</span>:ro \</span><br><span class="line">  --restart unless-stopped \</span><br><span class="line">  duplicati/duplicati</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>配置<br>首先在设置中设置密码。<br>随后创建备份，使用onedrive或其他进行备份。</li></ol><h1 id="七、配置HA的HACS"><a href="#七、配置HA的HACS" class="headerlink" title="七、配置HA的HACS"></a>七、配置HA的HACS</h1><blockquote><p>参考官方：<a href="https://hacs.xyz/docs/setup/download/%EF%BC%8C%E4%BD%BF%E7%94%A8container%E7%9A%84%E6%95%99%E7%A8%8B">https://hacs.xyz/docs/setup/download/，使用container的教程</a></p></blockquote><ol><li>打开HA的bash，输入如下指令即可</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O - https://get.hacs.xyz | bash -</span><br></pre></td></tr></table></figure><ol start="2"><li>打开HA中的高级模式</li><li>添加集成HACS，并进行相应配置，即可显示HACS内容</li></ol><h1 id="八、配置HA的Node-Red"><a href="#八、配置HA的Node-Red" class="headerlink" title="八、配置HA的Node-Red"></a>八、配置HA的Node-Red</h1><ol><li>HACS安装Node-Red</li><li>添加集成Node-Red</li><li>HA导航栏添加Node-Red<br>配置configuration.yaml，添加如下内容后重启HA。（顺带把ESPhome的也添加进来）</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">panel_iframe:</span><br><span class="line"> nodered:</span><br><span class="line">   title: <span class="string">&#x27;Node-Red&#x27;</span></span><br><span class="line">   icon: <span class="string">&#x27;mdi:shuffle-variant&#x27;</span></span><br><span class="line">   <span class="comment">#填写node-red的地址</span></span><br><span class="line">   url: <span class="string">&#x27;http://192.168.5.1:1880/&#x27;</span></span><br><span class="line"></span><br><span class="line"> esphome:</span><br><span class="line">   title: <span class="string">&#x27;ESPHome&#x27;</span></span><br><span class="line">   icon: <span class="string">&#x27;mdi:car-esp&#x27;</span></span><br><span class="line">   <span class="comment">#填写node-red的地址</span></span><br><span class="line">   url: <span class="string">&#x27;http://192.168.5.1:6052/&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/posts/3638770522/2f6af19978d94ee79e3bf9ca4e53425c.png" class="" title="在这里插入图片描述"><h1 id="九、配置Node-Red"><a href="#九、配置Node-Red" class="headerlink" title="九、配置Node-Red"></a>九、配置Node-Red</h1><ol><li>在Node-Red中添加节点node-red-contrib-home-assistant-websocket，并安装</li><li>拖入一个HA节点，随后进行HA的配置，如下：</li></ol><img src="/posts/3638770522/549b65ea99da41d3809b246519e722f9.png" class="" title="在这里插入图片描述"><ol start="3"><li>其中的令牌在HA中创建并复制</li><li>测试一下，获取IP并显示<img src="/posts/3638770522/3e7126a8b1ff41978119cae592e04d1f.png" class="" title="在这里插入图片描述"></li></ol><h1 id="十、配置MQTT"><a href="#十、配置MQTT" class="headerlink" title="十、配置MQTT"></a>十、配置MQTT</h1><ol><li><p>HA添加集成MQTT，并配置如下：</p><img src="/posts/3638770522/682cafd00f714962b12f0bc70eb8f3eb.png" class="" title="在这里插入图片描述"></li><li><p>进行测试</p><img src="/posts/3638770522/3cc98d4da9024cfcab90cfcdece206ee.png" class="" title="在这里插入图片描述"></li><li><p>使用MQTT发布一个传感器给HA的教程，请参考另外一个博客。</p></li></ol><h1 id="十一、配置彩云天气"><a href="#十一、配置彩云天气" class="headerlink" title="十一、配置彩云天气"></a>十一、配置彩云天气</h1><ol><li>HACS搜索彩云天气，安装组件和卡片<img src="/posts/3638770522/092e818e32954ec8acc8cc6987a8713c.png" class="" title="在这里插入图片描述"></li><li>添加集成Colorfuclouds，并进行相应配置</li><li>在主页中添加卡片，为了高级使用，要学会使用编辑器。</li></ol><img src="/posts/3638770522/b6a7d7a8e60343ddaf658a164051d963.png" class="" title="在这里插入图片描述"><h2 id="十二、配置mini-graph-card"><a href="#十二、配置mini-graph-card" class="headerlink" title="十二、配置mini-graph-card"></a>十二、配置mini-graph-card</h2><blockquote><p>可以在主页显示好看的时序数据，比如温湿度、流量、等等</p></blockquote><ol><li><p>HACS搜索并安装</p></li><li><p>添加如下卡片：</p><img src="/posts/3638770522/981c72d8d5f94c9aaaadf066b26d8946.png" class="" title="在这里插入图片描述"></li><li><p>手动添加卡片到资源中<br>可能会出现卡片无法检索到，需要手动添加。<br>首先在HACS的该卡片，打开源获得该卡片路径：<a href="http://192.168.5.1:8123/hacsfiles/mini-graph-card/mini-graph-card-bundle.js">http://192.168.5.1:8123/hacsfiles/mini-graph-card/mini-graph-card-bundle.js</a><br>其次，在配置-仪表盘-资源（右上角选择），添加如下资源。可以看到，这里还包括的彩云天气得到资源</p></li></ol><img src="/posts/3638770522/627fc3ba3abd42279597057f5c6b9d6e.png" class="" title="在这里插入图片描述"><hr><h1 id="相关链接（侵删）"><a href="#相关链接（侵删）" class="headerlink" title="相关链接（侵删）"></a>相关链接（侵删）</h1><ol><li><a href="https://blog.csdn.net/Hot_Ant/article/details/133973682">Homeassistant docker配置</a></li></ol><hr><center><font color=red>=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">HomeAssistant的Docker配置</summary>
    
    
    
    <category term="ubuntu" scheme="https://zml3589110.github.io/categories/ubuntu/"/>
    
    <category term="HomeAssistant" scheme="https://zml3589110.github.io/categories/HomeAssistant/"/>
    
    <category term="HACS" scheme="https://zml3589110.github.io/categories/HACS/"/>
    
    <category term="Docker" scheme="https://zml3589110.github.io/categories/Docker/"/>
    
    
    <category term="Ubuntu" scheme="https://zml3589110.github.io/tags/Ubuntu/"/>
    
    <category term="智能家居" scheme="https://zml3589110.github.io/tags/%E6%99%BA%E8%83%BD%E5%AE%B6%E5%B1%85/"/>
    
    <category term="物联网" scheme="https://zml3589110.github.io/tags/%E7%89%A9%E8%81%94%E7%BD%91/"/>
    
    <category term="Debain" scheme="https://zml3589110.github.io/tags/Debain/"/>
    
    <category term="docker" scheme="https://zml3589110.github.io/tags/docker/"/>
    
    <category term="HomeAssistant" scheme="https://zml3589110.github.io/tags/HomeAssistant/"/>
    
    <category term="HACS" scheme="https://zml3589110.github.io/tags/HACS/"/>
    
    <category term="插件" scheme="https://zml3589110.github.io/tags/%E6%8F%92%E4%BB%B6/"/>
    
    <category term="Portainer" scheme="https://zml3589110.github.io/tags/Portainer/"/>
    
    <category term="Mosquitto" scheme="https://zml3589110.github.io/tags/Mosquitto/"/>
    
    <category term="MariaDB数据库" scheme="https://zml3589110.github.io/tags/MariaDB%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="Node-RED" scheme="https://zml3589110.github.io/tags/Node-RED/"/>
    
    <category term="ESPHome" scheme="https://zml3589110.github.io/tags/ESPHome/"/>
    
    <category term="Duplicati" scheme="https://zml3589110.github.io/tags/Duplicati/"/>
    
    <category term="彩云天气" scheme="https://zml3589110.github.io/tags/%E5%BD%A9%E4%BA%91%E5%A4%A9%E6%B0%94/"/>
    
    <category term="mini-graph-card" scheme="https://zml3589110.github.io/tags/mini-graph-card/"/>
    
  </entry>
  
  <entry>
    <title>HomeAssistant的Docker版本安装HACS等插件</title>
    <link href="https://zml3589110.github.io/posts/3425107628.html"/>
    <id>https://zml3589110.github.io/posts/3425107628.html</id>
    <published>2024-01-10T07:10:20.000Z</published>
    <updated>2024-01-10T08:27:39.204Z</updated>
    
    <content type="html"><![CDATA[<h1 id="进入-docker-中的-HomeAssistant（这个最主要-因为好难找到对应文件件）"><a href="#进入-docker-中的-HomeAssistant（这个最主要-因为好难找到对应文件件）" class="headerlink" title="进入 docker 中的 HomeAssistant（这个最主要-因为好难找到对应文件件）"></a>进入 docker 中的 HomeAssistant（这个最主要-因为好难找到对应文件件）</h1><h2 id="1-查找-HomeAssistant-的-CONTAINER-ID"><a href="#1-查找-HomeAssistant-的-CONTAINER-ID" class="headerlink" title="1.查找 HomeAssistant 的 CONTAINER ID"></a>1.查找 HomeAssistant 的 CONTAINER ID</h2><p>连接上<a href="https://so.csdn.net/so/search?q=%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8&spm=1001.2101.3001.7020">云服务器</a>（宿主机）后，终端内进入 root ，输入：</p><blockquote><p><strong>zml:一定一定要从root进入</strong></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><p>找到了 docker 的 container ID</p><img src="/posts/3425107628/3f0be25574bb4c1f97a10155e935003a.png" class="" title="在这里插入图片描述"><h2 id="2-config-HomeAssistant"><a href="#2-config-HomeAssistant" class="headerlink" title="2.config HomeAssistant"></a>2.config HomeAssistant</h2><p>输入下面的命令（把 CONTAINER_ID 换成你自己的）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it CONTAINER_ID /bin/bash</span><br></pre></td></tr></table></figure><img src="/posts/3425107628/ce44b2b180464576bfdfb138acb2e875.png" class="" title="在这里插入图片描述"><p>在这一步中，有的人 ls 后显示的可能和我不一样，那么你可以进入 config 目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> config</span><br></pre></td></tr></table></figure><p>当然，如果已经显示出我上面类似的内容，则 不执行 上面的命令。</p><h2 id="3-进入-custom-components-目录"><a href="#3-进入-custom-components-目录" class="headerlink" title="3.进入 custom_components 目录"></a>3.进入 custom_components 目录</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> custom_components</span><br></pre></td></tr></table></figure><h3 id="二、github-或者其他渠道下载-HACS"><a href="#二、github-或者其他渠道下载-HACS" class="headerlink" title="二、github 或者其他渠道下载 HACS"></a>二、github 或者其他渠道下载 HACS</h3><h2 id="1-下载-HACS"><a href="#1-下载-HACS" class="headerlink" title="1.下载 HACS"></a>1.下载 HACS</h2><p><a href="https://github.com/hacs/integration/releases/">https://github.com/hacs/integration/releases/</a></p><p><a href="https://gitcode.com/mirrors/hacs/integration/overview">github加速计划地址</a></p><img src="/posts/3425107628/d1e6b4f6ecbd43e2b5c0460a9c021e0f.png" class="" title="在这里插入图片描述"><h2 id="2-在-custom-components-目录-新建文件夹-hacs"><a href="#2-在-custom-components-目录-新建文件夹-hacs" class="headerlink" title="2.在 custom_components 目录 新建文件夹 hacs"></a>2.在 custom_components 目录 新建文件夹 hacs</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir hacs</span><br></pre></td></tr></table></figure><h2 id="3-进入-custom-components-x2F-hacs-目录，打开-Xtfp，将刚下载好的-hacs-zip-传入"><a href="#3-进入-custom-components-x2F-hacs-目录，打开-Xtfp，将刚下载好的-hacs-zip-传入" class="headerlink" title="3.进入 custom_components &#x2F; hacs 目录，打开 Xtfp，将刚下载好的 hacs.zip 传入"></a>3.进入 custom_components &#x2F; hacs 目录，打开 Xtfp，将刚下载好的 hacs.zip 传入</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> hacs</span><br></pre></td></tr></table></figure><img src="/posts/3425107628/22e3d5a65fb2450aaad868bcbf77fded.png" class="" title="在这里插入图片描述"><h2 id="4-解压-hacs-zip"><a href="#4-解压-hacs-zip" class="headerlink" title="4.解压 hacs.zip"></a>4.解压 hacs.zip</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip hacs.zip</span><br></pre></td></tr></table></figure><h2 id="5-重启-HomeAssistant"><a href="#5-重启-HomeAssistant" class="headerlink" title="5.重启 HomeAssistant"></a>5.重启 HomeAssistant</h2><p>退出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><p>重启（把 CONTAINER_ID 换成你自己的）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart CONTAINER_ID</span><br></pre></td></tr></table></figure><img src="/posts/3425107628/49055f35644e4af784bc2a2f33dc2c3f.png" class="" title="在这里插入图片描述"><h2 id="6-网页进入-HomeAssistant-，hacs-已经安装成功"><a href="#6-网页进入-HomeAssistant-，hacs-已经安装成功" class="headerlink" title="6.网页进入 HomeAssistant ，hacs 已经安装成功"></a>6.网页进入 HomeAssistant ，hacs 已经安装成功</h2><img src="/posts/3425107628/9a9dfcadc573463982948087a56725f2.png" class="" title="步骤我使用图片表示："><hr><h1 id="相关链接（侵删）"><a href="#相关链接（侵删）" class="headerlink" title="相关链接（侵删）"></a>相关链接（侵删）</h1><ol><li><a href="https://blog.csdn.net/qq_43768851/article/details/132343591">【自用】云服务器 docker 环境下 HomeAssistant 安装 HACS 教程</a></li></ol><hr><center><font color=red>=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">HomeAssistant的Docker版本安装HACS等插件，主要是解决找不到custom_components等文件夹在哪里了</summary>
    
    
    
    <category term="ubuntu" scheme="https://zml3589110.github.io/categories/ubuntu/"/>
    
    <category term="HomeAssistant" scheme="https://zml3589110.github.io/categories/HomeAssistant/"/>
    
    <category term="HACS" scheme="https://zml3589110.github.io/categories/HACS/"/>
    
    
    <category term="Ubuntu" scheme="https://zml3589110.github.io/tags/Ubuntu/"/>
    
    <category term="智能家居" scheme="https://zml3589110.github.io/tags/%E6%99%BA%E8%83%BD%E5%AE%B6%E5%B1%85/"/>
    
    <category term="物联网" scheme="https://zml3589110.github.io/tags/%E7%89%A9%E8%81%94%E7%BD%91/"/>
    
    <category term="Debain" scheme="https://zml3589110.github.io/tags/Debain/"/>
    
    <category term="docker" scheme="https://zml3589110.github.io/tags/docker/"/>
    
    <category term="HomeAssistant" scheme="https://zml3589110.github.io/tags/HomeAssistant/"/>
    
    <category term="HACS" scheme="https://zml3589110.github.io/tags/HACS/"/>
    
    <category term="插件" scheme="https://zml3589110.github.io/tags/%E6%8F%92%E4%BB%B6/"/>
    
    <category term="config" scheme="https://zml3589110.github.io/tags/config/"/>
    
    <category term="custom_components" scheme="https://zml3589110.github.io/tags/custom-components/"/>
    
  </entry>
  
  <entry>
    <title>Cploar安装并实现远程连接</title>
    <link href="https://zml3589110.github.io/posts/1083353105.html"/>
    <id>https://zml3589110.github.io/posts/1083353105.html</id>
    <published>2024-01-10T06:58:20.000Z</published>
    <updated>2024-01-10T08:27:39.219Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原因-没有公网IP"><a href="#原因-没有公网IP" class="headerlink" title="原因-没有公网IP"></a>原因-没有公网IP</h1><p>现在我有个想法，就是希望通过外网能够远程连接到我的开发板。这里我们就需要使用到一种技术，内网穿透。</p><p>内网穿透是一种将内部网络中的设备通过外网进行访问的技术。在linux系统中，实现内网穿透有多种方式，其中最常见的方法是使用ngrok和frp。</p><p>以frp为例，frp是一个专注于内网穿透的高性能的反向代理应用，支持TCP、UDP、HTTP、HTTPS 等多种协议。 可以将内网服务以安全、便捷的方式通过具有公网IP节点的中转暴露到公网。</p><p>然而由于我自己并没有公网IP，因此这里采用了一款内网穿透软件cpolar，不限制流量，还可以永久免费使用。完成软件的配置后，会默认安装ssh隧道，只需要启动，就可以获取到ssh隧道，映射22端口的公网地址，比较简单。</p><h1 id="一、内网穿透"><a href="#一、内网穿透" class="headerlink" title="一、内网穿透"></a>一、内网穿透</h1><h4 id="1-1-注册免费的cpolar账号"><a href="#1-1-注册免费的cpolar账号" class="headerlink" title="1.1 注册免费的cpolar账号"></a>1.1 注册免费的<code>cpolar</code>账号</h4><p><code>cpolar</code>官网地址：<a href="https://i.cpolar.com/m/55wq"><code>https://i.cpolar.com/m/55wq</code></a>，官网注册账号。账号注册号之后，点击右上角用户设置，进行重置<code>AuthToken</code>；</p><img src="/posts/1083353105/202311122127790.png" class="" title="img"><p>并保存自己的<code>Authtoken</code>;</p><img src="/posts/1083353105/202311122142693.png" class="" width="20230111103532"><h4 id="1-2-安装cpolar客户端"><a href="#1-2-安装cpolar客户端" class="headerlink" title="1.2 安装cpolar客户端"></a>1.2 安装<code>cpolar</code>客户端</h4><p>下载<code>cpolar</code>安装脚本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root@rk3399:/data# mkdir cpolar</span><br><span class="line">root@rk3399:/data# wget https://www.cpolar.com/static/downloads/install-release-cpolar.sh </span><br><span class="line">root@rk3399:/data# mv install-release-cpolar.sh ./cpolar/</span><br><span class="line">root@rk3399:/data# mv install-release-cpolar.sh ./cpolar/</span><br><span class="line">root@rk3399:/data# cd cpolar/</span><br><span class="line">root@rk3399:/data/cpolar# ls -l</span><br><span class="line">total 24</span><br><span class="line">-rw-r--r-- 1 root root 21833 Apr  5  2023 install-release-cpolar.sh</span><br><span class="line">root@rk3399:/data/cpolar# chmod +x install-release-cpolar.sh</span><br></pre></td></tr></table></figure><p>开始安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">root@rk3399:/data/cpolar# ./install-release-cpolar.sh</span><br><span class="line"><span class="meta">  %</span><span class="bash"> Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span></span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0</span><br><span class="line">100 21833  100 21833    0     0  61849      0 --:--:-- --:--:-- --:--:-- 61849</span><br><span class="line">info: Installing Cpolar 3.3.12 for aarch64</span><br><span class="line">Downloading Cpolar archive: http://static.cpolar.com/downloads/releases/3.3.12/cpolar-stable-linux-arm64.zip</span><br><span class="line"><span class="meta">  %</span><span class="bash"> Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span></span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100 6716k  100 6716k    0     0   9.7M      0 --:--:-- --:--:-- --:--:-- 9995k</span><br><span class="line">info: Extract the Cpolar package to /tmp/tmp.zNY8gPayfj and prepare it for installation.</span><br><span class="line">Downloading Cpolar demo config file: http://static.cpolar.com/downloads/cpolar.demo.yml</span><br><span class="line"><span class="meta">  %</span><span class="bash"> Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span></span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100   186  100   186    0     0   4650      0 --:--:-- --:--:-- --:--:--  4650</span><br><span class="line">Downloading Cpolar service config file: http://static.cpolar.com/downloads/cpolar.service</span><br><span class="line"><span class="meta">  %</span><span class="bash"> Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span></span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100   384  100   384    0     0  11294      0 --:--:-- --:--:-- --:--:-- 11294</span><br><span class="line">Downloading Cpolar service@ config file: http://static.cpolar.com/downloads/cpolar@.service</span><br><span class="line"><span class="meta">  %</span><span class="bash"> Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span></span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100   380  100   380    0     0  11875      0 --:--:-- --:--:-- --:--:-- 11875</span><br><span class="line">rm: cannot remove &#x27;/etc/systemd/system/cpolar.service.d/10-donot_touch_multi_conf.conf&#x27;: No such file or directory</span><br><span class="line">rm: cannot remove &#x27;/etc/systemd/system/cpolar@.service.d/10-donot_touch_multi_conf.conf&#x27;: No such file or directory</span><br><span class="line">info: Systemd service files have been installed successfully!</span><br><span class="line">warning: The following are the actual parameters for the cpolar service startup.</span><br><span class="line">warning: Please make sure the configuration file path is correctly set.</span><br><span class="line"><span class="meta">#</span><span class="bash"> /etc/systemd/system/cpolar.service</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Cpolar Service</span><br><span class="line">Documentation=https://www.cpolar.com/docs</span><br><span class="line">After=network.target nss-lookup.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">User=nobody</span><br><span class="line">NoNewPrivileges=true</span><br><span class="line">ExecStart=/usr/local/bin/cpolar start-all -dashboard=on -daemon=on -config=/usr/local/etc/cpolar/cpolar.yml -log=/var/log/cpolar/access.log</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartPreventExitStatus=23</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line">installed: /usr/local/bin/cpolar</span><br><span class="line">installed link: /usr/bin/cpolar</span><br><span class="line">installed: /usr/local/etc/cpolar/cpolar.yml</span><br><span class="line">installed: /var/log/cpolar/</span><br><span class="line">installed: /var/log/cpolar/access.log</span><br><span class="line">installed: /var/log/cpolar/error.log</span><br><span class="line">installed: /etc/systemd/system/cpolar.service</span><br><span class="line">installed: /etc/systemd/system/cpolar@.service</span><br><span class="line">removed: /tmp/tmp.zNY8gPayfj</span><br><span class="line">info: Cpolar 3.3.12 is installed.</span><br><span class="line">You may need to execute a command to remove dependent software: apt purge curl unzip</span><br><span class="line">Please execute the command: systemctl enable cpolar; systemctl start cpolar</span><br></pre></td></tr></table></figure><p>查看<code>cpolar</code>版本信息,如果正常显示，则安装成功：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@rk3399:/data/cpolar# cpolar version</span><br><span class="line">cpolar version 3.3.12</span><br></pre></td></tr></table></figure><p>进行<code>token</code>认证：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@rk3399:/data/cpolar# cpolar authtoken 配置第一步中获取的Authtoken</span><br><span class="line">Authtoken saved to configuration file: /usr/local/etc/cpolar/cpolar.yml</span><br></pre></td></tr></table></figure><p>配置<code>cpolar</code>开机自启动：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@rk3399:/data/cpolar# systemctl enable cpolar</span><br><span class="line">Created symlink /etc/systemd/system/multi-user.target.wants/cpolar.service → /etc/systemd/system/cpolar.service.</span><br></pre></td></tr></table></figure><p>守护进程方式，启动<code>cpolar</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@rk3399:/data/cpolar# systemctl start cpolar</span><br></pre></td></tr></table></figure><p>查看<code>cpolar</code>守护进程状态；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">root@rk3399:/data/cpolar# systemctl status cpolar</span><br><span class="line">● cpolar.service - Cpolar Service</span><br><span class="line">     Loaded: loaded (/etc/systemd/system/cpolar.service; enabled; vendor preset: enabled)</span><br><span class="line">     Active: active (running) since Sun 2023-11-12 21:21:04 CST; 17s ago</span><br><span class="line">       Docs: https://www.cpolar.com/docs</span><br><span class="line">   Main PID: 6768 (cpolar)</span><br><span class="line">      Tasks: 22 (limit: 4569)</span><br><span class="line">     Memory: 18.1M</span><br><span class="line">     CGroup: /system.slice/cpolar.service</span><br><span class="line">             ├─6768 cpolar: master process</span><br><span class="line">             └─6779 cpolar: worker process</span><br><span class="line"></span><br><span class="line">Nov 12 21:21:04 rk3399 systemd[1]: Started Cpolar Service.</span><br></pre></td></tr></table></figure><h4 id="1-3-获取ssh隧道的公网地址"><a href="#1-3-获取ssh隧道的公网地址" class="headerlink" title="1.3 获取ssh隧道的公网地址"></a>1.3 获取<code>ssh</code>隧道的公网地址</h4><p><code>cpolar</code>会默认安装两个样例隧道，一个是<code>Website</code>隧道指向<code>http 8080</code>端口，一个是<code>ssh</code>隧道，指向<code>tcp 22</code>端口；</p><p>在<code>PC</code>机器浏览器访问：<code>http://192.168.0.102:9200</code>，登录<code>cpolar web UI</code>管理界面；其中<code>192.168.0.102</code>是我的开发板的内网<code>IP</code>地址。</p><p>在状态—&gt;在线隧道列表，就可以获取到<code>ssh</code>隧道的公网地址；</p><img src="/posts/1083353105/202311122130953.png" class="" title="img"><h4 id="1-4-公网ssh远程linux服务"><a href="#1-4-公网ssh远程linux服务" class="headerlink" title="1.4 公网ssh远程linux服务"></a>1.4 公网<code>ssh</code>远程<code>linux</code>服务</h4><p>在外网设备上执行命令，就可以<code>ssh</code>远程内网的<code>linux</code>服务；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh $&#123;linux用户名&#125;@$&#123;cpolar所生成的公网地址&#125; -p $&#123;cpolar生成的端口号&#125;</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li><code>linux</code>用户名为开发板的用户名；</li><li><code>cpolar</code>所生成的公网地址：不包含上图公网地址列中的协议名和后面的端口号；</li></ul><p>比如我这里运行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@test2 ~]# ssh zhengyang@5.tcp.vip.cpolar.cn -p 14318</span><br></pre></td></tr></table></figure><blockquote><p><strong>zml:如果使用ssh工具，那么地址为去掉前面的“tcp:&#x2F;&#x2F;”，只留 5.tcp.vip.cpolar.cn 即可，然后端口根据自己分配到的填入即可</strong></p></blockquote><p>注意：免费使用<code>cpolar</code>，所生成的公网地址是随机的，不定时会变化，如果是需要后期长期使用，可以升级套餐，配置固定的域名地址，增大带宽，价格也不高，而且还支持21天退款保证。</p><p><strong>参考文章</strong></p><p><strong>[1] <a href="https://www.cpolar.com/docs?_gl=1*1b9mx0c*_ga*MTQyNTc3MTY5MS4xNjk5Nzk0MjIz*_ga_WF16DPKZZ1*MTY5OTc5NDIyMi4xLjEuMTY5OTc5NjQwNC4yMC4wLjA.#tcp"><code>cpolar</code>入门指南</a></strong></p><p><strong>[2] <a href="https://www.cpolar.com/blog/build-a-website-on-ubuntu-system">在<code>Ubuntu</code>搭建<code>Web</code>站点，并将其发布到公网访问</a></strong></p><p><strong>[3] <a href="https://blog.csdn.net/weixin_43025343/article/details/132357145">国产的内网穿透工具也很优秀，这10款工具推荐正在寻找的你</a></strong></p><h1 id="外网通过Cploar远程控制"><a href="#外网通过Cploar远程控制" class="headerlink" title="外网通过Cploar远程控制"></a>外网通过Cploar远程控制</h1><p>文章【1.HomeAssistant通过cpolar内网穿透】有说明使用方式，一定要注意设置好访问IP后重启homeassistant才生效</p><hr><h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><ol><li><a href="https://www.cnblogs.com/zyly/p/17827958.html">通过cpolar实现外网ssh远程连接linux</a></li></ol><hr><center><font color=red>=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">Cploar安装并实现远程连接，分别实现SSH隧道控制跟HomeAssistant远程控制</summary>
    
    
    
    <category term="技术类" scheme="https://zml3589110.github.io/categories/%E6%8A%80%E6%9C%AF%E7%B1%BB/"/>
    
    <category term="内网穿透" scheme="https://zml3589110.github.io/categories/%E6%8A%80%E6%9C%AF%E7%B1%BB/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    
    <category term="Cploar" scheme="https://zml3589110.github.io/categories/Cploar/"/>
    
    <category term="linux" scheme="https://zml3589110.github.io/categories/linux/"/>
    
    
    <category term="linux" scheme="https://zml3589110.github.io/tags/linux/"/>
    
    <category term="ssh" scheme="https://zml3589110.github.io/tags/ssh/"/>
    
    <category term="HomeAssistant" scheme="https://zml3589110.github.io/tags/HomeAssistant/"/>
    
    <category term="内网穿透" scheme="https://zml3589110.github.io/tags/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    
    <category term="Cploar" scheme="https://zml3589110.github.io/tags/Cploar/"/>
    
  </entry>
  
</feed>
