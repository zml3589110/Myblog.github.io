<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>赵逸尘个人博客</title>
  
  <subtitle>记录工作生活</subtitle>
  <link href="https://zml3589110.github.io/atom.xml" rel="self"/>
  
  <link href="https://zml3589110.github.io/"/>
  <updated>2023-12-26T13:29:02.645Z</updated>
  <id>https://zml3589110.github.io/</id>
  
  <author>
    <name>ZhaoYichen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ESP01S刷MQTT固件</title>
    <link href="https://zml3589110.github.io/posts/4026894451.html"/>
    <id>https://zml3589110.github.io/posts/4026894451.html</id>
    <published>2023-12-26T12:01:20.000Z</published>
    <updated>2023-12-26T13:29:02.645Z</updated>
    
    <content type="html"><![CDATA[<h1 id="方式一：导入三个文件，认证码-11111111"><a href="#方式一：导入三个文件，认证码-11111111" class="headerlink" title="方式一：导入三个文件，认证码 11111111"></a>方式一：导入三个文件，认证码 11111111</h1><p><a href="https://gitee.com/qcchat/esp-homekit-direct">https://gitee.com/qcchat/esp-homekit-direct</a></p><p><a href="git@gitee.com:dai_jian/Sonoff-Homekit.git">Sonoff-Homekit</a></p><h2 id="bilibili视频使用的文件"><a href="#bilibili视频使用的文件" class="headerlink" title="bilibili视频使用的文件"></a>bilibili视频使用的文件</h2><p>固件和工具下载地址：<br>链接：<a href="https://pan.baidu.com/s/1zppF3IUorvEO7knatS5piQ">https://pan.baidu.com/s/1zppF3IUorvEO7knatS5piQ</a> 提取码：xso7<br>源码地址：<a href="https://github.com/LeeLulin/esp-homekit-direct">https://github.com/LeeLulin/esp-homekit-direct</a></p><h3 id="网盘文件使用说明"><a href="#网盘文件使用说明" class="headerlink" title="网盘文件使用说明"></a>网盘文件使用说明</h3><p>下载网盘上的连接，有三个文件依次烧录即可<br><strong>rboot.bin 0x0<br>blank_config.bin 0x1000<br>switch.bin 0x2000</strong><br>先擦除后下载即可！</p><h3 id="源码说明"><a href="#源码说明" class="headerlink" title="源码说明"></a>源码说明</h3><p>在window上使用git乌龟下载一直失败，在使用git bash 命令拉下来的时候成功了，也不知什么原因！</p><p>这个库使用的使用 esp-open-rtos 系统，所以前面要先把这个环境搭建好！ 这个环境介绍说明的是跟 esp-free-rtos 一样，只是编译模式有所不同，每一个文件工程都独立包含了 esp-open-rtos 工程文件，而 esp-free-rtos 则是把总工程放到一个地方，有点像 SVN 和 GIT 的区别，一个完全copy副本，一个不需要！</p><p>在安装好环境之后就能根据 MD 文件说明操作，但是，在编译的时候会报错，一般报错就根据报错地方修改即可！</p><h4 id="报错一：wifi-config-c文件中找不到html配置信息"><a href="#报错一：wifi-config-c文件中找不到html配置信息" class="headerlink" title="报错一：wifi_config.c文件中找不到html配置信息"></a>报错一：wifi_config.c文件中找不到html配置信息</h4><img src="/posts/undefined/2023-12-26_201506.png" class="" title="html文件"><p>这个故障主要是wifi配置html页面无法生成，故而在编译时也没法找到这些const字段。</p><img src="/posts/undefined/2023-12-26_202430.png" class="" title="embed文件错误"><p>在排查以后才发现主要还是 <strong>esp-homekit-direct\external_libs\wifi_config\tools\embed.py</strong> 文件错误导致的</p><p>两处 print 均报错，需要加上括号后才能通过并编译出相应的 html 字段<br>print ‘Error: no parts found’ 修改为：print (‘Error: no parts found’)<br>print gen_embedded(f.read()) 修改为：print (gen_embedded(f.read()))</p><h4 id="报错二：生成-switch-bin-时设置的内存错误"><a href="#报错二：生成-switch-bin-时设置的内存错误" class="headerlink" title="报错二：生成 switch.bin 时设置的内存错误"></a>报错二：生成 switch.bin 时设置的内存错误</h4><img src="/posts/undefined/2023-12-26_205613.png" class="" title="firmware"><p>在输出内存配置中，选项为 xMB，例如这个模块8MB，但设置的时候为8m，会报错且无法输出 bin 文件。<br>这时候就需要修改 <strong>esp-homekit-direct\sdk\esp-open-rtos\parameters.mk</strong> 文件。</p><img src="/posts/undefined/2023-12-26_202721.png" class="" title="mk文件"><p>然后重新编译就能得到 switch.bin 了</p><p>感觉这个方式接入 homekit 是最方便的了，另一个种 installer 方式接入会等待 github很久而且还不一定成功，可能是因为墙的原因。<br>而这种方式就能很快接入 家庭，不过还未试看能否接入 HomeAssistan 了。</p><h2 id="（步骤详细）ESP8266控制继电器（支持HOMEKIT）"><a href="#（步骤详细）ESP8266控制继电器（支持HOMEKIT）" class="headerlink" title="（步骤详细）ESP8266控制继电器（支持HOMEKIT）"></a>（步骤详细）ESP8266控制继电器（支持HOMEKIT）</h2><p><strong>ESP8266控制继电器（支持HOMEKIT，无需homebridge，可用SIRI控制）</strong><br>首先感谢：<a href="https://github.com/RavenSystem/esp-homekit-devices">https://github.com/RavenSystem/esp-homekit-devices</a>   <a href="https://gitcode.com/ravensystem/esp-homekit-devices/overview?utm_source=csdn_github_accelerator&isLogin=1">——&gt;镜像地址</a></p><p><a href="https://github.com/Gruppio/Sonoff-Homekit">https://github.com/Gruppio/Sonoff-Homekit</a>   <a href="https://gitcode.com/mirrors/Gruppio/Sonoff-Homekit/overview">——&gt;镜像地址</a></p><p>主要设备：ESP8266、1路5V继电器、杜邦线若干。</p><img src="/posts/undefined/20190113140601235.jpg" class="" title="ESP8266"><img src="/posts/undefined/image-20231226210852275.png" class="" title="image-20231226210852275"><img src="/posts/undefined/image-20231226210922313.png" class="" title="image-20231226210922313"><p>下面开始进入正题：开始给ESP8266刷固件<br><a href="https://pan.baidu.com/s/1Xp3CvFbdh4McnkBIacfsuQ">https://pan.baidu.com/s/1Xp3CvFbdh4McnkBIacfsuQ</a> （固件自取）</p><p>本次采用esptool.py来刷鞋固件，所以需要给电脑安装python环境。<br><strong><a href="http://安装esptool.py/">安装esptool.py</a></strong><br>pip install esptool<br><strong>切换到python的安装路径不知道在哪的输入</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">where python</span><br></pre></td></tr></table></figure><img src="/posts/undefined/20190113142401883.png" class="" title="python路径"><p>cd &#x2F;python路径 切换到python安装目录，在此目录下放上我们要刷写的固件</p><img src="/posts/undefined/20190113142724432.png" class="" title="固件截图"><p>好，开始用micro-USB线将ESP8266连接到计算机（如果不识别自行安装CH340驱动）记住端口号，我的是COM3</p><img src="/posts/undefined/20190113143206883.png" class="" title="端口号"><p>先清空flash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">esptool.py --port COM3 erase_flash</span><br></pre></td></tr></table></figure><img src="/posts/undefined/2019011314341874.png" class="" title="清空FLASH"><p><strong>刷入固件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">esptool.py -p COM3 -b 115200 write_flash -fs 1MB -fm dout -ff 40m 0x0 rboot.bin 0x1000 blank_config.bin 0x2000 Sonoff_ON.bin</span><br></pre></td></tr></table></figure><img src="/posts/undefined/20190113143825879.png" class="" title="刷固件"><p>到这里固件已经刷入完成，搜索WIFI看到名为Switch-******的SSID，连接上后进入192.168.4.1进行设置为其连接上一个可联网的WIFI。</p><img src="/posts/undefined/20190113144217426.png" class="" title="在这里插入图片描述"><p>这时打开ios的家庭APP，添加配件，选择“我没有代码或无法扫描”输入配对码：11111111</p><img src="/posts/undefined/20190113144537603.png" class="" title="在这里插入图片描述"><img src="/posts/undefined/20190113144609464.png" class="" title="在这里插入图片描述"><p>我们可以从串口信息看到正在添加HOMEKIT 客户端</p><img src="/posts/undefined/20190113145119352.png" class="" title="在这里插入图片描述"><p>这时已经成功添加到家庭APP，支持SIRI控制</p><img src="/posts/undefined/20190113145151882.png" class="" title="在这里插入图片描述"><p>接下来，让我们把继电器连接到ESP8266的D6 (GPIO12)口上。ESP8266接笔记本的USB口可能会供电不足导致不能控制继电器。我在这里就用充电宝做电源了。我们可以试试让siri帮你开关继电器了</p><img src="/posts/undefined/2019011314553482.jpg" class="" title="在这里插入图片描述"><img src="/posts/undefined/20190113145902241.png" class="" title="在这里插入图片描述"><h1 id="方式二：一个文件-fullhaabot-bin"><a href="#方式二：一个文件-fullhaabot-bin" class="headerlink" title="方式二：一个文件 fullhaabot.bin"></a>方式二：一个文件 fullhaabot.bin</h1><p><strong>这个方法刷入并设置好WIFI后需要等待很久，看串口日志发现需要下载 github 上的 HAA文件下来，所以十分缓慢，而且 JSON 格式的 GPIO 设置自己还是没弄成功，这个也有相应的库</strong></p><h2 id="20-元将普通电灯接入"><a href="#20-元将普通电灯接入" class="headerlink" title="20 元将普通电灯接入"></a>20 元将普通电灯接入</h2><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最开始我是看到 B 站有刷固件接入 HomeKit 的视频，我了解了一下之后觉得有些问题，他们都用的是统一的一个 Sonoff 固件，刷入之后可以直接通过 NodeMCU D6 <strong>GPIO12</strong> 引脚输出高低电平，但是我甚至没找到这个固件的来源，所有视频都是草草地丢一个下载链接，告诉你下载刷进去就行了…而且这个输出引脚没法修改，后期接线的话会有一些问题。</p><p>后来我在 GitHub 上找到一个项目 <a href="https://github.com/RavenSystem/esp-homekit-devices">RavenSystem&#x2F;esp-homekit-devices</a>，该固件可以刷入采用 8266 芯片的设备，接入 HomeKit 并提供丰富的自定义选项，而我之前在 B 站看到的固件，应该就是基于该项目修改，原本用于 Sonoff 开关的一个固件（查了一下 Sonoff 是深圳一家公司的物联网产品，主打 WiFi 继电器）。那么就可以通过该项目，很轻松地实现我们的目标。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>我们需要这些东西：</p><p><a href="https://imwtx.com/usr/uploads/2020/04/859902515.jpg"><img src="/posts/undefined/859902515.jpg" class="" title="ESP-01"></a></p><p><a href="https://imwtx.com/usr/uploads/2020/04/762280384.jpg"><img src="/posts/undefined/762280384.jpg" class="" title="继电器"></a></p><p><a href="https://imwtx.com/usr/uploads/2020/04/934420998.jpg"><img src="/posts/undefined/934420998.jpg" class="" title="200V 转 5V"></a></p><table><thead><tr><th align="left">材料</th><th align="left">价格</th></tr></thead><tbody><tr><td align="left">ESP-01</td><td align="left">6.02 元</td></tr><tr><td align="left">继电器模块</td><td align="left">8 元</td></tr><tr><td align="left">220V 转 5V 降压模块</td><td align="left">6.25 元</td></tr><tr><td align="left">总计</td><td align="left">20.45 元</td></tr></tbody></table><p>除了这些以外，还需要杜邦线若干，ESP-01 USB 转串口下载器一个。</p><p><a href="https://imwtx.com/usr/uploads/2020/04/348784334.jpg"><img src="/posts/undefined/348784334.jpg" class="" title="杜邦线"></a></p><p><a href="https://imwtx.com/usr/uploads/2020/04/3231254825.jpg"><img src="/posts/undefined/3231254825.jpg" class="" title="USB 转串口"></a></p><p><a href="https://imwtx.com/usr/uploads/2020/04/2888607209.jpg"><img src="/posts/undefined/2888607209.jpg" class="" title="NodeMCU"></a></p><p>为什么不用 NodeMCU 呢，因为开发板体积太大了，不必要的引脚和模块浪费空间，而且 ESP-01 有配套的继电器模块，8 个引脚一一对应，可以直接插在上面，由继电器给 ESP-01 供电，并通过 GPIO 0 引脚控制继电器，避免了复杂的接线。</p><h2 id="刷机"><a href="#刷机" class="headerlink" title="刷机"></a>刷机</h2><p>首先给 ESP-01 刷入固件。</p><p><del>下载这三个文件 <a href="https://github.com/RavenSystem/haa_ota/releases/latest/download/haaboot.bin">haaboot.bin</a> <a href="https://github.com/SuperHouse/esp-open-rtos/raw/master/bootloader/firmware_prebuilt/rboot.bin">rboot.bin</a> <a href="https://github.com/SuperHouse/esp-open-rtos/raw/master/bootloader/firmware_prebuilt/blank_config.bin">blank_config.bin</a>。</del></p><p><strong>6 月 5 日 更新：</strong></p><p>今天发现 HAA 更新了他们的安装方式，之前的三个文件变成了一个 <a href="https://github.com/RavenSystem/haa/releases/latest/download/fullhaaboot.bin">fullhaabot.bin</a>。现在只需要下载这一个文件就可以了。</p><p>通过下载器让 ESP-01 连接电脑并进入烧录模式（flash-mode）。</p><p><a href="https://imwtx.com/usr/uploads/2020/04/107259591.jpg"><img src="/posts/undefined/107259591.jpg" class="" title="下载"></a></p><p>根据下载器所使用的 USB 转串口芯片安装对应的驱动程序。完成之后在 <code>设备管理器 - 端口</code> 中应该能看到对应设备，记录下设备名之后所对应的串口号。</p><p><a href="https://imwtx.com/usr/uploads/2020/04/2664456500.png"><img src="/posts/undefined/2664456500.png" class="" title="设备管理器"></a></p><p>鼠标右键点击 <code>属性 - 端口设置</code>，在 <code>位/秒(B)</code> 选项中修改当前的波特率，默认应该为 <code>9600</code>，为了下面脚本方便这里改为 <code>115200</code>。</p><p><a href="https://imwtx.com/usr/uploads/2020/04/37624545.png"><img src="/posts/undefined/37624545.png" class="" title="波特率"></a></p><p>这里我们采用 <a href="https://github.com/espressif/esptool">esptool.py</a> 来刷入固件，电脑需要有 Python 环境。</p><p>安装 esptool.py：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install esptool</span><br></pre></td></tr></table></figure><p><strong>Shell</strong></p><p>然后抹除 ESP-01 的闪存：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">esptool.py -p /dev/&lt;your_ESPPort&gt; erase_flash</span><br></pre></td></tr></table></figure><p><strong>Shell</strong></p><p>这里的 <code>/dev/&lt;your_ESPPort&gt;</code> 对应刚才在设备管理器中看到的端口号 COMx。</p><p><del>最后刷入刚才下载的三个文件：</del></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">esptool.py -p /dev/&lt;your_ESPPort&gt; --baud 115200 write_flash -fs 1MB -fm dout -ff 40m 0x0 rboot.bin 0x1000 blank_config.bin 0x2000 haaboot.bin # 更新之后用下面的方式刷入新文件</span><br></pre></td></tr></table></figure><p><strong>Shell</strong></p><p>现在只需要刷入这一个文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">esptool.py -p /dev/&lt;your_ESPPort&gt; --baud 115200 write_flash -fs 1MB -fm dout -ff 40m 0x0 fullhaaboot.bin</span><br></pre></td></tr></table></figure><p><strong>Shell</strong></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>完成之后，ESP-01 会建立一个 SSID 为 <code>HAA-XXXXXX</code> 的开放 2.4GHz WiFi 热点，连接它，等待几秒钟，就会跳转到 Home Accessory Architect 的配置页面。</p><p><a href="https://imwtx.com/usr/uploads/2020/04/3813654022.jpeg"><img src="/posts/undefined/3813654022.jpeg" class="" title="Home Accessory Architect"></a></p><p>这里我们需要写一个 JSON 来配置 ESP-01 的功能，HAA 提供了相当丰富的物联网设备类型供我们选择，这里我们选择相对简单的的开关（Switch）来配置。</p><p>将 wiki 中提供的范例 JSON 稍加修改：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;c&quot;</span>: &#123; <span class="attr">&quot;l&quot;</span>: <span class="number">1</span>, <span class="attr">&quot;b&quot;</span>: [&#123; <span class="attr">&quot;g&quot;</span>: <span class="number">2</span>, <span class="attr">&quot;t&quot;</span>: <span class="number">5</span> &#125;] &#125;,</span><br><span class="line">  <span class="attr">&quot;a&quot;</span>: [&#123;</span><br><span class="line">    <span class="attr">&quot;t&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;s&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;0&quot;</span>: &#123; <span class="attr">&quot;r&quot;</span>: [&#123; <span class="attr">&quot;g&quot;</span>: <span class="number">0</span>, <span class="attr">&quot;v&quot;</span>: <span class="number">1</span> &#125;] &#125;,</span><br><span class="line">    <span class="attr">&quot;1&quot;</span>: &#123; <span class="attr">&quot;r&quot;</span>: [&#123; <span class="attr">&quot;g&quot;</span>: <span class="number">0</span>, <span class="attr">&quot;v&quot;</span>: <span class="number">0</span> &#125;] &#125;,</span><br><span class="line">    <span class="attr">&quot;b&quot;</span>: [&#123; <span class="attr">&quot;g&quot;</span>: <span class="number">2</span> &#125;]</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>JSON</strong></p><p>这里表示了一个基本类型的开关（<code>&quot;t&quot;: 1</code>），通过 GPIO 0 控制继电器，因为这个继电器模块是 GPIO 0 低电平时闭合，所以在下面的 <code>&quot;0&quot;</code> 表示开关关闭的选项中 <code>&quot;v&quot;: 1</code> 表示高电平，而 <code>&quot;1&quot;</code> 与之相反。LED 指示灯定义为 GPIO 1，按钮定义为 GPIO 2，<code>&quot;s&quot;: 1</code> 表示通电后默认为开关打开状态。</p><p>详细的配置规则可以参阅原项目的 <a href="https://github.com/RavenSystem/esp-homekit-devices/wiki/Switches">Wiki</a>。</p><p>将 JSON 填入配置页面，并在下方连接 WiFi，注意 ESP-01 仅能连接 2.4GHz 的 WiFi。</p><p>之后点击保存并等待 7 分钟左右，完成后 LED 会亮起几秒钟。</p><p>在设备安装或者更新的时候，可以在 macOS 或 GNU&#x2F;Linux 设备上通过下面的命令检测日志获取设备状态：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -kulnw0 45678</span><br></pre></td></tr></table></figure><p><strong>Shell</strong></p><h2 id="接线"><a href="#接线" class="headerlink" title="接线"></a>接线</h2><p>将 220V 的火线与零线接到 220V 转 5V 降压模块上。</p><p>降压模块输出 5V 电接入继电器的 VCC 与 GND。将 ESP-01 插在继电器上，因为该继电器自带一个 5V 转 3.3V，所以可以直接给 ESP-01 供电。</p><p>将继电器的常开端（NO）与通用端（COM）与灯泡和 220V 连接，当继电器闭合时即形成回路点亮灯泡。</p><p><a href="https://imwtx.com/usr/uploads/2020/04/3817180843.jpg"><img src="/posts/undefined/3817180843.jpg" class="" title="接线"></a></p><h2 id="添加-HomeKit-设备"><a href="#添加-HomeKit-设备" class="headerlink" title="添加 HomeKit 设备"></a>添加 HomeKit 设备</h2><p>在 iOS 设备中打开「家庭」App，通过下方的设置代码，按照正常步骤添加新配件。大约等待 30 秒即可添加完成。</p><p><a href="https://imwtx.com/usr/uploads/2020/04/3106914530.png"><img src="/posts/undefined/3106914530.png" class="" title="QR-Code"></a>QR-Code</p><p><a href="https://imwtx.com/usr/uploads/2020/04/3727147545.jpg"><img src="/posts/undefined/3727147545.jpg" class="" title="Normal Code"></a>Normal Code</p><p>现在我们就可以在 iOS 设备上通过 HomeKit 控制灯泡了。</p><p><a href="https://imwtx.com/usr/uploads/2020/04/2321898814.png"><img src="/posts/undefined/2321898814.png" class="" title="添加配件"></a></p><p><a href="https://imwtx.com/usr/uploads/2020/04/4139855746.png"><img src="/posts/undefined/4139855746.png" class="" title="设置配件"></a></p><p><a href="https://imwtx.com/usr/uploads/2020/04/1199656558.png"><img src="/posts/undefined/1199656558.png" class="" title="家庭"></a></p><p><a href="https://imwtx.com/usr/uploads/2020/04/208523972.png"><img src="/posts/undefined/208523972.png" class="" title="Siri"></a></p><hr><h1 id="相关链接（侵删）"><a href="#相关链接（侵删）" class="headerlink" title="相关链接（侵删）"></a>相关链接（侵删）</h1><ol><li><a href="https://www.bilibili.com/video/BV1jE411K7AE/?vd_source=a92d344f368228401039c4668df84983">（bilibili视频）仅用20元成本，将esp8266接入HomeKit，用Siri控制你的灯</a></li><li><a href="https://blog.csdn.net/TWTF1998/article/details/86419559">ESP8266控制继电器（支持HOMEKIT）</a></li><li><a href="https://imwtx.com/archives/143/">20 元将普通电灯接入 HomeKit</a></li></ol><hr><center><font color=red>=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">ESP01S接入homekit，实现苹果家庭控制</summary>
    
    
    
    <category term="Linux" scheme="https://zml3589110.github.io/categories/Linux/"/>
    
    <category term="ESP8266" scheme="https://zml3589110.github.io/categories/ESP8266/"/>
    
    <category term="乐鑫" scheme="https://zml3589110.github.io/categories/%E4%B9%90%E9%91%AB/"/>
    
    
    <category term="Ubuntu" scheme="https://zml3589110.github.io/tags/Ubuntu/"/>
    
    <category term="ESP8266" scheme="https://zml3589110.github.io/tags/ESP8266/"/>
    
    <category term="乐鑫" scheme="https://zml3589110.github.io/tags/%E4%B9%90%E9%91%AB/"/>
    
    <category term="ESP01S" scheme="https://zml3589110.github.io/tags/ESP01S/"/>
    
    <category term="homekit" scheme="https://zml3589110.github.io/tags/homekit/"/>
    
    <category term="esp-homekit-direct" scheme="https://zml3589110.github.io/tags/esp-homekit-direct/"/>
    
    <category term="esp-homekit-devices" scheme="https://zml3589110.github.io/tags/esp-homekit-devices/"/>
    
  </entry>
  
  <entry>
    <title>ESP8266及ESP32固件生成及烧录方法</title>
    <link href="https://zml3589110.github.io/posts/2449930636.html"/>
    <id>https://zml3589110.github.io/posts/2449930636.html</id>
    <published>2023-12-23T09:16:20.000Z</published>
    <updated>2023-12-23T09:25:58.137Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>ESP32模块是将天线开关、RF balun、功率放大器、接收低噪声放大器、滤波器、电源管理模块等功能集于一体。ESP32只需极少的外围器件，即可实现强大的处理性能、可靠的安全性能，和 Wi-Fi &amp; 蓝牙功能。</p><p>采购新的ESP32模块的时候，里面是没有AT指令固件的，需要进行烧录，下面以ESP-32S为例进行说明，同时也作为以后工作中使用。</p><p>相关的工具和资料，可以关注我的公众号，回复“ <strong>ESP-32S</strong> ”，进行下载。</p><img src="/posts/2449930636/640" class="" title="null"><p><strong>一、烧录工具介绍</strong></p><p><strong>软件介绍</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在这里，老刘使用的是：  </span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flash_download_tool_v3.8.7_0</span><br></pre></td></tr></table></figure><img src="/posts/2449930636/640" class="" title="null"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我们将软件进行解压缩，找到以下图标的exe文件。</span><br></pre></td></tr></table></figure><img src="/posts/2449930636/640" class="" title="null"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">以管理员的模式进行打开。</span><br></pre></td></tr></table></figure><p> <img src="https://mmbiz.qpic.cn/sz_mmbiz_png/wusRysY7oJxqDCBT80Jia11gGTkiaR1lPEgURUVc1jFmBFAprEqmfyoue8tu6o8spficl21yxotrzGibKicEx0cllvA/640?wx_fmt=png" alt="null"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">其中ChipType我们选择“ESP32”，</span><br><span class="line"></span><br><span class="line">          WorkMode我们选择“develop”。点击OK。</span><br><span class="line"></span><br><span class="line">   弹出以下对话框。</span><br></pre></td></tr></table></figure><img src="/posts/2449930636/640" class="" title="null"><p>①我们选择SPIDownload</p><p>②点击…找到我们要下载固件的路径，地址为0x0</p><p>③默认的是40MHz</p><p>④默认的DIO模式</p><p>⑤要进行DoNotChgBin的勾选</p><p>⑥开始下载、停止、擦除按钮</p><p>⑦选择电脑识别的COM口，可以在设备管理器里面进行查询，而波特率，个人建议越大越好，下载的速度会快一些。</p><p><strong>硬件连接</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使用串口调试助手，连接到模块的&quot;下载固件&#x2F;输出日志&quot;的串口，在这里，根据文档中，ESP-32S模块的&quot;下载固件&#x2F;输出日志&quot;的串口为U0TXD和U0RXD。分别连接到USB转串口的工具上。别忘记连接GND。  </span><br><span class="line"></span><br><span class="line">在下载固件的时候，需要将模块的IO0和GND进行相连。通过ESP-32S的资料可以看出。</span><br></pre></td></tr></table></figure><img src="/posts/2449930636/640" class="" title="null"><p><strong>进行下载</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">点击START按键的时候，会有如下提示：</span><br></pre></td></tr></table></figure><img src="/posts/2449930636/640" class="" title="null"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SYNC等待上电同步，右边的窗口也在等待中，我们将ESP32模块重新上电。</span><br></pre></td></tr></table></figure><img src="/posts/2449930636/640" class="" title="null"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">软件自动进行下载操作，直到显示FINISH完成</span><br></pre></td></tr></table></figure><img src="/posts/2449930636/640" class="" title="null"><p>至此，下载完成，如果不成功，有以下几种可能，需要注意一下：</p><p>a、下载的版本号不对；</p><p>b、选择的bin文件不对；</p><p>c、没有勾选DoNotChgBin</p><p>d、没有选对COM口（USB转串口的COM以及模块的下载串口）</p><p>e、没有将GPIO0和GND相连。</p><p><strong>二、at.py工具的使用</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">该工具是用来修改ESP-AT官方发布的固件，包括Wi-Fi配置、证书和密钥配置、串口配置、GATTS配置等等。我们使用这个工具来进行&quot;AT命令响应&quot;串口的配置，配置为GPIO16和GPIO17。  </span><br><span class="line"></span><br><span class="line">方法如下：  </span><br></pre></td></tr></table></figure><p><strong>a、python安装（3.7版本以上，在这里默认安装好了）</strong></p><p>**b、at.py下载（在我的资料包里面有，或者从官网下载） **<img src="/posts/2449930636/640" class="" title="null"></p><p><strong>c、查看at.py的用法</strong></p><p>在命令行中输入以下指令：</p><ul><li></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python at.py modify_bin --help</span><br></pre></td></tr></table></figure><img src="/posts/2449930636/640" class="" title="null"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">会有详细的说明，我们现在使用更改串口的指令。按照官方的说明进行设置。</span><br></pre></td></tr></table></figure><p><strong>d、修改AT指令的串口</strong><img src="/posts/2449930636/640" class="" title="null"></p><ul><li></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">python at.py modify_bin --baud 921600 --tx_pin 17 --rx_pin 16 --cts_pin -1 --rts_pin -1 --input factory_XXX.bin  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> 注意factory\_XXX.bin文件可以到官网下载，也可以使用老刘资料包中的文件。</span><br><span class="line"></span><br><span class="line"> 官网下载地址：</span><br></pre></td></tr></table></figure><ul><li></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;docs.ai-thinker.com&#x2F;en&#x2F;esp32&#x2F;sdk</span><br></pre></td></tr></table></figure><img src="/posts/2449930636/640" class="" title="null"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">更改之后，生成了新的bin文件。而文件名称是target.bin文件，而且每次生成的都是这个文件名字，可以查看一下at.py文件，可以看见以下的代码，默认的就是target.bin。</span><br></pre></td></tr></table></figure><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">parser_modify_bin.add_argument(&#39;--output&#39;, &#39;-o&#39;,  </span><br><span class="line"> help&#x3D;&#39;Output filename of AT firmware or parameter partition&#39;,  </span><br><span class="line"> metavar&#x3D;&#39;filename&#39;,  </span><br><span class="line"> type&#x3D;str,  </span><br><span class="line"> default&#x3D;&#39;target.bin&#39;)  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   如果想更改其它的参数，也可以使用at.py工具进行修改。  </span><br></pre></td></tr></table></figure><p><strong>结：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">以上为使用at.py工具修改bin文件，以及如何进行烧录的设置。留作备份，后续工作中会使用到。</span><br></pre></td></tr></table></figure><p>延续阅读</p><hr><p>1.<a href="http://mp.weixin.qq.com/s?__biz=MjM5MzAzMjM0OQ==&mid=2455588987&idx=1&sn=7e90dbbb5bf50c08b9d06501e6210df7&chksm=b134c1898643489f64ad4c3f73dda88d9a3aac39115e7942e962f5c5b4684a4c9cc7039aefad&scene=21#wechat_redirect">环境搭建 | VScode与ESP-IDF完美结合让ESP32窜起来</a></p><p>2.<a href="http://mp.weixin.qq.com/s?__biz=MjM5MzAzMjM0OQ==&mid=2455588940&idx=1&sn=65db54c1526503c2da72a3561599682a&chksm=b134c1be864348a8e4e58d3692bd0470bcf877a46fd5890c2e26822d5fe8893296c2f787137a&scene=21#wechat_redirect">环境搭建 | Eclipse与ESP-IDF完美结合让ESP32飞起来</a></p><p>3.<a href="http://mp.weixin.qq.com/s?__biz=MjM5MzAzMjM0OQ==&mid=2455588591&idx=1&sn=7f8d969a497d6392f77f7be6149b8897&chksm=b134df1d8643560b902ae2dfa10020145346922fbe8c413bf71a28697a621f8898f9dbc19dc1&scene=21#wechat_redirect">Python挺酷的 | Thonny MicroPython ESP32 开发环境搭建</a></p><p>4.<a href="http://mp.weixin.qq.com/s?__biz=MjM5MzAzMjM0OQ==&mid=2455588498&idx=1&sn=30ec74449bbf45e7abf210175b602688&chksm=b134df6086435676ca8d9ccc741b29352866b8680c59be400d412d2d4d6063d54f51b704fc9c&scene=21#wechat_redirect">Python挺酷的 | 识别蓝牙MIDI（基于ESP32开发板）</a></p><p>5.<a href="http://mp.weixin.qq.com/s?__biz=MjM5MzAzMjM0OQ==&mid=2455588458&idx=1&sn=9cbc1c622ec4506c5c77fc8b105cdde0&chksm=b134df988643568ed12878ecde1cfecb8f5b3d3a03bd0b6fd43641ac61a9ccf07ea01279601e&scene=21#wechat_redirect">Python挺酷的 | PyCharm MicroPython ESP32 开发环境搭建</a></p><h1 id="出现等待上电同步如何解决"><a href="#出现等待上电同步如何解决" class="headerlink" title="出现等待上电同步如何解决"></a>出现等待上电同步如何解决</h1><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p><a href="https://so.csdn.net/so/search?q=%E5%BC%80%E5%8F%91%E6%9D%BF&spm=1001.2101.3001.7020">开发板</a>：ESP32 DEVKIT V1</p><p>芯片：<a href="https://so.csdn.net/so/search?q=ESP32&spm=1001.2101.3001.7020">ESP32</a>-F</p><h2 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h2><h6 id="使用乐鑫ESP32-DOWNLOAD-TOOL-V3-9-2向ESP32开发板烧录固件时，点击“START”，出现“等待上电同步”"><a href="#使用乐鑫ESP32-DOWNLOAD-TOOL-V3-9-2向ESP32开发板烧录固件时，点击“START”，出现“等待上电同步”" class="headerlink" title="使用乐鑫ESP32 DOWNLOAD TOOL V3.9.2向ESP32开发板烧录固件时，点击“START”，出现“等待上电同步”"></a>使用乐鑫ESP32 DOWNLOAD TOOL V3.9.2向ESP32开发板烧录固件时，点击“START”，出现“等待上电同步”</h6><h2 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h2><h6 id="同时按住RST与BOOT持续一秒，然后松开RST键，观察是否开始下载，如果未成功多试几次，已验证。"><a href="#同时按住RST与BOOT持续一秒，然后松开RST键，观察是否开始下载，如果未成功多试几次，已验证。" class="headerlink" title="同时按住RST与BOOT持续一秒，然后松开RST键，观察是否开始下载，如果未成功多试几次，已验证。"></a>同时按住RST与BOOT持续一秒，然后松开RST键，观察是否开始下载，如果未成功多试几次，已验证。</h6><img src="/posts/2449930636/beeee661fbb64fd7b8745897835a2003.png" class="" title="img"><hr><h1 id="相关链接（侵删）"><a href="#相关链接（侵删）" class="headerlink" title="相关链接（侵删）"></a>相关链接（侵删）</h1><ol><li><a href="https://www.ai2news.com/blog/3050637/">ESP8266及ESP32固件生成及烧录方法</a></li><li><a href="https://www.ai2news.com/blog/3050637/#">玩转开发板 | ESP8266及ESP32固件生成及烧录方法</a></li><li><a href="https://blog.csdn.net/weixin_52805940/article/details/133931201">ESP32系列烧录固件，出现等待上电同步如何解决</a></li></ol><hr><center><font color=red>=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">ESP8266及ESP32固件生成及烧录方法</summary>
    
    
    
    <category term="Linux" scheme="https://zml3589110.github.io/categories/Linux/"/>
    
    <category term="ESP8266" scheme="https://zml3589110.github.io/categories/ESP8266/"/>
    
    <category term="ESP32" scheme="https://zml3589110.github.io/categories/ESP32/"/>
    
    <category term="乐鑫" scheme="https://zml3589110.github.io/categories/%E4%B9%90%E9%91%AB/"/>
    
    
    <category term="Ubuntu" scheme="https://zml3589110.github.io/tags/Ubuntu/"/>
    
    <category term="ESP8266" scheme="https://zml3589110.github.io/tags/ESP8266/"/>
    
    <category term="物联网" scheme="https://zml3589110.github.io/tags/%E7%89%A9%E8%81%94%E7%BD%91/"/>
    
    <category term="乐鑫" scheme="https://zml3589110.github.io/tags/%E4%B9%90%E9%91%AB/"/>
    
    <category term="烧录" scheme="https://zml3589110.github.io/tags/%E7%83%A7%E5%BD%95/"/>
    
    <category term="USB0" scheme="https://zml3589110.github.io/tags/USB0/"/>
    
    <category term="ESP01S" scheme="https://zml3589110.github.io/tags/ESP01S/"/>
    
  </entry>
  
  <entry>
    <title>ESP01S刷MQTT固件</title>
    <link href="https://zml3589110.github.io/posts/4026894451.html"/>
    <id>https://zml3589110.github.io/posts/4026894451.html</id>
    <published>2023-12-23T08:39:20.000Z</published>
    <updated>2023-12-23T09:25:58.149Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简单步骤（这个方法不知为啥连接不上MQTT-可能是公司组mese）"><a href="#简单步骤（这个方法不知为啥连接不上MQTT-可能是公司组mese）" class="headerlink" title="简单步骤（这个方法不知为啥连接不上MQTT-可能是公司组mese）"></a>简单步骤（这个方法不知为啥连接不上MQTT-可能是公司组mese）</h1><p>刷个ESP01S把我卡了将近一天，特难受，记录一下正确的烧录固件方式。之前刷了固件总是没一点返回值(输入AT\r\n)，只是在电源重接时才会接收到一些乱码，总以为是CH340接出的3.3V电压不稳，换成PL2303HXD串口也没是一样没反应，改成用MCU里提供的电源照样没反应，其实就是刷固件的某些细节弄错了。</p><p>所需资料下载：链接：<a href="https://pan.baidu.com/s/1kuAWqa2V5djK2eT4i68HWA?pwd=h9n7%E6%8F%90%E5%8F%96%E7%A0%81%EF%BC%9Ah9n7">https://pan.baidu.com/s/1kuAWqa2V5djK2eT4i68HWA?pwd=h9n7提取码：h9n7</a></p><ol><li>刷固件接线方式</li></ol><p>TTL　　 　　 ESP01S</p><p>3.3V　 ——   3V3</p><p>3.3V　 ——   EN</p><p>GND  ——   IO0</p><p>GND  ——   GND</p><p>RX    ——   TX</p><p>TX　　——   RX</p><ol start="2"><li><p>烧录步骤</p><p>2.1 解压flash_download_tool_3.9.2_0.zip 并进入文件双击运行</p></li></ol><img src="/posts/4026894451/1936955-20230731105510760-1357049533.png" class="" title="img"><p>弹出 　</p><img src="/posts/4026894451/1936955-20230731105628751-1404211892.png" class="" title="img"><p>选择OK。</p><p>2.2 解压<img src="/posts/4026894451/1936955-20230731110417699-1172226695.png" class="" title="img">得到<img src="/posts/4026894451/1936955-20230731110452034-556921523.png" class="" title="img"><br>2.3  </p><img src="/posts/4026894451/1936955-20230731114235777-1672014936.png" class="" title="img"><p>2.4 <img src="/posts/4026894451/1936955-20230731114523241-1402549596.png" class="" title="img">等待呈现<img src="/posts/4026894451/1936955-20230731114606370-1158057307.png" class="" title="img">烧录完成。</p><p>2.5 烧录完成后接线方式（注意：先把TTL USB接口取下断电）</p><p>　　　　　　TTL　　 　　 ESP01S</p><p>　　　　　　3.3V　 ——   3V3</p><p>　　　　　　GND  ——   GND</p><p>　　　　　　RX    ——   TX</p><p>　　　　　　TX　　——   RX</p><p>2.6 测试MQTT固件是否刷成功</p><p>2.6.1 出bug <img src="/posts/4026894451/1936955-20230731122639613-1596493463.png" class="" title="img">， 其实重新上电就好了(把ESP01S的3V3针脚线拔了，重新接上就OK了)。<br>2.6.2 打开安信可的串口调试助手 <img src="/posts/4026894451/1936955-20230731123926859-2023667097.png" class="" title="img"><br>测试成功<img src="/posts/4026894451/1936955-20230731124139808-207517086.png" class="" title="img"></p><h2 id="所需文件下载地址："><a href="#所需文件下载地址：" class="headerlink" title="所需文件下载地址："></a>所需文件下载地址：</h2><p>1.烧录WIFI固件工具：ESP_DOWNLOAD_TOOL<br>下载地址：<a href="https://www.espressif.com/sites/default/files/tools/flash_download_tool_3.9.2_0.zip">https://www.espressif.com/sites/default/files/tools/flash_download_tool_3.9.2_0.zip</a></p><p>2.安信可串口调试助手<br>下载地址：<a href="https://docs.ai-thinker.com/_media/tools/aithinker_serial_tool_v1.2.3.7z">https://docs.ai-thinker.com/_media/tools/aithinker_serial_tool_v1.2.3.7z</a></p><p>3.MQTT透传AT固件(固件号：1471)<br>下载地址：<a href="https://docs.ai-thinker.com/_media/1471_esp8266-at_mqtt-1m.zip">https://docs.ai-thinker.com/_media/1471_esp8266-at_mqtt-1m.zip</a></p><h1 id="ESP-01S-ESP8266详情"><a href="#ESP-01S-ESP8266详情" class="headerlink" title="ESP-01S ESP8266详情"></a>ESP-01S ESP8266详情</h1><h2 id="产品概述"><a href="#产品概述" class="headerlink" title="产品概述"></a>产品概述</h2><p>ESP-01S ESP8266 是基于乐鑫ESP8266开发的低功耗WiFi模块，可以方便地进行二次开发，接入云端服务，实现手机3&#x2F;4G全球随时随地的控制，加速产品原型设计。</p><p>模块核心处理器 ESP8266 在较小尺寸封装中集成了业界领先的 Tensilica L106 超低功耗 32 位微型 MCU，带有 16 位精简模式，主频支持 80 MHz 和 160 MHz，支持 RTOS，集成 Wi-Fi MAC&#x2F; BB&#x2F;RF&#x2F;PA&#x2F;LNA。支持标准的 IEEE802.11 b&#x2F;g&#x2F;n 协议，完整的 TCP&#x2F;IP 协议栈。用户可以使用该模块为现有的设备添加联网功能，也可以构建独立的网络控制器。</p><p>ESP8266 是高性能无线 SoC，以最低成本提供最大实用性，为 Wi-Fi 功能嵌入其他系统提供无限可能。</p><h3 id="产品特点"><a href="#产品特点" class="headerlink" title="产品特点"></a>产品特点</h3><ul><li>体积超小的802.11b&#x2F;g&#x2F;n WiFi SOC模块</li><li>采用低功率32位CPU，可兼作应用处理器</li><li>主频最高可达160MHz</li><li>支持USART、GPIO等接口</li><li>支持多种休眠模式，深度睡眠电流低至20uA</li><li>内嵌LWIP协议栈</li><li>支持STA、AP、STA+AP工作模式</li><li>支持smart config、AirKiss一键配网</li><li>通用AT指令可快速上手</li><li>支持SDK二次开发</li><li>支持串口本地升级和远程固件升级（FOTA）</li></ul><h2 id="选型列表"><a href="#选型列表" class="headerlink" title="选型列表"></a>选型列表</h2><p>模组认证对比：</p><ul><li><a href="https://wiki.diustou.com/cn/ESP-01_ESP8266">ESP-01</a>：暂无</li><li><a href="https://wiki.diustou.com/cn/ESP-01M_ESP8285">ESP-01M</a>：FCC&#x2F;CE&#x2F;SRRC&#x2F;REACH&#x2F;RoHs</li><li>ESP-01S：RoHs</li><li><a href="https://wiki.diustou.com/cn/ESP-07_ESP8266">ESP-07</a>：暂无</li><li><a href="https://wiki.diustou.com/cn/ESP-07S_ESP8266">ESP-07S</a>：FCC&#x2F;CE&#x2F;SRRC&#x2F;REACH&#x2F;RoHs</li><li><a href="https://wiki.diustou.com/cn/ESP-12F_ESP8266">ESP-12F</a>：FCC&#x2F;CE&#x2F;SRRC&#x2F;IC&#x2F;KCC&#x2F;NCC&#x2F;REACH&#x2F;TELEC&#x2F;ANATEL&#x2F;RoHs</li><li><a href="https://wiki.diustou.com/cn/ESP-12S_ESP8266">ESP-12S</a>：FCC&#x2F;CE&#x2F;SRRC&#x2F;RoHs&#x2F;阿里飞燕认证</li><li><a href="https://wiki.diustou.com/cn/ESP-15F_ESP8266">ESP-15F</a>：SRRC</li></ul><p>电气参数对比：</p><table><thead><tr><th align="center">型号</th><th align="center">芯片方案</th><th align="center">天线形式</th><th align="center">封装形式</th><th align="center">尺寸 (mm)</th><th align="center">传输距离 (米)</th><th align="center">供电电压</th><th align="center">SPI Flash</th><th align="center">IO 数</th><th align="center">Modem Sleep</th><th align="center">Light Sleep</th><th align="center">Deep Sleep</th></tr></thead><tbody><tr><td align="center"><a href="https://wiki.diustou.com/cn/ESP-01_ESP8266">ESP-01</a></td><td align="center">ESP8266</td><td align="center">板载天线</td><td align="center">DIP-8</td><td align="center">24.7 * 14.4 * 11.0</td><td align="center">50</td><td align="center">3.3V</td><td align="center">8Mbit</td><td align="center">2</td><td align="center">20mA</td><td align="center">2mA</td><td align="center">20uA</td></tr><tr><td align="center"><a href="https://wiki.diustou.com/cn/ESP-01M_ESP8285">ESP-01M</a></td><td align="center">ESP8285</td><td align="center">板载天线</td><td align="center">DIP-18</td><td align="center">18.0 * 18.0 * 2.8</td><td align="center">40</td><td align="center">3.3V</td><td align="center">8Mbit &#x2F; 16Mbit</td><td align="center">11</td><td align="center">20mA</td><td align="center">2mA</td><td align="center">20uA</td></tr><tr><td align="center">ESP-01S</td><td align="center">ESP8266</td><td align="center">板载天线</td><td align="center">DIP-8</td><td align="center">24.7 * 14.4 * 11.0</td><td align="center">50</td><td align="center">3.3V</td><td align="center">8Mbit</td><td align="center">2</td><td align="center">20mA</td><td align="center">2mA</td><td align="center">20uA</td></tr><tr><td align="center"><a href="https://wiki.diustou.com/cn/ESP-07_ESP8266">ESP-07</a></td><td align="center">ESP8266</td><td align="center">IPEX座 &#x2F; 陶瓷天线</td><td align="center">SMD-16</td><td align="center">21.2 * 16.0 * 3.0</td><td align="center">50</td><td align="center">3.3V</td><td align="center">8Mbit</td><td align="center">9</td><td align="center">20mA</td><td align="center">2mA</td><td align="center">20uA</td></tr><tr><td align="center"><a href="https://wiki.diustou.com/cn/ESP-07S_ESP8266">ESP-07S</a></td><td align="center">ESP8266</td><td align="center">IPEX座 &#x2F; 陶瓷天线</td><td align="center">SMD-16</td><td align="center">17.0 * 16.0 * 3.0</td><td align="center">100</td><td align="center">3.3V</td><td align="center">32Mbit</td><td align="center">9</td><td align="center">20mA</td><td align="center">2mA</td><td align="center">20uA</td></tr><tr><td align="center"><a href="https://wiki.diustou.com/cn/ESP-12F_ESP8266">ESP-12F</a></td><td align="center">ESP8266</td><td align="center">板载天线</td><td align="center">SMD-22</td><td align="center">24.0 * 16.0 * 3.0</td><td align="center">80</td><td align="center">3.3V</td><td align="center">32Mbit</td><td align="center">9</td><td align="center">20mA</td><td align="center">2mA</td><td align="center">20uA</td></tr><tr><td align="center"><a href="https://wiki.diustou.com/cn/ESP-12S_ESP8266">ESP-12S</a></td><td align="center">ESP8266</td><td align="center">板载天线</td><td align="center">SMD-16</td><td align="center">24.0 * 16.0 * 3.0</td><td align="center">80</td><td align="center">3.3V</td><td align="center">32Mbit</td><td align="center">9</td><td align="center">20mA</td><td align="center">2mA</td><td align="center">20uA</td></tr><tr><td align="center"><a href="https://wiki.diustou.com/cn/ESP-15F_ESP8266">ESP-15F</a></td><td align="center">ESP8266</td><td align="center">板载天线 &#x2F; IPEX座</td><td align="center">PH2.54接线器</td><td align="center">41.3 * 24.1 * 6.6</td><td align="center">50</td><td align="center">5V</td><td align="center">32Mbit</td><td align="center">3</td><td align="center">多种</td><td align="center">多种</td><td align="center">多种</td></tr></tbody></table><ul><li>通信协议：完整的802.11b&#x2F;g&#x2F;n WiFi SoC模块</li><li>工作频段：2400~2483.5MHz</li></ul><h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><p>ESP-01S ESP8266 出厂时已默认内置 AT 固件，且默认波特率为 115200，可参考 <a href="https://wiki.diustou.com/cn/index.php?title=ESP-01S_ESP8266&printable#.E8.AE.BE.E8.AE.A1.E6.8C.87.E5.8D.97">#设计指南</a> 搭建最小系统电路，之后即可进行 AT 指令操作。</p><p>串口与网络调试助手下载：<a href="https://wiki.diustou.com/cn/%E6%96%87%E4%BB%B6:Sscom5.13.1.zip">串口调试助手</a></p><h3 id="硬件连接"><a href="#硬件连接" class="headerlink" title="硬件连接"></a>硬件连接</h3><table><thead><tr><th align="center"><a href="https://wiki.diustou.com/cn/%E6%96%87%E4%BB%B6:Icon-warning.png"><img src="/posts/4026894451/20px-Icon-warning.png" class="" title="Icon-warning.png"></a>注意</th></tr></thead><tbody><tr><td align="center">由于模块功率较大，尽量请勿使用 USB 转 TTL 的 3.3V 供电。建议使用 3 节干电池或经过 LDO 转换后的 3.3V。</td></tr></tbody></table><p><a href="https://wiki.diustou.com/cn/%E6%96%87%E4%BB%B6:ESP-01S_ESP8266_Connection.png"><img src="/posts/4026894451/800px-ESP-01S_ESP8266_Connection.png" class="" title="ESP-01S ESP8266 Connection.png"></a></p><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><p>本章节讲解如何在 PC 端通过串口配置 2 个 ESP-01S ESP8266 通过 TCP 相互通信。</p><table><thead><tr><th align="center"><a href="https://wiki.diustou.com/cn/%E6%96%87%E4%BB%B6:Icon-warning.png"><img src="/posts/4026894451/20px-Icon-warning.png" class="" title="Icon-warning.png"></a>注意</th></tr></thead><tbody><tr><td align="center">所有的 AT 命令都需要以 \r\n 结束（回车换行）。如果在 PC 端进行测试，可通过 PC 端代替一端模块建立相应的连接。</td></tr></tbody></table><p>更多示例请参考：</p><ul><li><a href="https://wiki.diustou.com/cn/%E6%96%87%E4%BB%B6:Esp8266_at_instruction_set_cn.pdf">AT指令集</a></li><li><a href="https://wiki.diustou.com/cn/%E6%96%87%E4%BB%B6:Esp8266_at_instruction_set_en.pdf">AT Instruction Set</a></li><li><a href="https://wiki.diustou.com/cn/%E6%96%87%E4%BB%B6:Esp8266_at_command_examples_cn.pdf">ESP8266 AT 指令使⽤用示例</a></li><li><a href="https://wiki.diustou.com/cn/%E6%96%87%E4%BB%B6:Esp8266_at_command_examples_en.pdf">ESP8266 AT Command Examples</a></li></ul><h4 id="TCP-通信测试"><a href="#TCP-通信测试" class="headerlink" title="TCP 通信测试"></a>TCP 通信测试</h4><p>本实验需要用到 2 个模块，如果用 PC 端作为服务器的话，单个模块也可以进行这个实验，见<a href="https://wiki.diustou.com/cn/index.php?title=ESP-01S_ESP8266&printable#HTTP_.E9.80.9A.E4.BF.A1.E6.B5.8B.E8.AF.95">#HTTP 通信测试</a>。</p><p><strong>TCP Server 端配置：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">AT+CWMODE&#x3D;2                                 &#x2F;&#x2F;配置为 AP 模式，响应：OK</span><br><span class="line">AT+CWSAP_DEF&#x3D;&quot;TCP_Server&quot;,&quot;12345678&quot;,5,4    &#x2F;&#x2F;配置 AP 信息，响应：OK</span><br><span class="line">AT+CIFSR                                    &#x2F;&#x2F;查询本机 IP 地址</span><br><span class="line">AT+CIPMUX&#x3D;1                                 &#x2F;&#x2F;开启多链接</span><br><span class="line">AT+CIPSERVER&#x3D;1                              &#x2F;&#x2F;开启服务器</span><br></pre></td></tr></table></figure><p><strong>TCP Client 端配置：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">AT+CWMODE&#x3D;1                                 &#x2F;&#x2F;配置为Station 模式</span><br><span class="line">AT+CWJAP_DEF&#x3D;&quot;TCP_Server&quot;,&quot;12345678&quot;        &#x2F;&#x2F;连接到AP</span><br><span class="line">AT+CIFSR                                    &#x2F;&#x2F;查询本机IP 地址</span><br><span class="line">AT+CIPMUX&#x3D;0                                 &#x2F;&#x2F;开启单链接</span><br><span class="line">AT+CIPSTART&#x3D;&quot;TCP&quot;,&quot;192.168.4.1&quot;,333         &#x2F;&#x2F;连接到TCP 服务器</span><br><span class="line">AT+CIPSEND&#x3D;12                               &#x2F;&#x2F;发送 12 个字节的数据到服务器端</span><br></pre></td></tr></table></figure><p>出现 <strong>&gt;</strong> 符号之后，串口发送任意 12 个字节，如 Hello world! （不带回车换行）</p><p>此时Server端的串口打印：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+IPD,0,12:Hello world!</span><br></pre></td></tr></table></figure><p>上述操作如果执行成功的话，预期结果如下：</p><table><thead><tr><th>Server 端：</th><th>Client 端：</th></tr></thead><tbody><tr><td><a href="https://wiki.diustou.com/cn/%E6%96%87%E4%BB%B6:ESP-01_07_12_ESP8266_User_Manual_6.png"><img src="/posts/4026894451/ESP-01_07_12_ESP8266_User_Manual_6.png" class="" title="ESP-01 07 12 ESP8266 User Manual 6.png"></a></td><td><a href="https://wiki.diustou.com/cn/%E6%96%87%E4%BB%B6:ESP-01_07_12_ESP8266_User_Manual_7.png"><img src="/posts/4026894451/ESP-01_07_12_ESP8266_User_Manual_7.png" class="" title="ESP-01 07 12 ESP8266 User Manual 7.png"></a></td></tr></tbody></table><p>TCP Server 端通信完成之后，如需关闭服务器，则发送：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AT+CIPSERVER&#x3D;0                              &#x2F;&#x2F;关闭服务器</span><br></pre></td></tr></table></figure><h3 id="HTTP-通信测试"><a href="#HTTP-通信测试" class="headerlink" title="HTTP 通信测试"></a>HTTP 通信测试</h3><p>如果只有一个模块的话，用户只要能把它连接到路由器中，也可以对单个模块进行测试。本例子中，模块是 Client 端，以访问本网页为例。</p><p><strong>Client 端配置：</strong></p><p>串口依次发送：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">AT+CWMODE&#x3D;1                                 &#x2F;&#x2F;配置为Station 模式</span><br><span class="line">AT+CWJAP_DEF&#x3D;&quot;SSID&quot;,&quot;password&quot;              &#x2F;&#x2F;SSID是路由器的名称，password是密码</span><br><span class="line">AT+CIPCLOSE                                 &#x2F;&#x2F;尝试关闭连接。如果之前没有连接则会报错，可忽略</span><br><span class="line">AT+CIPSTART&#x3D;&quot;TCP&quot;,&quot;wiki.diustou.com&quot;,80     &#x2F;&#x2F;连接到服务器</span><br><span class="line">AT+CIPMODE&#x3D;1                                &#x2F;&#x2F;透传模式</span><br><span class="line">AT+CIPSEND                                  &#x2F;&#x2F;发送内容</span><br></pre></td></tr></table></figure><p>出现 <strong>&gt;</strong> 符号之后，串口发送 GET 请求：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F; HTTP&#x2F;1.1</span><br><span class="line">Host: wiki.diustou.com:80</span><br><span class="line">Connection: keep-alive</span><br><span class="line">\r\n\r\n（结束符）</span><br></pre></td></tr></table></figure><p>之后服务器便会返回响应的内容。</p><p>退出透传，不要勾选新行（\r\n）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+++</span><br></pre></td></tr></table></figure><p>退出连接。</p><h2 id="固件烧录方法"><a href="#固件烧录方法" class="headerlink" title="固件烧录方法"></a>固件烧录方法</h2><h3 id="管脚电平"><a href="#管脚电平" class="headerlink" title="管脚电平"></a>管脚电平</h3><p>进入下载模式的时候，需要把 GPIO0管脚拉低，EN拉高，其他IO管脚悬空。管脚分布图见 <a href="https://wiki.diustou.com/cn/index.php?title=ESP-01S_ESP8266&printable#.E4.BA.A7.E5.93.81.E5.B0.BA.E5.AF.B8">#产品尺寸</a>。</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>\1. 打开烧录软件：<a href="https://wiki.diustou.com/cn/%E6%96%87%E4%BB%B6:ESP_Download_Tool_v3.8.5.zip">ESP Download Tool</a>。</p><p>\2. 依次点击 Developer Mode –&gt; ESP8266 DownloadTool。</p><p><a href="https://wiki.diustou.com/cn/%E6%96%87%E4%BB%B6:ESP-01_07_12_ESP8266_User_Manual_8.png"><img src="/posts/4026894451/ESP-01_07_12_ESP8266_User_Manual_8.png" class="" title="ESP-01 07 12 ESP8266 User Manual 8.png"></a></p><p><a href="https://wiki.diustou.com/cn/%E6%96%87%E4%BB%B6:ESP-01_07_12_ESP8266_User_Manual_9.png"><img src="/posts/4026894451/ESP-01_07_12_ESP8266_User_Manual_9.png" class="" title="ESP-01 07 12 ESP8266 User Manual 9.png"></a></p><p>\3. 点击 […]，选择所需固件，固件下载请参见 <a href="https://wiki.diustou.com/cn/index.php?title=ESP-01S_ESP8266&printable#ESP8266_.E5.9B.BA.E4.BB.B6.E6.B1.87.E6.80.BB">#ESP8266 固件汇总</a>。</p><p>\4. 选择之后记得勾选固件，勾选之后固件路径会变绿。</p><p>\5. 填入固件的起始位置，一般是 0x0，详见对应固件的说明。</p><p>\6. CrystalFreq：26M，<strong>此处禁止修改</strong>。</p><p>\7. SPI SPEED：40M，<strong>此处禁止修改</strong>。</p><p>\8. SPI MODE：DOUT</p><p>\9. FLASH SIZE：8Mbit</p><p>\10. 选择相应的串口，波特率任意。建议使用 FT232 串口模块，可以支持更高的波特率，有些串口模块不支持超过 1M 的波特率。</p><p>\11. 断开电源，点击 START，等待上电同步。</p><p><a href="https://wiki.diustou.com/cn/%E6%96%87%E4%BB%B6:ESP-01_07_12_ESP8266_User_Manual_10.png"><img src="/posts/4026894451/ESP-01_07_12_ESP8266_User_Manual_10.png" class="" title="ESP-01 07 12 ESP8266 User Manual 10.png"></a></p><p>\12. 重新上电便会开始下载。如果烧录成功，Download Panel 将提示：FINISH。</p><p><a href="https://wiki.diustou.com/cn/%E6%96%87%E4%BB%B6:ESP-01_07_12_ESP8266_User_Manual_11.png"><img src="/posts/4026894451/ESP-01_07_12_ESP8266_User_Manual_11.png" class="" title="ESP-01 07 12 ESP8266 User Manual 11.png"></a></p><h2 id="产品尺寸"><a href="#产品尺寸" class="headerlink" title="产品尺寸"></a>产品尺寸</h2><p><a href="https://wiki.diustou.com/cn/%E6%96%87%E4%BB%B6:ESP-01_ESP8266_Dimensions.png"><img src="/posts/4026894451/400px-ESP-01_ESP8266_Dimensions.png" class="" title="ESP-01 ESP8266 Dimensions.png"></a></p><h2 id="管脚定义"><a href="#管脚定义" class="headerlink" title="管脚定义"></a>管脚定义</h2><table><thead><tr><th align="center">#</th><th align="center">名称</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">GND</td><td align="center">GND</td></tr><tr><td align="center">2</td><td align="center">IO2</td><td align="center">U1_TXD，I2C_SDA，I2SO_WS</td></tr><tr><td align="center">3</td><td align="center">IO0</td><td align="center">GPIO0，HSPI_MISO，I2SI_DATA</td></tr><tr><td align="center">4</td><td align="center">RXD</td><td align="center">GPIO3，I2SO_DATA</td></tr><tr><td align="center">5</td><td align="center">TXD</td><td align="center">GPIO1</td></tr><tr><td align="center">6</td><td align="center">EN</td><td align="center">芯片使能端，高电平有效</td></tr><tr><td align="center">7</td><td align="center">RST</td><td align="center">复位引脚，低电平有效</td></tr><tr><td align="center">8</td><td align="center">VCC</td><td align="center">模组供电引脚，电压范围 3.0~3.6V</td></tr></tbody></table><h2 id="启动模式"><a href="#启动模式" class="headerlink" title="启动模式"></a>启动模式</h2><table><thead><tr><th align="center">模式</th><th align="center">CH_PD (EN)</th><th align="center">RST</th><th align="center">GPIO15</th><th align="center">GPIO0</th><th align="center">GPIO2</th><th align="center">TXD0</th></tr></thead><tbody><tr><td align="center">下载模式</td><td align="center">高</td><td align="center">高</td><td align="center">低</td><td align="center">低</td><td align="center">高</td><td align="center">高</td></tr><tr><td align="center">运行模式</td><td align="center">高</td><td align="center">高</td><td align="center">低</td><td align="center">高</td><td align="center">高</td><td align="center">高</td></tr><tr><td align="center">测试模式</td><td align="center">高</td><td align="center">高</td><td align="center">-</td><td align="center">-</td><td align="center">-</td><td align="center">低</td></tr></tbody></table><h2 id="电气特性"><a href="#电气特性" class="headerlink" title="电气特性"></a>电气特性</h2><h3 id="最大额定值"><a href="#最大额定值" class="headerlink" title="最大额定值"></a>最大额定值</h3><table><thead><tr><th align="center">额定值</th><th align="center">条件</th><th align="center">值</th><th align="center">单位</th></tr></thead><tbody><tr><td align="center">存储温度</td><td align="center">-</td><td align="center">-40 ~ 125</td><td align="center">℃</td></tr><tr><td align="center">最大焊接温度</td><td align="center">-</td><td align="center">250</td><td align="center">℃</td></tr><tr><td align="center">工作电压</td><td align="center">IPC&#x2F;JEDEC J-STD-020</td><td align="center">+3.0 ~ +3.6</td><td align="center">V</td></tr></tbody></table><h3 id="建议工作环境"><a href="#建议工作环境" class="headerlink" title="建议工作环境"></a>建议工作环境</h3><table><thead><tr><th>工作温度</th><th>-20</th><th>25</th><th>70</th><th>℃</th></tr></thead><tbody><tr><td>供电电压</td><td>3.0</td><td>3.3</td><td>3.6</td><td>V</td></tr></tbody></table><h3 id="数字端口特征"><a href="#数字端口特征" class="headerlink" title="数字端口特征"></a>数字端口特征</h3><table><thead><tr><th align="center">说明</th><th align="center">名称</th><th align="center">最小值</th><th align="center">典型值</th><th align="center">最大值</th><th align="center">单位</th></tr></thead><tbody><tr><td align="center">输入逻辑电平低</td><td align="center">VIL</td><td align="center">-0.3</td><td align="center">-</td><td align="center">0.25 * VDD</td><td align="center">V</td></tr><tr><td align="center">输入逻辑电平高</td><td align="center">VIH</td><td align="center">0.75 * VDD</td><td align="center">-</td><td align="center">VDD + 0.3</td><td align="center">V</td></tr><tr><td align="center">输出逻辑电平低</td><td align="center">VOL</td><td align="center">N</td><td align="center">-</td><td align="center">0.1 * VDD</td><td align="center">V</td></tr><tr><td align="center">输出逻辑电平高</td><td align="center">VOH</td><td align="center">0.8 * VDD</td><td align="center">-</td><td align="center">N</td><td align="center">V</td></tr></tbody></table><ul><li>注意：如无特殊说明，测试条件为：VDD &#x3D; 3.3 V，温度为 25 ℃。</li></ul><h3 id="功耗"><a href="#功耗" class="headerlink" title="功耗"></a>功耗</h3><p>所有测量均在没有 SAW 滤波器的情况下，于天线接口处完成。</p><p>所有发射数据是基于 90% 的占空比，在持续发射的模式下测得的。</p><table><thead><tr><th align="center">模式</th><th align="center">典型值</th><th align="center">单位</th></tr></thead><tbody><tr><td align="center">传送 802.11b, CCK 11Mbps, POUT&#x3D;+17dBm</td><td align="center">170</td><td align="center">mA</td></tr><tr><td align="center">传送 802.11g, OFDM 54Mbps, POUT &#x3D;+15dBm</td><td align="center">140</td><td align="center">mA</td></tr><tr><td align="center">传送 802.11n, MCS7, POUT &#x3D;+13dBm</td><td align="center">120</td><td align="center">mA</td></tr><tr><td align="center">接收 802.11b,包长 1024 字节, -80dBm</td><td align="center">50</td><td align="center">mA</td></tr><tr><td align="center">接收 802.11g,包长 1024 字节, -70dBm</td><td align="center">56</td><td align="center">mA</td></tr><tr><td align="center">接收 802.11n,包长 1024 字节, -65dBm</td><td align="center">56</td><td align="center">mA</td></tr><tr><td align="center">Modem-Sleep①</td><td align="center">20</td><td align="center">mA</td></tr><tr><td align="center">Light-Sleep②</td><td align="center">2</td><td align="center">mA</td></tr><tr><td align="center">Deep-Sleep③</td><td align="center">20</td><td align="center">uA</td></tr><tr><td align="center">Power Off</td><td align="center">0.5</td><td align="center">uA</td></tr></tbody></table><ul><li>注①：Modem-Sleep⽤于需要 CPU 一直处于工作状态如 PWM 或 I2S 应⽤等。在保持 WiFi 连接时，如果没有数据传输，可根据 802.11 标准 (如 U-APSD)，关闭 WiFi Modem 电路来省电。例如，在 DTIM3 时，每 sleep 300mS，醒来 3mS 接收 AP 的 Beacon 包等，则整体平均电流约 20mA。</li><li>注②：Light-Sleep 用于 CPU 可暂停的应用，如 WiFi 开关。在保持 WiFi 连接时，如果没有数据传输，可根据 802.11 标准(如 U-APSD)，关闭 WiFi Modem 电路并暂停 CPU 来省电。例如，在 DTIM3 时，每 sleep 300 ms，醒来 3ms 接收 AP 的 Beacon 包等，则整体平均电流约 2 mA。</li><li>注③：Deep-Sleep 用于不需一直保持 WiFi 连接，很长时间才发送一次数据包的应用，如每 100 秒测量⼀次温度的传感器。每 300 s 醒来后需 0.3s - 1s 连上 AP 发送数据,则整体平均电流可远小于 1mA。</li></ul><h3 id="发射功率"><a href="#发射功率" class="headerlink" title="发射功率"></a>发射功率</h3><table><thead><tr><th align="center">描述</th><th align="center">最小值</th><th align="center">典型值</th><th align="center">最大值</th><th align="center">单位</th></tr></thead><tbody><tr><td align="center">802.11b@11Mbps</td><td align="center">14</td><td align="center">16</td><td align="center">18</td><td align="center">dBm</td></tr><tr><td align="center">802.11g@54Mbps</td><td align="center">12</td><td align="center">14</td><td align="center">16</td><td align="center">dBm</td></tr><tr><td align="center">802.11n@HT20, MCS7</td><td align="center">11</td><td align="center">13</td><td align="center">15</td><td align="center">dBm</td></tr></tbody></table><h3 id="接收灵敏度"><a href="#接收灵敏度" class="headerlink" title="接收灵敏度"></a>接收灵敏度</h3><table><thead><tr><th align="center">参数</th><th align="center">典型值</th><th align="center">单位</th></tr></thead><tbody><tr><td align="center">DSSS, 1 Mbps</td><td align="center">-90</td><td align="center">dBm</td></tr><tr><td align="center">CCK, 11 Mbps</td><td align="center">-85</td><td align="center">dBm</td></tr><tr><td align="center">6 Mbps (1&#x2F;2 BPSK)</td><td align="center">-88</td><td align="center">dBm</td></tr><tr><td align="center">54 Mbps (3&#x2F;4 64-QAM)</td><td align="center">-70</td><td align="center">dBm</td></tr><tr><td align="center">HT20, MCS7 (65 Mbps, 72.2 Mbps)</td><td align="center">-67</td><td align="center">dBm</td></tr></tbody></table><h2 id="设计指南"><a href="#设计指南" class="headerlink" title="设计指南"></a>设计指南</h2><h3 id="天线摆放说明"><a href="#天线摆放说明" class="headerlink" title="天线摆放说明"></a>天线摆放说明</h3><p>为了使终端产品获得最佳的射频性能，请注意根据本指南合理设计模块及天线在底板上的摆放位置。</p><ul><li>方案 1（推荐）：将模块沿 PCB 板边放置，且天线在板框外；</li><li>方案 2：将模块沿 PCB 板边放置，天线沿板边放置且下方挖空；</li></ul><p><a href="https://wiki.diustou.com/cn/%E6%96%87%E4%BB%B6:ESP-12S_Antenna_Location.png"><img src="/posts/4026894451/400px-ESP-12S_Antenna_Location.png" class="" title="ESP-12S Antenna Location.png"></a></p><h3 id="模块外围走线说明"><a href="#模块外围走线说明" class="headerlink" title="模块外围走线说明"></a>模块外围走线说明</h3><ol><li>模块外围引出了一些 GPIO 口，如需使用建议在 IO 口上串联 10-100 欧姆的电阻。这样可以抑制过冲，是两边电平更平稳。对 EMI 和 ESD 都有帮助。</li><li>特殊 IO 口的上下拉，需参考规格书的使用说明，此处会影响到模块的启动配置。</li><li>模块的 IO 口是 3.3V 如果主控与模块的 IO 电平不匹配，需要增加电平转换电路。</li><li>如果 IO 口直连到外围接口，或者排针等端子，建议在 IO 走线靠近端子处预留 ESD 器件。</li></ol><h3 id="GPIO-电平转换"><a href="#GPIO-电平转换" class="headerlink" title="GPIO 电平转换"></a>GPIO 电平转换</h3><p><a href="https://wiki.diustou.com/cn/%E6%96%87%E4%BB%B6:ESP-01_07_12_ESP8266_User_Manual_1.png"><img src="/posts/4026894451/400px-ESP-01_07_12_ESP8266_User_Manual_1.png" class="" title="ESP-01 07 12 ESP8266 User Manual 1.png"></a></p><h3 id="电源参考设计"><a href="#电源参考设计" class="headerlink" title="电源参考设计"></a>电源参考设计</h3><p><a href="https://wiki.diustou.com/cn/%E6%96%87%E4%BB%B6:ESP-01_07_12_ESP8266_User_Manual_2.png"><img src="/posts/4026894451/400px-ESP-01_07_12_ESP8266_User_Manual_2.png" class="" title="ESP-01 07 12 ESP8266 User Manual 2.png"></a></p><h3 id="ADC-参考设计"><a href="#ADC-参考设计" class="headerlink" title="ADC 参考设计"></a>ADC 参考设计</h3><p><a href="https://wiki.diustou.com/cn/%E6%96%87%E4%BB%B6:ESP-01_07_12_ESP8266_User_Manual_3.png"><img src="/posts/4026894451/400px-ESP-01_07_12_ESP8266_User_Manual_3.png" class="" title="ESP-01 07 12 ESP8266 User Manual 3.png"></a></p><h3 id="自动下载电路"><a href="#自动下载电路" class="headerlink" title="自动下载电路"></a>自动下载电路</h3><p><a href="https://wiki.diustou.com/cn/%E6%96%87%E4%BB%B6:ESP-01_07_12_ESP8266_User_Manual_4.png"><img src="/posts/4026894451/400px-ESP-01_07_12_ESP8266_User_Manual_4.png" class="" title="ESP-01 07 12 ESP8266 User Manual 4.png"></a></p><h3 id="回流焊炉温曲线"><a href="#回流焊炉温曲线" class="headerlink" title="回流焊炉温曲线"></a>回流焊炉温曲线</h3><p><a href="https://wiki.diustou.com/cn/%E6%96%87%E4%BB%B6:ESP-01_07_12_ESP8266_User_Manual_5.png"><img src="/posts/4026894451/400px-ESP-01_07_12_ESP8266_User_Manual_5.png" class="" title="ESP-01 07 12 ESP8266 User Manual 5.png"></a></p><h2 id="资源下载"><a href="#资源下载" class="headerlink" title="资源下载"></a>资源下载</h2><p>ESP8266 和 ESP8285 资源通用。</p><h3 id="用户手册"><a href="#用户手册" class="headerlink" title="用户手册"></a>用户手册</h3><ul><li><a href="https://wiki.diustou.com/cn/%E6%96%87%E4%BB%B6:Esp8266_series_modules_user_manual_zh_v1.5.pdf">ESP8266系列模组用户手册</a></li><li><a href="https://wiki.diustou.com/cn/%E6%96%87%E4%BB%B6:Esp8266_series_modules_user_manual_en.pdf">ESP8266 Series Modules User Manual</a></li></ul><h3 id="示例程序"><a href="#示例程序" class="headerlink" title="示例程序"></a>示例程序</h3><ul><li><a href="https://wiki.diustou.com/cn/%E6%96%87%E4%BB%B6:Esp8266_stm32_demo.zip">ESP8266 的 STM32 AT 指令工程</a></li></ul><h3 id="ESP8266-固件汇总"><a href="#ESP8266-固件汇总" class="headerlink" title="ESP8266 固件汇总"></a>ESP8266 固件汇总</h3><p><strong>博安通 AT 固件</strong></p><ul><li>特性：操作简单，任何mcu均可直接接入</li><li>下载地址： <a href="https://docs.ai-thinker.com/_media/esp8266/bat_at_v1.7.1.0.rar">博安通出厂固件</a></li><li>更新时间：2019年12月22日</li><li>更新说明： v1.7.1.0 AT Firmware，内含 8Mbit 和 32Mbit 两个版本，请客户根据自己产品的flash大小来烧录</li></ul><p><strong>直连腾讯开发平台的AT固件</strong></p><ul><li>特性：可连接腾讯开发平台</li><li>下载地址： <a href="https://docs.ai-thinker.com/_media/esp8266/aithinker_qcloud_at.rar">安信可腾讯云AT固件</a></li><li>更新说明：2020年02月28日更新，串口引脚为 txd&#x3D;GPIO15, rxd&#x3D;GPIO13.</li></ul><p><strong>MQTT 透传AT固件 (默认)</strong></p><ul><li>特性：支持TLS连接，务必注意通讯引脚为（ txd&#x3D;GPIO15, rxd&#x3D;GPIO13）</li><li>下载地址： <a href="https://docs.ai-thinker.com/_media/esp8266/mqtt%E5%9B%BA%E4%BB%B6.rar">MQTT固件</a></li><li>使用说明： <a href="https://wiki.diustou.com/cn/%E6%96%87%E4%BB%B6:ESP8266-MQTT%E6%8C%87%E4%BB%A4%E6%89%8B%E5%86%8C.pdf">ESP8266-MQTT指令手册</a></li><li>更新时间：2020年2月21日</li><li>更新说明：IO13为RX、IO15为TX作为AT串口与单片机TX&#x2F;RX接线连接，串口1作为log串口，默认波特率为115200。测试TCP直连服务器使用 EMQ，测试TLS连接服务器使用 AWS。</li></ul><p><strong>MQTT透传AT固件（AT通讯串口改为UART0）</strong></p><ul><li>特性：支持TLS连接</li><li>下载地址：<a href="https://docs.ai-thinker.com/_media/mqtt.zip">MQTT固件（改）</a></li><li>使用说明：<a href="https://wiki.diustou.com/cn/%E6%96%87%E4%BB%B6:ESP8266-MQTT%E6%8C%87%E4%BB%A4%E6%89%8B%E5%86%8C.pdf">ESP8266-MQTT指令手册</a></li><li>更新时间：2020年5月09日</li><li>更新说明：正常的RX、TX作为AT串口与单片机TX&#x2F;RX接线连接，串口1作为log串口，默认波特率为115200。测试TCP直连服务器使用 EMQ，测试TLS连接服务器使用 AWS。</li></ul><p><strong>出厂默认 AT 固件</strong></p><ul><li>特性：一条指令即可连接到安信可云服务，操作简单，任何mcu均可直接接入</li><li>下载地址：<a href="https://docs.ai-thinker.com/_media/esp8266/ai-thinker_esp8266_at_firmware_dout_v1.5.4.1-a_20171130.rar">默认出厂固件</a></li><li>更新时间：2017年11月30日</li><li>更新说明：v1.5.4.1 AT Firmware，内含 8Mbit 和 32Mbit 两个版本 ，注意：1MByte flash的模组因为内存不足，所有带AiCloud2.0的AT固件都不能使用，flash大于或等于2MByte。使用CIUPDATE命令升级前，请确认模组的flash大于或等于2M！</li></ul><h3 id="ESP8266-开发工具"><a href="#ESP8266-开发工具" class="headerlink" title="ESP8266 开发工具"></a>ESP8266 开发工具</h3><p><strong>SDK 一体化开发环境：</strong></p><ul><li>下载地址：<a href="https://pan.baidu.com/s/1Mbi2xoHQxyYM35lnJEUBTA">网盘链接</a> 提取码： fzfd</li><li>更新时间：2019.07.22</li><li>更新说明：支持 ESP32&#x2F;ESP8266</li></ul><p><strong>烧录WiFi固件工具：</strong></p><ul><li>下载地址：<a href="https://wiki.diustou.com/cn/%E6%96%87%E4%BB%B6:ESP_Download_Tool_v3.8.5.zip">ESP Download Tool</a></li><li>更新时间：2020.8.15</li><li>更新说明：支持ESP32&#x2F;ESP32-S2&#x2F;ESP8266&#x2F;ESP8285</li></ul><h3 id="AT-指令"><a href="#AT-指令" class="headerlink" title="AT 指令"></a>AT 指令</h3><ul><li>ESP8266 AT指令集 <a href="https://wiki.diustou.com/cn/%E6%96%87%E4%BB%B6:Esp8266_at_instruction_set_cn.pdf">中文</a>，<a href="https://wiki.diustou.com/cn/%E6%96%87%E4%BB%B6:Esp8266_at_instruction_set_en.pdf">英文</a></li><li>ESP8266 AT 指令使用示例 <a href="https://wiki.diustou.com/cn/%E6%96%87%E4%BB%B6:Esp8266_at_command_examples_cn.pdf">中文</a>，<a href="https://wiki.diustou.com/cn/%E6%96%87%E4%BB%B6:Esp8266_at_command_examples_en.pdf">英文</a></li></ul><h3 id="官方应用文档"><a href="#官方应用文档" class="headerlink" title="官方应用文档"></a>官方应用文档</h3><ul><li>ESP8266 SSL加密使用手册 <a href="https://wiki.diustou.com/cn/%E6%96%87%E4%BB%B6:Esp8266_sdk_ssl_user_manual_cn.pdf">中文</a>，<a href="https://wiki.diustou.com/cn/%E6%96%87%E4%BB%B6:Esp8266_sdk_ssl_user_manual_en.pdf">英文</a></li><li>ESP8266 低功耗解决方案 <a href="https://wiki.diustou.com/cn/%E6%96%87%E4%BB%B6:Esp8266-low_power_solutions_cn.pdf">中文</a>，<a href="https://wiki.diustou.com/cn/%E6%96%87%E4%BB%B6:Esp8266-low_power_solutions_en.pdf">英文</a></li><li>ESP8266 flash读写说明 <a href="https://wiki.diustou.com/cn/%E6%96%87%E4%BB%B6:Esp8266_flash_rw_operation_cn.pdf">中文</a>，<a href="https://wiki.diustou.com/cn/%E6%96%87%E4%BB%B6:Espressif_iot_flash_rw_operation_en.pdf">英文</a></li><li>ESP8266 云端升级指南<a href="https://wiki.diustou.com/cn/%E6%96%87%E4%BB%B6:Esp8266_fota_upgrade_cn.pdf">中文</a>，<a href="https://wiki.diustou.com/cn/%E6%96%87%E4%BB%B6:Esp8266_fota_guide_en_.pdf">英文</a></li><li>ESP8266 固件下载协议<a href="https://wiki.diustou.com/cn/%E6%96%87%E4%BB%B6:Esp8266-sdk_application_note_firmware_download_protocol_cn.pdf">中文</a>，<a href="https://wiki.diustou.com/cn/%E6%96%87%E4%BB%B6:Esp8266-sdk_application_note_firmware_download_protocol_en.pdf">英文</a></li><li>ESP8266 技术参考 <a href="https://wiki.diustou.com/cn/%E6%96%87%E4%BB%B6:Esp8266-technical_reference_cn.pdf">中文</a>，<a href="https://wiki.diustou.com/cn/%E6%96%87%E4%BB%B6:Esp8266-technical_reference_en.pdf">英文</a></li><li>ESP8266 常见问题 <a href="https://wiki.diustou.com/cn/%E6%96%87%E4%BB%B6:Espressif_faq_cn.pdf">中文</a>，<a href="https://wiki.diustou.com/cn/%E6%96%87%E4%BB%B6:Espressif_faq_en.pdf">英文</a></li><li>ESP8266 硬件设计指南 <a href="https://wiki.diustou.com/cn/%E6%96%87%E4%BB%B6:Esp8266_hardware_design_guidelines_cn.pdf">中文</a>，<a href="https://wiki.diustou.com/cn/%E6%96%87%E4%BB%B6:Esp8266_hardware_design_guidelines_en.pdf">英文</a></li><li>ESP8266 WIFI信道选择指南 <a href="https://wiki.diustou.com/cn/%E6%96%87%E4%BB%B6:Esp8266_hardware_design_guidelines_cn.pdf">中文</a>，<a href="https://wiki.diustou.com/cn/%E6%96%87%E4%BB%B6:Esp8266_hardware_design_guidelines_en.pdf">英文</a></li><li>ESP8266_RTOS_SDK 编程手册（RTOS SDK V2.X 及之前版本） <a href="https://wiki.diustou.com/cn/%E6%96%87%E4%BB%B6:Esp8266_rtos_sdk_programming_guide_cn.pdf">中文</a>，<a href="https://wiki.diustou.com/cn/%E6%96%87%E4%BB%B6:Esp8266_rtos_sdk_programming_guide_en.pdf">英文</a></li><li>ESP8266_RTOS_SDK API参考（RTOS SDK V2.X 及之前版本） <a href="https://wiki.diustou.com/cn/%E6%96%87%E4%BB%B6:Esp8266_rtos_sdk_api_reference.pdf">中文</a></li><li>ESP8266_RTOS_SDK V3.0 及之后版本<a href="https://docs.ai-thinker.com/lib/exe/fetch.php?tok=cc983e&media=https://github.com/espressif/ESP8266_RTOS_SDK">编程代码</a> <a href="https://docs.ai-thinker.com/lib/exe/fetch.php?tok=b5555b&media=https://docs.espressif.com/projects/esp8266-rtos-sdk/en/latest/get-started/index.html">编程指南</a></li></ul><h3 id="产品规格书"><a href="#产品规格书" class="headerlink" title="产品规格书"></a>产品规格书</h3><ul><li><a href="https://wiki.diustou.com/cn/%E6%96%87%E4%BB%B6:Esp-01s_product_specification_zh_v1.0.pdf">产品规格书</a></li></ul><h3 id="SDK-二次开发资料"><a href="#SDK-二次开发资料" class="headerlink" title="SDK 二次开发资料"></a>SDK 二次开发资料</h3><ul><li>硬件资源： <a href="https://wiki.diustou.com/cn/%E6%96%87%E4%BB%B6:Esp8266_modules_libraries.zip">ESP8266PCB封装文件</a></li><li><a href="http://aiclouds3.0-docs.aithinker.com/#/2.device/configuration_windows">Windows平台 SDK二次开发环境搭建</a></li><li><a href="http://aiclouds3.0-docs.aithinker.com/#/2.device/configuration_linux">Linux (Ubuntu) 平台 SDK二次开发环境搭建</a></li></ul><h4 id="云平台对接示例"><a href="#云平台对接示例" class="headerlink" title="云平台对接示例"></a>云平台对接示例</h4><ul><li><a href="https://github.com/Ai-Thinker-Open/Ai-Thinker-Open-qcloud-esp-wifi">对接腾讯物联开发平台 （不支持任何音响语音控制）</a></li><li><a href="https://blog.csdn.net/Boantong_/article/details/104633166">AT对接亚马逊云平台（不支持任何音响语音控制）</a></li><li><a href="https://blog.csdn.net/Boantong_/article/details/104791452">AT透传指令接入阿里云物联网平台笔记（非天猫精灵语音控制）</a></li><li><a href="https://blog.csdn.net/Boantong_/article/details/104836750">AT透传指令接入微软IOT物联网平台</a></li><li><a href="https://blog.csdn.net/Boantong_/article/details/106059991">接入天猫精灵IOT平台控制单路插座的教程 （支持天猫精灵语音控制）</a></li><li><a href="https://blog.csdn.net/Boantong_/article/details/105970895">接入天猫精灵IOT平台实现控制RGB冷暖灯的教程 （支持天猫精灵语音控制）</a></li><li><a href="https://blog.csdn.net/Boantong_/article/details/105676625">接入阿里生活飞燕平台国际版，实现亚马逊Alexa Echo音响语音控制； （不支持天猫精灵语音控制）</a></li><li><a href="https://blog.csdn.net/Boantong_/article/details/105651819">接入阿里飞燕 , 轻松天猫精灵语音控制单片机。 （天猫精灵语音控制）</a></li><li>小程序MQTT通过连接百度天工远程控制安信可ESP8266开发板； （不支持任何音响语音控制）<ul><li><a href="https://github.com/Ai-Thinker-Open/WCMiniColorControl">小程序源码</a></li><li><a href="https://github.com/Ai-Thinker-Open/AiClouds3.0-Device/tree/master/Ai-examples/4.BaiDu-rgb-esp8266">设备端源码</a></li></ul></li></ul><h1 id="ESP8266上云实验"><a href="#ESP8266上云实验" class="headerlink" title="ESP8266上云实验"></a>ESP8266上云实验</h1><p>由于AT固件的配置过于麻烦，所以使用了MQTT固件进行配置。</p><p>ESP8266 - MQTT固件<br>由于购买回来的ESP8266-01S默认的是AT固件，现在需要用到MQTT指令，所以需要将其刷到AT固件</p><p>MQTT 固件 ： <a href="https://docs.ai-thinker.com/_media/1471_esp8266-at_mqtt-1m.zip">https://docs.ai-thinker.com/_media/1471_esp8266-at_mqtt-1m.zip</a></p><p>刷固件软件 ：<a href="https://docs.ai-thinker.com/_media/flash_download_tool_v3.8.5_1.zip">https://docs.ai-thinker.com/_media/flash_download_tool_v3.8.5_1.zip</a></p><p>将以上两个文件均下载，保存。</p><p>打开刷固件软件 - 选择ESP8266 -&gt; DOWNLOADTOLL -&gt; 将固件包导入</p><p>其余配置如图所示，配置完可以点击START</p><img src="/posts/4026894451/ffb8c69fbdd56aae1211da570d6ede69.png" class="" title="img"><h5 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h5><ol><li>RST和INT0需用杜邦线接地，然后把RST悬空。点击START后，会显示等待上电同步，需插拔一下3.3V电源线，然后就能跑起来</li><li>设置SPI SPEED 为 20Mhz 和 SPI MODE 为 DIO、 波特率为115200</li><li>没有勾选固件，也是能跑，但跑了个寂寞</li><li>刷完固件，需重新启动一下，然后通过串口查询当前的固件版本 AT+GMR</li></ol><h4 id="ESP8266-MQTT配置指令"><a href="#ESP8266-MQTT配置指令" class="headerlink" title="ESP8266 - MQTT配置指令"></a>ESP8266 - MQTT配置指令</h4><table><thead><tr><th><strong>指令</strong></th><th></th></tr></thead><tbody><tr><td>配置 STA 模式</td><td>AT+CWMODE&#x3D;1</td></tr><tr><td>连接路由器</td><td>AT+CWJAP&#x3D;”wifi_Name”,”wifi_Password”</td></tr></tbody></table><table><thead><tr><th>配置MQTT属性</th><th>AT+MQTTUSERCFG&#x3D;0,1,”clientID”,”username”,”password”,0,0,””</th></tr></thead><tbody><tr><td>连接制定的 MQTT broker</td><td>AT+MQTTCONN&#x3D;0,”47.111.117.220”,1883,0</td></tr></tbody></table><table><thead><tr><th>查询 MQTT 连接状态</th><th>AT+MQTTCONN?</th></tr></thead><tbody><tr><td>订阅 topic 数据</td><td>AT+MQTTSUB&#x3D;0,”topicName”,1</td></tr></tbody></table><table><thead><tr><th>发布 topic 数据</th><th>AT+MQTTPUB&#x3D;0,”topicName”,”payload”,1,0</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>指令解析</p><p><a href="https://docs.espressif.com/projects/esp-at/zh_CN/release-v2.2.0.0_esp8266/AT_Command_Set/MQTT_AT_Commands.html#">MQTT AT Commands — ESP-AT 用户指南 文档 (espressif.com)</a></p><hr><h1 id="相关链接（侵删）"><a href="#相关链接（侵删）" class="headerlink" title="相关链接（侵删）"></a>相关链接（侵删）</h1><ol><li><p><a href="https://www.cnblogs.com/xilimiss510/p/17592856.html">ESP01S刷MQTT固件</a></p></li><li><p><a href="https://wiki.diustou.com/cn/index.php?title=ESP-01S_ESP8266&printable">ESP-01S ESP8266</a></p></li><li><p><a href="https://blog.csdn.net/qq_45249507/article/details/129007327">基于ESP8266上云实验</a></p></li></ol><hr><center><font color=red>=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">ESP01S刷MQTT固件</summary>
    
    
    
    <category term="Linux" scheme="https://zml3589110.github.io/categories/Linux/"/>
    
    <category term="ESP8266" scheme="https://zml3589110.github.io/categories/ESP8266/"/>
    
    <category term="乐鑫" scheme="https://zml3589110.github.io/categories/%E4%B9%90%E9%91%AB/"/>
    
    
    <category term="Ubuntu" scheme="https://zml3589110.github.io/tags/Ubuntu/"/>
    
    <category term="ESP8266" scheme="https://zml3589110.github.io/tags/ESP8266/"/>
    
    <category term="乐鑫" scheme="https://zml3589110.github.io/tags/%E4%B9%90%E9%91%AB/"/>
    
    <category term="烧录" scheme="https://zml3589110.github.io/tags/%E7%83%A7%E5%BD%95/"/>
    
    <category term="ESP01S" scheme="https://zml3589110.github.io/tags/ESP01S/"/>
    
    <category term="MQTT" scheme="https://zml3589110.github.io/tags/MQTT/"/>
    
  </entry>
  
  <entry>
    <title>STM32F错误收集</title>
    <link href="https://zml3589110.github.io/posts/2741096271.html"/>
    <id>https://zml3589110.github.io/posts/2741096271.html</id>
    <published>2023-12-22T03:14:20.000Z</published>
    <updated>2023-12-22T03:20:51.688Z</updated>
    
    <content type="html"><![CDATA[<h1 id="STM32常见错误error"><a href="#STM32常见错误error" class="headerlink" title="STM32常见错误error"></a>STM32常见错误error</h1><h2 id="268-declaration-may-not-appear-after-executable-statement"><a href="#268-declaration-may-not-appear-after-executable-statement" class="headerlink" title="268: declaration may not appear after executable statement"></a>268: declaration may not appear after executable statement</h2><h3 id="STM32常见错误error-268-declaration-may-not-appear-after-executable-statement"><a href="#STM32常见错误error-268-declaration-may-not-appear-after-executable-statement" class="headerlink" title="STM32常见错误error: #268: declaration may not appear after executable statement"></a><a href="https://blog.csdn.net/stm32_newlearner/article/details/79654188">STM32常见错误error: #268: declaration may not appear after executable statement</a></h3><p>此错误中文意思：声明不能在可执行语句后出现<br>表示有变量在函数后面声明，应该改为在函数开头声明变量。<br>在Keil环境中编译程序，变量的声明应在主函数起始位置，如果有此报错，一定是变量声明在执行函数后。</p><h3 id="Error-260-D-explicit-type-is-missing-“int”-assumed-的解决方法"><a href="#Error-260-D-explicit-type-is-missing-“int”-assumed-的解决方法" class="headerlink" title="Error: #260-D: explicit type is missing (“int” assumed)的解决方法"></a><a href="https://blog.csdn.net/youngwah292/article/details/88734737">Error: #260-D: explicit type is missing (“int” assumed)的解决方法</a></h3><p>今天编译一个STM32程序的时候，遇到了一个问题，编译通不过。</p><p>输出的错误信息是：</p><p>..\SYSTEM\usart\usart.c(41): error:  #260-D: explicit type is missing (“int” assumed)</p><p>借鉴他人的解决方法：</p><p>双击这个错误，定位到USART.C文件中的第41行。</p><img src="/posts/2741096271/2019032210355174.png" class="" title="img"><p>然后在_sys_exit前面加上void。</p><img src="/posts/2741096271/20190322103709153.png" class="" title="img"><p>编译就可以通过了。</p><h3 id="SYSTEM-usart-usart-c-48-error-260-D-explicit-type-is-missing-“int”-assumed"><a href="#SYSTEM-usart-usart-c-48-error-260-D-explicit-type-is-missing-“int”-assumed" class="headerlink" title="..\SYSTEM\usart\usart.c(48): error: #260-D: explicit type is missing (“int” assumed)"></a><a href="https://blog.csdn.net/qq_40860986/article/details/88883523/">..\SYSTEM\usart\usart.c(48): error: #260-D: explicit type is missing (“int” assumed)</a></h3><p>最近移植正点原子的sys文件夹发现有一个错误，不管是F103还是F407都会有这个错误提醒：<br>错误提醒：…\SYSTEM\usart\usart.c(48): error: #260-D: explicit type is missing (“int” assumed)</p><p>定义错误位置：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">FILE __stdout;       </span><br><span class="line"><span class="comment">//定义_sys_exit()以避免使用半主机模式    </span></span><br><span class="line">_sys_exit(<span class="keyword">int</span> x) </span><br><span class="line">&#123; </span><br><span class="line">x = x; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>定义 _sys_exit(int x) 以避免使用半主机模式,函数没有返回类型，假定其返回类型为int，可以写为 void _sys_exit(int x) ，否则编译器会默认为返回int类型，故会出现上述警告。</p><p><strong>解决办法：</strong><br>将_sys_exit(int x) 写成void _sys_exit(int x)</p><hr><h1 id="相关链接-侵删"><a href="#相关链接-侵删" class="headerlink" title="相关链接(侵删)"></a>相关链接(侵删)</h1><ol><li><a href="https://www.cnblogs.com/zhjblogs/p/12712575.html">（stm32f103学习总结）—RTC独立定时器—实时时钟实验 </a></li><li><a href="https://blog.csdn.net/zhai17863966493/article/details/104361466">STM32F103的RTC实时时钟配置</a></li></ol><hr><center><font color=red>=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">STM32F错误和警告收集</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="C" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/C/"/>
    
    <category term="STM32" scheme="https://zml3589110.github.io/categories/STM32/"/>
    
    <category term="ERROR" scheme="https://zml3589110.github.io/categories/ERROR/"/>
    
    
    <category term="C" scheme="https://zml3589110.github.io/tags/C/"/>
    
    <category term="STM32" scheme="https://zml3589110.github.io/tags/STM32/"/>
    
    <category term="RTC" scheme="https://zml3589110.github.io/tags/RTC/"/>
    
    <category term="错误" scheme="https://zml3589110.github.io/tags/%E9%94%99%E8%AF%AF/"/>
    
    <category term="ERROR" scheme="https://zml3589110.github.io/tags/ERROR/"/>
    
    <category term="declaration" scheme="https://zml3589110.github.io/tags/declaration/"/>
    
    <category term="USART" scheme="https://zml3589110.github.io/tags/USART/"/>
    
  </entry>
  
  <entry>
    <title>U8G2的OLED库基础</title>
    <link href="https://zml3589110.github.io/posts/4084148530.html"/>
    <id>https://zml3589110.github.io/posts/4084148530.html</id>
    <published>2023-12-22T02:39:20.000Z</published>
    <updated>2023-12-22T03:20:51.710Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h2><p> <a href="https://so.csdn.net/so/search?q=OLED&spm=1001.2101.3001.7020">OLED</a>图形库众多，如Adafruit_GFX 和 Adafruit_SSD1306库。但是，今天要使用的是 U8g2图形库。</p><p><a href="https://blog.csdn.net/dpjcn1990/article/details/92831760?ops_request_misc=%7B%22request_id%22:%22168193238616800197030830%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=168193238616800197030830&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~hot_rank-1-92831760-null-null.142%5Ev85%5Econtrol,239%5Ev2%5Einsert_chatgpt&utm_term=u8g2&spm=1018.2226.3001.4187">参考文章：深入学习Arduino u8g2 OLED库，一篇就够</a><br><a href="https://github.com/olikraus/u8g2/wiki/u8g2reference">参考文章：GitHub–&gt;u8g2reference</a></p><h3 id="1-1-U8g2库百度脑图"><a href="#1-1-U8g2库百度脑图" class="headerlink" title="1.1 U8g2库百度脑图"></a>1.1 U8g2库百度脑图</h3><img src="/posts/4084148530/c2f06932d54243d1a46d9319cceedd9f.png" class="" title="U8g2库百度脑图"><p>可以分为四大类：</p><ul><li>基本函数</li><li>绘制相关函数</li><li>显示配置相关函数</li><li>缓存相关函数</li></ul><h2 id="2-U8g2库函数详解"><a href="#2-U8g2库函数详解" class="headerlink" title="2 U8g2库函数详解"></a>2 U8g2库函数详解</h2><h3 id="2-1-基本函数（干货从这里开始）"><a href="#2-1-基本函数（干货从这里开始）" class="headerlink" title="2.1 基本函数（干货从这里开始）"></a>2.1 基本函数（干货从这里开始）</h3><h4 id="2-1-1-u8g2-t-u8g2"><a href="#2-1-1-u8g2-t-u8g2" class="headerlink" title="2.1.1 u8g2_t u8g2;"></a>2.1.1 u8g2_t u8g2;</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">u8g2_t</span> u8g2;<span class="comment">// 显示器初始化结构体</span></span><br></pre></td></tr></table></figure><h4 id="2-1-2-u8g2Init-u8g2-t-u8g2"><a href="#2-1-2-u8g2Init-u8g2-t-u8g2" class="headerlink" title="2.1.2 u8g2Init(u8g2_t *u8g2)"></a>2.1.2 u8g2Init(u8g2_t *u8g2)</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">u8g2_t</span> u8g2;<span class="comment">// 显示器初始化结构体</span></span><br><span class="line">u8g2Init(&amp;u8g2);   <span class="comment">//显示器调用初始化函数</span></span><br></pre></td></tr></table></figure><h4 id="2-1-3-u8g2-InitDisplay-u8g2"><a href="#2-1-3-u8g2-InitDisplay-u8g2" class="headerlink" title="2.1.3 u8g2_InitDisplay(u8g2)"></a>2.1.3 u8g2_InitDisplay(u8g2)</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">u8g2Init</span><span class="params">(<span class="keyword">u8g2_t</span> *u8g2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u8g2_Setup_ssd1306_128x64_noname_f(u8g2, U8G2_R0, u8x8_byte_4wire_hw_spi, u8x8_stm32_gpio_and_delay); </span><br><span class="line">u8g2_InitDisplay(u8g2);     <span class="comment">//初始化显示</span></span><br><span class="line">u8g2_SetPowerSave(u8g2, <span class="number">0</span>); <span class="comment">//开启显示</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-1-4-u8g2-SetPowerSave-u8g2-is-enable"><a href="#2-1-4-u8g2-SetPowerSave-u8g2-is-enable" class="headerlink" title="2.1.4 u8g2_SetPowerSave(u8g2, is_enable);"></a>2.1.4 u8g2_SetPowerSave(u8g2, is_enable);</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">u8g2_SetPowerSave(&amp;u8g2, <span class="number">0</span>);   <span class="comment">//开启显示</span></span><br></pre></td></tr></table></figure><ul><li>不管是启用还是禁用，显示器需要的内存消耗是不变的，说到底就是为了关闭屏幕，做到省电；</li><li>所以这里就可以理解为什么初始化需要 <strong>u8g2_SetPowerSave(u8g2, 0);</strong> 来开启显示</li></ul><h4 id="2-1-5-u8g2-ClearDisplay-u8g2-t-u8g2"><a href="#2-1-5-u8g2-ClearDisplay-u8g2-t-u8g2" class="headerlink" title="2.1.5 u8g2_ClearDisplay(u8g2_t *u8g2)"></a>2.1.5 u8g2_ClearDisplay(u8g2_t *u8g2)</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">u8g2_ClearDisplay(&amp;u8g2);    <span class="comment">//清除屏幕缓冲区</span></span><br></pre></td></tr></table></figure><ul><li>不要在 firstPage 和 nextPage 函数之间调用该方法。</li></ul><h4 id="2-1-6-u8g2-ClearBuffer-u8g2-t-u8g2-——-清除缓冲区"><a href="#2-1-6-u8g2-ClearBuffer-u8g2-t-u8g2-——-清除缓冲区" class="headerlink" title="2.1.6 u8g2_ClearBuffer(u8g2_t *u8g2) —— 清除缓冲区"></a>2.1.6 u8g2_ClearBuffer(u8g2_t *u8g2) —— 清除缓冲区</h4><ul><li>一般这个函数是与u8g2_SendBuffer函数配对使用，通常用法如下：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Buffer</span><span class="params">(<span class="keyword">u8g2_t</span> *u8g2)</span> </span>&#123;</span><br><span class="line">  u8g2_ClearBuffer(u8g2); </span><br><span class="line">  <span class="comment">// ... 向缓冲区写入内容</span></span><br><span class="line">  u8g2_SendBuffer(u8g2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-绘制相关函数（进阶）"><a href="#2-2-绘制相关函数（进阶）" class="headerlink" title="2.2 绘制相关函数（进阶）"></a>2.2 绘制相关函数（进阶）</h3><h4 id="2-2-1-u8g2-DrawBox-——-画实心矩形"><a href="#2-2-1-u8g2-DrawBox-——-画实心矩形" class="headerlink" title="2.2.1 u8g2_DrawBox() —— 画实心矩形"></a>2.2.1 u8g2_DrawBox() —— 画实心矩形</h4><p>函数说明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 画实心矩形，左上角坐标为(x,y),宽度为w，高度为h</span></span><br><span class="line"><span class="comment"> * @param x 左上角的x坐标</span></span><br><span class="line"><span class="comment"> * @param y 左上角的y坐标</span></span><br><span class="line"><span class="comment"> * @param w 方形的宽度</span></span><br><span class="line"><span class="comment"> * @param h 方形的高度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">u8g2_DrawBox</span><span class="params">(<span class="keyword">u8g2_t</span> *u8g2, <span class="keyword">u8g2_uint_t</span> x, <span class="keyword">u8g2_uint_t</span> y, <span class="keyword">u8g2_uint_t</span> w, <span class="keyword">u8g2_uint_t</span> h)</span></span></span><br></pre></td></tr></table></figure><ul><li>如果支持绘制颜色（也就是不是单色显示器），那么由**u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)**设置；</li><li>示例：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">u8g2_DrawBox(&amp;u8g2,<span class="number">3</span>,<span class="number">7</span>,<span class="number">25</span>,<span class="number">15</span>);</span><br></pre></td></tr></table></figure><img src="/posts/4084148530/8191fc123ee6418699ad146264e97090.png" class="" title="画实心矩形"><ul><li>显示一个简单的进度条</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">u8g2_FirstPage(&amp;u8g2);</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">u8g2_DrawBox(&amp;u8g2,<span class="number">0</span>,<span class="number">32</span>,i++,<span class="number">15</span>);</span><br><span class="line">HAL_Delay(<span class="number">50</span>);</span><br><span class="line">&#125;<span class="keyword">while</span> (u8g2_NextPage(&amp;u8g2));</span><br></pre></td></tr></table></figure><img src="/posts/4084148530/65f75b333baf4315a770716d97ea2779.gif" class="" title="显示进度条"><h4 id="2-2-2-u8g2-DrawCircle-——-画空心圆"><a href="#2-2-2-u8g2-DrawCircle-——-画空心圆" class="headerlink" title="2.2.2 u8g2_DrawCircle() —— 画空心圆"></a>2.2.2 u8g2_DrawCircle() —— 画空心圆</h4><p>函数说明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 画空心圆，圆心坐标为(x0,y0),半径为rad</span></span><br><span class="line"><span class="comment"> * @param x0 圆点的x坐标</span></span><br><span class="line"><span class="comment"> * @param y0 圆点的y坐标</span></span><br><span class="line"><span class="comment"> * @param rad 圆形的半径</span></span><br><span class="line"><span class="comment"> * @param opt 圆形选项</span></span><br><span class="line"><span class="comment"> *        U8G2_DRAW_ALL 整个圆</span></span><br><span class="line"><span class="comment"> *        U8G2_DRAW_UPPER_RIGHT 右上部分的圆弧</span></span><br><span class="line"><span class="comment"> *        U8G2_DRAW_UPPER_LEFT  左上部分的圆弧</span></span><br><span class="line"><span class="comment"> *        U8G2_DRAW_LOWER_LEFT  左下部分的圆弧</span></span><br><span class="line"><span class="comment"> *        U8G2_DRAW_LOWER_RIGHT 右下部分的圆弧</span></span><br><span class="line"><span class="comment"> *        选项可以通过 | 操作符来组合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">u8g2_DrawCircle</span><span class="params">(<span class="keyword">u8g2_t</span> *u8g2, <span class="keyword">u8g2_uint_t</span> x0, <span class="keyword">u8g2_uint_t</span> y0, <span class="keyword">u8g2_uint_t</span> rad, <span class="keyword">uint8_t</span> option)</span></span></span><br></pre></td></tr></table></figure><ul><li>示例：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">u8g2_DrawCircle(&amp;u8g2,<span class="number">20</span>,<span class="number">25</span>,<span class="number">10</span>,U8G2_DRAW_ALL);</span><br></pre></td></tr></table></figure><img src="/posts/4084148530/868b1d7cdb13488d869704318979a534.png" class="" title="画空心圆"><ul><li>动态测试</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">u8g2_FirstPage(&amp;u8g2);</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">u8g2_DrawCircle(&amp;u8g2,<span class="number">63</span>,<span class="number">31</span>,i++,U8G2_DRAW_ALL ); </span><br><span class="line"><span class="comment">//    u8g2_DrawCircle(&amp;u8g2,63,31,i++,U8G2_DRAW_UPPER_RIGHT|U8G2_DRAW_LOWER_LEFT); </span></span><br><span class="line">HAL_Delay(<span class="number">50</span>);</span><br><span class="line">&#125;<span class="keyword">while</span> (u8g2_NextPage(&amp;u8g2));</span><br></pre></td></tr></table></figure><img src="/posts/4084148530/9cd754e22b8149ebaca6e8d2a6bd20cb.gif" class="" title="空心圆测试all"><img src="/posts/4084148530/3bcba1fc7fb8419cb0cd054aadfb256d.gif" class="" title="空心圆测试"><h4 id="2-2-3-u8g2-DrawDisc-——-画实心圆"><a href="#2-2-3-u8g2-DrawDisc-——-画实心圆" class="headerlink" title="2.2.3 u8g2_DrawDisc() —— 画实心圆"></a>2.2.3 u8g2_DrawDisc() —— 画实心圆</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 画实心圆，圆心坐标为(x0,y0),半径为rad</span></span><br><span class="line"><span class="comment"> * @param x0 圆点的x坐标</span></span><br><span class="line"><span class="comment"> * @param y0 圆点的y坐标</span></span><br><span class="line"><span class="comment"> * @param rad 圆形的半径</span></span><br><span class="line"><span class="comment"> * @param opt 圆形选项</span></span><br><span class="line"><span class="comment"> *        U8G2_DRAW_ALL 整个圆</span></span><br><span class="line"><span class="comment"> *        U8G2_DRAW_UPPER_RIGHT 右上部分的圆弧</span></span><br><span class="line"><span class="comment"> *        U8G2_DRAW_UPPER_LEFT  左上部分的圆弧</span></span><br><span class="line"><span class="comment"> *        U8G2_DRAW_LOWER_LEFT  左下部分的圆弧</span></span><br><span class="line"><span class="comment"> *        U8G2_DRAW_LOWER_RIGHT 右下部分的圆弧</span></span><br><span class="line"><span class="comment"> *       选项可以通过 | 操作符来组合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">u8g2_DrawDisc</span><span class="params">(<span class="keyword">u8g2_t</span> *u8g2, <span class="keyword">u8g2_uint_t</span> x0, <span class="keyword">u8g2_uint_t</span> y0, <span class="keyword">u8g2_uint_t</span> rad, <span class="keyword">uint8_t</span> option)</span></span></span><br></pre></td></tr></table></figure><ul><li><p>直径等于2rad + 1；</p></li><li><p>如果支持绘制颜色（也就是不是单色显示器），那么由**u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)**设置；</p></li><li><p>示例</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">u8g2_FirstPage(&amp;u8g2);</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">u8g2_DrawDisc(&amp;u8g2,<span class="number">63</span>,<span class="number">31</span>,i++,U8G2_DRAW_UPPER_RIGHT|U8G2_DRAW_LOWER_LEFT); </span><br><span class="line">HAL_Delay(<span class="number">50</span>);</span><br><span class="line">&#125;<span class="keyword">while</span> (u8g2_NextPage(&amp;u8g2));</span><br></pre></td></tr></table></figure><img src="/posts/4084148530/d53ebc9940b34a448af82ee91610af7f.gif" class="" title="实心圆测试"><h4 id="2-2-4-u8g2-DrawEllipse-——-画空心椭圆"><a href="#2-2-4-u8g2-DrawEllipse-——-画空心椭圆" class="headerlink" title="2.2.4 u8g2_DrawEllipse() —— 画空心椭圆"></a>2.2.4 u8g2_DrawEllipse() —— 画空心椭圆</h4><p>函数说明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 画空心椭圆，圆心坐标为(x0,y0),半径为rad</span></span><br><span class="line"><span class="comment"> * @param x0 圆点的x坐标</span></span><br><span class="line"><span class="comment"> * @param y0 圆点的y坐标</span></span><br><span class="line"><span class="comment"> * @param rx 椭圆形水平x方向的半径</span></span><br><span class="line"><span class="comment"> * @param ry 椭圆形竖直y方向的半径</span></span><br><span class="line"><span class="comment"> * @param opt 圆形选项</span></span><br><span class="line"><span class="comment"> *        U8G2_DRAW_ALL 整个椭圆</span></span><br><span class="line"><span class="comment"> *        U8G2_DRAW_UPPER_RIGHT 右上部分的圆弧</span></span><br><span class="line"><span class="comment"> *        U8G2_DRAW_UPPER_LEFT  左上部分的圆弧</span></span><br><span class="line"><span class="comment"> *        U8G2_DRAW_LOWER_LEFT  左下部分的圆弧</span></span><br><span class="line"><span class="comment"> *        U8G2_DRAW_LOWER_RIGHT 右下部分的圆弧</span></span><br><span class="line"><span class="comment"> *        选项可以通过 | 操作符来组合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">u8g2_DrawEllipse</span><span class="params">(<span class="keyword">u8g2_t</span> *u8g2, <span class="keyword">u8g2_uint_t</span> x0, <span class="keyword">u8g2_uint_t</span> y0, <span class="keyword">u8g2_uint_t</span> rx, <span class="keyword">u8g2_uint_t</span> ry, <span class="keyword">uint8_t</span> option)</span></span></span><br></pre></td></tr></table></figure><ul><li>rx*ry 在8位模式的u8g2必须小于512（博主也没有理解）；</li><li>示例：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">u8g2_DrawEllipse(&amp;u8g2,<span class="number">20</span>,<span class="number">25</span>,<span class="number">15</span>,<span class="number">10</span>,U8G2_DRAW_ALL);</span><br></pre></td></tr></table></figure><img src="/posts/4084148530/2e5a5bd77f154b01aa25622e2a01852b.png" class="" title="画空心椭圆"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">u8g2_FirstPage(&amp;u8g2);</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">u8g2_DrawEllipse(&amp;u8g2,<span class="number">63</span>,<span class="number">31</span>,i++,<span class="number">30</span>,U8G2_DRAW_UPPER_RIGHT|U8G2_DRAW_LOWER_LEFT); </span><br><span class="line">HAL_Delay(<span class="number">50</span>);</span><br><span class="line">&#125;<span class="keyword">while</span> (u8g2_NextPage(&amp;u8g2));</span><br></pre></td></tr></table></figure><h4 id="2-2-5-u8g2-DrawFilledEllipse-——-画实心椭圆"><a href="#2-2-5-u8g2-DrawFilledEllipse-——-画实心椭圆" class="headerlink" title="2.2.5 u8g2_DrawFilledEllipse() —— 画实心椭圆"></a>2.2.5 u8g2_DrawFilledEllipse() —— 画实心椭圆</h4><h4 id="2-2-6-u8g2-DrawFrame-——-画空心矩形"><a href="#2-2-6-u8g2-DrawFrame-——-画空心矩形" class="headerlink" title="2.2.6 u8g2_DrawFrame() —— 画空心矩形"></a>2.2.6 u8g2_DrawFrame() —— 画空心矩形</h4><p>函数说明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 画空心方形，左上角坐标为(x,y),宽度为w，高度为h</span></span><br><span class="line"><span class="comment"> * @param x 左上角的x坐标</span></span><br><span class="line"><span class="comment"> * @param y 左上角的y坐标</span></span><br><span class="line"><span class="comment"> * @param w 方形的宽度</span></span><br><span class="line"><span class="comment"> * @param h 方形的高度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">u8g2_DrawFrame</span><span class="params">(<span class="keyword">u8g2_t</span> *u8g2, <span class="keyword">u8g2_uint_t</span> x, <span class="keyword">u8g2_uint_t</span> y, <span class="keyword">u8g2_uint_t</span> w, <span class="keyword">u8g2_uint_t</span> h)</span></span></span><br></pre></td></tr></table></figure><ul><li>如果支持绘制颜色（也就是不是单色显示器），那么由**u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)**设置；</li><li>示例</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">u8g2_DrawFrame(&amp;u8g2,<span class="number">3</span>,<span class="number">7</span>,<span class="number">25</span>,<span class="number">15</span>);</span><br></pre></td></tr></table></figure><img src="/posts/4084148530/7615177436624106b325e32e6de3448d.png" class="" title="画空心矩形"><ul><li>进度条示例</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">u8g2_FirstPage(&amp;u8g2);</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">uint8_t</span> i=<span class="number">0</span>;i&lt;=<span class="number">99</span>;i=i+<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">u8g2_ClearBuffer(&amp;u8g2); </span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> buff[<span class="number">20</span>];</span><br><span class="line">u8g2_SetFont(&amp;u8g2,u8g2_font_ncenB08_tf);<span class="comment">//字体</span></span><br><span class="line"><span class="built_in">sprintf</span>(buff,<span class="string">&quot;%d%%&quot;</span>,(<span class="keyword">int</span>)(i/<span class="number">100.0</span>*<span class="number">100</span>));</span><br><span class="line">u8g2_DrawStr(&amp;u8g2,<span class="number">105</span>,<span class="number">49</span>,buff);<span class="comment">//当前进度显示</span></span><br><span class="line"></span><br><span class="line">u8g2_DrawBox(&amp;u8g2,<span class="number">2</span>,<span class="number">40</span>,i,<span class="number">10</span>);<span class="comment">//填充框实心矩形框</span></span><br><span class="line">u8g2_DrawFrame(&amp;u8g2,<span class="number">0</span>,<span class="number">38</span>,<span class="number">103</span>,<span class="number">14</span>);<span class="comment">//空心矩形框</span></span><br><span class="line"></span><br><span class="line">HAL_Delay(<span class="number">200</span>);</span><br><span class="line">u8g2_SendBuffer(&amp;u8g2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">while</span> (u8g2_NextPage(&amp;u8g2));</span><br></pre></td></tr></table></figure><h4 id="2-2-7-u8g2-DrawGlyph-——-绘制字体字集的符号"><a href="#2-2-7-u8g2-DrawGlyph-——-绘制字体字集的符号" class="headerlink" title="2.2.7 u8g2_DrawGlyph() —— 绘制字体字集的符号"></a>2.2.7 u8g2_DrawGlyph() —— 绘制字体字集的符号</h4><p>函数说明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 绘制字体字集里面定义的符号</span></span><br><span class="line"><span class="comment"> * @param x 左上角的x坐标</span></span><br><span class="line"><span class="comment"> * @param y 左上角的y坐标</span></span><br><span class="line"><span class="comment"> * @param encoding 字符的unicode值</span></span><br><span class="line"><span class="comment"> * @Note 关联方法 u8g2_SetFont</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">u8g2_uint_t</span> <span class="title">u8g2_DrawGlyph</span><span class="params">(<span class="keyword">u8g2_t</span> *u8g2, <span class="keyword">u8g2_uint_t</span> x, <span class="keyword">u8g2_uint_t</span> y, <span class="keyword">uint16_t</span> encoding)</span></span></span><br></pre></td></tr></table></figure><ul><li>U8g2支持16位以内的unicode字符集，也就是说encoding的范围为0-65535，DrawGlyph方法只能绘制存在于所使用的字体字集中的unicode值；</li><li>这个绘制方法依赖于当前的字体模式和绘制颜色；</li></ul><h4 id="2-2-8-u8g2-DrawHLine-——-绘制水平线"><a href="#2-2-8-u8g2-DrawHLine-——-绘制水平线" class="headerlink" title="2.2.8 u8g2_DrawHLine() —— 绘制水平线"></a>2.2.8 u8g2_DrawHLine() —— 绘制水平线</h4><p>函数说明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 绘制水平线</span></span><br><span class="line"><span class="comment"> * @param x 左上角的x坐标</span></span><br><span class="line"><span class="comment"> * @param y 左上角的y坐标</span></span><br><span class="line"><span class="comment"> * @param w 水平线的长度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">u8g2_DrawHLine</span><span class="params">(<span class="keyword">u8g2_t</span> *u8g2, <span class="keyword">u8g2_uint_t</span> x, <span class="keyword">u8g2_uint_t</span> y, <span class="keyword">u8g2_uint_t</span> len)</span></span></span><br></pre></td></tr></table></figure><ul><li>如果支持绘制颜色（也就是不是单色显示器），那么由**u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)**设置；</li></ul><h4 id="2-2-9-u8g2-DrawLine-——-两点之间绘制线"><a href="#2-2-9-u8g2-DrawLine-——-两点之间绘制线" class="headerlink" title="2.2.9 u8g2_DrawLine() —— 两点之间绘制线"></a>2.2.9 u8g2_DrawLine() —— 两点之间绘制线</h4><p>函数说明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 绘制线，从坐标(x0,y0) 到(x1,y1)</span></span><br><span class="line"><span class="comment"> * @param x0 端点0的x坐标</span></span><br><span class="line"><span class="comment"> * @param y0 端点0的y坐标</span></span><br><span class="line"><span class="comment"> * @param x1 端点1的x坐标</span></span><br><span class="line"><span class="comment"> * @param y1 端点1的y坐标</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">u8g2_DrawLine</span><span class="params">(<span class="keyword">u8g2_t</span> *u8g2, <span class="keyword">u8g2_uint_t</span> x1, <span class="keyword">u8g2_uint_t</span> y1, <span class="keyword">u8g2_uint_t</span> x2, <span class="keyword">u8g2_uint_t</span> y2)</span></span></span><br></pre></td></tr></table></figure><ul><li>如果支持绘制颜色（也就是不是单色显示器），那么由**u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)**设置；</li><li>示例：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">u8g2_DrawLine(&amp;u8g2,<span class="number">20</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">32</span>);</span><br></pre></td></tr></table></figure><img src="/posts/4084148530/e376b3b50d0b4303bae30a939f47fc5b.png" class="" title="两点之间绘制线"><h4 id="2-2-10-u8g2-DrawPixel-——-绘制像素点"><a href="#2-2-10-u8g2-DrawPixel-——-绘制像素点" class="headerlink" title="2.2.10 u8g2_DrawPixel() —— 绘制像素点"></a>2.2.10 u8g2_DrawPixel() —— 绘制像素点</h4><p>函数说明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 绘制像素点，坐标(x,y)</span></span><br><span class="line"><span class="comment"> * @param x 像素点的x坐标</span></span><br><span class="line"><span class="comment"> * @param y 像素点的y坐标</span></span><br><span class="line"><span class="comment"> * @Note 关联方法 setDrawColor</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">u8g2_DrawPixel</span><span class="params">(<span class="keyword">u8g2_t</span> *u8g2, <span class="keyword">u8g2_uint_t</span> x, <span class="keyword">u8g2_uint_t</span> y)</span></span></span><br></pre></td></tr></table></figure><ul><li><p>如果支持绘制颜色（也就是不是单色显示器），那么由**u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)**设置；</p></li><li><p>你会发现很多绘制方法的底层都是调用**u8g2_DrawPixel()**，毕竟像素属于最小颗粒度；</p></li><li><p>我们可以利用这个绘制方法自定义自己的图形显示；</p></li></ul><h4 id="2-2-11-u8g2-DrawRBox-——-绘制圆角实心方形"><a href="#2-2-11-u8g2-DrawRBox-——-绘制圆角实心方形" class="headerlink" title="2.2.11 u8g2_DrawRBox() —— 绘制圆角实心方形"></a>2.2.11 u8g2_DrawRBox() —— 绘制圆角实心方形</h4><p>函数说明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 绘制圆角实心方形，左上角坐标为(x,y),宽度为w，高度为h，圆角半径为r</span></span><br><span class="line"><span class="comment"> * @param x 左上角的x坐标</span></span><br><span class="line"><span class="comment"> * @param y 左上角的y坐标</span></span><br><span class="line"><span class="comment"> * @param w 方形的宽度</span></span><br><span class="line"><span class="comment"> * @param h 方形的高度</span></span><br><span class="line"><span class="comment"> * @param r 圆角半径</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">u8g2_DrawRBox</span><span class="params">(<span class="keyword">u8g2_t</span> *u8g2, <span class="keyword">u8g2_uint_t</span> x, <span class="keyword">u8g2_uint_t</span> y, <span class="keyword">u8g2_uint_t</span> w, <span class="keyword">u8g2_uint_t</span> h, <span class="keyword">u8g2_uint_t</span> r)</span></span></span><br></pre></td></tr></table></figure><ul><li>如果支持绘制颜色（也就是不是单色显示器），那么由**u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)**设置；</li><li>要求，w &gt;&#x3D; 2(r+1) 并且 h &gt;&#x3D; 2(r+1)，这是显而易见的限制；</li></ul><h4 id="2-2-12-u8g2-DrawRFrame-——-绘制圆角空心方形"><a href="#2-2-12-u8g2-DrawRFrame-——-绘制圆角空心方形" class="headerlink" title="2.2.12 u8g2_DrawRFrame() —— 绘制圆角空心方形"></a>2.2.12 u8g2_DrawRFrame() —— 绘制圆角空心方形</h4><p>函数说明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 绘制圆角空心方形，左上角坐标为(x,y),宽度为w，高度为h，圆角半径为r</span></span><br><span class="line"><span class="comment"> * @param x 左上角的x坐标</span></span><br><span class="line"><span class="comment"> * @param y 左上角的y坐标</span></span><br><span class="line"><span class="comment"> * @param w 方形的宽度</span></span><br><span class="line"><span class="comment"> * @param h 方形的高度</span></span><br><span class="line"><span class="comment"> * @param r 圆角半径</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">u8g2_DrawRFrame</span><span class="params">(<span class="keyword">u8g2_t</span> *u8g2, <span class="keyword">u8g2_uint_t</span> x, <span class="keyword">u8g2_uint_t</span> y, <span class="keyword">u8g2_uint_t</span> w, <span class="keyword">u8g2_uint_t</span> h, <span class="keyword">u8g2_uint_t</span> r)</span></span></span><br></pre></td></tr></table></figure><ul><li>如果支持绘制颜色（也就是不是单色显示器），那么由**u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)**设置；</li><li>要求，w &gt;&#x3D; 2(r+1) 并且 h &gt;&#x3D; 2(r+1)，这是显而易见的限制</li><li>示例：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">u8g2_DrawRFrame(&amp;u8g2,<span class="number">20</span>,<span class="number">15</span>,<span class="number">30</span>,<span class="number">22</span>,<span class="number">7</span>);</span><br></pre></td></tr></table></figure><img src="/posts/4084148530/f0a216708f884e12ba4878fbdd311976.png" class="" title="绘制圆角空心方形"><h4 id="2-2-13-u8g2-DrawStr-——-绘制字符串"><a href="#2-2-13-u8g2-DrawStr-——-绘制字符串" class="headerlink" title="2.2.13 u8g2_DrawStr() —— 绘制字符串"></a>2.2.13 u8g2_DrawStr() —— 绘制字符串</h4><p>函数说明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 绘制字符串</span></span><br><span class="line"><span class="comment"> * @param x 左上角的x坐标</span></span><br><span class="line"><span class="comment"> * @param y 左上角的y坐标</span></span><br><span class="line"><span class="comment"> * @param s 绘制字符串内容</span></span><br><span class="line"><span class="comment"> * @return 字符串的长度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">u8g2_uint_t</span> <span class="title">u8g2_DrawStr</span><span class="params">(<span class="keyword">u8g2_t</span> *u8g2, <span class="keyword">u8g2_uint_t</span> x, <span class="keyword">u8g2_uint_t</span> y, <span class="keyword">const</span> <span class="keyword">char</span> *str)</span></span></span><br></pre></td></tr></table></figure><ul><li><p>需要先设置字体，调用**u8g2_SetFont()**方法；</p></li><li><p>这个方法不能绘制encoding超过256的，超过256需要用**u8g2_DrawUTF8()**或者**u8g2_DrawGlyph()**；说白了就是一般用来显示英文字符；</p></li><li><p>x，y属于字符串左下角的坐标；</p></li><li><p>我们可以用它来<strong>显示变量</strong>；</p></li><li><p>示例：</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">u8g2_SetFont(&amp;u8g2,u8g2_font_ncenB14_tr);</span><br><span class="line">u8g2_DrawStr(&amp;u8g2,<span class="number">0</span>,<span class="number">15</span>,<span class="string">&quot;Hello World!&quot;</span>);</span><br></pre></td></tr></table></figure><img src="/posts/4084148530/9c2442f1854347d8a608957695640f8b.png" class="" title="绘制字符串"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">uint8_t</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">u8g2_ClearBuffer(&amp;u8g2); </span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> buff[<span class="number">20</span>];</span><br><span class="line"><span class="built_in">sprintf</span>(buff,<span class="string">&quot;%d&quot;</span>,(<span class="keyword">int</span>)(i/<span class="number">100.0</span>*<span class="number">100</span>));</span><br><span class="line">u8g2_SetFont(&amp;u8g2,u8g2_font_inb24_mf);</span><br><span class="line">       u8g2_DrawStr(&amp;u8g2,<span class="number">127</span><span class="number">-41</span>,<span class="number">24</span>,buff);</span><br><span class="line">    u8g2_SendBuffer(&amp;u8g2);</span><br><span class="line">       HAL_Delay(<span class="number">100</span>);  </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="2-2-14-u8g2-DrawTriangle-——-绘制实心三角形"><a href="#2-2-14-u8g2-DrawTriangle-——-绘制实心三角形" class="headerlink" title="2.2.14 u8g2_DrawTriangle() —— 绘制实心三角形"></a>2.2.14 u8g2_DrawTriangle() —— 绘制实心三角形</h4><p>函数说明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 绘制实心三角形，定点坐标分别为(x0,y0),(x1,y1),(x2,y2)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">u8g2_DrawTriangle</span><span class="params">(<span class="keyword">u8g2_t</span> *u8g2, <span class="keyword">int16_t</span> x0, <span class="keyword">int16_t</span> y0, <span class="keyword">int16_t</span> x1, <span class="keyword">int16_t</span> y1, <span class="keyword">int16_t</span> x2, <span class="keyword">int16_t</span> y2)</span></span></span><br></pre></td></tr></table></figure><ul><li>示例：</li></ul><img src="/posts/4084148530/c4fd193817e145c090255271849494a3.png" class="" title="绘制实心三角形"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">uint8_t</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">       u8g2_ClearBuffer(&amp;u8g2); </span><br><span class="line"></span><br><span class="line">       u8g2_DrawTriangle(&amp;u8g2,<span class="number">20</span>,<span class="number">5</span>, <span class="number">27</span>,<span class="number">50</span>, i,<span class="number">32</span>);</span><br><span class="line">       HAL_Delay(<span class="number">100</span>);  </span><br><span class="line">       u8g2_SendBuffer(&amp;u8g2);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="2-2-15-u8g2-DrawUTF8-——-绘制UTF8编码的字符"><a href="#2-2-15-u8g2-DrawUTF8-——-绘制UTF8编码的字符" class="headerlink" title="2.2.15 u8g2_DrawUTF8() —— 绘制UTF8编码的字符"></a>2.2.15 u8g2_DrawUTF8() —— 绘制UTF8编码的字符</h4><p>函数说明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 绘制UTF8编码的字符串</span></span><br><span class="line"><span class="comment"> * @param x 字符串在屏幕上的左下角x坐标</span></span><br><span class="line"><span class="comment"> * @param y 字符串在屏幕上的左下角y坐标</span></span><br><span class="line"><span class="comment"> * @param s 需要绘制的UTF-8编码字符串</span></span><br><span class="line"><span class="comment"> * @return 返回字符串的长度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">u8g2_uint_t</span> <span class="title">u8g2_DrawUTF8</span><span class="params">(<span class="keyword">u8g2_t</span> *u8g2, <span class="keyword">u8g2_uint_t</span> x, <span class="keyword">u8g2_uint_t</span> y, <span class="keyword">const</span> <span class="keyword">char</span> *str)</span></span></span><br></pre></td></tr></table></figure><ul><li><p>使用该方法，有两个前提。首先是你的编译器需要支持UTF-8编码，对于绝大部分Arduino板子已经支持；其次，显示的字符串需要存为“UTF-8”编码，Arduino IDE上默认支持；</p></li><li><p>该方法需要依赖于fontMode（setFont）以及drawing Color，也就是说如果你传进来的字符串编码必须在font定义里面；</p></li><li><p>Keil v5 mdk 编译UTF8字符串报错的解决办法–no-multibyte-chars</p></li></ul><img src="/posts/4084148530/1492d7f3a54745deafb6a590272da21d.png" class="" title="UTF8字符串报错的解决办法"><ul><li>示例</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">u8g2_SetFont(&amp;u8g2,u8g2_font_unifont_t_symbols);</span><br><span class="line">u8g2_DrawUTF8(&amp;u8g2,<span class="number">5</span>, <span class="number">20</span>, <span class="string">&quot;Snowman: ☃&quot;</span>);</span><br></pre></td></tr></table></figure><img src="/posts/4084148530/2812e16384f34423b8a8cf23f6fb34fe.png" class="" title="绘制UTF8编码的字符"><h4 id="2-2-16-u8g2-DrawVLine-——-绘制竖直线"><a href="#2-2-16-u8g2-DrawVLine-——-绘制竖直线" class="headerlink" title="2.2.16 u8g2_DrawVLine() —— 绘制竖直线"></a>2.2.16 u8g2_DrawVLine() —— 绘制竖直线</h4><p>函数说明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 绘制竖直线</span></span><br><span class="line"><span class="comment"> * @param x 左上角坐标x</span></span><br><span class="line"><span class="comment"> * @param y 左上角坐标y</span></span><br><span class="line"><span class="comment"> * @param h 高度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">u8g2_DrawVLine</span><span class="params">(<span class="keyword">u8g2_t</span> *u8g2, <span class="keyword">u8g2_uint_t</span> x, <span class="keyword">u8g2_uint_t</span> y, <span class="keyword">u8g2_uint_t</span> len)</span></span></span><br></pre></td></tr></table></figure><h4 id="2-2-17-u8g2-DrawXBM-x2F-u8g2-DrawXBMP-——-绘制图像"><a href="#2-2-17-u8g2-DrawXBM-x2F-u8g2-DrawXBMP-——-绘制图像" class="headerlink" title="2.2.17 u8g2_DrawXBM()&#x2F;u8g2_DrawXBMP() —— 绘制图像"></a>2.2.17 u8g2_DrawXBM()&#x2F;u8g2_DrawXBMP() —— 绘制图像</h4><p>函数说明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 绘制图像</span></span><br><span class="line"><span class="comment"> * @param x 左上角坐标x</span></span><br><span class="line"><span class="comment"> * @param y 左上角坐标y</span></span><br><span class="line"><span class="comment"> * @param w 图形宽度</span></span><br><span class="line"><span class="comment"> * @param h 图形高度</span></span><br><span class="line"><span class="comment"> * @param bitmap 图形内容</span></span><br><span class="line"><span class="comment"> * @Note 关联方法 setBitmapMode</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">u8g2_DrawXBM</span><span class="params">(<span class="keyword">u8g2_t</span> *u8g2, <span class="keyword">u8g2_uint_t</span> x, <span class="keyword">u8g2_uint_t</span> y, <span class="keyword">u8g2_uint_t</span> w, <span class="keyword">u8g2_uint_t</span> h, <span class="keyword">const</span> <span class="keyword">uint8_t</span> *bitmap)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">u8g2_DrawXBMP</span><span class="params">(<span class="keyword">u8g2_t</span> *u8g2, <span class="keyword">u8g2_uint_t</span> x, <span class="keyword">u8g2_uint_t</span> y, <span class="keyword">u8g2_uint_t</span> w, <span class="keyword">u8g2_uint_t</span> h, <span class="keyword">const</span> <span class="keyword">uint8_t</span> *bitmap)</span></span></span><br></pre></td></tr></table></figure><ul><li><strong>u8g2_DrawXBM</strong>和<strong>u8g2_DrawXBMP</strong>区别在于 <strong>XBMP</strong>支持<strong>PROGMEM</strong>；</li></ul><h4 id="2-2-18-u8g2-FirstPage-x2F-u8g2-NextPage-——-绘制命令"><a href="#2-2-18-u8g2-FirstPage-x2F-u8g2-NextPage-——-绘制命令" class="headerlink" title="2.2.18 u8g2_FirstPage()&#x2F;u8g2_NextPage() —— 绘制命令"></a>2.2.18 u8g2_FirstPage()&#x2F;u8g2_NextPage() —— 绘制命令</h4><p>函数说明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 绘制图像</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">u8g2_FirstPage</span><span class="params">(<span class="keyword">u8g2_t</span> *u8g2)</span></span></span><br><span class="line"><span class="function"><span class="keyword">uint8_t</span> <span class="title">u8g2_NextPage</span><span class="params">(<span class="keyword">u8g2_t</span> *u8g2)</span></span></span><br></pre></td></tr></table></figure><ul><li><p><strong>u8g2_FirstPage</strong>方法会把当前页码位置变成0；</p></li><li><p>修改内容处于<strong>u8g2_FirstPage</strong>和<strong>u8g2_NextPage</strong>之间，每次都是重新渲染所有内容；</p></li><li><p>该方法消耗的ram空间，比<strong>u8g2_SendBuffer</strong>消耗的RAM空间要少；</p></li><li><p>示例：</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">u8g2_FirstPage(&amp;u8g2);</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">u8g2_SetFont(&amp;u8g2,u8g2_font_ncenB14_tr);</span><br><span class="line">u8g2_DrawStr(&amp;u8g2,<span class="number">0</span>,<span class="number">15</span>,<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">while</span> (u8g2_NextPage(&amp;u8g2));</span><br></pre></td></tr></table></figure><ul><li>库源码解析：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">u8g2_FirstPage</span><span class="params">(<span class="keyword">u8g2_t</span> *u8g2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ( u8g2-&gt;is_auto_page_clear )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//清除缓冲区</span></span><br><span class="line">    u8g2_ClearBuffer(u8g2);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//设置当前缓冲区的Tile Row 一个Tile等于8个像素点的高度</span></span><br><span class="line">  u8g2_SetBufferCurrTileRow(u8g2, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">uint8_t</span> <span class="title">u8g2_NextPage</span><span class="params">(<span class="keyword">u8g2_t</span> *u8g2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">uint8_t</span> row;</span><br><span class="line">  u8g2_send_buffer(u8g2);</span><br><span class="line">  row = u8g2-&gt;tile_curr_row;</span><br><span class="line">  row += u8g2-&gt;tile_buf_height;</span><br><span class="line">  <span class="keyword">if</span> ( row &gt;= u8g2_GetU8x8(u8g2)-&gt;display_info-&gt;tile_height )</span><br><span class="line">  &#123; </span><br><span class="line">  <span class="comment">//如果row已经到达最后一行，触发refreshDisplay调用，表示整个页面已经刷完了</span></span><br><span class="line">    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( u8g2-&gt;is_auto_page_clear )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//清除缓冲区</span></span><br><span class="line">    u8g2_ClearBuffer(u8g2);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//不断更新TileRow 这是非常关键的一步</span></span><br><span class="line">  u8g2_SetBufferCurrTileRow(u8g2, row);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-19-u8g2-SendBuffer-——-绘制缓冲区的内容"><a href="#2-2-19-u8g2-SendBuffer-——-绘制缓冲区的内容" class="headerlink" title="2.2.19 u8g2_SendBuffer() —— 绘制缓冲区的内容"></a>2.2.19 u8g2_SendBuffer() —— 绘制缓冲区的内容</h4><p>函数说明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 绘制缓冲区的内容</span></span><br><span class="line"><span class="comment"> * @Note 关联方法  clearBuffer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">u8g2_SendBuffer</span><span class="params">(<span class="keyword">u8g2_t</span> *u8g2)</span></span></span><br></pre></td></tr></table></figure><ul><li><strong>u8g2_SendBuffer</strong>的<strong>RAM</strong>占用空间大，需要结合构造器的buffer选项使用；</li><li>不管是<strong>u8g2_FirstPage</strong>、<strong>u8g2_NextPage</strong>还是<strong>u8g2_SendBuffer</strong>，都涉及到一个叫做 <strong>current page position</strong>的概念；</li><li>库源码解析：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">u8g2_SendBuffer</span><span class="params">(<span class="keyword">u8g2_t</span> *u8g2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  u8g2_send_buffer(u8g2);</span><br><span class="line">  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">u8g2_send_tile_row</span><span class="params">(<span class="keyword">u8g2_t</span> *u8g2, <span class="keyword">uint8_t</span> src_tile_row, <span class="keyword">uint8_t</span> dest_tile_row)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">uint8_t</span> *ptr;</span><br><span class="line">  <span class="keyword">uint16_t</span> offset;</span><br><span class="line">  <span class="keyword">uint8_t</span> w;</span><br><span class="line">  </span><br><span class="line">  w = u8g2_GetU8x8(u8g2)-&gt;display_info-&gt;tile_width;</span><br><span class="line">  offset = src_tile_row;</span><br><span class="line">  ptr = u8g2-&gt;tile_buf_ptr;</span><br><span class="line">  offset *= w;</span><br><span class="line">  offset *= <span class="number">8</span>;</span><br><span class="line">  ptr += offset;</span><br><span class="line">  u8x8_DrawTile(u8g2_GetU8x8(u8g2), <span class="number">0</span>, dest_tile_row, w, ptr);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">  write the buffer to the display RAM. </span></span><br><span class="line"><span class="comment">  For most displays, this will make the content visible to the user.</span></span><br><span class="line"><span class="comment">  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">u8g2_send_buffer</span><span class="params">(<span class="keyword">u8g2_t</span> *u8g2)</span> U8X8_NOINLINE</span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">u8g2_send_buffer</span><span class="params">(<span class="keyword">u8g2_t</span> *u8g2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">uint8_t</span> src_row;</span><br><span class="line">  <span class="keyword">uint8_t</span> src_max;</span><br><span class="line">  <span class="keyword">uint8_t</span> dest_row;</span><br><span class="line">  <span class="keyword">uint8_t</span> dest_max;</span><br><span class="line"> </span><br><span class="line">  src_row = <span class="number">0</span>;</span><br><span class="line">  src_max = u8g2-&gt;tile_buf_height;</span><br><span class="line">  dest_row = u8g2-&gt;tile_curr_row;</span><br><span class="line">  dest_max = u8g2_GetU8x8(u8g2)-&gt;display_info-&gt;tile_height;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    u8g2_send_tile_row(u8g2, src_row, dest_row);</span><br><span class="line">    src_row++;</span><br><span class="line">    dest_row++;</span><br><span class="line">  &#125; <span class="keyword">while</span>( src_row &lt; src_max &amp;&amp; dest_row &lt; dest_max );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>示例</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Buffer</span><span class="params">(<span class="keyword">u8g2_t</span> *u8g2)</span> </span>&#123;</span><br><span class="line">u8g2_ClearBuffer(u8g2);</span><br><span class="line"><span class="comment">// ... write something to the buffer </span></span><br><span class="line">u8g2_SendBuffer(u8g2);</span><br><span class="line">HAL_Delay(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-显示配置相关函数（并不是很有用，再进阶）"><a href="#2-3-显示配置相关函数（并不是很有用，再进阶）" class="headerlink" title="2.3 显示配置相关函数（并不是很有用，再进阶）"></a>2.3 显示配置相关函数（并不是很有用，再进阶）</h3><h4 id="2-3-1-u8g2-GetAscent-——-获取基准线以上的高度"><a href="#2-3-1-u8g2-GetAscent-——-获取基准线以上的高度" class="headerlink" title="2.3.1 u8g2_GetAscent() —— 获取基准线以上的高度"></a>2.3.1 u8g2_GetAscent() —— 获取基准线以上的高度</h4><p>函数说明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取基准线以上的高度</span></span><br><span class="line"><span class="comment"> * @return 返回高度值</span></span><br><span class="line"><span class="comment"> * @Note 关联方法  setFont getDescent setFontRefHeightAll</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int8_t</span> <span class="title">u8g2_GetAscent</span><span class="params">(&amp;u8g2)</span></span></span><br></pre></td></tr></table></figure><ul><li>跟字体有关（u8g2_SetFont）；</li><li>示例：<br>下面例子，ascent是18</li></ul><img src="/posts/4084148530/719839ae60974a95b8e5426c38b407df.png" class="" title="获取基准线以上的高度"><h4 id="2-3-2-u8g2-GetDescent-——-获取基准线以下的高度"><a href="#2-3-2-u8g2-GetDescent-——-获取基准线以下的高度" class="headerlink" title="2.3.2 u8g2_GetDescent() —— 获取基准线以下的高度"></a>2.3.2 u8g2_GetDescent() —— 获取基准线以下的高度</h4><p>函数说明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取基准线以下的高度</span></span><br><span class="line"><span class="comment"> * @return 返回高度值</span></span><br><span class="line"><span class="comment"> * @Note 关联方法  setFont setFontRefHeightAll</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int8_t</span> <span class="title">u8g2_GetDescent</span><span class="params">(&amp;u8g2)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>跟字体有关（setFont）；</li><li>示例：<br>下面例子，descent是-5</li></ul><img src="/posts/4084148530/da5eb213190a4538aa7f0983e23f6966.png" class="" title="获取基准线以下的高度"><h4 id="2-3-3-u8g2-GetDisplayHeight-——-获取显示器的高度"><a href="#2-3-3-u8g2-GetDisplayHeight-——-获取显示器的高度" class="headerlink" title="2.3.3 u8g2_GetDisplayHeight() —— 获取显示器的高度"></a>2.3.3 u8g2_GetDisplayHeight() —— 获取显示器的高度</h4><p>函数说明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取显示器的高度</span></span><br><span class="line"><span class="comment"> * @return 返回高度值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">u8g2_uint_t</span> <span class="title">u8g2_GetDisplayHeight</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br></pre></td></tr></table></figure><h4 id="2-3-4-u8g2-GetDisplayWidth-——-获取显示器的宽度"><a href="#2-3-4-u8g2-GetDisplayWidth-——-获取显示器的宽度" class="headerlink" title="2.3.4 u8g2_GetDisplayWidth() —— 获取显示器的宽度"></a>2.3.4 u8g2_GetDisplayWidth() —— 获取显示器的宽度</h4><p>函数说明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取显示器的宽度</span></span><br><span class="line"><span class="comment"> * @return 返回宽度值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">u8g2_uint_t</span> <span class="title">u8g2_GetDisplayWidth</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br></pre></td></tr></table></figure><h4 id="2-3-5-u8g2-GetMaxCharHeight-——-获取当前字体里的最大字符的高度"><a href="#2-3-5-u8g2-GetMaxCharHeight-——-获取当前字体里的最大字符的高度" class="headerlink" title="2.3.5 u8g2_GetMaxCharHeight() —— 获取当前字体里的最大字符的高度"></a>2.3.5 u8g2_GetMaxCharHeight() —— 获取当前字体里的最大字符的高度</h4><p>函数说明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取当前字体里的最大字符的高度</span></span><br><span class="line"><span class="comment"> * @return 返回高度值</span></span><br><span class="line"><span class="comment"> * @Note 关联方法 setFont</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">u8g2_uint_t</span> <span class="title">u8g2_GetMaxCharHeight</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><h4 id="2-3-6-u8g2-GetMaxCharWidth-——-获取当前字体里的最大字符的宽度"><a href="#2-3-6-u8g2-GetMaxCharWidth-——-获取当前字体里的最大字符的宽度" class="headerlink" title="2.3.6 u8g2_GetMaxCharWidth() —— 获取当前字体里的最大字符的宽度"></a>2.3.6 u8g2_GetMaxCharWidth() —— 获取当前字体里的最大字符的宽度</h4><p>函数说明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取当前字体里的最大字符的宽度</span></span><br><span class="line"><span class="comment"> * @return 返回宽度值</span></span><br><span class="line"><span class="comment"> * @Note 关联方法 setFont</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">u8g2_uint_t</span> u8g2_GetMaxCharWidth</span><br></pre></td></tr></table></figure><h4 id="2-3-7-u8g2-GetStrWidth-——-获取字符串的像素宽度"><a href="#2-3-7-u8g2-GetStrWidth-——-获取字符串的像素宽度" class="headerlink" title="2.3.7 u8g2_GetStrWidth() —— 获取字符串的像素宽度"></a>2.3.7 u8g2_GetStrWidth() —— 获取字符串的像素宽度</h4><p>函数说明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取字符串的像素宽度</span></span><br><span class="line"><span class="comment"> * @param s 绘制字符串</span></span><br><span class="line"><span class="comment"> * @return 返回字符串的像素宽度值</span></span><br><span class="line"><span class="comment"> * @Note 关联方法 setFont drawStr</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">u8g2_uint_t</span> <span class="title">u8g2_GetStrWidth</span><span class="params">(<span class="keyword">u8g2_t</span> *u8g2, <span class="keyword">const</span> <span class="keyword">char</span> *s)</span></span></span><br></pre></td></tr></table></figure><h4 id="2-3-8-u8g2-GetUTF8Width-——-获取UTF-8字符串的像素宽度"><a href="#2-3-8-u8g2-GetUTF8Width-——-获取UTF-8字符串的像素宽度" class="headerlink" title="2.3.8 u8g2_GetUTF8Width() —— 获取UTF-8字符串的像素宽度"></a>2.3.8 u8g2_GetUTF8Width() —— 获取UTF-8字符串的像素宽度</h4><p>函数说明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取UTF-8字符串的像素宽度</span></span><br><span class="line"><span class="comment"> * @param s 绘制字符串</span></span><br><span class="line"><span class="comment"> * @return 返回字符串的像素宽度值</span></span><br><span class="line"><span class="comment"> * @Note 关联方法 setFont drawStr</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">u8g2_uint_t</span> <span class="title">u8g2_GetUTF8Width</span><span class="params">(<span class="keyword">u8g2_t</span> *u8g2, <span class="keyword">const</span> <span class="keyword">char</span> *str)</span></span></span><br></pre></td></tr></table></figure><h4 id="2-3-9-u8g2-SetAutoPageClear-——-设置自动清除缓冲区"><a href="#2-3-9-u8g2-SetAutoPageClear-——-设置自动清除缓冲区" class="headerlink" title="2.3.9 u8g2_SetAutoPageClear() —— 设置自动清除缓冲区"></a>2.3.9 u8g2_SetAutoPageClear() —— 设置自动清除缓冲区</h4><p>函数说明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 是否自动清除缓冲区</span></span><br><span class="line"><span class="comment"> * @param mode 0 表示关闭</span></span><br><span class="line"><span class="comment"> *             1 表示开启，默认是开启</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">u8g2_uint_t</span> <span class="title">u8g2_SetAutoPageClear</span><span class="params">()</span> </span></span><br></pre></td></tr></table></figure><h4 id="2-3-10-u8g2-SetBitmapMode-——-设置位图模式"><a href="#2-3-10-u8g2-SetBitmapMode-——-设置位图模式" class="headerlink" title="2.3.10 u8g2_SetBitmapMode() —— 设置位图模式"></a>2.3.10 u8g2_SetBitmapMode() —— 设置位图模式</h4><p>函数说明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置位图模式（定义drawXBM方法是否绘制背景颜色）</span></span><br><span class="line"><span class="comment"> * @param is_transparent</span></span><br><span class="line"><span class="comment"> *         0 绘制背景颜色，不透明，默认是该值</span></span><br><span class="line"><span class="comment"> *         1 不绘制背景颜色，透明</span></span><br><span class="line"><span class="comment"> * @Note 关联方法 drawXBM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">u8g2_SetBitmapMode</span><span class="params">(<span class="keyword">u8g2_t</span> *u8g2, <span class="keyword">uint8_t</span> is_transparent)</span></span></span><br></pre></td></tr></table></figure><ul><li>示例：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">u8g2_SetDrawColor(&amp;u8g2,<span class="number">1</span>);</span><br><span class="line">u8g2_SetBitmapMode(&amp;u8g2,<span class="number">0</span>);</span><br><span class="line">u8g2_DrawXBM(&amp;u8g2,<span class="number">4</span>,<span class="number">3</span>, u8g2_logo_97x51_width, u8g2_logo_97x51_height,  u8g2_logo_97x51_bits);</span><br><span class="line">u8g2_DrawXBM(&amp;u8g2,<span class="number">12</span>,<span class="number">11</span>, u8g2_logo_97x51_width, u8g2_logo_97x51_height,  u8g2_logo_97x51_bits);</span><br></pre></td></tr></table></figure><img src="/posts/4084148530/5def81f3580d4e45b70e907cc3f3c69c.png" class="" title="设置位图模式1"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">u8g2_SetDrawColor(&amp;u8g2,<span class="number">1</span>);</span><br><span class="line">u8g2_SetBitmapMode(&amp;u8g2,<span class="number">1</span>);</span><br><span class="line">u8g2_DrawXBM(&amp;u8g2,<span class="number">4</span>,<span class="number">3</span>, u8g2_logo_97x51_width, u8g2_logo_97x51_height,  u8g2_logo_97x51_bits);</span><br><span class="line">u8g2_DrawXBM(&amp;u8g2,<span class="number">12</span>,<span class="number">11</span>, u8g2_logo_97x51_width, u8g2_logo_97x51_height,  u8g2_logo_97x51_bits);</span><br></pre></td></tr></table></figure><img src="/posts/4084148530/f4c5a187659b46cebca8d8c17e982cb8.png" class="" title="设置位图模式2"><h4 id="2-3-11-u8g2-SetClipWindow-——-设置采集窗口大小"><a href="#2-3-11-u8g2-SetClipWindow-——-设置采集窗口大小" class="headerlink" title="2.3.11 u8g2_SetClipWindow() —— 设置采集窗口大小"></a>2.3.11 u8g2_SetClipWindow() —— 设置采集窗口大小</h4><p>函数说明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置采集窗口，窗口范围从左上角(x0,y0)到右下角(x1,y1)</span></span><br><span class="line"><span class="comment"> * 也就是我们绘制的内容只能在规范范围内显示</span></span><br><span class="line"><span class="comment"> * @param x0 左上角x坐标</span></span><br><span class="line"><span class="comment"> * @param y0 左上角y坐标</span></span><br><span class="line"><span class="comment"> * @param x1 右上角x坐标</span></span><br><span class="line"><span class="comment"> * @param y1 右上角y坐标</span></span><br><span class="line"><span class="comment"> * @Note 关联方法 begin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">u8g2_SetClipWindow</span><span class="params">(<span class="keyword">u8g2_t</span> *u8g2, <span class="keyword">u8g2_uint_t</span> clip_x0, <span class="keyword">u8g2_uint_t</span> clip_y0, <span class="keyword">u8g2_uint_t</span> clip_x1, <span class="keyword">u8g2_uint_t</span> clip_y1 )</span></span></span><br></pre></td></tr></table></figure><ul><li>可以通过 u8g2_SetMaxClipWindow去掉该限制</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">u8g2_SetMaxClipWindow</span><span class="params">(<span class="keyword">u8g2_t</span> *u8g2)</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">u8g2_SetClipWindow(&amp;u8g2,<span class="number">10</span>, <span class="number">10</span>, <span class="number">85</span>, <span class="number">30</span>);</span><br><span class="line">u8g2_SetDrawColor(&amp;u8g2,<span class="number">1</span>);</span><br><span class="line">u8g2_DrawStr(&amp;u8g2,<span class="number">3</span>, <span class="number">32</span>, <span class="string">&quot;U8g2&quot;</span>);</span><br></pre></td></tr></table></figure><img src="/posts/4084148530/731363022d3b4fd1af6e6b1356bac1e0.png" class="" title="设置采集窗口大小"><h4 id="2-3-14-u8g2-SetDisplayRotation-——-设置显示器的旋转角度"><a href="#2-3-14-u8g2-SetDisplayRotation-——-设置显示器的旋转角度" class="headerlink" title="2.3.14 u8g2_SetDisplayRotation() —— 设置显示器的旋转角度"></a>2.3.14 u8g2_SetDisplayRotation() —— 设置显示器的旋转角度</h4><p>函数说明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置显示器的旋转角度</span></span><br><span class="line"><span class="comment"> * @param u8g2_cb 旋转选项</span></span><br><span class="line"><span class="comment"> *        U8G2_R0 不做旋转 水平</span></span><br><span class="line"><span class="comment"> *        U8G2_R1 旋转90度</span></span><br><span class="line"><span class="comment"> *        U8G2_R2 旋转180度</span></span><br><span class="line"><span class="comment"> *        U8G2_R3 旋转270度</span></span><br><span class="line"><span class="comment"> *        U8G2_MIRROR 不做旋转 水平，显示内容是镜像的，暂时不理解</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">u8g2_SetDisplayRotation</span><span class="params">(<span class="keyword">u8g2_t</span> *u8g2, <span class="keyword">const</span> <span class="keyword">u8g2_cb_t</span> *u8g2_cb)</span></span></span><br></pre></td></tr></table></figure><h4 id="2-3-15-u8g2-SetDrawColor-——-设置绘制颜色（反色）"><a href="#2-3-15-u8g2-SetDrawColor-——-设置绘制颜色（反色）" class="headerlink" title="2.3.15 u8g2_SetDrawColor() —— 设置绘制颜色（反色）"></a>2.3.15 u8g2_SetDrawColor() —— 设置绘制颜色（反色）</h4><p>函数说明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置绘制颜色（暂时还没有具体去了解用法）</span></span><br><span class="line"><span class="comment">  Assign the draw color for all drawing functions.</span></span><br><span class="line"><span class="comment">  color may be 0 or 1. The actual color is defined by the display.</span></span><br><span class="line"><span class="comment">  With color = 1 the drawing function will set the display memory to 1.</span></span><br><span class="line"><span class="comment">  For OLEDs this ususally means, that the pixel is enabled and the LED </span></span><br><span class="line"><span class="comment">  at the pixel is turned on.</span></span><br><span class="line"><span class="comment">  On an LCD it usually means that the LCD segment of the pixel is enabled, </span></span><br><span class="line"><span class="comment">  which absorbs the light.</span></span><br><span class="line"><span class="comment">  For eInk/ePaper it means black ink.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  7 Jan 2017: Allow color value 2 for XOR operation.</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">u8g2_SetDrawColor</span><span class="params">(<span class="keyword">u8g2_t</span> *u8g2, <span class="keyword">uint8_t</span> color)</span></span></span><br></pre></td></tr></table></figure><h4 id="2-3-16-u8g2-SetFont-——-设置字体集"><a href="#2-3-16-u8g2-SetFont-——-设置字体集" class="headerlink" title="2.3.16 u8g2_SetFont() —— 设置字体集"></a>2.3.16 u8g2_SetFont() —— 设置字体集</h4><p>  <strong>这是一个非常重要的方法，非常重要！！！</strong><br>函数说明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置字体集（字体集用于字符串绘制方法或者glyph绘制方法）</span></span><br><span class="line"><span class="comment"> * @param font 具体的字体集</span></span><br><span class="line"><span class="comment"> * @Note 关联方法  drawUTF8 drawStr drawGlyph print</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">u8g2_SetFont</span><span class="params">(<span class="keyword">u8g2_t</span> *u8g2, <span class="keyword">const</span> <span class="keyword">uint8_t</span>  *font)</span></span></span><br></pre></td></tr></table></figure><ul><li>Font会根据像素点高度做了很多区分，具体font请参考 <a href="https://github.com/olikraus/u8g2/wiki/fntlistall">Fntlistall iki</a>。</li><li>如果我们需要用到中文字符，可以在wiki里面搜索一下chinese，你就会发现很多中文font，比如：</li></ul><img src="/posts/4084148530/89ed285ab0284c9abb99513124069533.png" class="" title="字体集"><img src="/posts/4084148530/b5c62b928189461ea513fad74716ca9f.png" class="" title="设置字体集1"><img src="/posts/4084148530/aba9fc370509443db372ef6b7436b857.png" class="" title="设置字体集2"><h4 id="2-3-17-u8g2-SetFontDirection-——-设置字体方向"><a href="#2-3-17-u8g2-SetFontDirection-——-设置字体方向" class="headerlink" title="2.3.17 u8g2_SetFontDirection() —— 设置字体方向"></a>2.3.17 u8g2_SetFontDirection() —— 设置字体方向</h4><p>函数说明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义字符串绘制或者图形绘制的方向</span></span><br><span class="line"><span class="comment"> * @param dir 方向</span></span><br><span class="line"><span class="comment"> * @param 关联方法 drawStr</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">u8g2_SetFontDirection</span><span class="params">(<span class="keyword">u8g2_t</span> *u8g2, <span class="keyword">uint8_t</span> dir)</span></span></span><br></pre></td></tr></table></figure><ul><li><strong>Description:</strong> The arguments defines the drawing direction of all strings or glyphs.</li></ul><table><thead><tr><th>Argument</th><th>String Rotation</th><th>Description</th></tr></thead><tbody><tr><td>0</td><td>0 degree</td><td>Left to right</td></tr><tr><td>1</td><td>90 degree</td><td>Top to down</td></tr><tr><td>2</td><td>180 degree</td><td>Right to left</td></tr><tr><td>3</td><td>270 degree</td><td>Down to top</td></tr></tbody></table><ul><li>示例：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">u8g2_SetFont(u8g2_font_ncenB14_tf);</span><br><span class="line">u8g2_SetFontDirection(<span class="number">0</span>);</span><br><span class="line">u8g2_DrawStr(<span class="number">15</span>, <span class="number">20</span>, <span class="string">&quot;Abc&quot;</span>);</span><br><span class="line">u8g2_SetFontDirection(<span class="number">1</span>);</span><br><span class="line">u8g2_DrawStr(<span class="number">15</span>, <span class="number">20</span>, <span class="string">&quot;Abc&quot;</span>);</span><br></pre></td></tr></table></figure><img src="/posts/4084148530/08609654bd0b43449199b7e04f4d29a6.png" class="" title="设置字体方向"><h3 id="2-4-缓存相关函数（了解了解）"><a href="#2-4-缓存相关函数（了解了解）" class="headerlink" title="2.4 缓存相关函数（了解了解）"></a>2.4 缓存相关函数（了解了解）</h3><h4 id="2-4-1-u8g2-GetBufferPtr-——-获取缓存空间的地址"><a href="#2-4-1-u8g2-GetBufferPtr-——-获取缓存空间的地址" class="headerlink" title="2.4.1 u8g2_GetBufferPtr() —— 获取缓存空间的地址"></a>2.4.1 u8g2_GetBufferPtr() —— 获取缓存空间的地址</h4><p>函数说明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取缓存空间的地址</span></span><br><span class="line"><span class="comment"> * @return 返回缓存空间起始地址</span></span><br><span class="line"><span class="comment"> * @Note 关联方法 getBufferTileHeight, getBufferTileWidth, clearBuffer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">uint8_t</span> <span class="title">u8g2_GetBufferPtr</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><h4 id="2-4-2-u8g2-GetBufferTileHeight-——-获取缓冲区的Tile高度"><a href="#2-4-2-u8g2-GetBufferTileHeight-——-获取缓冲区的Tile高度" class="headerlink" title="2.4.2 u8g2_GetBufferTileHeight() —— 获取缓冲区的Tile高度"></a>2.4.2 u8g2_GetBufferTileHeight() —— 获取缓冲区的Tile高度</h4><p>函数说明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取缓冲区的Tile高度</span></span><br><span class="line"><span class="comment"> * @return 返回高度值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">uint8_t</span> <span class="title">u8g2_GetBufferTileHeight</span><span class="params">()</span> </span></span><br></pre></td></tr></table></figure><h4 id="2-4-3-u8g2-GetBufferTileWidth-——-获取缓冲区的Tile宽度"><a href="#2-4-3-u8g2-GetBufferTileWidth-——-获取缓冲区的Tile宽度" class="headerlink" title="2.4.3 u8g2_GetBufferTileWidth() —— 获取缓冲区的Tile宽度"></a>2.4.3 u8g2_GetBufferTileWidth() —— 获取缓冲区的Tile宽度</h4><p>函数说明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取缓冲区的Tile宽度</span></span><br><span class="line"><span class="comment"> * @return 返回宽度值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">uint8_t</span> <span class="title">u8g2_GetBufferTileWidth</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><h4 id="2-4-4-u8g2-GetBufferCurrTileRow-——-获取缓冲区的当前Tile-row"><a href="#2-4-4-u8g2-GetBufferCurrTileRow-——-获取缓冲区的当前Tile-row" class="headerlink" title="2.4.4 u8g2_GetBufferCurrTileRow() —— 获取缓冲区的当前Tile row"></a>2.4.4 u8g2_GetBufferCurrTileRow() —— 获取缓冲区的当前Tile row</h4><p>函数说明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取缓冲区的当前Tile row行数</span></span><br><span class="line"><span class="comment"> * @return 返回当前的tilerow</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">uint8_t</span> <span class="title">u8g2_GetBufferCurrTileRow</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><h4 id="2-4-5-u8g2-SetBufferCurrTileRow-——-设置缓冲区的当前Tile-row"><a href="#2-4-5-u8g2-SetBufferCurrTileRow-——-设置缓冲区的当前Tile-row" class="headerlink" title="2.4.5 u8g2_SetBufferCurrTileRow() —— 设置缓冲区的当前Tile row"></a>2.4.5 u8g2_SetBufferCurrTileRow() —— 设置缓冲区的当前Tile row</h4><p>函数说明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置缓冲区的当前Tile row</span></span><br><span class="line"><span class="comment"> * @param 当前的tilerow</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">u8g2_SetBufferCurrTileRow</span><span class="params">(<span class="keyword">u8g2_t</span> *u8g2, <span class="keyword">uint8_t</span> row)</span></span></span><br></pre></td></tr></table></figure><ul><li>示例：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">u8g2_SetBufferCurrTileRow(&amp;u8g2,<span class="number">0</span>);       <span class="comment">// let y=0 be the topmost row of the buffer</span></span><br><span class="line">u8g2_ClearBuffer(&amp;u8g2);</span><br><span class="line">u8g2_SetFont(&amp;u8g2,u8g2_font_helvB08_tr);</span><br><span class="line">u8g2_DrawStr(&amp;u8g2,<span class="number">2</span>, <span class="number">8</span>, <span class="string">&quot;abcdefg&quot;</span>);</span><br><span class="line"> </span><br><span class="line">u8g2_SetBufferCurrTileRow(&amp;u8g2,<span class="number">2</span>);   <span class="comment">// write the buffer to tile row 2 (y=16) on the display</span></span><br><span class="line">u8g2_SendBuffer(&amp;u8g2);</span><br><span class="line">u8g2_SetBufferCurrTileRow(&amp;u8g2,<span class="number">4</span>);   <span class="comment">// write the same buffer to tile row 4 (y=32) on the display</span></span><br><span class="line">u8g2_SendBuffer(&amp;u8g2);</span><br></pre></td></tr></table></figure><img src="/posts/4084148530/fe840e6183ae4189a53bce879497e94e.png" class="" title="设置缓冲区的当前Tile row"><ul><li>在 <strong>u8g2_FirstPage&#x2F;u8g2_NextPage</strong> 循环时，由于底层调用了**u8g2_SetBufferCurrTileRow(u8g2, row);**，所以尽量不要自己手动调用该方法；</li></ul><h3 id="3-如何运用U8G2库"><a href="#3-如何运用U8G2库" class="headerlink" title="3.如何运用U8G2库"></a>3.如何运用U8G2库</h3><img src="/posts/4084148530/3d24b3a0200048afb0607f990e4dba09.gif" class="" title="如此这般运用"><hr><h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><ol><li><a href="https://blog.csdn.net/qq_51096702/article/details/130257230">玩转u8g2 OLED库，一篇就够——基于SMT32、HAL</a></li></ol><hr><center><font color=red>=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">U8G2的OLED库基础知识</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="C" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/C/"/>
    
    <category term="GUI" scheme="https://zml3589110.github.io/categories/GUI/"/>
    
    <category term="U8G2" scheme="https://zml3589110.github.io/categories/U8G2/"/>
    
    <category term="OLED" scheme="https://zml3589110.github.io/categories/OLED/"/>
    
    
    <category term="C" scheme="https://zml3589110.github.io/tags/C/"/>
    
    <category term="STM32" scheme="https://zml3589110.github.io/tags/STM32/"/>
    
    <category term="GUI" scheme="https://zml3589110.github.io/tags/GUI/"/>
    
    <category term="U8G2" scheme="https://zml3589110.github.io/tags/U8G2/"/>
    
    <category term="OLED" scheme="https://zml3589110.github.io/tags/OLED/"/>
    
  </entry>
  
  <entry>
    <title>U8G2移植STM32类</title>
    <link href="https://zml3589110.github.io/posts/2286740127.html"/>
    <id>https://zml3589110.github.io/posts/2286740127.html</id>
    <published>2023-12-21T12:53:20.000Z</published>
    <updated>2023-12-22T03:20:51.705Z</updated>
    
    <content type="html"><![CDATA[<h1 id="移植准备（实验使用的是GD32）"><a href="#移植准备（实验使用的是GD32）" class="headerlink" title="移植准备（实验使用的是GD32）"></a>移植准备（实验使用的是GD32）</h1><ol><li>STM32F407VET6模板工程(Keil)</li><li>u8g2源码</li><li>STM32f407vet6开发板+4线IIC驱动的0.96寸oled屏</li></ol><h1 id="U8G2源码下载"><a href="#U8G2源码下载" class="headerlink" title="U8G2源码下载"></a>U8G2源码下载</h1><p><a href="https://gitee.com/penjun71/u8g2">gitee仓库</a><br><a href="https://github.com/olikraus/u8g2">github仓库</a></p><ol><li>git工具克隆仓库：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://gitee.com/penjun71/u8g2.git  <span class="comment">#gitee</span></span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/olikraus/u8g2.git <span class="comment">#github</span></span><br></pre></td></tr></table></figure><ol start="2"><li>通过仓库下载压缩包。<br>文件目录：</li></ol><img src="/posts/2286740127/7bde2616834e4f459cd26d590575c134.png" class="" title="文件目录"><h1 id="U8G2移植"><a href="#U8G2移植" class="headerlink" title="U8G2移植"></a>U8G2移植</h1><h2 id="1、将源码加入模板工程（KEIL）"><a href="#1、将源码加入模板工程（KEIL）" class="headerlink" title="1、将源码加入模板工程（KEIL）"></a>1、将源码加入模板工程（KEIL）</h2><p>（1）将文件夹中csrc文件夹复制至工程中，改名为u8g2</p><img src="/posts/2286740127/c5ec7169cdf34912b586df5f7d736f36.png" class="" title="源码复制"><p>（2）剔除多余驱动文件：<code>u8x8_d_xxxx.c</code> 仅保留 <code>u8x8_d_ssd1306_128x64_noname.c</code></p><img src="/posts/2286740127/083345891f504839bba1a72e55cc90eb.png" class="" title="保留对应驱动文件"><p>（3）创建 <code>Group</code> <code>u8g2</code>，并将剔除后文件夹中C文件全部加入此组中</p><img src="/posts/2286740127/a79fec9bc3d04353b3cd951e80ab6523.png" class="" title="在这里插入图片描述"><p>（4）将u8g2文件夹加入头文件搜索路径</p><img src="/posts/2286740127/c45cf6140f4a4bc7abc39748997ab879.png" class="" title="加入头文件搜索路径"><p>（5）勾选Keil-option C99 支持（由于库中包含有未在函数开始定义的所以需要打开C99支持，如果不打开，编译后对应的错误点可以自行修改为函数开头定义变量。）<strong>（注意：这个很重要-其他文章没说明，一直报错，到这里才发现讲得详细些！）</strong></p><img src="/posts/2286740127/0a46599adb2c471ebae6306cb31e8b74.png" class="" title="勾选C99 mode"><h2 id="2、编写驱动接口"><a href="#2、编写驱动接口" class="headerlink" title="2、编写驱动接口"></a>2、编写驱动接口</h2><p><strong>补充：可以使用后边提供的方法（快捷键 ctrl+A 全选以后，直接把全部文件注释了），先全部注释，然后取消注释头文件，并且找到你屏幕驱动对应的那个函数取消注释！</strong></p><p>（1）修改<code>u8g2_d_setup.c</code>仅仅保留函数（对应自己驱动以及ram空间保留自己对应的启动函数）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">u8g2_Setup_ssd1306_i2c_128x64_noname_f</span><span class="params">(<span class="keyword">u8g2_t</span> *u8g2, <span class="keyword">const</span> <span class="keyword">u8g2_cb_t</span> *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)</span></span></span><br></pre></td></tr></table></figure><img src="/posts/2286740127/0fe9c8632542420cb6ee4b41bd239e38.png" class="" title="u8g2_d_setup"><p>（2）修改<code>u8g2_d_memery.c</code>仅保留</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">uint8_t</span> *<span class="title">u8g2_m_16_8_f</span><span class="params">(<span class="keyword">uint8_t</span> *page_cnt)</span></span></span><br></pre></td></tr></table></figure><img src="/posts/2286740127/eed66ef6e04c49f1ab20da1dc7ffafe6.png" class="" title="u8g2_d_memery.c"><p>（3）编写启动所需的回调函数（即<code>u8g2_d_setup.c</code>中保留的函数的最后一个参数）并调用启动函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">u8g2_Setup_ssd1306_i2c_128x64_noname_f</span><span class="params">(<span class="keyword">u8g2_t</span> *u8g2,</span></span></span><br><span class="line"><span class="function"><span class="params">                                            <span class="keyword">const</span> <span class="keyword">u8g2_cb_t</span> *rotation, </span></span></span><br><span class="line"><span class="function"><span class="params">                                            u8x8_msg_cb byte_cb,</span></span></span><br><span class="line"><span class="function"><span class="params">                                            u8x8_msg_cb gpio_and_delay_cb)</span></span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure><p><code>u8g2_t *u8g2</code>:u8g2 句柄结构体指针.</p><p><code>const u8g2_cb_t *rotation</code>：定义屏幕方向.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//u8g2_cb_t *rotation可选参数↓</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> U8G2_R0(&amp;u8g2_cb_r0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> U8G2_R1(&amp;u8g2_cb_r1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> U8G2_R2(&amp;u8g2_cb_r2)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> U8G2_R3(&amp;u8g2_cb_r3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> U8G2_MIRROR(&amp;u8g2_cb_mirror)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> U8G2_MIRROR_VERTICAL(&amp;u8g2_cb_mirror_vertical)</span></span><br></pre></td></tr></table></figure><p><code>u8x8_msg_cb byte_cb</code>:确定读写接口.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可选函数位于u8g2_byte.c</span></span><br></pre></td></tr></table></figure><p><code>u8x8_msg_cb gpio_and_delay_cb</code>:对接IO初始化、IO读写、延时函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//u8x8_msg_cb 是一个函数指针编写此函数的状态：</span></span><br><span class="line"><span class="function"><span class="keyword">uint8_t</span> <span class="title">u8g2_gpio_and_delay_stm32_soft_iic</span><span class="params">(U8X8_UNUSED <span class="keyword">u8x8_t</span> *u8x8, U8X8_UNUSED <span class="keyword">uint8_t</span> msg, U8X8_UNUSED <span class="keyword">uint8_t</span> arg_int, U8X8_UNUSED <span class="keyword">void</span> *arg_ptr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">switch</span>(msg)&#123;</span><br><span class="line"><span class="comment">//初始化GPIO</span></span><br><span class="line"><span class="keyword">case</span> U8X8_MSG_GPIO_AND_DELAY_INIT:        <span class="comment">//此状态下初始化IO以及延时函数</span></span><br><span class="line"><span class="comment">//本人用HAL库进行配置未使用到这里配置io与延时</span></span><br><span class="line">       <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> U8X8_MSG_DELAY_MILLI:                <span class="comment">//此状态下对接ms延时函数，延时arg_int ms</span></span><br><span class="line">bsp_delay_ms(arg_int);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> U8X8_MSG_DELAY_10MICRO:              <span class="comment">//此状态下对接10usus延时函数</span></span><br><span class="line">bsp_delay_us(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> U8X8_MSG_DELAY_100NANO:              <span class="comment">//此状态下对接100ns延时函数</span></span><br><span class="line">    __NOP();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> U8X8_MSG_DELAY_I2C:                  <span class="comment">//此状态下对接IIC延时函数</span></span><br><span class="line"> bsp_delay_us(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> U8X8_MSG_GPIO_I2C_DATA:              <span class="comment">//此状态下修改IIC SDA信号线电平</span></span><br><span class="line">        <span class="keyword">if</span> (arg_int) HAL_GPIO_WritePin(LCD_SDA_GPIO_Port, LCD_SDA_Pin, GPIO_PIN_SET);</span><br><span class="line"><span class="keyword">else</span> HAL_GPIO_WritePin(LCD_SDA_GPIO_Port, LCD_SDA_Pin, GPIO_PIN_RESET);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> U8X8_MSG_GPIO_I2C_CLOCK:             <span class="comment">//此状态下修改IIC SCL信号线电平</span></span><br><span class="line"><span class="keyword">if</span> (arg_int) HAL_GPIO_WritePin(LCD_SCL_GPIO_Port, LCD_SCL_Pin, GPIO_PIN_SET);</span><br><span class="line"><span class="keyword">else</span> HAL_GPIO_WritePin(LCD_SCL_GPIO_Port, LCD_SCL_Pin, GPIO_PIN_RESET);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        u8x8_SetGPIOResult(u8x8, <span class="number">1</span>); <span class="comment">// default return value</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// command processed successfully.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>补充：这里主要是设置IIC脚位的高低电平跟他有点不同，以下是使用于自己的脚位模式-zmlong</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// IIC_SCL </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SCL_GPIOClock    RCC_APB2Periph_GPIOB</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SCL_GPIO         GPIOB</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SCL_GPIO_Pin     GPIO_Pin_4</span></span><br><span class="line"><span class="comment">//IIC_SDA </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SDA_GPIOClock    RCC_APB2Periph_GPIOB</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SDA_GPIO         GPIOB</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SDA_GPIO_Pin     GPIO_Pin_5</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">        <span class="keyword">if</span> (arg_int) GPIO_SetBits(SDA_GPIO,SDA_GPIO_Pin);</span><br><span class="line"><span class="keyword">else</span> GPIO_ResetBits(SDA_GPIO,SDA_GPIO_Pin);</span><br><span class="line">            </span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> U8X8_MSG_GPIO_I2C_CLOCK:             <span class="comment">//此状态下修改IIC SCL信号线电平</span></span><br><span class="line"><span class="comment">// if (arg_int) HAL_GPIO_WritePin(LCD_SCL_GPIO_Port, LCD_SCL_Pin, GPIO_PIN_SET);</span></span><br><span class="line"><span class="comment">// else HAL_GPIO_WritePin(LCD_SCL_GPIO_Port, LCD_SCL_Pin, GPIO_PIN_RESET);</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (arg_int) GPIO_SetBits(SCL_GPIO,SCL_GPIO_Pin);</span><br><span class="line"><span class="keyword">else</span> GPIO_ResetBits(SCL_GPIO,SCL_GPIO_Pin);</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="3、u8g2初始化"><a href="#3、u8g2初始化" class="headerlink" title="3、u8g2初始化"></a>3、u8g2初始化</h2><p>完成后调用函数进行启动：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">u8g2_t</span> u8g2;</span><br><span class="line"><span class="comment">//初始化u8g2</span></span><br><span class="line">u8g2_Setup_ssd1306_i2c_128x64_noname_f(&amp;u8g2, U8G2_R0, u8x8_byte_sw_i2c, u8g2_gpio_and_delay_stm32_soft_iic);</span><br><span class="line"><span class="comment">//屏幕初始化</span></span><br><span class="line">u8g2_InitDisplay(&amp;u8g2);</span><br><span class="line"><span class="comment">//开启电源</span></span><br><span class="line">u8g2_SetPowerSave(&amp;u8g2, <span class="number">0</span>);</span><br><span class="line"><span class="comment">//清除显存内容</span></span><br><span class="line">u8g2_ClearBuffer(&amp;u8g2);</span><br></pre></td></tr></table></figure><h2 id="4、编写测试程序-和-结果展示"><a href="#4、编写测试程序-和-结果展示" class="headerlink" title="4、编写测试程序 和 结果展示"></a>4、编写测试程序 和 结果展示</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">u8g2_DrawCircle(&amp;u8g2,<span class="number">64</span>,<span class="number">32</span>,<span class="number">10</span>,U8G2_DRAW_ALL);  <span class="comment">//在62，32位置画一个半径为10的圆</span></span><br><span class="line">u8g2_SendBuffer(&amp;u8g2);<span class="comment">//发送显存到屏幕上</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/posts/2286740127/e63bd80d02d7474cad093ca2dc2d96af.jpeg" class="" title="在这里插入图片描述"><ol><li>测试2<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) </span><br><span class="line">&#123;</span><br><span class="line">LED=~LED;</span><br><span class="line"><span class="comment">// delay_ms(100);</span></span><br><span class="line">       <span class="comment">// u8g2_DrawCircle(&amp;u8g2,64,32,10,U8G2_DRAW_ALL);  //在62，32位置画一个半径为10的圆</span></span><br><span class="line">       <span class="comment">// u8g2_SendBuffer(&amp;u8g2);//发送显存到屏幕上</span></span><br><span class="line">       delay_ms(<span class="number">500</span>);</span><br><span class="line">       <span class="comment">// u8g2_ClearBuffer(&amp;u8g2); </span></span><br><span class="line"></span><br><span class="line">u8g2_ClearBuffer(&amp;u8g2); </span><br><span class="line"><span class="keyword">if</span>(++t &gt;= <span class="number">32</span>) t = <span class="number">1</span>;</span><br><span class="line">u8g2_DrawCircle(&amp;u8g2,<span class="number">64</span>,<span class="number">32</span>,t,U8G2_DRAW_ALL);</span><br><span class="line">u8g2_DrawCircle(&amp;u8g2,<span class="number">32</span>,<span class="number">32</span>,t,U8G2_DRAW_ALL);</span><br><span class="line">u8g2_DrawCircle(&amp;u8g2,<span class="number">96</span>,<span class="number">32</span>,t,U8G2_DRAW_ALL);</span><br><span class="line">u8g2_SendBuffer(&amp;u8g2);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><img src="/posts/2286740127/6765a75a8f2349cbbaa65f64facb7b8f.jpg" class="" title="在这里插入图片描述"><h1 id="以下为其他移植补充参考"><a href="#以下为其他移植补充参考" class="headerlink" title="以下为其他移植补充参考"></a>以下为其他移植补充参考</h1><p>上面的方法其实已经很完美契合模拟IIC驱动OLED实现U8G2图形库驱动显示啦，后边是收集补充部分，大部分使用的是SPI方式，效果应该好一些，以后有时间可以研究硬件IIC跟DMA方式。</p><h1 id="一、stm32移植U8G2图像库指南"><a href="#一、stm32移植U8G2图像库指南" class="headerlink" title="一、stm32移植U8G2图像库指南"></a>一、stm32移植U8G2图像库指南</h1><p>U8g2：用于单色显示的库，版本 2</p><p>U8g2 是一个用于嵌入式设备的单色图形库。U8g2支持单色OLED和LCD，包括以下控制器：SSD1305, SSD1306, SSD1309, SSD1316, SSD1320, SSD1322, SSD1325, SSD1327, SSD1329, SSD1606, SSD1607,895, SH11607,84D1607,SH11607,84D1607,94D1607,94D1607,84D1607,4D1607,4D1607,4D1607,84D1807 ，PCF8812，HX1230，UC1601，UC1604，UC1608，UC1610，UC1611，UC1617，UC1638，UC1701，ST7511，ST7528，ST7565，ST7567，ST7571，ST7586，ST7588，ST75256，ST75320，NT7534，ST7920，IST3020，IST7920，LD7032，KS0108 、KS0713、HD44102、T7932、SED1520、SBN1661、IL3820、MAX7219（完整列表见此处）。</p><p>Arduino 库 U8g2 可以从 Arduino IDE 的库管理器安装。U8g2 还包括 U8x8 库：</p><ol><li>U8g2：</li></ol><ul><li>包括所有图形程序（线&#x2F;框&#x2F;圆绘制）。</li><li>支持多种字体。（几乎）对字体高度没有限制。</li><li>需要微控制器中的一些内存来呈现显示。</li></ul><ol start="2"><li>U8x8：</li></ol><ul><li>仅文本输出（字符）设备。</li><li>仅允许适合 8x8 像素网格的字体。</li><li>直接写入显示器。微控制器中不需要缓冲器。</li></ul><h2 id="移植准备工作"><a href="#移植准备工作" class="headerlink" title="移植准备工作"></a>移植准备工作</h2><p>移植U8G2图像库需要准备好，U8G2的源码<br>U8g2下载地址: <a href="https://github.com/olikraus/u8g2">https://github.com/olikraus/u8g2</a><br>准备一份KEIL工程，我这里使用了一份我自己写的时间片轮询程序（唯一的要求，带屏幕的初始化就行）</p><img src="/posts/2286740127/c1f6a4de64e14f3d87be7d1d06dc41d8.png" class="" title="在这里插入图片描述"><h2 id="开始移植文件"><a href="#开始移植文件" class="headerlink" title="开始移植文件"></a>开始移植文件</h2><p>U8G2源码中，这个csrc是c语言版的源码，直接把他复制到keil的工程里。</p><img src="/posts/2286740127/32a47383e3e447a19ddc75920b7168a2.png" class="" title="在这里插入图片描述"><p>我将csrc文件复制到keil工程中的，HARDWARE文件夹内，改名为OLED_U8G2。（名字和位置，可以根据实际情况更改）</p><img src="/posts/2286740127/3ade7ad1b3c746acaf26441bf6dbbc56.png" class="" title="在这里插入图片描述"><h2 id="修改keil配置"><a href="#修改keil配置" class="headerlink" title="修改keil配置"></a>修改keil配置</h2><p>添加一个分组，把U8G2的文件全部添加进去（注：可以先在外面整理好后再添加好一些）</p><img src="/posts/2286740127/01a45ac5019940048e3d13654cb45052.png" class="" title="在这里插入图片描述"><p>但是，里面有好多u8g2_d_xxx.c格式的文件，里面有三个文件的必要的。其中一个需要根据你OLED屏幕的驱动芯片和像素（如这里选择的文件，就是ssd1306，这个驱动芯片。128*64的像素）</p><img src="/posts/2286740127/27c06eb0e2c54413992d2d9f99d3cdad.png" class="" title="在这里插入图片描述"><p>还有这两个文件也是必要的，除了这三个文件以后的u8g2_d_xxx的文件全部删除。</p><img src="/posts/2286740127/eef4c3082efb4597b1ff7296f2890fd3.png" class="" title="在这里插入图片描述"><p>这四个文件也删除了</p><img src="/posts/2286740127/ca49edc1b41b4eae846f40c25d1e0512.png" class="" title="在这里插入图片描述"><p>然后，添加一下环境配置中的c&#x2F;c++，让keil可以找到这些文件。</p><h2 id="修改U8G2源码"><a href="#修改U8G2源码" class="headerlink" title="修改U8G2源码"></a>修改U8G2源码</h2><p>重点就是修改，u8g2_d_memory.c 与 u8g2_d_setup.c 这两个文件</p><p><strong>u8g2_d_setup.c修改</strong></p><p>快捷键 ctrl+A 全选以后，直接把全部文件注释了</p><img src="/posts/2286740127/b9167a4a0c304eca832a851f821851a9.png" class="" title="在这里插入图片描述"><p>然后，取消注释头文件，并且找到你屏幕驱动对应的那个函数取消注释</p><img src="/posts/2286740127/a2cea0c5836240f6944870a29a29c441.png" class="" title="在这里插入图片描述"><p>这里找到了，跟我ssd1306 128*64对应的函数，取消注释。最后一个英文字母f代表的是内存。就是一次传输多少字节的数据。f为1024个字节，2为256个字节，1为128个字节。这个主要是根据单片机的性能来选择的。比如是stmf103c8t6这种小容量的芯片，就选择后缀为1的函数。<br><strong>u8g2_d_memory.c修改</strong></p><p>同样的操作，ctrl+A把全部文件注释了以后，取消对头文件的注释。</p><img src="/posts/2286740127/ca40c0ef1a1d499e821d4ebf58f81f9e.png" class="" title="在这里插入图片描述"><p>然后，在u8g2_d_memory.c文件中，查找下图红框框里的函数，把对应的函数，取消注释。</p><img src="/posts/2286740127/54d216cebcf3457a974c859562f1f46a.png" class="" title="在这里插入图片描述"><p>取消注释</p><img src="/posts/2286740127/aba2059d692d4203b64944fd03355463.png" class="" title="在这里插入图片描述"><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li>上面的所有操作，需要根据屏幕的驱动芯片</li><li>f 代表的是一次刷新屏幕的字节数（根据芯片选择 f 、 2 、1）</li></ul><h2 id="U8G2接口程序"><a href="#U8G2接口程序" class="headerlink" title="U8G2接口程序"></a>U8G2接口程序</h2><p>u8g2_Setup_ssd1306_128x64_noname_f就是刚刚选择的屏幕驱动函数。<br>下面两句就是开打屏幕的显示。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">u8g2_Setup_ssd1306_128x64_noname_f(&amp;u8g2, U8G2_R0, u8x8_byte_4wire_sw_spi, u8x8_stm32_gpio_and_delay);  </span><br><span class="line">u8g2_InitDisplay(&amp;u8g2);</span><br><span class="line">u8g2_SetPowerSave(&amp;u8g2,<span class="number">0</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>重点是u8x8_stm32_gpio_and_delay这个函数，这个回调函数，需要由我们使用者来写。他主要就是给U8G2提供的延时函数和通信接口。<br>这里使用的是4线的spi通信</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">uint8_t</span> <span class="title">u8x8_stm32_gpio_and_delay</span><span class="params">(U8X8_UNUSED <span class="keyword">u8x8_t</span> *u8x8,</span></span></span><br><span class="line"><span class="function"><span class="params">    U8X8_UNUSED <span class="keyword">uint8_t</span> msg, U8X8_UNUSED <span class="keyword">uint8_t</span> arg_int,</span></span></span><br><span class="line"><span class="function"><span class="params">    U8X8_UNUSED <span class="keyword">void</span> *arg_ptr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">switch</span>(msg)</span><br><span class="line">  &#123;</span><br><span class="line"><span class="keyword">case</span> U8X8_MSG_DELAY_100NANO:<span class="comment">// delay arg_int * 100 nano seconds</span></span><br><span class="line">__NOP();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> U8X8_MSG_DELAY_10MICRO:<span class="comment">// delay arg_int * 10 micro seconds</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">uint16_t</span> n = <span class="number">0</span>; n &lt; <span class="number">320</span>; n++)</span><br><span class="line">&#123;</span><br><span class="line">__NOP();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> U8X8_MSG_DELAY_MILLI:                <span class="comment">// delay arg_int * 1 milli second</span></span><br><span class="line">delay_ms(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> U8X8_MSG_DELAY_I2C:            <span class="comment">// arg_int is the I2C speed in 100KHz, e.g. 4 = 400 KHz</span></span><br><span class="line">delay_us(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">break</span>;                <span class="comment">// arg_int=1: delay by 5us, arg_int = 4: delay by 1.25us</span></span><br><span class="line"><span class="keyword">case</span> U8X8_MSG_GPIO_SPI_DATA:</span><br><span class="line">  <span class="keyword">if</span>(arg_int == <span class="number">1</span>)                                     <span class="comment">// arg_int=1: Input dir with pullup high for I2C clock pin</span></span><br><span class="line">        GPIO_SetBits(GPIOA,GPIO_Pin_1);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(arg_int == <span class="number">0</span>)</span><br><span class="line">        GPIO_ResetBits(GPIOA,GPIO_Pin_1);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> U8X8_MSG_GPIO_SPI_CLOCK:</span><br><span class="line">  <span class="keyword">if</span>(arg_int == <span class="number">1</span>)                                     <span class="comment">// arg_int=1: Input dir with pullup high for I2C clock pin</span></span><br><span class="line">        GPIO_SetBits(GPIOA,GPIO_Pin_0);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(arg_int == <span class="number">0</span>)</span><br><span class="line">        GPIO_ResetBits(GPIOA,GPIO_Pin_0);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> U8X8_MSG_GPIO_CS:</span><br><span class="line">  <span class="keyword">if</span>(arg_int == <span class="number">1</span>)                                     <span class="comment">// arg_int=1: Input dir with pullup high for I2C clock pin</span></span><br><span class="line">        GPIO_SetBits(GPIOA,GPIO_Pin_4);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(arg_int == <span class="number">0</span>)</span><br><span class="line">        GPIO_ResetBits(GPIOA,GPIO_Pin_4);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> U8X8_MSG_GPIO_DC:</span><br><span class="line">  <span class="keyword">if</span>(arg_int == <span class="number">1</span>)                                     <span class="comment">// arg_int=1: Input dir with pullup high for I2C clock pin</span></span><br><span class="line">        GPIO_SetBits(GPIOA,GPIO_Pin_3);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(arg_int == <span class="number">0</span>)</span><br><span class="line">        GPIO_ResetBits(GPIOA,GPIO_Pin_3);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> U8X8_MSG_GPIO_RESET:</span><br><span class="line">  <span class="keyword">if</span>(arg_int == <span class="number">1</span>)                                     <span class="comment">// arg_int=1: Input dir with pullup high for I2C clock pin</span></span><br><span class="line">        GPIO_SetBits(GPIOA,GPIO_Pin_2);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(arg_int == <span class="number">0</span>)</span><br><span class="line">        GPIO_ResetBits(GPIOA,GPIO_Pin_2);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> U8X8_MSG_GPIO_MENU_SELECT:</span><br><span class="line">        u8x8_SetGPIOResult(u8x8, <span class="comment">/* get menu select pin state */</span> <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> U8X8_MSG_GPIO_MENU_NEXT:</span><br><span class="line">        u8x8_SetGPIOResult(u8x8, <span class="comment">/* get menu next pin state */</span> <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> U8X8_MSG_GPIO_MENU_PREV:</span><br><span class="line">        u8x8_SetGPIOResult(u8x8, <span class="comment">/* get menu prev pin state */</span> <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> U8X8_MSG_GPIO_MENU_HOME:</span><br><span class="line">        u8x8_SetGPIOResult(u8x8, <span class="comment">/* get menu home pin state */</span> <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        u8x8_SetGPIOResult(u8x8, <span class="number">1</span>);         <span class="comment">// default return value</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">u8g2_t</span> u8g2; </span><br><span class="line">delay_init(<span class="number">168</span>);</span><br><span class="line">LED_Init();<span class="comment">//初始化LED</span></span><br><span class="line">OLED_Init();<span class="comment">//初始化OLED</span></span><br><span class="line">LED0=<span class="number">0</span>;</span><br><span class="line">u8g2_Setup_ssd1306_128x64_noname_f(&amp;u8g2, U8G2_R0, u8x8_byte_4wire_sw_spi, u8x8_stm32_gpio_and_delay);  </span><br><span class="line">u8g2_InitDisplay(&amp;u8g2);</span><br><span class="line">u8g2_SetPowerSave(&amp;u8g2,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) </span><br><span class="line">&#123;</span><br><span class="line">LED0=~LED0;</span><br><span class="line">delay_ms(<span class="number">100</span>);</span><br><span class="line">u8g2_ClearBuffer(&amp;u8g2); </span><br><span class="line"><span class="keyword">if</span>(++t &gt;= <span class="number">32</span>) t = <span class="number">1</span>;</span><br><span class="line">u8g2_DrawCircle(&amp;u8g2,<span class="number">64</span>,<span class="number">32</span>,t,U8G2_DRAW_ALL);</span><br><span class="line">u8g2_DrawCircle(&amp;u8g2,<span class="number">32</span>,<span class="number">32</span>,t,U8G2_DRAW_ALL);</span><br><span class="line">u8g2_DrawCircle(&amp;u8g2,<span class="number">96</span>,<span class="number">32</span>,t,U8G2_DRAW_ALL);</span><br><span class="line">u8g2_SendBuffer(&amp;u8g2);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/6765a75a8f2349cbbaa65f64facb7b8f.jpg?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5rKI5rqq5rqq,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h1 id="硬件IIC"><a href="#硬件IIC" class="headerlink" title="硬件IIC"></a>硬件IIC</h1><p>前面的准备工作一致</p><p>硬件 I2C 效率上比软件 I2C 快了非常多，因此特别适合 U8g2 这种大型 UI 框架。下面基于标准库介绍硬件 I2C 的移植方式。</p><p>如果使用硬件 I2C ，需要在调用该函数（或类似函数）时，使用自己的硬件读写函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">u8g2_Setup_ssd1306_i2c_128x64_noname_f</span><span class="params">(<span class="keyword">u8g2_t</span> *u8g2, <span class="keyword">const</span> <span class="keyword">u8g2_cb_t</span> *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)</span></span>;</span><br></pre></td></tr></table></figure><p>首先还是需要编写一个 <code>gpio_and_delay()</code> 回调函数。不过由于这里是使用硬件 I2C ，因此不再需要提供 GPIO 和时序操作的支持，只需要提供一个毫秒级的延时即可：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">uint8_t</span> <span class="title">u8x8_gpio_and_delay_hw</span><span class="params">(<span class="keyword">u8x8_t</span> *u8x8, <span class="keyword">uint8_t</span> msg, <span class="keyword">uint8_t</span> arg_int, <span class="keyword">void</span> *arg_ptr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (msg) &#123;</span><br><span class="line">        <span class="keyword">case</span> U8X8_MSG_DELAY_100NANO: <span class="comment">// delay arg_int * 100 nano seconds</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> U8X8_MSG_DELAY_10MICRO: <span class="comment">// delay arg_int * 10 micro seconds</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> U8X8_MSG_DELAY_MILLI: <span class="comment">// delay arg_int * 1 milli second</span></span><br><span class="line">            Delay_ms(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> U8X8_MSG_DELAY_I2C: <span class="comment">// arg_int is the I2C speed in 100KHz, e.g. 4 = 400 KHz</span></span><br><span class="line">            <span class="keyword">break</span>;                    <span class="comment">// arg_int=1: delay by 5us, arg_int = 4: delay by 1.25us</span></span><br><span class="line">        <span class="keyword">case</span> U8X8_MSG_GPIO_I2C_CLOCK: <span class="comment">// arg_int=0: Output low at I2C clock pin</span></span><br><span class="line">            <span class="keyword">break</span>;                    <span class="comment">// arg_int=1: Input dir with pullup high for I2C clock pin</span></span><br><span class="line">        <span class="keyword">case</span> U8X8_MSG_GPIO_I2C_DATA:  <span class="comment">// arg_int=0: Output low at I2C data pin</span></span><br><span class="line">            <span class="keyword">break</span>;                    <span class="comment">// arg_int=1: Input dir with pullup high for I2C data pin</span></span><br><span class="line">        <span class="keyword">case</span> U8X8_MSG_GPIO_MENU_SELECT:</span><br><span class="line">            u8x8_SetGPIOResult(u8x8, <span class="comment">/* get menu select pin state */</span> <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> U8X8_MSG_GPIO_MENU_NEXT:</span><br><span class="line">            u8x8_SetGPIOResult(u8x8, <span class="comment">/* get menu next pin state */</span> <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> U8X8_MSG_GPIO_MENU_PREV:</span><br><span class="line">            u8x8_SetGPIOResult(u8x8, <span class="comment">/* get menu prev pin state */</span> <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> U8X8_MSG_GPIO_MENU_HOME:</span><br><span class="line">            u8x8_SetGPIOResult(u8x8, <span class="comment">/* get menu home pin state */</span> <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            u8x8_SetGPIOResult(u8x8, <span class="number">1</span>); <span class="comment">// default return value</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是使用硬件 I2C ，那么需要自行编写硬件驱动函数，向 OLED 写入字节。这个函数的编写可以参考官方提供的软件驱动函数 <code>u8x8_byte_sw_i2c()</code> ，一个编写示例为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">uint8_t</span> <span class="title">u8x8_byte_hw_i2c</span><span class="params">(<span class="keyword">u8x8_t</span> *u8x8, <span class="keyword">uint8_t</span> msg, <span class="keyword">uint8_t</span> arg_int, <span class="keyword">void</span> *arg_ptr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">uint8_t</span>* data = (<span class="keyword">uint8_t</span>*) arg_ptr;</span><br><span class="line">    <span class="keyword">switch</span>(msg) &#123;</span><br><span class="line">        <span class="keyword">case</span> U8X8_MSG_BYTE_SEND:</span><br><span class="line">            <span class="keyword">while</span>( arg_int-- &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">                I2C_SendData(I2C1, *data++);</span><br><span class="line">                <span class="keyword">while</span> (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED))</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> U8X8_MSG_BYTE_INIT:</span><br><span class="line">        <span class="comment">/* add your custom code to init i2c subsystem */</span></span><br><span class="line">            RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);</span><br><span class="line">            I2C_InitTypeDef I2C_InitStructure = &#123;</span><br><span class="line">                .I2C_Mode = I2C_Mode_I2C,</span><br><span class="line">                .I2C_DutyCycle = I2C_DutyCycle_2,</span><br><span class="line">                .I2C_OwnAddress1 = <span class="number">0x10</span>,</span><br><span class="line">                .I2C_Ack = I2C_Ack_Enable,</span><br><span class="line">                .I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit,</span><br><span class="line">                .I2C_ClockSpeed = <span class="number">400000</span></span><br><span class="line">            &#125;;</span><br><span class="line">            I2C_Init(I2C1, &amp;I2C_InitStructure);</span><br><span class="line">            I2C_Cmd(I2C1, ENABLE);  </span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> U8X8_MSG_BYTE_SET_DC:</span><br><span class="line">        <span class="comment">/* ignored for i2c */</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> U8X8_MSG_BYTE_START_TRANSFER:</span><br><span class="line">            <span class="keyword">while</span>(I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY));</span><br><span class="line">            I2C_GenerateSTART(I2C1, ENABLE);</span><br><span class="line">            <span class="keyword">while</span>(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT))</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            I2C_Send7bitAddress(I2C1, <span class="number">0x78</span>, I2C_Direction_Transmitter);</span><br><span class="line">            <span class="keyword">while</span>(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> U8X8_MSG_BYTE_END_TRANSFER:</span><br><span class="line">            I2C_GenerateSTOP(I2C1, ENABLE);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从各个 <code>case</code> 标签可以很明白地看出一个 I2C 的读写过程：<code>U8X8_MSG_BYTE_INIT</code> 标签下需要初始化 I2C 外设，<code>U8X8_MSG_BYTE_START_TRANSFER</code> 标签产生起始信号并发出目标地址，<code>U8X8_MSG_BYTE_SEND</code> 标签开始发送字节，并且发送的字节存储在 <code>*arg_ptr</code> 参数中，<code>arg_int</code> 是字节的总长度（ U8g2 库似乎一次不会传输多余 32 字节的信息）。最后，<code>U8X8_MSG_BYTE_END_TRANSFER</code> 标签处产生停止信号。</p><ul><li><strong>注意在使用硬件 I2C 时，GPIO 需要设置为复用开漏输出模式 <code>GPIO_Mode_AF_OD</code> 。</strong></li></ul><p>最后一步，用以上编写的硬件函数初始化 U8g2 驱动：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">u8g2_Setup_ssd1306_i2c_128x64_noname_f(u8g2, U8G2_R0, u8x8_byte_hw_i2c, u8x8_gpio_and_delay_hw);</span><br></pre></td></tr></table></figure><h2 id="u8x8-byte-xxxx-xxxx-xxxx函数的编写方法"><a href="#u8x8-byte-xxxx-xxxx-xxxx函数的编写方法" class="headerlink" title="u8x8_byte_xxxx_xxxx_xxxx函数的编写方法"></a>u8x8_byte_xxxx_xxxx_xxxx函数的编写方法</h2><p>这个回调函数就是你要用的通信协议啦，如果你想用模拟IIC或者模拟SPI的话，其实官方是有写好给你直接用的，官方是这么说的：</p><img src="/posts/2286740127/fa66909509e54d8c8cc710547e8e80e6.png" class="" title="img"><p>就是说，如果想用软件模拟时序的话，官方已经把模拟时序的相关函数写好了，这些函数里面相关的引脚电平设置函数和延时函数用的就是我们在第八步里面告诉它的。可以直接用上面表格第一列的几个函数作为你的回调函数，这样就不用再写了，因而用软件模拟的话可以跳到下一步也行。</p><p>不过本篇主要是介绍硬件IIC的方式啦，那么就需要我们自己来写这个回调函数。这个回调函数是这种形式的：typedef uint8_t (*u8x8_msg_cb)(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)。一样的，函数名字可以随意，但输入参数没错就好了。官方给出了硬件SPI和硬件IIC的模板，分别如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function"><span class="keyword">uint8_t</span> <span class="title">u8x8_byte_arduino_hw_spi</span><span class="params">(<span class="keyword">u8x8_t</span> *u8x8, <span class="keyword">uint8_t</span> msg, <span class="keyword">uint8_t</span> arg_int, <span class="keyword">void</span> *arg_ptr)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">uint8_t</span> *data;</span><br><span class="line">  <span class="keyword">uint8_t</span> internal_spi_mode; </span><br><span class="line">  <span class="keyword">switch</span>(msg) &#123;</span><br><span class="line">    <span class="keyword">case</span> U8X8_MSG_BYTE_SEND:</span><br><span class="line">      data = (<span class="keyword">uint8_t</span> *)arg_ptr;</span><br><span class="line">      <span class="keyword">while</span>( arg_int &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">        SPI.transfer((<span class="keyword">uint8_t</span>)*data);</span><br><span class="line">        data++;</span><br><span class="line">        arg_int--;</span><br><span class="line">      &#125;  </span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> U8X8_MSG_BYTE_INIT:</span><br><span class="line">      u8x8_gpio_SetCS(u8x8, u8x8-&gt;display_info-&gt;chip_disable_level);</span><br><span class="line">      SPI.begin();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> U8X8_MSG_BYTE_SET_DC:</span><br><span class="line">      u8x8_gpio_SetDC(u8x8, arg_int);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> U8X8_MSG_BYTE_START_TRANSFER:</span><br><span class="line">      <span class="comment">/* SPI mode has to be mapped to the mode of the current controller, at least Uno, Due, 101 have different SPI_MODEx values */</span></span><br><span class="line">      internal_spi_mode =  <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">switch</span>(u8x8-&gt;display_info-&gt;spi_mode) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>: internal_spi_mode = SPI_MODE0; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>: internal_spi_mode = SPI_MODE1; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>: internal_spi_mode = SPI_MODE2; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>: internal_spi_mode = SPI_MODE3; <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      SPI.beginTransaction(SPISettings(u8x8-&gt;display_info-&gt;sck_clock_hz, MSBFIRST, internal_spi_mode));</span><br><span class="line">      u8x8_gpio_SetCS(u8x8, u8x8-&gt;display_info-&gt;chip_enable_level);  </span><br><span class="line">      u8x8-&gt;gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8-&gt;display_info-&gt;post_chip_enable_wait_ns, <span class="literal">NULL</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> U8X8_MSG_BYTE_END_TRANSFER:      </span><br><span class="line">      u8x8-&gt;gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8-&gt;display_info-&gt;pre_chip_disable_wait_ns, <span class="literal">NULL</span>);</span><br><span class="line">      u8x8_gpio_SetCS(u8x8, u8x8-&gt;display_info-&gt;chip_disable_level);</span><br><span class="line">      SPI.endTransaction();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;  </span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">uint8_t</span> <span class="title">u8x8_byte_i2c</span><span class="params">(<span class="keyword">u8x8_t</span> *u8x8, <span class="keyword">uint8_t</span> msg, <span class="keyword">uint8_t</span> arg_int, <span class="keyword">void</span> *arg_ptr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">uint8_t</span> buffer[<span class="number">32</span>];<span class="comment">/* u8g2/u8x8 will never send more than 32 bytes between START_TRANSFER and END_TRANSFER */</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">uint8_t</span> buf_idx;</span><br><span class="line">  <span class="keyword">uint8_t</span> *data;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">switch</span>(msg)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">case</span> U8X8_MSG_BYTE_SEND:</span><br><span class="line">      data = (<span class="keyword">uint8_t</span> *)arg_ptr;      </span><br><span class="line">      <span class="keyword">while</span>( arg_int &gt; <span class="number">0</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        buffer[buf_idx++] = *data;</span><br><span class="line">        data++;</span><br><span class="line">        arg_int--;</span><br><span class="line">      &#125;      </span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> U8X8_MSG_BYTE_INIT:</span><br><span class="line">      <span class="comment">/* add your custom code to init i2c subsystem */</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> U8X8_MSG_BYTE_SET_DC:</span><br><span class="line">      <span class="comment">/* ignored for i2c */</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> U8X8_MSG_BYTE_START_TRANSFER:</span><br><span class="line">      buf_idx = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> U8X8_MSG_BYTE_END_TRANSFER:</span><br><span class="line">      i2c_transfer(u8x8_GetI2CAddress(u8x8) &gt;&gt; <span class="number">1</span>, buf_idx, buffer);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来就照猫画虎，跟着硬件IIC的模板稍微改一下就好了。主要是两个地方：</p><ul><li>一个是IIC初始化，我们的HAL库自动生成了初始化代码并且在主函数调用了，这里我们不填也行</li><li>另外一个是那个i2c_transfer()函数要换成HAL库的。HAL库的IIC写函数有两个，一个是HAL_I2C_Master_Transmit()，另外一个是HAL_I2C_Mem_Write()，后者一般用于器件中还有内存或者寄存器地址的情况，比如EEPROM等。所以我们用前者。</li><li>还有一个需要注意的事情，大坑，就是u8x8_GetI2CAddress(u8x8)这里返回来的是已经右移了的器件地址，0.96寸oled一般是0x78，然后HAL库里面的也是要我们填右移了的器件地址，所以不要像模板那样再往左移动一位了（可能别的啥库函数需要左移后的原始地址吧，为啥不统一呢，太坑了！！！）<br>  over，综上，我们的代码如下：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">uint8_t</span> <span class="title">u8x8_byte_hw_i2c</span><span class="params">(<span class="keyword">u8x8_t</span> *u8x8, <span class="keyword">uint8_t</span> msg, <span class="keyword">uint8_t</span> arg_int, <span class="keyword">void</span> *arg_ptr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">uint8_t</span> buffer[<span class="number">32</span>];<span class="comment">/* u8g2/u8x8 will never send more than 32 bytes between START_TRANSFER and END_TRANSFER */</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">uint8_t</span> buf_idx;</span><br><span class="line">  <span class="keyword">uint8_t</span> *data;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">switch</span>(msg)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> U8X8_MSG_BYTE_SEND:</span><br><span class="line">      data = (<span class="keyword">uint8_t</span> *)arg_ptr;      </span><br><span class="line">      <span class="keyword">while</span>( arg_int &gt; <span class="number">0</span> )&#123;</span><br><span class="line">buffer[buf_idx++] = *data;</span><br><span class="line">data++;</span><br><span class="line">arg_int--;</span><br><span class="line">&#125;      </span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> U8X8_MSG_BYTE_INIT:</span><br><span class="line">      <span class="comment">/* add your custom code to init i2c subsystem */</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> U8X8_MSG_BYTE_START_TRANSFER:</span><br><span class="line">      buf_idx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> U8X8_MSG_BYTE_END_TRANSFER:</span><br><span class="line">      HAL_I2C_Master_Transmit(&amp;hi2c1,u8x8_GetI2CAddress(u8x8), buffer, buf_idx,<span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>调用第四步剩下的u8g2_Setup_ssd1306_i2c_128x64_noname_f()这个函数来初始化，第一个参数是一个空的结构体地址，第二个参数表示是否旋转，第四个参数是我们写的gpio的那个回调函数名字，第三个参数是我们写的另外一个回调函数名或者我截图表格里那几个模拟时序的函数名。<br><em><strong>*代码如下：*</strong></em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;u8g2.h&quot;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">uint8_t</span> <span class="title">u8x8_byte_hw_i2c</span><span class="params">(<span class="keyword">u8x8_t</span> *u8x8, <span class="keyword">uint8_t</span> msg, <span class="keyword">uint8_t</span> arg_int, <span class="keyword">void</span> *arg_ptr)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8_t</span> <span class="title">u8g2_gpio_and_delay_stm32</span><span class="params">(U8X8_UNUSED <span class="keyword">u8x8_t</span> *u8x8, U8X8_UNUSED <span class="keyword">uint8_t</span> msg, U8X8_UNUSED <span class="keyword">uint8_t</span> arg_int, U8X8_UNUSED <span class="keyword">void</span> *arg_ptr)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">u8g2_t</span> u8g2;</span><br><span class="line"> </span><br><span class="line">u8g2_Setup_ssd1306_i2c_128x64_noname_f(&amp;u8g2,U8G2_R0,u8x8_byte_hw_i2c,u8g2_gpio_and_delay_stm32);</span><br><span class="line">u8g2_InitDisplay(&amp;u8g2); <span class="comment">// send init sequence to the display, display is in sleep mode after this,</span></span><br><span class="line">u8g2_SetPowerSave(&amp;u8g2, <span class="number">0</span>); <span class="comment">// wake up display</span></span><br><span class="line">u8g2_ClearDisplay(&amp;u8g2);</span><br><span class="line">u8g2_SetFont(&amp;u8g2, u8g2_font_wqy16_t_chinese1);</span><br><span class="line">u8g2_DrawCircle(&amp;u8g2,<span class="number">60</span>,<span class="number">30</span>,<span class="number">20</span>,U8G2_DRAW_ALL);</span><br><span class="line">u8g2_DrawUTF8(&amp;u8g2,<span class="number">10</span>,<span class="number">50</span>,<span class="string">&quot;你好,world&quot;</span>);</span><br><span class="line">u8g2_SendBuffer(&amp;u8g2);</span><br><span class="line">HAL_Delay(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p>上面的代码记得按照cubemx的要求放到代码中的相应部分，不然一更新用户代码就没了。</p><p>要显示中文的话，一定要把编译器的编码格式改成UTF-8，不然可能啥都显示不了。另外好像能显示的中文有限，改成俺的名字就直接编译错误了，应该是字库没有这些字的原因，后面再研究下咋整。</p><p>一次可以设置多个图形，这个图形数据会以叠加的方式更新到原有的buf里面，然后调用u8g2_SendBuffer(&amp;u8g2)这个函数把buf一下子全写入到oled里面进行更新。也就是说不调用这个函数做再多操作也只是再更新buf而不会更新oled显示。、</p><img src="/posts/2286740127/3c762303990f49c9baedf8745d6c0044.png" class="" title="img"><hr><h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><ol><li><p><a href="https://blog.csdn.net/qq_42385764/article/details/132667262">(强推)U8G2 软件 IIC 移植至STM32(以STM32F407为例)</a></p></li><li><p><a href="https://blog.csdn.net/qq_51183186/article/details/120348070">stm32移植U8G2图像库指南</a></p></li><li><p><a href="https://www.bilibili.com/read/cv15583426/">u8g2的stm32f103c8t6移植</a></p></li><li><p><a href="https://www.cnblogs.com/tangwc/p/17300439.html">(这个个人博客也很好)U8g2图形库移植</a></p></li><li><p><a href="https://frozencandles.fun/archives/301">(有讲硬件IIC-博主也有说明LVGV)U8g2图形库与STM32移植</a></p></li><li><p><a href="https://www.iotword.com/16582.html">STM32硬件IIC移植U8g2库教程详解</a></p></li><li><p><a href="https://blog.csdn.net/qq_43862401/article/details/121809470">(这个还没试过-看评论应该可以)u8g2库stm32移植记录(硬件IIC）</a></p></li></ol><hr><center><font color=red>=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">U8G2移植STM32、GD32等MCU中，不使用 Arduino 实现调用</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="C" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/C/"/>
    
    <category term="GUI" scheme="https://zml3589110.github.io/categories/GUI/"/>
    
    <category term="U8G2" scheme="https://zml3589110.github.io/categories/U8G2/"/>
    
    
    <category term="C" scheme="https://zml3589110.github.io/tags/C/"/>
    
    <category term="STM32" scheme="https://zml3589110.github.io/tags/STM32/"/>
    
    <category term="GUI" scheme="https://zml3589110.github.io/tags/GUI/"/>
    
    <category term="U8G2" scheme="https://zml3589110.github.io/tags/U8G2/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript正则表达式</title>
    <link href="https://zml3589110.github.io/posts/3383621347.html"/>
    <id>https://zml3589110.github.io/posts/3383621347.html</id>
    <published>2023-12-04T07:35:20.000Z</published>
    <updated>2023-12-04T08:15:23.325Z</updated>
    
    <content type="html"><![CDATA[<h1 id="重要问题"><a href="#重要问题" class="headerlink" title="重要问题"></a>重要问题</h1><h2 id="“-”导致匹配不上"><a href="#“-”导致匹配不上" class="headerlink" title="“+”导致匹配不上"></a>“+”导致匹配不上</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">   <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span>&gt;</span>ABS+PC,抗跌落和震动<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://www.lazycat.cc/Doctor/Application/Doctor/View/css/bower_components/jquery/dist/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">replaceAll</span>(<span class="params">obj ,oldStr, newStr</span>) </span></span></span><br><span class="line">        &#123;</span><br><span class="line"><span class="javascript">             <span class="keyword">return</span> obj.replace(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;&gt;[\\s]*&quot;</span>+oldStr+<span class="string">&quot;[\\s]*&lt;&quot;</span>,<span class="string">&quot;gm&quot;</span>),<span class="function"><span class="keyword">function</span>(<span class="params">word</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                 <span class="keyword">return</span> <span class="string">&quot;&gt;&quot;</span>+newStr+<span class="string">&quot;&lt;&quot;</span>&#125;</span></span><br><span class="line">          ); </span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> body=$(<span class="string">&quot;body&quot;</span>).html();</span></span><br><span class="line"><span class="javascript">        body=replaceAll(body,<span class="string">&quot;ABS+PC,抗跌落和震动&quot;</span>,<span class="string">&quot;ssssss&quot;</span>);</span></span><br><span class="line"><span class="javascript">        $(<span class="string">&quot;body&quot;</span>).html(body);</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>像这样有个加号，文本不会被替换，但是删除两个加号后就能正常被替换了</p><p><strong>解决办法是进行转义</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">+号在正则表达式中是有意义的，要转义</span><br><span class="line"> oldStr = oldStr.replace(<span class="string">&#x27;+&#x27;</span>,<span class="string">&#x27;\\+&#x27;</span>);</span><br><span class="line"> <span class="keyword">return</span> obj.replace(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;&gt;[\\s]*&quot;</span>+oldStr+<span class="string">&quot;[\\s]*&lt;&quot;</span>,<span class="string">&quot;gm&quot;</span>),<span class="function"><span class="keyword">function</span>(<span class="params">word</span>)</span>&#123;</span><br><span class="line">                 <span class="keyword">return</span> <span class="string">&quot;&gt;&quot;</span>+newStr+<span class="string">&quot;&lt;&quot;</span>&#125;</span><br></pre></td></tr></table></figure><ul><li>+需要转义，它表示多个字符，+才是字面的加号。</li><li>+在正则里有自己的含义，若要当普通字符使用，需要写成“+”</li></ul><h1 id="replace-函数使用"><a href="#replace-函数使用" class="headerlink" title="replace()函数使用"></a>replace()函数使用</h1><blockquote><p>语法：<br>string.replace(regexp, replacement)<br>参数：<br>regexp：必需。要搜索的值或正则表达式。<br>replacement：必需。指定替换文本或生成替换文本的函数。<br>返回值：已替换指定值的新字符串。<br>w3school：<a href="https://www.w3school.com.cn/jsref/jsref_replace.asp">JavaScript String replace() 方法</a></p></blockquote><h2 id="一、常规使用"><a href="#一、常规使用" class="headerlink" title="一、常规使用"></a>一、常规使用</h2><ul><li>将aaa替换为111：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;aaa,bbb,ccc&quot;</span>;</span><br><span class="line">str.replace(<span class="string">&#x27;aaa&#x27;</span>, <span class="string">&quot;111&quot;</span>);<span class="comment">//输出&#x27;111,bbb,ccc&#x27;</span></span><br></pre></td></tr></table></figure></li><li>将连续的字母替换为111：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;aaaaaaa,bbbbbb,ccc&quot;</span>;</span><br><span class="line">str.replace(<span class="regexp">/\w+/g</span>, <span class="string">&quot;111&quot;</span>);<span class="comment">//输出&#x27;111,111,111&#x27;</span></span><br></pre></td></tr></table></figure></li><li>将所有字母全部替换为1：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;aaa,bbb,ccc&quot;</span>;</span><br><span class="line">str.replace(<span class="regexp">/\w/g</span>, <span class="string">&quot;1&quot;</span>);<span class="comment">//输出&#x27;111,111,111&#x27;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="二、-1、-2、…、-99等使用"><a href="#二、-1、-2、…、-99等使用" class="headerlink" title="二、$1、$2、…、$99等使用"></a>二、$1、$2、…、$99等使用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;aaa,bbb,ccc&quot;</span>;</span><br><span class="line">str.replace(<span class="regexp">/(\w+),(\w+),(\w+)/</span>, <span class="string">&quot;$3,$2,$1&quot;</span>);<span class="comment">//输出&#x27;ccc,bbb,aaa&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>$1代表第一个(\w+)匹配到的内容，即aaa</li><li>$2代表第一个(\w+)匹配到的内容，即bbb</li><li>$3代表第一个(\w+)匹配到的内容，即ccc</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;aaa、bbb、ccc&quot;</span>;</span><br><span class="line">str.replace(<span class="regexp">/(\w)+、(\w)+、(\w)+/</span>, <span class="string">&quot;$3$2$1&quot;</span>);<span class="comment">//输出&#x27;cba&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>$1代表第一个(\w)匹配到的内容，即a</li><li>$2代表第一个(\w)匹配到的内容，即b</li><li>$3代表第一个(\w)匹配到的内容，即c</li></ul><p><strong>结论：</strong>$1、$2、…、$99 表示正则表达式中的括号匹配项的结果。</p><h2 id="三、函数"><a href="#三、函数" class="headerlink" title="三、函数"></a>三、函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输出&#x27;hello,world&#x27;</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;Hello,World&quot;</span>;</span><br><span class="line">str.replace(<span class="regexp">/[A-Z]/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> val.toLowerCase()</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//输出&#x27;HELLO,WORLD&#x27;</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;Hello,World&quot;</span>;</span><br><span class="line">str.replace(<span class="regexp">/[a-z]/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> val.toUpperCase()</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//输出&#x27;000,000,111&#x27;</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;aaaaaaa,bbbbbb,ccc&quot;</span>;</span><br><span class="line">str.replace(<span class="regexp">/\w+/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> val === <span class="string">&#x27;ccc&#x27;</span> ? <span class="string">&#x27;111&#x27;</span>:<span class="string">&#x27;000&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>**一个经典的例子——模板字符匹配： **</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = &#123;</span><br><span class="line">    title:<span class="string">&#x27;标题&#x27;</span>,</span><br><span class="line">    subTitle: <span class="string">&#x27;副标题&#x27;</span>,</span><br><span class="line">    content:<span class="string">&#x27;内容&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> str=<span class="string">&#x27;这是一段内容，标题是&#123;&#123;title&#125;&#125;，副标题是&#123;&#123;subTitle&#125;&#125;，内容是&#123;&#123;content&#125;&#125;&#x27;</span></span><br><span class="line"> </span><br><span class="line">str.replace(<span class="regexp">/\&#123;\&#123;(.*?)\&#125;\&#125;/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">val,key</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> data[key]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>输出：这是一段内容，标题是标题，副标题是副标题，内容是内容</p><p>这里函数的第一个参数是匹配的内容，第二个参数是括号匹配的结果</p><h2 id="四、其他常用正则表达式"><a href="#四、其他常用正则表达式" class="headerlink" title="四、其他常用正则表达式"></a>四、其他常用正则表达式</h2><p>邮箱格式：^[a-z0-9A-Z]+[- | a-z0-9A-Z . _]+@([a-z0-9A-Z]+(-[a-z0-9A-Z]+)?\.)+[a-z]{2,}$</p><p>正整数：^<a href="%5B0-9%5D">1-9</a>*$</p><img src="/posts/3383621347/eb3ab4539ef44e6988a629b517891091.png" class="" title="img"><ul><li>身份证号<br>^[1-9]\d{5}(18|19|([23]\d))\d{2}((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\d{3}[0-9Xx]$</li><li>ip地址<br>^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$</li><li>数字或英文字母<br>^([0-9a-zA-Z]+)$</li><li>手机号码<br>^((13[0-9])|(14[5,7])|(15[0-3,5-9])|(17[0,3,5-8])|(18[0-9])|166|198|199|(147))\d{8}$</li><li>日期时间格式YYYY-MM-DD HH:mm:ss<br>^(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2})$</li><li>日期格式YYYY-MM-DD<br>^(\d{4}-\d{2}-\d{2})$</li><li>合法url<br>(https?|ftp|file):&#x2F;&#x2F;[-A-Za-z0-9+&amp;@#&#x2F;%?&#x3D;<del>_|!:,.;]+[-A-Za-z0-9+&amp;@#&#x2F;%&#x3D;</del>_|]</li><li>最多三位小数<br>^(?:[1-9]\d*|0)(?:\.\d{1,3})?$</li><li>大于等于0且最多三位小数<br>^(?!0+(?:\.0+)?$)(?:[1-9]\d*|0)(?:\.\d{1,3})?$</li><li>最多两位小数<br>^(?:[1-9]\d*|0)(?:\.\d{1,2})?$</li><li>大于等于0且最多两位小数<br>^(?!0+(?:\.0+)?$)(?:[1-9]\d*|0)(?:\.\d{1,2})?$</li><li>至少两个字符，中文或英文<br>^([a-zA-Z\u4E00-\u9FA5]+)$</li><li>3-15个字符，仅限数字、字母、斜杠、横杠、点<br>^[-&#x2F;0-9A-Za-z.]{3,15}$</li></ul><h2 id="replace-函数详细说明"><a href="#replace-函数详细说明" class="headerlink" title="replace()函数详细说明"></a>replace()函数详细说明</h2><h3 id="1-方法简介"><a href="#1-方法简介" class="headerlink" title="1. 方法简介"></a>1. 方法简介</h3><p>该方法的签名是：replace([RegExp|String],[String|Function])。</p><p>该方法 返回一个新的字符串，但并不改变字符串本身。</p><p>该方法接收2个参数，<br>第一个参数可以是字符串，也可以是一个正则表达式；<br>第二个参数可以是一个字符串，也可以是一个函数。</p><h3 id="2-replace-使用"><a href="#2-replace-使用" class="headerlink" title="2. replace()使用"></a>2. replace()使用</h3><p>2.1 replace(字符串,字符串)<br>假如我们有一个字符串中出现了错别字”背景“，需要用”北京“来替换，那么我们可以如下搞定：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;我爱背景天安门&#x27;</span>;</span><br><span class="line">str = str.replace(<span class="string">&#x27;背景&#x27;</span>,<span class="string">&#x27;北京&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(str);   <span class="comment">// 输出结果：我爱北京天安门</span></span><br></pre></td></tr></table></figure><p>但这个用法有一个问题：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;我爱背景天安门，但是背景雾霾太严重&#x27;</span>;</span><br><span class="line">str = str.replace(<span class="string">&#x27;背景&#x27;</span>,<span class="string">&#x27;北京&#x27;</span>);</span><br><span class="line"><span class="comment">// 输出结果：我爱北京天安门，但是背景雾霾太严重</span></span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br></pre></td></tr></table></figure><blockquote><p>我们发现，如果字符串str中有多个待替换的子串，比如本例中的“背景”，出现了2次，那么replace()方法只能给我们用目标字符串(北京）替换掉第1次出现的”背景”。<br>如果想把所有的”背景”都给替换了，就必须调用多次。</p></blockquote><p><strong>此使用方法bug：</strong> 只能替换一次 多次替换需要多次调用</p><p>2.2 replace(正则表达式,字符串)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;我爱背景天安门，但是背景雾霾太严重&#x27;</span>;</span><br><span class="line">str = str.replace(<span class="regexp">/背景/g</span>,<span class="string">&#x27;北京&#x27;</span>);</span><br><span class="line"><span class="comment">// 输出结果：我爱北京天安门，但是北京雾霾太严重</span></span><br><span class="line"><span class="built_in">console</span>.log(str); </span><br></pre></td></tr></table></figure><blockquote><p>这里需要说明的是，str.replace(&#x2F;背景&#x2F;g,“北京”)的第一个参数 ”&#x2F;背景&#x2F;g“ 是一个正则表达式，使用&#x2F; &#x2F;的正则写法是JavaScript中正则表达式的字面量写法。<br>在此处，正则表达式的末尾有个g，它表示match源字符串str中所有匹配项。<br>这里如果没有g，那么也只能匹配到第一个错别字”背景“，只有加了这个g，才能匹配到所有的”背景“。</p></blockquote><p>2.3 replace(正则表达式,function(){})<br>以上的用法还是比较直观的，但是能实现的功能也比较简单，如果需要做一些复杂的字符串替换运算，那么就需要使用较为高级（复杂）的用法，就是 正则+function 的用法。说白了就是第一参数传一个正则表达式，我们下面称之为RegArg；第二个参数给一个函数，我们下面称之为FuncArg。这也是replace()的核心用法。</p><p>本质 ：对str使用RegArg做match()匹配，如果匹配到多项结果（比如使用了全局匹配g，或者分组），那么每一个匹配结果都将执行一次FuncArg函数，并且用该函数的返回值替代源字符串中的匹配项。</p><p>2.3.1 简单用法，正则表达式不使用分组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;我爱背景天安门，但是背景雾霾太严重&#x27;</span>;</span><br><span class="line">str = str.replace(<span class="regexp">/背景/</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;北京&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br></pre></td></tr></table></figure><img src="/posts/3383621347/84ea0b39e14e41738840c6405b511077.png" class="" title="在这里插入图片描述"><p><strong>解析：</strong></p><ul><li>本例的目的是：把原字符串中的’背景’，替换为’北京’。</li><li>正则表达式没有使用全局匹配符g，所以只替换了源字符串中第一个‘背景’子串，FuncArg只执行了一次。</li></ul><p><strong>replace()函数第一个参数是简单正则表达式，第二个参数是函数时：</strong><br>这个函数是有参数的，而且这些参数是默认的。</p><ul><li>arguments[0]是匹配到的子字符串</li><li>arguments[1]是匹配到的子串的索引位置</li><li>arguments[2]是源字符串本身</li></ul><p>本例如果想替换所有的‘背景’为‘北京’，只需要让正则表达式后加个g。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;我爱背景天安门，但是背景雾霾太严重&#x27;</span>;</span><br><span class="line">str = str.replace(<span class="regexp">/背景/g</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;北京&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br></pre></td></tr></table></figure><img src="/posts/3383621347/90fd02cee026464d87b56035ff97284a.png" class="" title="在这里插入图片描述"><blockquote><p>我们可以看到，输出了2个Arguments，因为我们使用全局匹配g后，会match到2个项，所以就执行了2次function。<br>第一个跟前边一样，第二个arugments的索引位置是10，因为源字符串中第二个‘背景’的索引是10.</p></blockquote><p>eg：把捐款是100元以下的金额数用‘**’来替换掉。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> txt =<span class="string">&#x27;刘菲:50元。张常成:150元。孙玉杰:200元。李明轩:20元。李子豪:1500元。&#x27;</span>;</span><br><span class="line">txt = txt.replace(<span class="regexp">/\d+/g</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">arguments</span>[<span class="number">0</span>].length &gt; <span class="number">2</span> ? <span class="built_in">arguments</span>[<span class="number">0</span>] : <span class="string">&#x27;**&#x27;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(txt);</span><br></pre></td></tr></table></figure><img src="/posts/3383621347/84030ddbfe344667bdbbb213d617483e.png" class="" title="在这里插入图片描述"><p>2.3.2 复杂用法，正则表达式使用分组<br>eg：这个例子的意图是：把所有以“万”为单位的捐款，其金额改为‘元’。比如 ：4万，改为40000元</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> txt =<span class="string">&#x27;刘菲:5万。张常成:5000元。孙玉杰:2000元。李明轩:20万。李子豪:8500元。&#x27;</span>;</span><br><span class="line">txt = txt.replace(<span class="regexp">/(\d+)(万)/g</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">arguments</span>[<span class="number">1</span>] + <span class="string">&#x27;0000&#x27;</span> + <span class="string">&#x27;元&#x27;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(txt);</span><br></pre></td></tr></table></figure><p><strong>输出结果是：</strong></p><img src="/posts/3383621347/e476abd35cb94a5e95021a201632c627.png" class="" title="在这里插入图片描述"><p><strong>replace()函数第一个参数是分组正则表达式，第二个参数是函数时：</strong></p><ul><li>arguments[0]是匹配到的子字符串</li><li>arguments[1]是匹配到的第1个分组项</li><li>arguments[2]是匹配到的第2个分组项</li><li>arguments[3]是匹配到的字符串的索引位置</li><li>arguments[4]是源字符串本身</li></ul><h1 id="正则匹配RegExp"><a href="#正则匹配RegExp" class="headerlink" title="正则匹配RegExp"></a>正则匹配RegExp</h1><p><a href="https://blog.csdn.net/a15297701931/article/details/126479577">JS高级 之 RegExp - 正则表达式</a><br><a href="https://blog.csdn.net/XSL_HR/article/details/130190704">JS 正则表达式（正则匹配RegExp）</a></p><hr><h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><ol><li><a href="https://ask.csdn.net/questions/257783">关于js正则匹配的问题，怎么加上一个”+”就匹配不上了</a></li><li><a href="https://blog.csdn.net/sxww_zyt/article/details/130258920">js正则表达式replace中参数为$1、$2、…、$99、函数等用法以及常用的正则表达式</a></li><li><a href="https://blog.csdn.net/qq_46658751/article/details/123390095">【JavaScript】详解JavaScript中的replace()函数</a></li><li><a href="https://www.runoob.com/jsref/jsref-replace.html">JavaScript replace() 方法</a></li></ol><hr><center><font color=red>=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">JavaScript正则表达式相关知识</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="HTML" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/HTML/"/>
    
    <category term="前端" scheme="https://zml3589110.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://zml3589110.github.io/categories/JavaScript/"/>
    
    <category term="RegExp" scheme="https://zml3589110.github.io/categories/RegExp/"/>
    
    
    <category term="网页" scheme="https://zml3589110.github.io/tags/%E7%BD%91%E9%A1%B5/"/>
    
    <category term="HTML" scheme="https://zml3589110.github.io/tags/HTML/"/>
    
    <category term="JavaScript" scheme="https://zml3589110.github.io/tags/JavaScript/"/>
    
    <category term="加号匹配" scheme="https://zml3589110.github.io/tags/%E5%8A%A0%E5%8F%B7%E5%8C%B9%E9%85%8D/"/>
    
    <category term="RegExp" scheme="https://zml3589110.github.io/tags/RegExp/"/>
    
  </entry>
  
  <entry>
    <title>Hexo的常用指令合集</title>
    <link href="https://zml3589110.github.io/posts/2069770813.html"/>
    <id>https://zml3589110.github.io/posts/2069770813.html</id>
    <published>2023-12-04T07:14:20.000Z</published>
    <updated>2023-12-04T08:15:23.335Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>hexo有许多主题，其实最火爆的是NexT、Matery等，复制关键词到GitHub或者baidu都能搜到。权衡利弊最终我还是选择了大多数人使用的next。</p></blockquote><h1 id="常用命令说明"><a href="#常用命令说明" class="headerlink" title="常用命令说明"></a>常用命令说明</h1><ul><li>（1）hexo g或hexo generate<br>该命令执行后在hexo站点根目录下生成public文件夹</li></ul><img src="/posts/2069770813/7683010350d24da995d50c154352b35d.png" class="" title="在这里插入图片描述"><ul><li>（2）hexo clean</li></ul><p>把（1）中的public文件夹删除</p><ul><li>（3）hexo s或hexo server<br>启动服务，默认地址为<a href="http://localhost:4000/%EF%BC%8C4000%E7%AB%AF%E5%8F%A3">http://localhost:4000/，4000端口</a></li></ul><img src="/posts/2069770813/185e5eec8e4e4769b821f6157468d87d.png" class="" title="在这里插入图片描述"><ul><li><p>（4）hexo d或hexo deploy<br>部署站点，在本地生成.deploy_git文件夹，并将编译后的文件上传至 GitHub。</p></li><li><p>（5）hexo new [layout] <title><br>例如： hexo new photo “my-first-blog”<br>上述指令执行时，Hexo 会尝试在 scaffolds 中寻找photo.md布局，若找到，则根据该布局新建文章；若未找到或指令中未指定该参数，则使用post.md新建文章。新建文章的名称在_config.yml中配置。</p></li></ul><img src="/posts/2069770813/35dacad9d318449696f68e6697eab9c7.png" class="" title="在这里插入图片描述"><ul><li>（6）删除文章<br>只需在本地把source&#x2F;_posts文件夹下的文章源文件删除后，执行以下命令重新部署即可。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s // 一定要先 clean，防止灵异事件发生</span><br></pre></td></tr></table></figure><ul><li>（7）备份&#x2F;迁移你的Hexo博客</li></ul><ol><li>备份根目录</li></ol><img src="/posts/2069770813/8b7829cea05440408b386a27bc71cade.png" class="" title="在这里插入图片描述"><ol start="2"><li>参考<a href="https://hexoscript.gitbook.io/hexo-script/v/1.3-1/shi-yong-bu-zhou/zhun-bei-gong-ju">文档3：hexo-script使用文档</a>重新安装hexo</li><li>使用备份的目录覆盖新装的hexo目录</li></ol><img src="/posts/2069770813/56e7368f24dc4f258cdf2f2141543328.png" class="" title="在这里插入图片描述"><ol start="4"><li>最后使用下面的命令直接运行即可<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure></li><li>生成新的SSH公钥并上传至GitHub<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;a237440035&quot;</span><br><span class="line">git config --global user.email &quot;237440035@qq.com&quot;</span><br><span class="line">ssh-keygen -t ed25519 -C &quot;237440035@qq.com&quot;</span><br></pre></td></tr></table></figure></li></ol><img src="/posts/2069770813/878226dbaf9849fb8528198ef9ad2ac4.png" class="" title="在这里插入图片描述"><p>公钥为：SHA256:57GWXC&#x2F;PLymwxMVw9NoNKMpaoSI71Mum7Y9tPZZbgPI <a href="mailto:&#x32;&#51;&#55;&#52;&#x34;&#48;&#x30;&#51;&#x35;&#64;&#x71;&#x71;&#x2e;&#x63;&#111;&#x6d;">&#x32;&#51;&#55;&#52;&#x34;&#48;&#x30;&#51;&#x35;&#64;&#x71;&#x71;&#x2e;&#x63;&#111;&#x6d;</a><br>也可以在文件C:\Users\Administrator.ssh\id_ed25519.pub中查看<br>将公钥复制在GitHub中即可使用hexo d命令</p><img src="/posts/2069770813/018945bae1274b7783e02631b033d741.png" class="" title="在这里插入图片描述"><h5 id="个性化定制你的Hexo博客"><a href="#个性化定制你的Hexo博客" class="headerlink" title="个性化定制你的Hexo博客"></a>个性化定制你的Hexo博客</h5><blockquote><p><a href="https://blog.csdn.net/qq_42889280/article/details/103087433">1、Hexo博客+Next主题深度优化与定制</a><br><a href="https://www.jianshu.com/p/baab04284923">2、备份你的Hexo博客</a><br><a href="https://hexoscript.gitbook.io/hexo-script/v/1.3-1/shi-yong-bu-zhou/zhun-bei-gong-ju">3、hexo-script使用文档</a><br><a href="https://www.jianshu.com/p/78c218f9d1e7">4、Hexo-设置阅读全文</a></p></blockquote><hr><h1 id="相关链接-侵删"><a href="#相关链接-侵删" class="headerlink" title="相关链接(侵删)"></a>相关链接(侵删)</h1><ol><li><a href="https://blog.csdn.net/vpqtxzmzezeqjj9977/article/details/122982320">Hexo的常用指令合集</a></li></ol><hr><center><font color=red>=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">收集常用hexo命令</summary>
    
    
    
    <category term="HEXO" scheme="https://zml3589110.github.io/categories/HEXO/"/>
    
    
    <category term="HEXO技术" scheme="https://zml3589110.github.io/tags/HEXO%E6%8A%80%E6%9C%AF/"/>
    
    <category term="命令" scheme="https://zml3589110.github.io/tags/%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>HEXO插件说明</title>
    <link href="https://zml3589110.github.io/posts/1804493672.html"/>
    <id>https://zml3589110.github.io/posts/1804493672.html</id>
    <published>2023-12-04T07:07:20.000Z</published>
    <updated>2023-12-04T08:15:23.320Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo 有强大的插件系统，使您能轻松扩展功能而不用修改核心模块的源码。在 Hexo 中有两种形式的插件：</p><h3 id="脚本（Scripts）"><a href="#脚本（Scripts）" class="headerlink" title="脚本（Scripts）"></a>脚本（Scripts）</h3><p>如果您的代码很简单，建议您编写脚本，您只需要把 JavaScript 文件放到 <code>scripts</code> 文件夹，在启动时就会自动加载。</p><h3 id="插件（Packages）"><a href="#插件（Packages）" class="headerlink" title="插件（Packages）"></a>插件（Packages）</h3><p>如果您的代码较复杂，或是您想要发布到 NPM 上，建议您编写插件。首先，在 <code>node_modules</code> 文件夹中建立文件夹，文件夹名称开头必须为 <code>hexo-</code>，如此一来 Hexo 才会在启动时加载；否则 Hexo 将会忽略它。</p><p>文件夹内至少要包含 2 个文件：一个是主程序，另一个是 <code>package.json</code>，描述插件的用途和所依赖的插件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── index.js</span><br><span class="line">└── package.json</span><br></pre></td></tr></table></figure><p><code>package.json</code> 中至少要包含 <code>name</code>, <code>version</code>, <code>main</code> 属性，例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">package.json&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;hexo-my-plugin&quot;</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;0.0.1&quot;</span>,</span><br><span class="line">  <span class="string">&quot;main&quot;</span>: <span class="string">&quot;index&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p>您可以使用 Hexo 提供的官方工具插件来加速开发：</p><ul><li><a href="https://github.com/hexojs/hexo-fs">hexo-fs</a>：文件 IO</li><li><a href="https://github.com/hexojs/hexo-util">hexo-util</a>：工具程式</li><li><a href="https://github.com/hexojs/hexo-i18n">hexo-i18n</a>：本地化（i18n）</li><li><a href="https://github.com/hexojs/hexo-pagination">hexo-pagination</a>：生成分页数据</li></ul><h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><p>当您完成插件后，可以考虑将它发布到 <a href="https://hexo.io/plugins">插件列表</a>，让更多人能够使用您的插件。发布插件的步骤和 <a href="https://hexo.io/zh-cn/docs/contributing.html#%E6%9B%B4%E6%96%B0%E6%96%87%E6%A1%A3">更新文档</a> 非常类似。</p><ol><li><p>Fork <a href="https://github.com/hexojs/site">hexojs&#x2F;site</a></p></li><li><p>把库（repository）复制到电脑上，并安装所依赖的插件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https:<span class="comment">//github.com/&lt;username&gt;/site.git</span></span><br><span class="line">$ cd site</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure></li><li><p>在 <code>source/_data/plugins/</code> 中创建一个新的 yaml 文件，使用您的插件名称作为文件名。</p></li><li><p>编辑 <code>source/_data/plugins/&lt;your-plugin-name&gt;.yml</code> 并添加您的插件。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">description: Server <span class="built_in">module</span> <span class="keyword">for</span> Hexo.</span><br><span class="line">link: https:<span class="comment">//github.com/hexojs/hexo-server</span></span><br><span class="line">tags:</span><br><span class="line">  - official</span><br><span class="line">  - server</span><br><span class="line">  - <span class="built_in">console</span></span><br></pre></td></tr></table></figure></li><li><p>推送（push）分支。</p></li><li><p>建立一个新的合并申请（pull request）并描述改动。</p></li></ol><hr><h1 id="相关链接-侵删"><a href="#相关链接-侵删" class="headerlink" title="相关链接(侵删)"></a>相关链接(侵删)</h1><ol><li><a href="https://hexo.io/zh-cn/docs/plugins">Hexo插件说明</a></li></ol><hr><center><font color=red>=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">hexo插件基础</summary>
    
    
    
    <category term="HEXO" scheme="https://zml3589110.github.io/categories/HEXO/"/>
    
    <category term="插件" scheme="https://zml3589110.github.io/categories/HEXO/%E6%8F%92%E4%BB%B6/"/>
    
    
    <category term="JavaScript" scheme="https://zml3589110.github.io/tags/JavaScript/"/>
    
    <category term="HEXO" scheme="https://zml3589110.github.io/tags/HEXO/"/>
    
    <category term="插件" scheme="https://zml3589110.github.io/tags/%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Hexo + Typora + 开发Hexo插件 解决图片路径不一致</title>
    <link href="https://zml3589110.github.io/posts/653633827.html"/>
    <id>https://zml3589110.github.io/posts/653633827.html</id>
    <published>2023-12-04T06:07:20.000Z</published>
    <updated>2023-12-05T09:29:46.252Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题说明"><a href="#问题说明" class="headerlink" title="问题说明"></a>问题说明</h1><p>在文章中，Typora编写时显示的很正常，但推送上去后就不行了，图片集体挂掉，无法显示出来，后来才找到这个方法！<br>这个方法的核心是源文章使用的是 Typora 图片引用方式，但推送编译时就更改路径方式，使用本地引用方法。<br>hexo-asset-img 这个文件夹中的 index.js 也是遵循 JavaScript 语法，自己研究之后发现他是使用正则表达式来替换路径，也就是说先识别出 typora 下图片路径，然后替换成hexo能使用的路径就行了！</p><p><strong>问题点：</strong></p><p>使用时发现一直没有替换，最后一层层调出才发现，使用正则表达式时，“+”是有效字符，需要正则化才行，费了一早上才知道！</p><p><a href="https://ask.csdn.net/questions/257783">关于js正则匹配的问题，怎么加上一个”+”就匹配不上了？</a></p><p>这篇文章有说明：<br>+号在正则表达式中是有意义的，要转义</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">oldStr = oldStr.replace(<span class="string">&#x27;+&#x27;</span>,<span class="string">&#x27;\\+&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用这个才对-要不然多个+号还不行</span></span><br><span class="line">fileName = fileName.replace(<span class="regexp">/\+/g</span>,<span class="string">&#x27;\\+&#x27;</span>);<span class="comment">//转义所有+</span></span><br></pre></td></tr></table></figure><h1 id="1-下载安装-Typora"><a href="#1-下载安装-Typora" class="headerlink" title="1. 下载安装 Typora"></a>1. 下载安装 Typora</h1><p><a href="https://typora.io/">https://typora.io/</a></p><h1 id="2-配置-Typora-图片路径"><a href="#2-配置-Typora-图片路径" class="headerlink" title="2. 配置 Typora 图片路径"></a>2. 配置 Typora 图片路径</h1><img src="/posts/653633827/image-5f4b358d49ecff6196bdedac1b022c2a.png" class="" title="img"><img src="/posts/653633827/image-c3df7eb6e26d520ff42b722a2c83f2bb.png" class="" title="img"><p>图片文件保存路径: .&#x2F;${filename} 即保存到与 当前正在编辑的文件名 相同的同级文件夹下</p><p>下面三项依次为</p><ul><li><p>对本地位置的图片应用上述规则</p></li><li><p>对网络位置的图片应用上述规则</p></li><li><p>优先使用相对路径</p></li></ul><p><strong>建议都勾选上，至少要勾选上第一项</strong></p><p>PS：使用 Ctrl+V 粘贴 即可复制图片到Typora图片文件夹</p><h1 id="3-配置-Hexo-图片文件夹"><a href="#3-配置-Hexo-图片文件夹" class="headerlink" title="3. 配置 Hexo 图片文件夹"></a>3. 配置 Hexo 图片文件夹</h1><img src="/posts/653633827/image-4fefcdb6876c6f7ec8e002cdcddde463.png" class="" title="img"><p>在 Hexo 根目录打开配置文件 <strong>_config.yml</strong></p><p><strong>搜索 post_asset_folder，false 改为 true</strong></p><img src="/posts/653633827/image-b288223fe2dd6816890d13f9e580be35.png" class="" title="img"><p>这样修改后，每次 ‘hexo new page’ 生成新文章，都会在文章文件同级目录创建一个与文章文件名同名的文件夹，我们就在这里存放此文章的图片。</p><img src="/posts/653633827/image-303f4cfea59a8aa80059fc9b56e96cc0.png" class="" title="img"><p><strong>PS: 这被称为 文章资源文件夹, 参考官方文档： <a href="https://hexo.io/zh-cn/docs/asset-folders">https://hexo.io/zh-cn/docs/asset-folders</a></strong></p><h1 id="4-开发-Hexo-转换图片路径-插件"><a href="#4-开发-Hexo-转换图片路径-插件" class="headerlink" title="4. 开发 Hexo 转换图片路径 插件"></a>4. 开发 Hexo 转换图片路径 插件</h1><p><strong>注意：自己最后使用的是npm直接下载方式安装，不过这个方式也刚好可以学习插件开发了</strong></p><p>现在，我们在 Typora下使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![example](postname/example.jpg)</span><br></pre></td></tr></table></figure><p>引用图片，享受实时预览，但需发布到 Hexo，使之发布后能正确加载我们的图片，还需要做以下转换:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![example](postname/example.jpg) --&gt; &#123;% asset_img example.jpg example %&#125;</span><br></pre></td></tr></table></figure><p>而这个转换我们需要在文章编译为html之前，在编译过程中转换为 这样的标签</p><p><strong>PS: <a href="https://hexo.io/zh-cn/docs/asset-folders#%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84%E5%BC%95%E7%94%A8%E7%9A%84%E6%A0%87%E7%AD%BE%E6%8F%92%E4%BB%B6">Hexo官方文档 - 相对路径引用的标签插件</a></strong></p><h2 id="4-1-创建文件夹-hexo-asset-img，初始化npm包"><a href="#4-1-创建文件夹-hexo-asset-img，初始化npm包" class="headerlink" title="4.1 创建文件夹 hexo-asset-img，初始化npm包"></a>4.1 创建文件夹 hexo-asset-img，初始化npm包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir hexo-asset-img</span><br><span class="line"><span class="built_in">cd</span> hexo-asset-img</span><br><span class="line">npm init</span><br></pre></td></tr></table></figure><img src="/posts/653633827/image-2c872375cf8af43072ef10ed213b13d6.png" class="" title="img"><h2 id="4-2-编写插件-index-js"><a href="#4-2-编写插件-index-js" class="headerlink" title="4.2 编写插件 index.js"></a>4.2 编写插件 index.js</h2><p><strong>创建 index.js，编写代码如下</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> log = <span class="built_in">require</span>(<span class="string">&#x27;hexo-log&#x27;</span>)(&#123; <span class="string">&#x27;debug&#x27;</span>: <span class="literal">false</span>, <span class="string">&#x27;slient&#x27;</span>: <span class="literal">false</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * md文件返回 true</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>data </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ignore</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> 好奇怪，试了一下, md返回true, 但却需要忽略 取反!</span></span><br><span class="line">    <span class="keyword">var</span> source = data.source;</span><br><span class="line">    <span class="keyword">var</span> ext = source.substring(source.lastIndexOf(<span class="string">&#x27;.&#x27;</span>)).toLowerCase();</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">&#x27;md&#x27;</span>,].indexOf(ext) &gt; -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">action</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> reverseSource = data.source.split(<span class="string">&quot;&quot;</span>).reverse().join(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> fileName = reverseSource.substring(<span class="number">3</span>, reverseSource.indexOf(<span class="string">&quot;/&quot;</span>)).split(<span class="string">&quot;&quot;</span>).reverse().join(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ![example](postname/example.jpg)  --&gt;  &#123;% asset_img example.jpg example %&#125;</span></span><br><span class="line">    <span class="keyword">var</span> regExp = <span class="built_in">RegExp</span>(<span class="string">&quot;!\\[(.*?)\\]\\(&quot;</span> + fileName + <span class="string">&#x27;/(.+?)\\)&#x27;</span>, <span class="string">&quot;g&quot;</span>);</span><br><span class="line">    <span class="comment">// hexo g</span></span><br><span class="line">    data.content = data.content.replace(regExp, <span class="string">&quot;&#123;% asset_img $2 $1 %&#125;&quot;</span>,<span class="string">&quot;g&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// log.info(`hexo-asset-img: filename: $&#123;fileName&#125;, title: $&#123;data.title.trim()&#125;`);</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hexo.extend.filter.register(<span class="string">&#x27;before_post_render&#x27;</span>,<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!ignore(data))&#123;</span><br><span class="line">        action(data)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><h2 id="4-3-本地测试插件"><a href="#4-3-本地测试插件" class="headerlink" title="4.3 本地测试插件"></a>4.3 本地测试插件</h2><ol><li>Hexo根目录下 package.json 中 dependencies添加一行 “hexo-asset-img”: “^1.0.0”,</li><li>将 hexo-asset-img文件夹复制到 Hexo根目录下 node_modules文件夹下</li></ol><p><strong>注意：二者缺一不可，笔者试过不修改 package.json ，但没成功加载插件</strong></p><ul><li>重新生成文章</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s # 本地预览</span><br><span class="line"></span><br><span class="line">ps:也可以直接  hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure><p><strong>PS：当然之后你还需要修正以前文章的图片路径</strong></p><p>public&#x2F;posts 生成结果如下图所示，成功</p><img src="/posts/653633827/image-49faf02cc39fc79b7d41181b34026384.png" class="" title="img"><p>图片路径被转换成功</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=<span class="string">&quot;/posts/hexo-typora/image-2c872375cf8af43072ef10ed213b13d6.png&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;&quot;</span> title=<span class="string">&quot;image-20201128103300470&quot;</span>&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>后话：</strong><br>所说的问题就出现在了这里，一直是以为没什么问题，然而，多次尝试发现图片地址并未被改变，以为插件不起作用，但文件夹确确实实生成了，无奈只能研究其中代码含义，才有前面说的结果。<br>这里是作者列出详细步骤，实际上使用的话直接npm下载插件也行的了。</li></ul><h2 id="4-4-发布插件"><a href="#4-4-发布插件" class="headerlink" title="4.4 发布插件"></a>4.4 发布插件</h2><p>注意: 你需要先登录 npm login</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm publish --registry https://registry.npmjs.org</span><br></pre></td></tr></table></figure><img src="/posts/653633827/image-b0e539a443bb2dcc1aca24229a412d5b.png" class="" title="img"><h2 id="5-使用插件"><a href="#5-使用插件" class="headerlink" title="5. 使用插件"></a>5. 使用插件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-asset-img --save</span><br></pre></td></tr></table></figure><p>关联 GitHub<br><a href="https://github.com/yiyungent/hexo-asset-img">yiyungent&#x2F;hexo-asset-img: Hexo插件: 转换 图片相对路径 为 asset_img</a></p><p><a href="https://github.com/yiyungent/hexo-asset-img">https://github.com/yiyungent/hexo-asset-img</a></p><h1 id="作者说明"><a href="#作者说明" class="headerlink" title="作者说明"></a>作者说明</h1><h2 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h2><p>hexo-asset-image 已无效, 大概是从 Hexo 5 开始，并且此仓库已 archive</p><p>Q: 为什么使用本地图片 而不是网络图片 (图床) ?<br>A:</p><ol><li>第三方图床不稳定, 容易丢失图片</li><li>自行搭建图床, 随着上传错误图片, 删除文章而没有删除关联图片 次数的增多, 未引用图片越来越多, 图床中也越来越多的无用冗余图片, 还不方便删除, 也容易误删除</li><li>本地图片 与 文章在一个文件夹, 易打包, 在无网络或网络较差时也能预览</li><li>本地图片 放在与 文章文件名同名文件夹内 方便管理</li></ol><p><code>补充:</code><br>很多 <code>markdown编辑器</code> 提供粘贴图片到本地图片文件夹, 这些图片文件名通常不易读, 较长, 如果每次删除文章中的图片引用, 都手动去删除相应图片, 以及删除文章, 手动删除关联图片文件夹, 比较麻烦, 但不删除, 未引用图片又会越来越多, 因此 <code>删除未引用图片工具</code> 应运而生!</p><ul><li><a href="https://gitee.com/link?target=https://github.com/yiyungent/clear-image-action">yiyungent&#x2F;clear-image-action: 🔧 Image detection. | 图片检测 | 清理未引用图片 | 删除未引用图片 | 检查引用的图片是否有效 | GitHub Actions</a></li><li><a href="https://gitee.com/link?target=https://github.com/yiyungent/coo">yiyungent&#x2F;coo: 🧰 .NET 自用CLI, 工具集</a></li></ul><h2 id="相关项目"><a href="#相关项目" class="headerlink" title="相关项目"></a>相关项目</h2><ul><li><a href="https://gitee.com/link?target=https://github.com/yiyungent/clear-image-action">yiyungent&#x2F;clear-image-action: 🔧 Image detection. | 图片检测 | 清理未引用图片 | 删除未引用图片 | 检查引用的图片是否有效 | GitHub Actions</a></li><li><a href="https://gitee.com/link?target=https://github.com/xcodebuild/hexo-asset-image">xcodebuild&#x2F;hexo-asset-image</a></li><li><a href="https://gitee.com/link?target=https://github.com/cocowool/hexo-image-link">cocowool&#x2F;hexo-image-link</a></li><li><a href="https://gitee.com/link?target=https://github.com/cnzsb/hexo-asset">cnzsb&#x2F;hexo-asset</a></li></ul><h1 id="NET-自用-CLI-工具集-清理未引用图片"><a href="#NET-自用-CLI-工具集-清理未引用图片" class="headerlink" title=".NET 自用 CLI | 工具集(清理未引用图片)"></a>.NET 自用 CLI | 工具集(清理未引用图片)</h1><blockquote><p>需要先在本地安装 <code>.NET 6 SDK</code></p></blockquote><ul><li><a href="https://dotnet.microsoft.com/download/dotnet/thank-you/sdk-6.0.100-windows-x64-installer">Windows | .NET 6 SDK | 下载</a></li><li><a href="https://dotnet.microsoft.com/download/dotnet/thank-you/sdk-6.0.100-macos-x64-installer">macOS | .NET 6 SDK | 下载</a></li><li><a href="https://docs.microsoft.com/dotnet/core/install/linux?WT.mc_id=dotnet-35129-website">Linux | .NET 6 SDK</a></li></ul><p>然后 安装 <code>coo</code> 工具集</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet tool install -g coo</span><br></pre></td></tr></table></figure><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><h4 id="1-mdimg"><a href="#1-mdimg" class="headerlink" title="1. mdimg"></a>1. mdimg</h4><blockquote><ol><li>清理 md文件的未引用图片: 例如使用 <code>Hexo</code>, 采用本地图片文件 (图片放在md同名文件夹下) 等</li></ol></blockquote><p><code>&quot;F:\Com\me\Repos\notebook\source\_posts&quot;</code> 为 <code>Hexo文章目录</code>, 本人图片与文章处于同一目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 统计分析</span><br><span class="line">coo mdimg &quot;F:\Com\me\Repos\notebook\source\_posts&quot;</span><br><span class="line"># 统计分析 并删除未引用图片</span><br><span class="line">coo mdimg -d &quot;F:\Com\me\Repos\notebook\source\_posts&quot;</span><br></pre></td></tr></table></figure><blockquote><p>补充:</p><ol><li><code>所有图片数量=引用图片数+未引用图片数</code><br>这个等式匹配不上 <code>属于正常现象</code>, 因为 匹配 所有图片 时, 目前仅匹配了 <code>png,jpg,jpeg,gif</code>, 而 你在md中引用的图片可能还有其它<br>因此 <code>所有图片数量&lt;=引用图片数+未引用图片数</code></li><li>Windows, macOS 不区分路径大小写, 但 Linux 区分大小写<br>本工具匹配时, 忽略大小写, 因此不用担心 引用时, 大小写不一致 而导致工具以为 未引用此图片 而误删,<br>因此工具 可能存在漏删, 但不会误删除引用图片</li><li>本工具通过检测 <code>文章.md</code> 中图片的相对路径引用, 并转换为绝对路径, 与目标目录的所有存在图片的绝对路径进行匹配, 来找出哪些图片未引用</li></ol></blockquote><h4 id="2-cimg"><a href="#2-cimg" class="headerlink" title="2. cimg"></a>2. cimg</h4><blockquote><ol><li>清理 未引用图片 (<code>mdimg</code> 升级版)<br>支持识别 <code>md,html,htm</code></li></ol></blockquote><blockquote><p>支持 <code>相对路径</code>: 相对于当前命令行执行所在路径</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">coo cimg -d --ignore-paths=<span class="string">&quot;IgnoreDir1,IgnoreDir2,images/1.png&quot;</span> <span class="string">&quot;source/_posts&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>--ignore-paths=&quot;IgnoreDir1,IgnoreDir2,images/1.png&quot;</code> 这些图片地址忽略, 不会被删除</p></blockquote><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>卸载 coo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet tool uninstall -g coo</span><br></pre></td></tr></table></figure><hr><h1 id="相关链接-侵删"><a href="#相关链接-侵删" class="headerlink" title="相关链接(侵删)"></a>相关链接(侵删)</h1><ol><li><a href="https://moeci.com/posts/hexo-typora/#%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85-typora">Hexo + Typora + 开发Hexo插件 解决图片路径不一致</a></li><li><a href="https://gitee.com/yiyungent/hexo-asset-img/">gitee hexo-asset-img</a></li><li><a href="https://zhuanlan.zhihu.com/p/645679541">(这个方法过时-思路可参考)解决Hexo+Github+Typora图片无法正确显示的问题</a></li></ol><hr><center><font color=red>=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">hexo图片显示问题，Typora 添加图片时顺便下载下来，这样离线也能查看了</summary>
    
    
    
    <category term="gihub" scheme="https://zml3589110.github.io/categories/gihub/"/>
    
    <category term="Typora" scheme="https://zml3589110.github.io/categories/gihub/Typora/"/>
    
    <category term="图片" scheme="https://zml3589110.github.io/categories/%E5%9B%BE%E7%89%87/"/>
    
    
    <category term="RegExp" scheme="https://zml3589110.github.io/tags/RegExp/"/>
    
    <category term="HEXO" scheme="https://zml3589110.github.io/tags/HEXO/"/>
    
    <category term="图片" scheme="https://zml3589110.github.io/tags/%E5%9B%BE%E7%89%87/"/>
    
    <category term="Typora" scheme="https://zml3589110.github.io/tags/Typora/"/>
    
    <category term="正则表达式" scheme="https://zml3589110.github.io/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
    <category term="replace" scheme="https://zml3589110.github.io/tags/replace/"/>
    
  </entry>
  
  <entry>
    <title>小熊派鸿蒙系统环境搭建</title>
    <link href="https://zml3589110.github.io/posts/1932715036.html"/>
    <id>https://zml3589110.github.io/posts/1932715036.html</id>
    <published>2023-12-04T02:04:01.986Z</published>
    <updated>2022-05-11T01:17:04.892Z</updated>
    
    <content type="html"><![CDATA[<h1 id="系统环境选择"><a href="#系统环境选择" class="headerlink" title="系统环境选择"></a>系统环境选择</h1><p>​</p><h3 id="引脚定义"><a href="#引脚定义" class="headerlink" title="引脚定义"></a>引脚定义</h3><table><thead><tr><th align="left">引脚</th><th align="left">符号</th><th align="left">I&#x2F;O类型</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">NC</td><td align="left">&#x2F;</td><td align="left">悬空不接，为了兼容其他模组</td></tr><tr><td align="left">2</td><td align="left">A_7</td><td align="left">I&#x2F;O</td><td align="left">GPIOA_7，硬件PWM，IC Pin21</td></tr><tr><td align="left">3</td><td align="left">EN</td><td align="left">I&#x2F;O</td><td align="left">模组使能引脚，高电平有效，模组已上拉高电平，用户可外部控制该引脚</td></tr><tr><td align="left">4</td><td align="left">A_11</td><td align="left">I&#x2F;O</td><td align="left">GPIOA_11，硬件PWM，IC Pin25</td></tr><tr><td align="left">5</td><td align="left">A_2</td><td align="left">I&#x2F;O</td><td align="left">GPIOA_2，硬件PWM，IC Pin18</td></tr><tr><td align="left">6</td><td align="left">A_3</td><td align="left">I&#x2F;O</td><td align="left">GPIOA_3，硬件PWM，IC Pin19</td></tr><tr><td align="left">7</td><td align="left">A_4</td><td align="left">I&#x2F;O</td><td align="left">GPIOA_4，硬件PWM，IC Pin20</td></tr><tr><td align="left">8</td><td align="left">VCC</td><td align="left">P</td><td align="left">模组电源引脚（3.3V）</td></tr><tr><td align="left">9</td><td align="left">GND</td><td align="left">P</td><td align="left">电源参考地</td></tr><tr><td align="left">10</td><td align="left">A_12</td><td align="left">I&#x2F;O</td><td align="left">GPIOA_12，硬件PWM，IC Pin26</td></tr><tr><td align="left">11</td><td align="left">A_16</td><td align="left">I&#x2F;O</td><td align="left">GPIOA_16，UART_Log_TXD(用于打印模组内部信息)，可配置成普通GPIO</td></tr><tr><td align="left">12</td><td align="left">A_17</td><td align="left">I&#x2F;O</td><td align="left">GPIOA_17，硬件PWM，IC Pin38</td></tr><tr><td align="left">13</td><td align="left">A_18</td><td align="left">I&#x2F;O</td><td align="left">GPIOA_18，硬件PWM，IC Pin39</td></tr><tr><td align="left">14</td><td align="left">A_19</td><td align="left">I&#x2F;O</td><td align="left">GPIOA_19，硬件PWM，IC Pin40</td></tr><tr><td align="left">15</td><td align="left">RXD</td><td align="left">I&#x2F;O</td><td align="left">GPIOA_13，UART0_RXD（用户串口）</td></tr><tr><td align="left">16</td><td align="left">TXD</td><td align="left">I&#x2F;O</td><td align="left">GPIOA_14，UART0_TXD（用户串口）</td></tr></tbody></table><blockquote><p><strong>说明</strong>：P表示电源引脚，I&#x2F;O表示输入输出引脚。</p></blockquote>]]></content>
    
    
    <summary type="html">使用小熊派开发板(BEARPI-HM.Nano)搭建鸿蒙开发环境</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    
    <category term="物联网" scheme="https://zml3589110.github.io/tags/%E7%89%A9%E8%81%94%E7%BD%91/"/>
    
    <category term="WIFI" scheme="https://zml3589110.github.io/tags/WIFI/"/>
    
    <category term="C语言" scheme="https://zml3589110.github.io/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="鸿蒙" scheme="https://zml3589110.github.io/tags/%E9%B8%BF%E8%92%99/"/>
    
    <category term="小熊派" scheme="https://zml3589110.github.io/tags/%E5%B0%8F%E7%86%8A%E6%B4%BE/"/>
    
  </entry>
  
  <entry>
    <title>收集好网站</title>
    <link href="https://zml3589110.github.io/posts/2614359431.html"/>
    <id>https://zml3589110.github.io/posts/2614359431.html</id>
    <published>2023-12-04T02:03:59.496Z</published>
    <updated>2022-05-04T07:19:23.338Z</updated>
    
    <content type="html"><![CDATA[<p>配置美化相关</p><p>hexo个人博客搭建（二）butterfly主题配置: <a href="https://blog.csdn.net/YR_112233/article/details/122778691">Link</a></p><p>图片显示相关<br>Hexo + Typora + 开发Hexo插件 解决图片路径不一致: <a href="https://moeci.com/posts/hexo-typora/">Link</a><br>Hexo引用显示本地图片: <a href="https://www.xilixili.net/2019/03/26/hexo-markdown-use-images/">Link</a><br>Hexo butterfly 自定义文章封面 &amp;&amp; 主页顶部图片更改: <a href="https://blog.csdn.net/qq_43857095/article/details/108306164">Link</a></p><p>部署相关<br>Hexo 部署到 Gitee: <a href="https://blog.csdn.net/qq_38157825/article/details/112783631">Link</a><br>Hexo阶段三 – 将Hexo部署到github: <a href="https://blog.csdn.net/Night__breeze/article/details/117607049">Link</a></p><p>导航栏相关<br>Hexo 修改导航栏、标签、分类、归档图标，一分钟搞定: <a href="https://blog.csdn.net/h_kaka/article/details/119655493">Link</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;配置美化相关&lt;/p&gt;
&lt;p&gt;hexo个人博客搭建（二）butterfly主题配置: &lt;a href=&quot;https://blog.csdn.net/YR_112233/article/details/122778691&quot;&gt;Link&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;图片显示相关&lt;br&gt;H</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://zml3589110.github.io/posts/1243066710.html"/>
    <id>https://zml3589110.github.io/posts/1243066710.html</id>
    <published>2023-12-04T02:03:59.477Z</published>
    <updated>2022-05-04T07:19:23.317Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Butterfly主题使用笔记</title>
    <link href="https://zml3589110.github.io/posts/59422436.html"/>
    <id>https://zml3589110.github.io/posts/59422436.html</id>
    <published>2023-12-04T02:03:59.474Z</published>
    <updated>2022-05-04T07:19:23.308Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://butterfly.js.org/posts/4aa8abbe/">Butterfly 安装文档(三) 主题配置-1</a><br>目录</p><ol><li>语言 2. 网站资料 3. 导航菜单</li><li>代码 4.1. 代码高亮主题 4.2. 代码复製 4.3. 代码框展开&#x2F;关闭 4.4. 代码换行 4.5. 代码高度限制</li><li>社交图标 6. 主页文章节选(自动节选和文章页description) 7. 顶部图 8. 文章置顶</li><li>文章封面 10. 文章页相关配置 10.1. 文章meta显示 10.2. 文章版权 10.3. 文章打赏<br>10.4. TOC 10.4.1. 为特定的文章配置 10.5. 相关文章 10.6. 文章锚点 10.7. 文章过期提醒<br>10.8. 文章编辑按钮 10.9. 文章分页按钮</li><li>头像 12. 图片描述 13. 复製相关配置 14. Footer 设置<br>14.1. 博客年份 14.2. 页脚自定义文本</li><li>右下角按钮 15.1. 简繁转换 15.2. 夜间模式 15.3. 閲读模式 15.4. 按钮排序</li><li>侧边栏设置 16.1. 侧边排版 16.2. 访问人数 busuanzi (UV 和 PV) 16.3. 运行时间<br>16.4. 最新评论 16.5. 自定义添加栏目</li><li>标籤外挂（Tag Plugins） 17.1. Note (Bootstrap Callout) 17.2. Gallery相册图库<br>17.3. Gallery相册 17.4. tag-hide 17.5. mermaid 17.6. Tabs 17.7. Button<br>17.8. inlineImg 17.9. label 17.10. timeline 17.11. flink</li></ol><p><a href="https://butterfly.js.org/posts/ceeb73f/">Butterfly 安装文档(四) 主题配置-2</a><br>目录</p><ol><li>评论 2. 在綫聊天 3. 分享 4. 搜索系统 5. 网站验证 6. 分析统计 7. 广告</li><li>Math 数学 9. 美化&#x2F;特效 9.1. 自定义主题色 9.2. 网站背景 9.3. footer 背景<br>9.4. 打字效果 9.5. 背景特效 9.6. 鼠标点击效果 9.7. 页面美化 9.8. 自定义字体和字体大小<br>9.8.1. 全局字体 9.8.2. Blog 标题字体 9.9. 网站副标题<br>9.10. 主页top_img显示大小 9.11. 页面加载动画preloader</li><li>PWA 11. 字数统计 12. 图片大图查看模式 13. Snackbar 弹窗 </li><li>其它配置 14.1. CSS 前缀 14.2. Open Graph 14.3. Instantpage<br>14.4. Pangu 15. Pjax 16. Inject 17. CDN</li></ol><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://butterfly.js.org/posts/4aa8abbe/&quot;&gt;Butterfly 安装文档(三) 主题配置-1&lt;/a&gt;&lt;br&gt;目录&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;语言 2. 网站资料 3. 导航菜单&lt;/li&gt;
&lt;li&gt;代码 4.1. 代码</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Nginx开机自启动设置方法</title>
    <link href="https://zml3589110.github.io/posts/2373589197.html"/>
    <id>https://zml3589110.github.io/posts/2373589197.html</id>
    <published>2023-12-02T07:12:20.000Z</published>
    <updated>2023-12-02T07:19:29.393Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux操作系统："><a href="#Linux操作系统：" class="headerlink" title="Linux操作系统："></a>Linux操作系统：</h1><h2 id="1-使用Systemd服务"><a href="#1-使用Systemd服务" class="headerlink" title="1.使用Systemd服务"></a>1.使用Systemd服务</h2><p>对于使用Systemd管理服务的Linux发行版，例如Ubuntu 16.04及以后的版本、CentOS 7及以后的版本等，我们可以通过以下方法将Nginx设置为开机自启动：</p><p>首先，在创建Nginx服务文件之前，我们需要确保Nginx已经成功安装在系统上。然后，创建一个名为 nginx.service的服务文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo vim /etc/systemd/system/nginx.service</span></span><br></pre></td></tr></table></figure><p>复制并粘贴以下内容到该文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=The Nginx HTTP and reverse proxy server</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">PIDFile=/run/nginx.pid</span><br><span class="line">ExecStartPre=/usr/sbin/nginx -t</span><br><span class="line">ExecStart=/usr/sbin/nginx</span><br><span class="line">ExecReload=/bin/kill -s HUP $MAINPID</span><br><span class="line">ExecStop=/bin/kill -s QUIT $MAINPID</span><br><span class="line">PrivateTmp=true</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>保存并关闭文件。然后，运行以下命令启动Nginx服务并设置开机自启：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl <span class="built_in">enable</span> nginx</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl start nginx</span></span><br></pre></td></tr></table></figure><h2 id="2-使用SysV-Init"><a href="#2-使用SysV-Init" class="headerlink" title="2.使用SysV Init"></a>2.使用SysV Init</h2><p>对于早期使用SysV Init管理服务的Linux发行版，例如Ubuntu 14.04、CentOS 6等，可以通过以下方式将Nginx设置为开机自启：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo chkconfig --level 345 nginx on</span></span><br></pre></td></tr></table></figure><h1 id="Windows操作系统："><a href="#Windows操作系统：" class="headerlink" title="Windows操作系统："></a>Windows操作系统：</h1><p>若想要设置Nginx在Windows开机启动，可以通过以下方法实现：</p><h2 id="1-新建一个名称为“nginx-start-bat”的批处理脚本，并填写以下内容："><a href="#1-新建一个名称为“nginx-start-bat”的批处理脚本，并填写以下内容：" class="headerlink" title="1.新建一个名称为“nginx-start.bat”的批处理脚本，并填写以下内容："></a>1.新建一个名称为“nginx-start.bat”的批处理脚本，并填写以下内容：</h2><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">start</span> /b /d &quot;C:\<span class="built_in">path</span>\to\nginx&quot; nginx.exe</span><br></pre></td></tr></table></figure><p><strong>请注意将 C:\path\to\nginx替换成实际Nginx安装路径。</strong></p><h2 id="2-在Windows文件资源管理器中，通过以下路径进入系统的启动文件夹："><a href="#2-在Windows文件资源管理器中，通过以下路径进入系统的启动文件夹：" class="headerlink" title="2.在Windows文件资源管理器中，通过以下路径进入系统的启动文件夹："></a>2.在Windows文件资源管理器中，通过以下路径进入系统的启动文件夹：</h2><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">%APPDATA%</span>\Microsoft\Windows\<span class="built_in">Start</span> Menu\Programs\Startup</span><br></pre></td></tr></table></figure><p>将之前创建好的“nginx-start.bat”文件复制到此文件夹。</p><p>此时，Nginx应已设置为Windows开机自启动。</p><h1 id="macOS操作系统："><a href="#macOS操作系统：" class="headerlink" title="macOS操作系统："></a>macOS操作系统：</h1><p>对于macOS用户，可以使用以下方法将Nginx设置为开机自启：</p><h2 id="1-创建一个名为-homebrew-mxcl-nginx-plist的文件，并将其保存在-x2F-Library-x2F-LaunchAgents-路径下。"><a href="#1-创建一个名为-homebrew-mxcl-nginx-plist的文件，并将其保存在-x2F-Library-x2F-LaunchAgents-路径下。" class="headerlink" title="1.创建一个名为 homebrew.mxcl.nginx.plist的文件，并将其保存在 ~&#x2F;Library&#x2F;LaunchAgents 路径下。"></a>1.创建一个名为 homebrew.mxcl.nginx.plist的文件，并将其保存在 ~&#x2F;Library&#x2F;LaunchAgents 路径下。</h2><p>编辑文件并写入以下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</span><br><span class="line">&lt;plist version=&quot;1.0&quot;&gt;</span><br><span class="line">&lt;dict&gt;</span><br><span class="line">  &lt;key&gt;Label&lt;/key&gt;</span><br><span class="line">  &lt;string&gt;homebrew.mxcl.nginx&lt;/string&gt;</span><br><span class="line">  &lt;key&gt;ProgramArguments&lt;/key&gt;</span><br><span class="line">  &lt;array&gt;</span><br><span class="line">    &lt;string&gt;/usr/local/opt/nginx/bin/nginx&lt;/string&gt;</span><br><span class="line">    &lt;string&gt;-g&lt;/string&gt;</span><br><span class="line">    &lt;string&gt;daemon off;&lt;/string&gt;</span><br><span class="line">  &lt;/array&gt;</span><br><span class="line">  &lt;key&gt;RunAtLoad&lt;/key&gt;</span><br><span class="line">  &lt;true/&gt;</span><br><span class="line">  &lt;key&gt;KeepAlive&lt;/key&gt;</span><br><span class="line">  &lt;true/&gt;</span><br><span class="line">  &lt;key&gt;StandardErrorPath&lt;/key&gt;</span><br><span class="line">  &lt;string&gt;/usr/local/var/log/nginx/error.log&lt;/string&gt;</span><br><span class="line">  &lt;key&gt;StandardOutPath&lt;/key&gt;</span><br><span class="line">  &lt;string&gt;/usr/local/var/log/nginx/access.log&lt;/string&gt;</span><br><span class="line">&lt;/dict&gt;</span><br><span class="line">&lt;/plist&gt;</span><br></pre></td></tr></table></figure><h2 id="2-接着，运行以下命令将创建的plist文件加载到launchd服务并启动Nginx："><a href="#2-接着，运行以下命令将创建的plist文件加载到launchd服务并启动Nginx：" class="headerlink" title="2.接着，运行以下命令将创建的plist文件加载到launchd服务并启动Nginx："></a>2.接着，运行以下命令将创建的plist文件加载到launchd服务并启动Nginx：</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.nginx.plist</span></span><br></pre></td></tr></table></figure><hr><h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><ol><li><a href="https://www.8kiz.cn/archives/8407.html">nginx开机自启动设置方法</a></li></ol><hr><center><font color=red>=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">Nginx开机自启动设置方法</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="VUE" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/VUE/"/>
    
    <category term="前端" scheme="https://zml3589110.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Nginx" scheme="https://zml3589110.github.io/categories/Nginx/"/>
    
    
    <category term="网页" scheme="https://zml3589110.github.io/tags/%E7%BD%91%E9%A1%B5/"/>
    
    <category term="JavaScript" scheme="https://zml3589110.github.io/tags/JavaScript/"/>
    
    <category term="VUE" scheme="https://zml3589110.github.io/tags/VUE/"/>
    
    <category term="Nginx" scheme="https://zml3589110.github.io/tags/Nginx/"/>
    
    <category term="linux" scheme="https://zml3589110.github.io/tags/linux/"/>
    
    <category term="开机自启" scheme="https://zml3589110.github.io/tags/%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF/"/>
    
  </entry>
  
  <entry>
    <title>Nginx部署前端项目+ 域名配置</title>
    <link href="https://zml3589110.github.io/posts/1718063250.html"/>
    <id>https://zml3589110.github.io/posts/1718063250.html</id>
    <published>2023-12-02T06:04:20.000Z</published>
    <updated>2023-12-04T01:18:07.586Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Step1：服务器上安装-Nginx"><a href="#Step1：服务器上安装-Nginx" class="headerlink" title="Step1：服务器上安装 Nginx"></a>Step1：服务器上安装 Nginx</h1><h2 id="1、安装nginx"><a href="#1、安装nginx" class="headerlink" title="1、安装nginx"></a>1、安装nginx</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Ubuntu</span></span><br><span class="line">apt-get install nginx</span><br><span class="line"><span class="meta">#</span><span class="bash"> centOS</span></span><br><span class="line">yum install nginx</span><br></pre></td></tr></table></figure><h2 id="2、检查nginx是否安装，输入如下命令后若出现版本号则安装成功"><a href="#2、检查nginx是否安装，输入如下命令后若出现版本号则安装成功" class="headerlink" title="2、检查nginx是否安装，输入如下命令后若出现版本号则安装成功"></a>2、检查nginx是否安装，输入如下命令后若出现版本号则安装成功</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -v</span><br></pre></td></tr></table></figure><h2 id="3、启动nginx"><a href="#3、启动nginx" class="headerlink" title="3、启动nginx"></a>3、启动nginx</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl start nginx</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置nginx在系统启动时自动启动</span></span><br><span class="line">systemctl enable nginx</span><br></pre></td></tr></table></figure><ul><li>注：这里如果出现报错，说明缺少nginx启动相关的依赖，根据报错提示，复制报错提示解决方案的命令，安装相关依赖重新执行上述启动命令即可！</li></ul><h2 id="4、在浏览器输入ip地址，若出现如下页面则启动成功"><a href="#4、在浏览器输入ip地址，若出现如下页面则启动成功" class="headerlink" title="4、在浏览器输入ip地址，若出现如下页面则启动成功"></a>4、在浏览器输入ip地址，若出现如下页面则启动成功</h2><img src="/posts/1718063250/b2b5aa905fc240738bb1429d076504d1.png" class="" title="img"><h1 id="Step2：打包上传Vue项目到服务器"><a href="#Step2：打包上传Vue项目到服务器" class="headerlink" title="Step2：打包上传Vue项目到服务器"></a>Step2：打包上传Vue项目到服务器</h1><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="1-1、Vue2项目配置跨域"><a href="#1-1、Vue2项目配置跨域" class="headerlink" title="1-1、Vue2项目配置跨域"></a>1-1、Vue2项目配置跨域</h3><p>在 vue.config.js 中进行如下配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  publicPath: &#x27;/&#x27;,</span><br><span class="line">  outputDir: &#x27;dist&#x27;,</span><br><span class="line">  assetsDir: &#x27;static&#x27;,</span><br><span class="line">  lintOnSave: false,</span><br><span class="line">  productionSourceMap: false,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    port: port,</span><br><span class="line">    open: true,</span><br><span class="line">    overlay: &#123;</span><br><span class="line">      warnings: false,</span><br><span class="line">      errors: true</span><br><span class="line">    &#125;,</span><br><span class="line">    /* 上线用（配置跨域） */</span><br><span class="line">    proxy: &#123;</span><br><span class="line">      &#x27;/api&#x27;: &#123;</span><br><span class="line">        target: &#x27;接口地址url&#x27;,</span><br><span class="line">        // 允许跨域</span><br><span class="line">        changeOrigin: true,</span><br><span class="line">        ws: true,</span><br><span class="line">        pathRewrite: &#123;</span><br><span class="line">          &#x27;^/api&#x27;: &#x27;&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-Vue3-Vite项目配置跨域"><a href="#1-2-Vue3-Vite项目配置跨域" class="headerlink" title="1-2 Vue3+Vite项目配置跨域"></a>1-2 Vue3+Vite项目配置跨域</h3><p>在 vite.config.js 中进行如下配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">server: &#123;</span><br><span class="line">            port: 3005, // 项目端口</span><br><span class="line">            host: &quot;localhost&quot;,</span><br><span class="line">            proxy: &#123;</span><br><span class="line">                &quot;/smartReport&quot;: &#123; // 接口前缀</span><br><span class="line">                    target: &quot;接口服务器地址：ip+端口&quot;,</span><br><span class="line">                    // 允许跨域</span><br><span class="line">                    changeOrigin: true</span><br><span class="line">                    // 路径重写：在发出请求后将 接口前缀 替换为&#x27;&#x27;空值，这样不影响接口请求</span><br><span class="line">                    // pathRewrite: &#123; </span><br><span class="line">                    //   &#x27;^/smartReport&#x27;: &#x27;&#x27;</span><br><span class="line">                    // &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="2、Vue项目打包："><a href="#2、Vue项目打包：" class="headerlink" title="2、Vue项目打包："></a>2、Vue项目打包：</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p><strong>打包完成后，会在项目根目录下自动生成一个默认dist文件夹</strong></p><h2 id="3、上传至服务器指定文件夹下"><a href="#3、上传至服务器指定文件夹下" class="headerlink" title="3、上传至服务器指定文件夹下"></a>3、上传至服务器指定文件夹下</h2><p>这里我放在服务器的 &#x2F;root&#x2F;front_end 文件夹下<br>上传命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r [dist文件夹所在的绝对路径] [服务器用户名]@[服务器IP地址]:[目标服务器文件夹绝对路径]</span><br></pre></td></tr></table></figure><p><strong>以我的举例：</strong></p><img src="/posts/1718063250/4cbbf91d37bd4d6e8f402db4f015a488.png" class="" title="img"><p><strong>也可以使用 Xftp 向服务器传输文件，Mac用户推荐Termius</strong></p><h1 id="Step3：配置-Nginx"><a href="#Step3：配置-Nginx" class="headerlink" title="Step3：配置 Nginx"></a>Step3：配置 Nginx</h1><ol><li><p>在服务器上找到Nginx安装位置<br>默认在&#x2F;etc&#x2F;nginx</p></li><li><p>打开 &#x2F;etc&#x2F;nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/nginx</span><br></pre></td></tr></table></figure></li><li><p>修改nginx.conf</p></li></ol><p>我使用的Vs Code进行文件创建并写入</p><p><strong>方法：在Vs Code中安装以下插件，连接至服务器后，打开&#x2F;etc&#x2F;nginx</strong></p><img src="/posts/1718063250/f643cb89d48246338b911371727dca1b.png" class="" title="img"><p><strong>在 nginx.conf 中添加server，内容如下：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       3000;#自己设置端口号</span><br><span class="line">        server_name  njupt_patent  ;#自己设置项目名称</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   /root/front_end/dist;#这里写vue项目的所在地址</span><br><span class="line">            index  index.html;#这里是vue项目的首页，需要保证dist中有index.html文件</span><br><span class="line">        &#125;</span><br><span class="line">        location /api/ &#123;    # 会将接口地址/api开头的全部替换文下边配置的地址</span><br><span class="line">            proxy_pass http://[服务器ip地址]:[端口号];            #接口服务地址</span><br><span class="line">        &#125;</span><br><span class="line">        error_page   500 502 503 504  /50x.html;#错误页面</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置完 nginx.conf 后保存，执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 测试 Nginx 配置以确保没有语法错误</span></span><br><span class="line">nginx -t</span><br></pre></td></tr></table></figure><p>如果没有错误，重新加载Nginx以使更改生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl reload nginx</span><br></pre></td></tr></table></figure><ol start="4"><li>也可以直接重启nginx<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart nginx</span><br></pre></td></tr></table></figure></li></ol><h1 id="Step4：授权访问服务器中的文件夹"><a href="#Step4：授权访问服务器中的文件夹" class="headerlink" title="Step4：授权访问服务器中的文件夹"></a>Step4：授权访问服务器中的文件夹</h1><p>在服务器中打开 dist 所在的文件夹的最上级文件夹（一般是根目录），如：我的 dist 文件夹的绝对路径为 &#x2F;root&#x2F;front_end&#x2F;dist ，那么就打开：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /</span><br></pre></td></tr></table></figure><p><strong>输入如下命令授权访问 dist 文件夹：</strong></p><img src="/posts/1718063250/1da84f125a63437081e772b72a830d04.png" class="" title="img"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod -R 777 /root/</span><br></pre></td></tr></table></figure><h1 id="Step5：访问已经部署好的Vue项目"><a href="#Step5：访问已经部署好的Vue项目" class="headerlink" title="Step5：访问已经部署好的Vue项目"></a>Step5：访问已经部署好的Vue项目</h1><p><strong>在浏览器输入：</strong><br>服务器IP地址:自己设置端口号&#x2F;index.html<br><strong>即可进行访问</strong></p><h1 id="Step6：域名配置"><a href="#Step6：域名配置" class="headerlink" title="Step6：域名配置"></a>Step6：域名配置</h1><p>在上述 nginx.conf 中添加如下配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">listen 80; #监听端口，http服务默认监听80端口</span><br><span class="line">server_name example.com; #域名，最好需要注册的域名，而且还要解析域名</span><br><span class="line">location / &#123;</span><br><span class="line">proxy_pass http://example.com:[端口号];#代理转发地址</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h1 id="配置本地地址映射域名以及域名转发指定ip"><a href="#配置本地地址映射域名以及域名转发指定ip" class="headerlink" title="配置本地地址映射域名以及域名转发指定ip"></a>配置本地地址映射域名以及域名转发指定ip</h1><p>首先安装nginx,参加博客：<a href="https://www.cnblogs.com/qfb620/p/5508468.html">https://www.cnblogs.com/qfb620/p/5508468.html</a></p><p>按照博客写的访问127.0.0.1查看是否访问成功，成功即安装成功。</p><p>下一步就是配置127.0.0.1与域名scc.company.com的映射（也就是访问scc.company.com可以请求到本地指定端口的地址。我的项目在本地的8083端口，配置正确，就能访问到我的项目）</p><p>首先,通过switch hosts来添加本地对应域名的映射 127.0.0.1 sct.company.com</p><p>下一步，打开nginx.conf</p><p>找到server,配置如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">      listen       80;</span><br><span class="line">      server_name  sct.company.com;</span><br><span class="line"> </span><br><span class="line">      #charset koi8-r;</span><br><span class="line"> </span><br><span class="line">      #access_log  logs/host.access.log  main;</span><br><span class="line"> </span><br><span class="line">      location / &#123;</span><br><span class="line">          root   html;</span><br><span class="line">         index  index.html index.htm;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      location /custom-web/ &#123;</span><br><span class="line">      proxy_pass   http://127.0.0.1:8083;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>主要改了下面两个地方</p><pre><code>   server_name  sct.company.com;    location /custom-web/ &#123;    proxy_pass   http://127.0.0.1:8083;    &#125;</code></pre><p>好了，127.0.0.1对应域名sct.company.com配好了</p><p>记得重启nginx,进入到nginx的目录，</p><p>输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><p>进行重启。</p><img src="/posts/1718063250/20190617175148422.png" class="" title="img"><p>没有报错就是重启成功</p><p>然后清空浏览器缓存，我是清空了好几次，</p><p>又ping了一下sct.company.com，看请求的是不是本地，</p><img src="/posts/1718063250/20190617175330584.png" class="" title="img"><p>可以看到请求的是本地</p><p>这个时候，浏览器输入sct.company.com&#x2F;custom-web&#x2F;…访问一下项目地址 ,可以看到可以请求到tomcat上面的项目了</p><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;分割线&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>下面看下重定向，配置如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">      listen       80;</span><br><span class="line">      server_name  sct.lvmama.com;</span><br><span class="line"> </span><br><span class="line">      #charset koi8-r;</span><br><span class="line"> </span><br><span class="line">      #access_log  logs/host.access.log  main;</span><br><span class="line"> </span><br><span class="line">      #location / &#123;</span><br><span class="line">         # root   html;</span><br><span class="line">         # index  index.html index.htm;</span><br><span class="line">     # &#125;</span><br><span class="line">  </span><br><span class="line">  location / &#123;</span><br><span class="line">   rewrite ^/(.*)$ http://www.baidu.com/; </span><br><span class="line">   proxy_pass   http://10.200.4.120:80;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">      location /customization-back-web/ &#123;</span><br><span class="line">      proxy_pass   http://127.0.0.1:8083;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>主要是这个代码：</p><p>  location &#x2F; {<br>        rewrite ^&#x2F;(.*)$ <a href="http://www.baidu.com/">http://www.baidu.com/</a>;<br>        proxy_pass   <a href="http://10.200.4.120/">http://10.200.4.120:80</a>;<br>       }</p><p>nginx -s reload重启nginx </p><p>你输入sct.company.com就会跳转到百度</p><h1 id="nginx配置文件-通过域名访问"><a href="#nginx配置文件-通过域名访问" class="headerlink" title="nginx配置文件 通过域名访问"></a>nginx配置文件 通过域名访问</h1><p>解读Nginx配置文件，通过域名访问tomcat<br>第一次在linux 服务器上使用nginx 并指向tomcat 目录 通过域名 访问项目。遇到了很多坑，为了让自己更好的学习并吸收知识，特意总结了一下这次的经验。<br>首先我们需要了解一下nginx的组成部分，想必大家都是对他有所了解。<br>文件所在的路径是 &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf 文件夹下的nginx.conf。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">第一个原本的配置文件上是注释的，这里指的是nginx的用户权限，</span><br><span class="line">user nobody;</span><br><span class="line"></span><br><span class="line">设置最大的工作衍生进程数 这里默认是1</span><br><span class="line">worker_processes 1</span><br><span class="line"></span><br><span class="line">最大的连接数 设置最大的连接数默认为1024个连接数 </span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Http 的主要设置，这里可以添加多个server</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">每一个Server都是一个服务</span><br><span class="line">server&#123;</span><br><span class="line"><span class="meta">#</span><span class="bash">这里是过滤请求，/是所有请求都可以</span></span><br><span class="line">location /&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>下面部署nginx 并使其转发到tomcat下的重点在于server这个块。</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">      listen       80; #首先是nginx的监听端口默认为80</span><br><span class="line">      server_name  www.xxxx.com; #这里是你需要访问的域名地址</span><br><span class="line"><span class="meta">#</span><span class="bash">add_header <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span> <span class="string">&#x27;*&#x27;</span>;<span class="comment">#这里是http 域名跨域，报错时候添加的请求头，这样写所有请求都会进来，会很不安全。</span></span></span><br><span class="line">      #charset koi8-r;</span><br><span class="line">      #access_log  logs/host.access.log  main;#这里是 日志文件的生成路径</span><br><span class="line">      </span><br><span class="line"><span class="meta">#</span><span class="bash">详细介绍location</span></span><br><span class="line">      location / &#123;</span><br><span class="line">      #是监听的端口默认访问的地址，这里如果没有做tomcat的转发则会进入nginx的html目录下的index.html</span><br><span class="line">          root   html;</span><br><span class="line">          </span><br><span class="line">          #这里是编写监听到的请求所转发的端口号，即tomcat端口</span><br><span class="line">proxy_pass http://localhost:8081;</span><br><span class="line">          #Proxy Settings;</span><br><span class="line">          #proxy_redirect off;</span><br><span class="line">          #proxy_set_header Host $host;</span><br><span class="line">          #proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">          #proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">设置nginx 的默认显示页</span></span><br><span class="line">          index  index.html index.htm;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">设置http请求的请求头，使其在跨域访问上不会被浏览器阻止。ps:这里设置我发现没有用，后来还是在ajax过滤器中添加的 请求头，如果大家有知道这里怎么修改的，请留言大家一起学习。</span></span><br><span class="line">add_header &#x27;Access-Control-Allow-Origin&#x27; &#x27;*&#x27;;</span><br><span class="line">add_header &#x27;Access-Control-Allow-Methods&#x27; &#x27;GET, POST, OPTIONS&#x27;;</span><br><span class="line">add_header &#x27;Access-Control-Allow-Headers&#x27; &#x27;DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type&#x27;;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">      # redirect server error pages to the static page /50x.html</span><br><span class="line">      #</span><br><span class="line">      error_page   500 502 503 504  /50x.html;</span><br><span class="line">      location = /50x.html &#123;</span><br><span class="line">          root   html;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>下面是location的设置</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">设置服务器缓存</span><br><span class="line">1.添加一个location  ~.*\.(意思是所有.jpg后缀的文件)</span><br><span class="line">location  ~.*\.(jpg|png|gif)$&#123;</span><br><span class="line"></span><br><span class="line">2.设置该文件类型文件缓存的清除周期为30天</span><br><span class="line">expires  30d;</span><br><span class="line">&#125;</span><br><span class="line">location  ~.*\.(css|js)?$&#123;</span><br><span class="line"></span><br><span class="line">3.设置该文件类型文件缓存的清除周期为1小说</span><br><span class="line">expires  1h;</span><br><span class="line">&#125;</span><br><span class="line">这里注意 全部请求是/  而过滤的请求是\ </span><br></pre></td></tr></table></figure><p><strong>顺带提一下负载均衡</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Nginx 均衡负载的实现 简单提一下 均衡策略</span><br><span class="line">在http 里添加一个upstream 在这个里面依次填写 不同的ip以及端口 nginx </span><br><span class="line">upstream name&#123;</span><br><span class="line">server ip:端口号;</span><br><span class="line">server ip:端口号;</span><br><span class="line">server ip:端口号;</span><br><span class="line">server ip:端口号;</span><br><span class="line">&#125;</span><br><span class="line">nginx 的默认均衡策略是加权轮询 </span><br><span class="line">1.加权轮询策略</span><br><span class="line">nginx计算每个后端服务器的权重，然后自动分配权重最高的后端服务器来处理请求。</span><br><span class="line">加权轮询策略 使用 weight=1来给地址添加权重，权重越高，nginx会优先分配</span><br><span class="line"></span><br><span class="line">2.ip_hash策略</span><br><span class="line">nginx会记录这个访问的ip地址并且在一段时间中 分配给这个ip一个server。</span><br><span class="line">ip_hash 在upstream 的结尾加上  ip_hash; nginx 自动使用ip_hash</span><br><span class="line"></span><br><span class="line">3.url_hash 等.. 插件形式的均衡策略这里就不提了</span><br></pre></td></tr></table></figure><p><strong>设置完配置文件下面就是运行测试了。</strong></p><ol><li>进入nginx 启动文件的目录 &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin</li><li>启动服务 .&#x2F;nginx （这是在第一次启动时使用，或者进程被杀死时启动。）</li><li>重启服务 .&#x2F;nginx -s reload (这是在修改了配置文件的情况下，不需要杀死进程)</li><li>如果在使用 .&#x2F;nginx 命令时 linux 报错nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)证明这个80端口被nginx占用了，这个时候需要杀死进程 使用killall -9 nginx 或者使用 netstat -apn | grep 80 查询当前80端口 tcp 0 0 0.0.0.0:80 0.0.0.0:* LISTEN 13741&#x2F;nginx: master 然后使用kill -9 13741命令杀死进程.</li><li>启动nginx服务器就不会报错，如果配置文件出现错误，下面会显示错误的行号</li></ol><p>在浏览器上输入域名，nginx自动在nginx.conf中查找 server_name 对应的域名 的server 下的location跳转到proxy_pass 这里指的的 IP和端口。我这里设置的是8081端口。</p><img src="/posts/1718063250/20181024161732244" class="" title="img"><p>注意如果proxy_pass 配置的IP地址和域名解析的IP地址不同会出现</p><img src="/posts/1718063250/20181024162037108" class="" title="img"><p>这个问题我是在java代码中使用ajax拦截请求后加入到请求头中解决的。</p><p>在nginx上添加下面这几段并没有实际效果。<br>add_header ‘Access-Control-Allow-Origin’ ‘*’;<br>add_header ‘Access-Control-Allow-Methods’ ‘GET, POST, OPTIONS’;<br>add_header ‘Access-Control-Allow-Headers’ ‘DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type’;</p><h1 id="LINUX安装nginx并绑定域名详细教程"><a href="#LINUX安装nginx并绑定域名详细教程" class="headerlink" title="LINUX安装nginx并绑定域名详细教程"></a>LINUX安装nginx并绑定域名详细教程</h1><ol><li><p>安装依赖包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//一键安装上面四个依赖</span><br><span class="line">yum -y install gcc zlib zlib-devel pcre-devel openssl openssl-devel</span><br></pre></td></tr></table></figure></li><li><p>下载并解压安装包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//创建一个文件夹</span><br><span class="line">cd /usr/local</span><br><span class="line">mkdir nginx</span><br><span class="line">cd nginx</span><br><span class="line">//下载tar包</span><br><span class="line">wget http://nginx.org/download/nginx-1.13.7.tar.gz</span><br><span class="line">tar -xvf nginx-1.13.7.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>安装nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//进入nginx目录</span><br><span class="line">cd /usr/local/nginx</span><br><span class="line">//进入目录</span><br><span class="line">cd nginx-1.13.7</span><br><span class="line">//执行命令</span><br><span class="line">./configure</span><br><span class="line">//执行make命令</span><br><span class="line">make</span><br><span class="line">//执行make install命令</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></li><li><p>配置nginx.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">打开配置文件</span><br><span class="line">vi /usr/local/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure><p>将端口号改成没有被占用的端口（我这里用的是8066），因为可能apeache占用80端口，apeache端口尽量不要修改，我们选择修改nginx端口。</p></li></ol><p>localhost修改为你服务器ip地址。</p><img src="/posts/1718063250/20200512213707731.png" class="" title="img"><ol start="5"><li><p>启动nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx -s reload</span><br><span class="line">//如果出现报错：nginx: [error] open() ＂/usr/local/nginx/logs/nginx.pid＂ failed</span><br><span class="line"></span><br><span class="line">则运行： /usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure><p>再次启动即可！<br><strong>查看nginx进程是否启动：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep nginx</span><br></pre></td></tr></table></figure></li><li><p>若想使用外部主机连接上虚拟机访问端口(你的服务器ip地址)，需要关闭虚拟机的防火墙：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">centOS6及以前版本使用命令： systemctl stop iptables.service</span><br><span class="line"></span><br><span class="line">centOS7关闭防火墙命令： systemctl stop firewalld.service</span><br></pre></td></tr></table></figure></li></ol><p><strong>随后访问该ip即可看到nginx界面。</strong></p><img src="/posts/1718063250/20200512214119545.png" class="" title="img"><ol start="7"><li>nginx安装完成后，我们来绑定域名<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">打开配置文件</span><br><span class="line">vi /usr/local/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure></li></ol><p>修改监听端口listen为: 80;<br>修改server_name为 <a href="http://www.xxxx.com(这里是你的域名)/">www.xxxx.com（这里是你的域名）</a>;<br>在下面server标签里添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">           #转发地址</span><br><span class="line">           proxy_pass http://localhost:8066;</span><br><span class="line">           root   html;</span><br><span class="line">           index  index.html index.htm;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><img src="/posts/1718063250/20200512214633218.png" class="" title="img"><ol start="8"><li>然后保存文件，重启nginx，重新访问服务器IP地址，你会发现，你的域名也可以直接跳到你项目的页面</li></ol><img src="/posts/1718063250/20200512215045638.png" class="" title="img"><hr><h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><ol><li><a href="https://blog.csdn.net/NJR10byh/article/details/123267776">Linux服务器使用Nginx部署前端项目+ 域名配置</a></li><li><a href="https://blog.csdn.net/luo_yu_1106/article/details/92662138">nginx配置本地地址映射域名以及域名转发指定ip</a></li><li><a href="https://blog.csdn.net/qq_15724141/article/details/83346093">nginx配置文件 通过域名访问</a></li><li><a href="https://blog.csdn.net/qq_38159467/article/details/106085525">LINUX安装nginx并绑定域名详细教程</a></li></ol><hr><center><font color=red>=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">VUE部署到linux下的Nginx，实现远程代理访问</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="VUE" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/VUE/"/>
    
    <category term="前端" scheme="https://zml3589110.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Nginx" scheme="https://zml3589110.github.io/categories/Nginx/"/>
    
    
    <category term="网页" scheme="https://zml3589110.github.io/tags/%E7%BD%91%E9%A1%B5/"/>
    
    <category term="JavaScript" scheme="https://zml3589110.github.io/tags/JavaScript/"/>
    
    <category term="VUE" scheme="https://zml3589110.github.io/tags/VUE/"/>
    
    <category term="Nginx" scheme="https://zml3589110.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Nginx安装并部署VUE</title>
    <link href="https://zml3589110.github.io/posts/588013124.html"/>
    <id>https://zml3589110.github.io/posts/588013124.html</id>
    <published>2023-12-01T13:13:20.000Z</published>
    <updated>2023-12-04T09:30:34.444Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是Nginx"><a href="#什么是Nginx" class="headerlink" title="什么是Nginx"></a>什么是Nginx</h1><p>一款高性能、轻量级Web服务软件<br>稳定性高<br>系统资源消耗低<br>对HTTP并发连接的处理能力高<br>单台物理服务器可支持30000~50000个并发请求</p><h1 id="Ubuntu如何部署vue项目操作步骤"><a href="#Ubuntu如何部署vue项目操作步骤" class="headerlink" title="Ubuntu如何部署vue项目操作步骤"></a>Ubuntu如何部署vue项目操作步骤</h1><ol><li>安装nginx。</li><li>在vue项目的根目录下履行“npm run bulid:prod”打包vue项目。</li><li>打包完成后会生成一个dist目录，将其上传到服务器中。</li><li>修改nginx配置文件&#x2F;etc&#x2F;nginx&#x2F;sites-enabled&#x2F;default，例如：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line"></span><br><span class="line">listen 80;</span><br><span class="line"></span><br><span class="line">listen [::]:80;</span><br><span class="line"></span><br><span class="line">server_name 127.0.0.1:80; # 服务器域名或IP+端口</span><br><span class="line"></span><br><span class="line">root /data/blog/backend/dist; # 打包后的dist目录</span><br><span class="line"></span><br><span class="line">index index.html;</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line"></span><br><span class="line">try_files $uri $uri/ @router; # 指向下面的 @router否则会出现 404</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 对应上面的 @router,主要Vue要求其实不是真实路径，没法找到文件，需要重定向到 index.html 中，然后交给路由处理</span></span><br><span class="line"></span><br><span class="line">location @router &#123;</span><br><span class="line"></span><br><span class="line">rewrite ^.*$ /index.html last;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>输入命令重新加载配置文件便可。<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure></li></ol><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>系统：ubuntu20<br>安装nginx：<br>可以先创建一个nginx目录，我的目录在 &#x2F;usr&#x2F;local&#x2F;nginx下</p><h1 id="一、安装nginx"><a href="#一、安装nginx" class="headerlink" title="一、安装nginx"></a>一、安装nginx</h1><ol><li>安装依赖</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install gcc zlib1g-dev libpcre3 libpcre3-dev libssl-dev</span></span><br></pre></td></tr></table></figure><ol start="2"><li>下载nginx</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget https://nginx.org/download/nginx-1.13.4.tar.gz</span></span><br></pre></td></tr></table></figure><p>也可以手动下载：nginx官网 ：<a href="http://nginx.org/en/download.html">http://nginx.org/en/download.html</a></p><ol start="3"><li><p>解压并进入目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tar -xvf nginx-1.13.4.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> nginx-1.13.4/</span></span><br></pre></td></tr></table></figure></li><li><p>编译和安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./configure</span></span><br><span class="line"><span class="meta">#</span><span class="bash">编译</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo make</span></span><br><span class="line"><span class="meta">#</span><span class="bash">编译成功之后，就可以安装了</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo make install</span></span><br></pre></td></tr></table></figure></li><li><p>查看nginx版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./configure</span></span><br><span class="line"><span class="meta">#</span><span class="bash">进入nginx安装目录</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/nginx/</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看版本</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sbin/nginx -v</span></span><br><span class="line">nginx version: nginx/1.13.4</span><br></pre></td></tr></table></figure></li><li><p>启动【我安装到 &#x2F;usr&#x2F;local&#x2F;nginx目录下了】</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo /usr/<span class="built_in">local</span>/nginx/sbin/nginx</span></span><br><span class="line"><span class="meta">#</span><span class="bash">查看是否启动成功 端口默认是80端口</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> curl 127.0.0.1</span></span><br><span class="line"><span class="meta">#</span><span class="bash">如果返回html 里面有 Welcome to nginx! 则成功</span></span><br></pre></td></tr></table></figure><ol start="7"><li>启动nginx<br>进入&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin目录，输入.&#x2F;nginx即可启动nginx</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nginx</span><br></pre></td></tr></table></figure><ol start="8"><li>如果启动报错：nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)，说明80端口被占用，使用如下命令：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fuser -k 80/tcp</span><br></pre></td></tr></table></figure></li></ol><p><strong>关闭nginx</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nginx -s quit  或者 ./nginx -s stop</span><br></pre></td></tr></table></figure><p><strong>重启nginx</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nginx -s reload</span><br></pre></td></tr></table></figure><p><strong>查看nginx进程</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux|grep nginx</span><br></pre></td></tr></table></figure><ol start="9"><li>设置nginx开机启动<br><strong>只需在rc.local增加启动代码即可。</strong><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/rc.local</span><br></pre></td></tr></table></figure><strong>按键盘 i 然后在底部增加：</strong><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">/usr/<span class="built_in">local</span>/nginx 你的nginx安装的路径</span></span><br><span class="line">/usr/local/nginx/sbin/nginx</span><br></pre></td></tr></table></figure></li></ol><p><strong>nginx安装完成</strong></p><h2 id="安装nginx说明2"><a href="#安装nginx说明2" class="headerlink" title="安装nginx说明2"></a>安装nginx说明2</h2><ol><li>下载压缩包<br>下载地址：<a href="https://nginx.org/en/download.html">nginx下载</a></li></ol><img src="/posts/588013124/20191206211604680.png" class=""><ol start="2"><li>解压<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf nginx-1.17.6.tar.gz</span><br></pre></td></tr></table></figure></li><li>安装依赖<br>进入nginx的安装目录</li></ol><img src="/posts/588013124/20191206212015540.png" class=""><p><strong>执行命令后会发现出现错误，很多not found， 我们需要添加依赖库。</strong></p><ul><li><p>1、PCRE库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">./configure: error: the HTTP rewrite module requires the PCRE library.</span><br><span class="line">You can either disable the module by using --without-http_rewrite_module</span><br><span class="line">option, or install the PCRE library into the system, or build the PCRE library</span><br><span class="line">statically from the source with nginx by using --with-pcre=&lt;path&gt; option.</span><br></pre></td></tr></table></figure><p><strong>安装PCRE：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libpcre3 libpcre3-dev</span><br></pre></td></tr></table></figure></li><li><p>2、zlib库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">./configure: error: the HTTP gzip module requires the zlib library.</span><br><span class="line">You can either disable the module by using --without-http_gzip_module</span><br><span class="line">option, or install the zlib library into the system, or build the zlib library</span><br><span class="line">statically from the source with nginx by using --with-zlib=&lt;path&gt; option.</span><br></pre></td></tr></table></figure></li></ul><p>** 解决：**</p><p>下载压缩包<a href="http://zlib.net/">http://zlib.net/</a></p><img src="/posts/588013124/20191206212711572.png" class=""><ul><li>解压缩<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf zlib-1.2.11.tar.gz</span><br></pre></td></tr></table></figure></li><li>进入文件夹中，依次执行</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>成功，会出现</p><img src="/posts/588013124/20191206213142831.png" class=""><ol start="4"><li>安装Nginx<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make install</span><br></pre></td></tr></table></figure></li></ol><img src="/posts/588013124/20191206213300526.png" class=""><ul><li>1、 查看nginx位置</li></ul><img src="/posts/588013124/2019120621343843.png" class=""><ul><li>2、进入&#x2F;usr&#x2F;local&#x2F;nginx</li></ul><img src="/posts/588013124/20191206213544801.png" class=""><ul><li>3、nginx启动命令<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">首先进入sbin</span></span><br><span class="line">./nginx 开启</span><br><span class="line">./nginx -s stop 停止</span><br><span class="line">./nginx -s quit</span><br><span class="line">./nginx -s reload</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">对 nginx 进行重启相当于先停止再启动，即先执行停止命令再执行启动命令</span></span><br><span class="line">./nginx -s quit</span><br><span class="line">./nginx</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">重新加载配置文件</span></span><br><span class="line">    （当修改nginx.conf 修改，要想让配置生效需要重启nginx，使用./nginx -s reload不用先停止nginx再        </span><br><span class="line">     启动，即可将配置信息在nginx中生效。）</span><br><span class="line">./nginx -s reload</span><br></pre></td></tr></table></figure></li></ul><h2 id="一、编译安装Nginx服务"><a href="#一、编译安装Nginx服务" class="headerlink" title="一、编译安装Nginx服务"></a>一、编译安装Nginx服务</h2><p>下载安装包</p><ol><li>关闭防火墙将nginx所需软件包到&#x2F;opt目录下<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br><span class="line">setenforce 0</span><br><span class="line"></span><br><span class="line">nginx-1.12.0.tar.gz</span><br></pre></td></tr></table></figure></li></ol><img src="/posts/588013124/20210108161005237.png" class="" title="img"><ol start="2"><li>安装依赖包<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install pcre-devel zlib-devel gcc gcc-c++ make</span><br></pre></td></tr></table></figure></li></ol><img src="/posts/588013124/20210108161659919.png" class="" title="img"><ol start="3"><li>创建运行用户、组<br><strong>（Nginx 服务程序默认以 nobody 身份运行，建议为其创建专门的用户账号，以便更准确地控制其访问权限）</strong><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd -M -s /sbin/nologin nginx</span><br></pre></td></tr></table></figure></li></ol><img src="/posts/588013124/20210108161927441.png" class="" title="img"><ol start="4"><li>编译安装Nginx<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cd /opt</span><br><span class="line">tar zxvf nginx-1.12.0.tar.gz -C /opt/</span><br><span class="line"></span><br><span class="line">cd nginx-1.12.0/</span><br><span class="line">./configure \</span><br><span class="line">--prefix=/usr/local/nginx \      #指定nginx的安装路径</span><br><span class="line">--user=nginx \#指定用户名</span><br><span class="line">--group=nginx \#指定组名</span><br><span class="line">--with-http_stub_status_module#启用 http_stub_status_module 模块以支持状态统计</span><br><span class="line"></span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line">ln -s /usr/local/nginx/sbin/nginx /usr/local/sbin/#让系统识别nginx的操作命令</span><br></pre></td></tr></table></figure></li></ol><img src="/posts/588013124/20210108163831472.png" class="" title="img"><ol start="5"><li>检查、启动、重启、停止 nginx服务<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">nginx -t#检查配置文件是否配置正确</span><br><span class="line">nginx#启动</span><br><span class="line">cat /usr/local/nginx/logs/nginx.pid#先查看nginx的PID号</span><br><span class="line">kill -3 &lt;PID号&gt;</span><br><span class="line">kill -s QUIT &lt;PID号&gt;#停止</span><br><span class="line">killall -3 nginx</span><br><span class="line">killall -s QUIT nginx</span><br><span class="line"></span><br><span class="line">kill -1 &lt;PID号&gt;#重载</span><br><span class="line">kill -s HUP &lt;PID号&gt;</span><br><span class="line">killall -1 nginx</span><br><span class="line">killall -s HUP nginx</span><br><span class="line"><span class="meta">#</span><span class="bash">日志分隔，重新打开日志文件</span></span><br><span class="line">kill -USR1 &lt;PID号&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash">平滑升级</span></span><br><span class="line">kill -USR2 &lt;PID号&gt;</span><br></pre></td></tr></table></figure></li></ol><img src="/posts/588013124/20210109092954580.png" class="" title="img"><ol start="6"><li>添加 Nginx 系统服务</li></ol><ul><li><p>方法一：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/init.d/nginx</span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash">chkconfig: - 99 20</span></span><br><span class="line"><span class="meta">#</span><span class="bash">description:Nginx Service Control Script</span></span><br><span class="line">COM=&quot;/usr/local/nginx/sbin/nginx&quot;</span><br><span class="line">PID=&quot;/usr/local/nginx/logs/nginx.pid&quot;</span><br><span class="line">case &quot;$1&quot; in</span><br><span class="line">start)</span><br><span class="line"><span class="meta">  $</span><span class="bash">COM</span></span><br><span class="line">;;</span><br><span class="line"></span><br><span class="line">stop)</span><br><span class="line">  kill -s QUIT $(cat $PID)</span><br><span class="line">;;</span><br><span class="line"></span><br><span class="line">restart)</span><br><span class="line"><span class="meta">  $</span><span class="bash">0 stop</span></span><br><span class="line"><span class="meta">  $</span><span class="bash">0 start</span></span><br><span class="line">;;</span><br><span class="line"></span><br><span class="line">reload)</span><br><span class="line">  kill -s HUP $(cat $PID)</span><br><span class="line">;;</span><br><span class="line"></span><br><span class="line">*)</span><br><span class="line">echo &quot;Usage: $0 &#123;start|stop|restart|reload&#125;&quot;</span><br><span class="line">exit 1</span><br><span class="line"></span><br><span class="line">esac</span><br><span class="line">exit 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">chmod +x /etc/init.d/nginx</span><br><span class="line">chkconfig --add nginx#添加为系统服务</span><br><span class="line">systemctl stop nginx</span><br><span class="line">systemctl start nginx</span><br></pre></td></tr></table></figure></li><li><p>方法二：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">vim /lib/systemd/system/nginx.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=nginx</span><br><span class="line">After=network.target</span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">PIDFile=/usr/local/nginx/logs/nginx.pid</span><br><span class="line">ExecStart=/usr/local/nginx/sbin/nginx</span><br><span class="line">ExecrReload=/bin/kill -s HUP $MAINPID</span><br><span class="line">ExecrStop=/bin/kill -s QUIT $MAINPID</span><br><span class="line">PrivateTmp=true</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line">chmod 754 /lib/systemd/system/nginx.service</span><br><span class="line">systemctl start nginx.service</span><br><span class="line">systemctl enable nginx.service</span><br></pre></td></tr></table></figure></li></ul><img src="/posts/588013124/20210109094331370.png" class="" title="img"><img src="/posts/588013124/2021010909522079.png" class="" title="img"><h3 id="二、认识Nginx服务的主配置文件-nginx-conf"><a href="#二、认识Nginx服务的主配置文件-nginx-conf" class="headerlink" title="二、认识Nginx服务的主配置文件 nginx.conf"></a>二、认识Nginx服务的主配置文件 nginx.conf</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/nginx/conf/nginx.conf </span><br></pre></td></tr></table></figure><ol><li>全局配置<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">user nobody; <span class="comment">#运行用户，若编译时未指定则默认为 nobody</span></span></span><br><span class="line">worker_processes 1; #工作进程数量，可配置成服务器内核数 * 2</span><br><span class="line"><span class="meta">#</span><span class="bash">error_log logs/error.log; <span class="comment">#错误日志文件的位置</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">pid logs/nginx.pid; <span class="comment">#PID 文件的位置</span></span></span><br></pre></td></tr></table></figure></li></ol><img src="/posts/588013124/20210109100647777.png" class="" title="img"><ol start="2"><li>I&#x2F;O 事件配置<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">events &#123;</span><br><span class="line">    use epoll; #使用 epoll 模型，2.6及以上版本的系统内核，建议使用epoll模型以提高性能</span><br><span class="line">    worker_connections 4096; #每个进程处理 4096 个连接</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash">如提高每个进程的连接数还需执行“<span class="built_in">ulimit</span> -n 65535”命令临时修改本地每个进程可以同时打开的最大文件数。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">在Linux平台上，在进行高并发TCP连接处理时，最高的并发数量都要受到系统对用户单一进程同时可打开文件数量的限制(这是因为系统为每个TCP连接都要创建一个socket句柄，每个socket句柄同时也是一个文件句柄)。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">可使用<span class="built_in">ulimit</span> -a命令查看系统允许当前用户进程打开的文件数限制.</span></span><br></pre></td></tr></table></figure></li></ol><img src="/posts/588013124/20210109104817851.png" class="" title="img"><img src="/posts/588013124/20210109100216697.png" class="" title="img"><ol start="3"><li>HTTP 配置<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#文件扩展名与文件类型映射表</span></span></span><br><span class="line">    include       mime.types;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#默认文件类型</span></span></span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#日志格式设定</span></span></span><br><span class="line">    #log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">    #                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">    #                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#访问日志位置</span></span></span><br><span class="line">    #access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#支持文件发送(下载)</span></span></span><br><span class="line">    sendfile        on;</span><br><span class="line"><span class="meta"> #</span><span class="bash"><span class="comment">#此选项允许或禁止使用socke的TCP_CORK的选项（发送数据包前先缓存数据），此选项仅在使用sendfile的时候使用</span></span></span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#连接保持超时时间，单位是秒</span></span></span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#gzip模块设置，设置是否开启gzip压缩输出</span></span></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#Web 服务的监听配置</span></span></span><br><span class="line">server &#123;</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#监听地址及端口</span></span></span><br><span class="line">listen 80; </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#站点域名，可以有多个，用空格隔开</span></span></span><br><span class="line">server_name www.lic.com;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#网页的默认字符集</span></span></span><br><span class="line">charset utf-8;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#根目录配置</span></span></span><br><span class="line">location / &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#网站根目录的位置/usr/local/nginx/html</span></span></span><br><span class="line">root html;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#默认首页文件名</span></span></span><br><span class="line">index index.html index.htm;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#内部错误的反馈页面</span></span></span><br><span class="line">error_page 500 502 503 504 /50x.html;</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#错误页面配置</span></span></span><br><span class="line">location = /50x.html &#123;</span><br><span class="line">root html;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><img src="/posts/588013124/20210109104601894.png" class="" title="img"><img src="/posts/588013124/20210109105457261.png" class="" title="img"><img src="/posts/588013124/20210109105124101.png" class="" title="img"><img src="/posts/588013124/20210109105253209.png" class="" title="img"><ol start="4"><li>日志格式设定：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">remote_addr与<span class="variable">$http_x_forwarded_for</span>用以记录客户端的ip地址；</span></span><br><span class="line"><span class="meta">$</span><span class="bash">remote_user：用来记录客户端用户名称；</span></span><br><span class="line"><span class="meta">$</span><span class="bash">time_local： 用来记录访问时间与时区；</span></span><br><span class="line"><span class="meta">$</span><span class="bash">request： 用来记录请求的url与http协议；</span></span><br><span class="line"><span class="meta">$</span><span class="bash">status： 用来记录请求状态；成功是200，</span></span><br><span class="line"><span class="meta">$</span><span class="bash">body_bytes_sent ：记录发送给客户端文件主体内容大小；</span></span><br><span class="line"><span class="meta">$</span><span class="bash">http_referer：用来记录从那个页面链接访问过来的；</span></span><br><span class="line"><span class="meta">$</span><span class="bash">http_user_agent：记录客户浏览器的相关信息；</span></span><br><span class="line"></span><br><span class="line">通常web服务器放在反向代理的后面，这样就不能获取到客户的IP地址了，通过$remote_add拿到的IP地址是反向代理服务器的iP地址。反向代理服务器在转发请求的http头信息中，可以增加x_forwarded_for信息，用以记录原有客户端的IP地址和原来客户端的请求的服务器地址。</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">location常见配置指令，root、alias、proxy_pass</span><br><span class="line"></span><br><span class="line">root（根路径配置）：请求www.lic.com/test，会返回文件/usr/local/nginx/html/test/index.html</span><br><span class="line"></span><br><span class="line">alias（别名配置）：请求www.lic.com/test，会返回文件/usr/local/nginx/html/index.html</span><br></pre></td></tr></table></figure><img src="/posts/588013124/2021010912200345.png" class="" title="img"><img src="https://img-blog.csdnimg.cn/20210109122117163.png"><img src="https://img-blog.csdnimg.cn/20210109122148161.png"><img src="/posts/588013124/20210109122213224.png" class="" title="img"><img src="/posts/588013124/20210109122501166.png" class="" title="img"><h1 id="二、部署项目"><a href="#二、部署项目" class="headerlink" title="二、部署项目"></a>二、部署项目</h1><ol><li>打开vue项目，在控制台输入<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure>这是我打包好的：默认会生成一个dist文件</li></ol><img src="/posts/588013124/20210104155416123.png" class="" title="img"><ol start="2"><li><p>进入nginx安装目录下，有一个html文件，默认里边有一个index.html文件，删掉</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf *</span><br></pre></td></tr></table></figure></li><li><p>把生成的dist目录下的静态资源传输到服务器</p></li></ol><img src="/posts/588013124/20210104155519139.png" class="" title="img"><p><strong>注意：我自己为了方便上传就将这个文件创建了软链接，然后指向了共享文档里了</strong></p><ol start="4"><li>修改配置文件<br><strong>此外，进入cd &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf目录可修改nginx的配置文件：</strong><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim nginx.conf</span><br></pre></td></tr></table></figure></li></ol><p><strong>这是我的：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">       listen       80;</span><br><span class="line">       server_name  localhost;</span><br><span class="line"></span><br><span class="line">       #charset koi8-r;</span><br><span class="line"></span><br><span class="line">       #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">       root   html; #配置自己的静态文件的路径，就是刚刚将打包的vue项目上传的路径，我这里是nginx根路径下的html文件中</span><br><span class="line"></span><br><span class="line">       location / &#123;</span><br><span class="line">            # root   html;</span><br><span class="line">           index  index.html index.htm;</span><br><span class="line">           try_files $uri $uri/ /index.html;</span><br><span class="line">           #需要指向下面的@router否则会出现vue的路由在nginx中刷新出现404，两种写法，这里需要在下边配置router</span><br><span class="line">          # try_files $uri $uri/ @router;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">       # location @router&#123;</span><br><span class="line">       #    rewrite ^.*$ /index.html last;</span><br><span class="line">       #&#125;</span><br><span class="line"></span><br><span class="line">      # 6、这里是解决跨域问题，将你后端的地址写在proxy_pass 后面就可以了                    </span><br><span class="line">      </span><br><span class="line">       location /api/ &#123;</span><br><span class="line">           #rewrite ^.+api/?(.*)$ /$1 break;  #这样写有问题,在网上看有人这样写，发现有问题</span><br><span class="line">           rewrite ^/api/(.*)$ /$1 break;  #必须的写这个，使用nginx的rewrite对uri进行重写  下面这行也要改为api </span><br><span class="line">           proxy_pass http://10.1.0.111:8888/; #跨域转发路由地址</span><br><span class="line">           proxy_redirect off;</span><br><span class="line">           proxy_set_header Host $host;</span><br><span class="line">           proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">           proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">       # redirect server error pages to the static page /50x.html</span><br><span class="line">       #</span><br><span class="line">       error_page   500 502 503 504  /50x.html;</span><br><span class="line">       location = /50x.html &#123;</span><br><span class="line">           root   html;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>这样就可以了<br>记得要开启端口号</p><ol start="5"><li>开放 8080 端口</li></ol><p>1、检查防火墙状态<br><strong>ubuntu</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw status</span><br></pre></td></tr></table></figure><p><strong>centos</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw disable</span><br></pre></td></tr></table></figure><p><strong>running 表示防火墙是开启的，如果你看到的是 not running，则表示防火墙关闭，</strong></p><p>2、关闭防火墙：<br><strong>ubuntu</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --state</span><br></pre></td></tr></table></figure><p>3、开放 8080 端口<br><strong>ubuntu</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw allow 22</span><br></pre></td></tr></table></figure><p><strong>centos</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=8080/tcp --permanent</span><br></pre></td></tr></table></figure><p>4、重启防火墙</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart firewalld.service</span><br></pre></td></tr></table></figure><p>5、重新载入配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>6、重启nginx<br>在&#x2F;nginx&#x2F;sbin&#x2F;目录下</p><p>重启：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nginx -s reload</span><br></pre></td></tr></table></figure><p>查看nginx进程：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux|grep nginx</span><br></pre></td></tr></table></figure><h2 id="部署vue前台代码"><a href="#部署vue前台代码" class="headerlink" title="部署vue前台代码"></a>部署vue前台代码</h2><h3 id="1、打包前台代码"><a href="#1、打包前台代码" class="headerlink" title="1、打包前台代码"></a>1、打包前台代码</h3><p>VScode中执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run start</span><br></pre></td></tr></table></figure><p>在项目的文件夹里有个dist文件夹</p><img src="/posts/588013124/20191206214213585.png" class="" title="img"><p>里面的文件，全部复制到&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;html中</p><img src="/posts/588013124/20191206214248497.png" class="" title="img"><img src="/posts/588013124/2019120621434736.png" class="" title="img"><h3 id="2、修改配置文件"><a href="#2、修改配置文件" class="headerlink" title="2、修改配置文件"></a>2、修改配置文件</h3><p><strong>进到conf目录下，有个nginx.conf，先备份（好习惯）</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp nginx.conf nginx.conf.back</span><br></pre></td></tr></table></figure><img src="/posts/588013124/20191206214501256.png" class="" title="img"><p>需要修改，</p><img src="/posts/588013124/20191206214827154.png" class="" title="img"><p>重新加载配置文件即可。</p><h1 id="报错解决"><a href="#报错解决" class="headerlink" title="报错解决"></a>报错解决</h1><ol><li><p><strong>404: Connection refused) while connecting to upstream, client: 172.16.54.1, server: localhost, request: “POST &#x2F;api&#x2F;accountApi&#x2F;accoun t&#x2F;loginAccount HTTP&#x2F;1.1”, upstream: “<a href="http://10.2.0.126:8888/api/accountApi/account/loginAccount%E2%80%9D">http://10.2.0.126:8888/api/accountApi/account/loginAccount”</a>, host: “172.16.5</strong><br>一般在nginx.conf中配置不对，跨域访问就会出现404，找不到页面的情况：<br>一般安装我上边跨域配置，就不会出现了。</p></li><li><p>vue项目，npm run build时点击路由切换，第一次点击没问题，再点不会切换报错如下图<br>Uncaught SyntaxError: Unexpected token ‘＜‘</p></li></ol><img src="/posts/588013124/20210104161229905.png" class="" title="img"><p>因为在将我的项目（在路由中用了懒加载）改为 history模式的过程中，有时候发现会出现chunk加载出错的情况，打开chrome的network发现那个chunk加载404了，是因为请求的url中多了一层路径。我在这里发现了解决方案。</p><p>LinusBorg说，因为在 history模式中切换路由时，我们是真正改变了页面的url路径，所以webpack的runtime会认为它位于 example.com&#x2F;some&#x2F;path。如果 publicPath是设置的相对路径，那么webpack加载chunk时可能会变成 example.com&#x2F;some&#x2F;path&#x2F;static&#x2F;js&#x2F;3.js这样的路径，然而chunk的真正路径是 example.com&#x2F;static&#x2F;js&#x2F;3.js，所以我们需要将 publicPath设置为绝对路径（ publicPath: ‘&#x2F;’）来解决这个问题。<br>具体查看：<a href="https://www.jb51.net/article/162268.htm">https://www.jb51.net/article/162268.htm</a> 讲解很详细<br>解决访问：在config.index中加上：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">    publicPath: &#x27;/&#x27;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整的：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line"> publicPath:&#x27;/&#x27;, //配置该路径，nginx中，进行路由转发，才可找到</span><br><span class="line"> devServer: &#123;</span><br><span class="line">    historyApiFallback: true,</span><br><span class="line">    open: true,</span><br><span class="line">    proxy: &#123;</span><br><span class="line">      &#x27;/api&#x27;: &#123;</span><br><span class="line">      </span><br><span class="line">      //  target: &#x27;http://localhost:8888/&#x27;,//设置你调用的接口域名和端口号 别忘了加http</span><br><span class="line">        changeOrigin: true,    //這裡true表示实现跨域</span><br><span class="line">        pathRewrite: &#123;</span><br><span class="line">          &#x27;^/api&#x27;: &#x27;/&#x27; //这里理解成用‘/api’代替target里面的地址，后面组件中我们掉接口时直接用api代替 比如我要调用&#x27;http://40.00.100.100:3002/user/add&#x27;，直接写‘/api/user/add’即可</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完美解决问题</p><hr><h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><ol><li><a href="https://blog.csdn.net/sunrj_niu/article/details/112181688">vue项目部署到nginx（超级详细）以及报错解决</a></li><li><a href="https://yuntue.com/post/74325.html">Ubuntu如何部署vue项目</a></li><li><a href="https://blog.csdn.net/weixin_42361127/article/details/103429823">Ubuntu安装Nginx,并部署vue前端代码</a></li><li><a href="https://blog.csdn.net/weixin_51432770/article/details/112350471">Nginx网站服务配置，图文详解（超详细）</a></li></ol><hr><center><font color=red>=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">VUE部署到linux下的Nginx，实现远程代理访问</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="VUE" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/VUE/"/>
    
    <category term="前端" scheme="https://zml3589110.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Nginx" scheme="https://zml3589110.github.io/categories/Nginx/"/>
    
    
    <category term="网页" scheme="https://zml3589110.github.io/tags/%E7%BD%91%E9%A1%B5/"/>
    
    <category term="JavaScript" scheme="https://zml3589110.github.io/tags/JavaScript/"/>
    
    <category term="VUE" scheme="https://zml3589110.github.io/tags/VUE/"/>
    
    <category term="Nginx" scheme="https://zml3589110.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu软连接</title>
    <link href="https://zml3589110.github.io/posts/3647967481.html"/>
    <id>https://zml3589110.github.io/posts/3647967481.html</id>
    <published>2023-12-01T08:21:20.000Z</published>
    <updated>2023-12-04T06:01:18.662Z</updated>
    
    <content type="html"><![CDATA[<h1 id="软链接基础"><a href="#软链接基础" class="headerlink" title="软链接基础"></a>软链接基础</h1><p><strong>建立软连接</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s 原目录 </span><br></pre></td></tr></table></figure><p><strong>删除软连接</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm  或者强制删除  -rf </span><br></pre></td></tr></table></figure><p><strong>创建软连接</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ln -s 源地址   目的地址</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  列如：Ubuntu文件系统rootfs_dir软连接到 /home/lp目录下</span><br><span class="line">  ln  -s  /opt/Linux/root_dir  /home/lp/roo_dir 就OK了</span><br></pre></td></tr></table></figure><h1 id="方法汇总"><a href="#方法汇总" class="headerlink" title="方法汇总"></a>方法汇总</h1><p><strong>一、什么是软连接</strong><br>软连接（Symbolic Link）也叫软链接，是一种特殊的文件，其作用类似于Windows系统下的快捷方式。软连接指向一个文件或目录的路径，当我们打开软连接时，实际上是访问软连接所指向的文件或目录。</p><p><strong>二、创建软连接</strong><br>在Ubuntu系统中，我们可以使用ln命令来创建软连接。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /path/to/file /path/to/link</span><br></pre></td></tr></table></figure><p>其中，-s代表创建软链接，&#x2F;path&#x2F;to&#x2F;file是要软链接的源文件或目录，&#x2F;path&#x2F;to&#x2F;link是软链接文件的路径。</p><p><strong>三、查看软链接</strong><br>我们可以通过ls命令来查看软链接。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l path/to/link</span><br></pre></td></tr></table></figure><p>-l代表以详细信息列表的形式显示文件或目录的属性，path&#x2F;to&#x2F;link是软链接文件的路径。</p><p><strong>四、删除软链接</strong></p><ul><li><ol><li>使用rm命令删除软链接<br>我们可以使用rm命令来删除软连接。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm /path/to/link</span><br></pre></td></tr></table></figure></li></ol></li></ul><p>其中，&#x2F;path&#x2F;to&#x2F;link是软链接文件的路径。执行此命令后，软链接文件将被从系统中删除。</p><ul><li><ol start="2"><li>使用unlink命令删除软链接<br>与rm命令不同的是，我们也可以使用unlink命令来删除软连接。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unlink /path/to/link</span><br></pre></td></tr></table></figure></li></ol></li></ul><p>其中，&#x2F;path&#x2F;to&#x2F;link是软链接文件的路径。与rm命令不同的是，unlink命令只能用来删除软链接文件，而不能删除其他类型的文件。</p><ul><li><ol start="3"><li>手动删除软链接文件<br>除了使用命令删除软链接外，我们也可以手动删除软链接文件。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm /path/to/link_file</span><br></pre></td></tr></table></figure></li></ol></li></ul><p>其中，&#x2F;path&#x2F;to&#x2F;link_file是软链接文件所在的路径，执行此命令后，软链接文件将被从系统中删除。</p><p><strong>五、注意事项</strong></p><p>在删除软连接文件时需要注意以下几点：</p><ol><li><p>删除软链接并不会删除源文件<br>当我们删除软链接文件时，实际上是在删除软链接文件的记录，并不会删除源文件或目录。</p></li><li><p>删除软链接可能会影响程序功能<br>当软链接文件关联到一个程序的文件夹时，删除软链接文件可能会影响程序的正常运行。因此，在删除软链接文件之前需要确认软链接文件是否与程序相关联。</p></li><li><p>删除软链接需要确认权限<br>删除软链接文件需要具有足够的权限。如果当前用户没有足够的权限，则需要切换到具有删除权限的用户。</p></li></ol><p><strong>六、总结</strong></p><p>通过本文的介绍，我们了解了软连接的基本概念和创建、删除软链接的方法。在删除软链接时，我们需要注意软链接的相关性和删除权限。同时，在使用命令删除软链接时，也可以手动删除软链接文件。</p><h1 id="Linux-ln命令-建立文件-x2F-目录链接"><a href="#Linux-ln命令-建立文件-x2F-目录链接" class="headerlink" title="Linux ln命令 - 建立文件&#x2F;目录链接"></a>Linux ln命令 - 建立文件&#x2F;目录链接</h1><ol><li>使用方式：ln [option] source_file dist_file<br>             -f 建立时，将同档案名删除.<br>             -i 删除前进行询问.<br>             ln -s abc cde 建立abc 的软连接<br>             ln abc cde 建立abc的硬连接，</li><li>软链接与硬链接的区别（通俗）：</li></ol><p>硬链接可认为是一个文件拥有两个文件名;而软链接则是系统新建一个链接文件，此文件指向其所要指的文件</p><p>ln -s &#x2F;root&#x2F;lntest&#x2F;source&#x2F; &#x2F;root&#x2F;lntest&#x2F;dist&#x2F;</p><p>这里看到软链就是个快捷方式</p><img src="/posts/3647967481/14123109519447.png" class=""><ol start="3"><li>软链接与硬链接的区别（讲解）：</li></ol><p><strong>Linux 软连接与硬连接</strong></p><p>对于一个文件来说，有唯一的索引接点与之对应，而对于一个索引接点号，却可以有多个文件名与之对应。因此，在磁盘上的同一个文件可以通过不同的路径去访问该文件。注意在Linux下是一切皆文件的啊，文件夹、新加的硬盘 …都可以看着文件来处理的啊。</p><p>连接有软连接和硬连接(hard link)之分的，软连接(symbolic link)又叫符号连接。符号连接相当于Windows下的快捷方式。</p><p>不可以对文件夹建立硬连接的，我们通常用的还是软连接比较多。</p><p><strong>eg:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ln -s <span class="built_in">source</span> dist        <span class="comment"># 建立软连接</span></span><br><span class="line"></span><br><span class="line">ln -s /mnt/hgfs/ /home/luo/    注意后面的“/” 是将目录里所有的文件链接过去，必须加上，否则，建立的目录显示颜色异常，还不能正常访问，如<span class="built_in">cd</span> 进不去</span><br><span class="line"></span><br><span class="line">ln <span class="built_in">source</span> dist            <span class="comment"># 建立硬连接</span></span><br></pre></td></tr></table></figure><p>软链接实际上只是一段文字，里面包含着它所指向的文件的名字，系统看到软链接后自动跳到对应的文件位置处进行处理；相反，硬联接为文件开设一个新的目录项，硬链接与文件原有的名字是平权的，在Linux看来它们是等价的。由于这个原因，硬链接不能连接两个不同文件系统上的文件。</p><p>（1）软连接可以 跨文件系统 ，硬连接不可以 。实践的方法就是用共享文件把windows下的 aa.txt文本文档连接到linux下&#x2F;root目录 下 bb,cc . ln -s aa.txt &#x2F;root&#x2F;bb 连接成功 。ln aa.txt &#x2F;root&#x2F;bb 失败 。</p><p>（2）关于 I节点的问题 。硬连接不管有多少个，都指向的是同一个I节点，会把 结点连接数增加，只要结点的连接数不是 0，文件就一直存在，不管你删除的是源文件还是 连接的文件 。只要有一个存在 ，文件就 存在 （其实也不分什么源文件连接文件的 ，因为他们指向都是同一个 I节点）。 当你修改源文件或者连接文件任何一个的时候 ，其他的文件都会做同步的修改。软链接不直接使用i节点号作为文件指针,而是使用文件路径名作为指针。所以 删除连接文件 对源文件无影响，但是删除源文件，连接文件就会找不到要指向的文件 。软链接有自己的inode,并在磁盘上有一小片空间存放路径名.</p><p>（3）软连接可以对一个不存在的文件名进行连接 。</p><p>（4）软连接可以对目录进行连接。</p><p><strong>备注：节点</strong> :它是UNIX内部用于描述文件特性的数据结构.我们通常称I节点为文件索引结点(信息结点).i节点含有关于文件的大部分的重要信息,包括文件数据块在磁盘上的地址.每一个I节点有它自己的标志号,我们称为文件顺序号.I节点包含的信息 1.文件类型 2.文件属主关系 3.文件的访问权限 4.文件的时间截.</p><hr><h1 id="相关链接（侵删）"><a href="#相关链接（侵删）" class="headerlink" title="相关链接（侵删）"></a>相关链接（侵删）</h1><ol><li><a href="https://javaforall.cn/187546.html">Ubuntu创建软连接</a></li><li><a href="https://www.python100.com/html/NO0742SZ7P1E.html">Ubuntu删除软连接方法汇总</a></li><li><a href="https://www.linuxidc.com/Linux/2014-12/111056.htm">Linux ln命令 - 建立文件&#x2F;目录链接</a></li></ol><hr><center><font color=red>=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">Ubuntu管理软链接</summary>
    
    
    
    <category term="Linux" scheme="https://zml3589110.github.io/categories/Linux/"/>
    
    <category term="软链接" scheme="https://zml3589110.github.io/categories/%E8%BD%AF%E9%93%BE%E6%8E%A5/"/>
    
    <category term="文件管理" scheme="https://zml3589110.github.io/categories/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/"/>
    
    
    <category term="Ubuntu" scheme="https://zml3589110.github.io/tags/Ubuntu/"/>
    
    <category term="软链接" scheme="https://zml3589110.github.io/tags/%E8%BD%AF%E9%93%BE%E6%8E%A5/"/>
    
  </entry>
  
  <entry>
    <title>VirtualBox虚拟机开机后台自启动</title>
    <link href="https://zml3589110.github.io/posts/3955128240.html"/>
    <id>https://zml3589110.github.io/posts/3955128240.html</id>
    <published>2023-12-01T02:11:20.000Z</published>
    <updated>2023-12-01T02:26:35.807Z</updated>
    
    <content type="html"><![CDATA[<h1 id="编写BAT脚本文件"><a href="#编写BAT脚本文件" class="headerlink" title="编写BAT脚本文件"></a>编写BAT脚本文件</h1><p>编写bat脚本,其中F:\program\Oracle\VirtualBox为Virtualbox可执行文件所在目录，右键桌面快捷图标可以看到</p><p>虚拟机的名字在虚拟机主界面列表中就可以看到</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@ECHO OFF</span><br><span class="line">F:\program\Oracle\VirtualBox\VBoxManage.exe startvm ES1 --type headless</span><br><span class="line">F:\program\Oracle\VirtualBox\VBoxManage.exe startvm ES2 --type headless</span><br><span class="line">F:\program\Oracle\VirtualBox\VBoxManage.exe startvm ES3 --type headless</span><br><span class="line">EXIT</span><br></pre></td></tr></table></figure><p>上面脚本是启动了３个虚拟机，根据自己需要改动即可</p><p>把Virtualbox.bat拉到 “C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Startup”下。这样就能开机启动了。</p><h1 id="遇到问题后自己解决办法"><a href="#遇到问题后自己解决办法" class="headerlink" title="遇到问题后自己解决办法"></a>遇到问题后自己解决办法</h1><p><strong>由于路径是 Program Files 有空格键，所以直接这样写是失败的！</strong><br>后边写成了分批模式就成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">d:</span><br><span class="line"><span class="built_in">cd</span> Program Files</span><br><span class="line"><span class="built_in">cd</span> Oracle\VirtualBox</span><br><span class="line">VBoxManage.exe startvm Ubuntu --<span class="built_in">type</span> headless </span><br></pre></td></tr></table></figure><h1 id="BAT详细说明"><a href="#BAT详细说明" class="headerlink" title="BAT详细说明"></a>BAT详细说明</h1><p>Windows7下安装个linux虚拟机，学习下非常好。</p><p>但是每次使用linux的时候，都是打开virtualBox–&gt;启动安装的linux系统–&gt;再用远程桌面(SSH等)连接</p><p>每次手动打开比较麻烦，而且linux虚拟机也有窗口，比较冗杂。如果能开机自启，并且后台运行linux虚拟机(没有可见窗口)，那就开心了。</p><h2 id="找到VirtualBox的安装目录"><a href="#找到VirtualBox的安装目录" class="headerlink" title="找到VirtualBox的安装目录"></a>找到VirtualBox的安装目录</h2><p>我的virtualbox安装在 D:virualBox，进入这个目录，你会看到有个VBoxManage.exe文件，没有错，我们就是用它来启动虚拟机的。</p><p>怎么启动呢?命令行如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VBoxManage startvm &lt;uuid&gt;|&lt;name&gt; [--<span class="built_in">type</span> gui|sdl|headless] </span><br></pre></td></tr></table></figure><p>比如我新建的虚拟机叫study，那么</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:virualBoxVBoxManage startvm study --<span class="built_in">type</span> headless </span><br></pre></td></tr></table></figure><p>–type headless:表示后台执行，没有窗口哦</p><p>来，我们打开cmd，试下这个命令</p><p>提示已经启动了study虚拟机了。</p><h2 id="开机自启动"><a href="#开机自启动" class="headerlink" title="开机自启动"></a>开机自启动</h2><p>现在看不到窗口了，但是还是需要手动输入命令行启动。如果能开机自启动就好了</p><p>1、首选我们要做一个bat脚本：virtualboxtStart.bat</p><p>2、里面写入上面的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:virualBoxVBoxManage startvm study --<span class="built_in">type</span> headless  </span><br></pre></td></tr></table></figure><p>3、把virtualboxtStart.bat放到C:ProgramDataMicrosoftWindowsStart MenuProgramsStartup，这个目录下的脚本是开机的时候自动运行的哦</p><p>好了，小工告成。重启电脑，你就会发现，Windows7偷偷帮我们启动了study这个虚拟机了。</p><p>可以用SSH连接，操作了。</p><p>注：也可以在cmd中使用命令行对虚拟机进行状态管理：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VBoxManage controlvm &lt;uuid&gt;|&lt;name&gt; pause|resume|reset|poweroff|savestate| </span><br></pre></td></tr></table></figure><p>比如我想关闭：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:virualBoxVBoxManage controlvm study poweroff </span><br></pre></td></tr></table></figure><h1 id="解决bat批处理文件使用路径有空格-试过无效果"><a href="#解决bat批处理文件使用路径有空格-试过无效果" class="headerlink" title="解决bat批处理文件使用路径有空格(试过无效果)"></a>解决bat批处理文件使用路径有空格(试过无效果)</h1><p>编写批处理文件时，如果文件路径中有空格会无法读取完整路径，这时候可以将有空格的路径用双引号括起来</p><p>在start xxx.exe语句中，不能用双引号把整个路径括起来，要选择性的括有空格的那个</p><p>很多帖子写的是这样括</p><p>start G:\Siemens&quot;NX 12.0”\UGII\ugraf.exe</p><p>但是我试了之后发现运行的时候这个双引号连带着里面的文件名都变成了乱码</p><p>解决方法是把两边的“\”也括进去</p><p>start G:\Siemens”\NX 12.0&quot;UGII\ugraf.exe</p><p>这样就ok了</p><hr><blockquote><p><strong>说明：本文是收集参考文档，以方便查看</strong></p></blockquote><hr><h1 id="信息链接"><a href="#信息链接" class="headerlink" title="信息链接:"></a>信息链接:</h1><ol><li><a href="http://www.hzhcontrols.com/new-402594.html">如何在Windows 7下实现VirtualBox虚拟机开机后台自启动</a></li><li><a href="https://ispacesoft.com/107434.html">设置virtualbox开机自启动，并启动虚拟机</a></li><li><a href="https://blog.csdn.net/qq_58846219/article/details/134461042">解决bat批处理文件使用路径有空格</a></li></ol><hr><center><font color=red>=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">虚拟机 Virtual box 在系统打开时自动启动相应系统，不用每次开机得手动启动</summary>
    
    
    
    <category term="问题收集" scheme="https://zml3589110.github.io/categories/%E9%97%AE%E9%A2%98%E6%94%B6%E9%9B%86/"/>
    
    <category term="开机自启" scheme="https://zml3589110.github.io/categories/%E9%97%AE%E9%A2%98%E6%94%B6%E9%9B%86/%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF/"/>
    
    
    <category term="开机自启" scheme="https://zml3589110.github.io/tags/%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF/"/>
    
    <category term="虚拟机" scheme="https://zml3589110.github.io/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    <category term="Virtual box" scheme="https://zml3589110.github.io/tags/Virtual-box/"/>
    
  </entry>
  
  <entry>
    <title>蓝牙相关知识收集</title>
    <link href="https://zml3589110.github.io/posts/4036844216.html"/>
    <id>https://zml3589110.github.io/posts/4036844216.html</id>
    <published>2023-10-30T12:58:20.000Z</published>
    <updated>2023-10-30T13:06:21.508Z</updated>
    
    <content type="html"><![CDATA[<h1 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h1><ol><li><a href="https://blog.csdn.net/guoqx/article/details/129174436">蓝牙 - 如何在Windows下抓取蓝牙数据</a><br>首先，要在Windows上安装一个工具：Bluetooth Virtual Sniffer (btvs.exe)。<br>下载路径：</li></ol><p>访问：Get the Microsoft Bluetooth Test Platform software package - Windows drivers | Microsoft Learn</p><p>点击下载：<a href="https://download.microsoft.com/download/e/e/e/eeed3cd5-bdbd-47db-9b8e-ca9d2df2cd29/BluetoothTestPlatformPack-1.14.0.msi">https://download.microsoft.com/download/e/e/e/eeed3cd5-bdbd-47db-9b8e-ca9d2df2cd29/BluetoothTestPlatformPack-1.14.0.msi</a></p><p>下一步安装WireShark</p><p>在命令行终端里，运行btvs.exe程序。</p><p>c:\BTP\v1.14.0\x86&gt;btvs.exe -Mode Wireshark</p><p>然后就会启动Wireshark，开始抓取蓝牙数据。要抓取成功，要打开电脑的蓝牙功能，才会有数据出现。</p><ol start="2"><li><a href="https://blog.csdn.net/linan101/article/details/124007791">蓝牙 BLE 广播包信息解析</a><br>低功耗蓝牙 BLE 广播数据解析：</li></ol><p>低功耗蓝牙包含两类报文：广播报文 &amp; 数据报文；<br>在广播的时候使用3个信道，顺序广播；</p><p>广播包 有效数据部分 无效数据部分</p><h1 id="包解析"><a href="#包解析" class="headerlink" title="包解析"></a>包解析</h1><ol><li><a href="https://sleepingbug.blog.csdn.net/article/details/50628568">蓝牙4.0 BLE 广播包解析</a></li></ol><h1 id="阿里云蓝牙"><a href="#阿里云蓝牙" class="headerlink" title="阿里云蓝牙"></a>阿里云蓝牙</h1><ol><li><a href="https://help.aliyun.com/document_detail/173318.html">蓝牙BLE非交互式广播规范</a></li></ol><h1 id="C-蓝牙开发"><a href="#C-蓝牙开发" class="headerlink" title="C#蓝牙开发"></a>C#蓝牙开发</h1><ol><li><p><a href="https://blog.csdn.net/A244108451/article/details/128664207">使用C#进行蓝牙开发-接收BLE广播</a></p></li><li><p><a href="https://blog.csdn.net/allexw/article/details/129127168">使用C#进行低功耗蓝牙BLE开发</a></p></li><li><p><a href="https://www.jb51.net/article/273720.htm">C#连接蓝牙设备的实现示例</a></p></li><li><p><a href="https://blog.csdn.net/Ikaros_521/article/details/118700495">win10 蓝牙调试工具 Bluetooth LE Explorer 简单使用</a></p></li><li><p><a href="https://blog.csdn.net/code_long/article/details/105636398">C# ble 4.0 低能耗 蓝牙交互</a></p></li><li><p><a href="https://blog.csdn.net/shengfakun1234/article/details/110928783">Win10 平台C#与低功耗蓝牙BLE设备通信案例</a></p></li></ol><hr><h1 id="相关链接（侵删）"><a href="#相关链接（侵删）" class="headerlink" title="相关链接（侵删）"></a>相关链接（侵删）</h1><hr><center><font color=red>=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">蓝牙知识合集</summary>
    
    
    
    <category term="蓝牙" scheme="https://zml3589110.github.io/categories/%E8%93%9D%E7%89%99/"/>
    
    <category term="C#" scheme="https://zml3589110.github.io/categories/C/"/>
    
    <category term="抓包" scheme="https://zml3589110.github.io/categories/%E6%8A%93%E5%8C%85/"/>
    
    <category term="Wireshark" scheme="https://zml3589110.github.io/categories/Wireshark/"/>
    
    <category term="Bluetooth Test Platform" scheme="https://zml3589110.github.io/categories/Bluetooth-Test-Platform/"/>
    
    
    <category term="蓝牙知识" scheme="https://zml3589110.github.io/tags/%E8%93%9D%E7%89%99%E7%9F%A5%E8%AF%86/"/>
    
    <category term="抓包" scheme="https://zml3589110.github.io/tags/%E6%8A%93%E5%8C%85/"/>
    
  </entry>
  
</feed>
