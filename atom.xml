<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>赵逸尘个人博客</title>
  
  <subtitle>记录工作生活</subtitle>
  <link href="https://zml3589110.github.io/atom.xml" rel="self"/>
  
  <link href="https://zml3589110.github.io/"/>
  <updated>2022-12-22T07:00:42.073Z</updated>
  <id>https://zml3589110.github.io/</id>
  
  <author>
    <name>ZhaoYichen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LVGL学习(一)之模拟器搭建</title>
    <link href="https://zml3589110.github.io/posts/1814094880.html"/>
    <id>https://zml3589110.github.io/posts/1814094880.html</id>
    <published>2022-12-22T06:47:20.000Z</published>
    <updated>2022-12-22T07:00:42.073Z</updated>
    
    <content type="html"><![CDATA[<h1 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h1><img src="https://img-blog.csdnimg.cn/52c6cb43948f4c23aef162e9c03cec90.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5oyo6Lii5rCR5belYml1Yml1,size_20,color_FFFFFF,t_70,g_se,x_16"><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>lvgl提供了非常多的部件(30多个)给用户使用，这些部件的所有样式都是可以修改的。它们都有默认的样式，但是当我们觉得默认的样式不合适自己项目的时候可以就需要进行修改了，本文来教大家怎么修改 tabview部件顶部框(选项卡)的默认样式。</p><p>配置：</p><ul><li>codeblocks 20.03</li><li>lvgl v 8.1</li></ul><h1 id="修改样式"><a href="#修改样式" class="headerlink" title="修改样式"></a>修改样式</h1><p><strong>默认的样式</strong><br>正常我们这样就可以创建出一个 tabview部件：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">lv_obj_t</span>* tv;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">lv_obj_t</span>* t1;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">lv_obj_t</span>* t2;</span><br><span class="line"></span><br><span class="line">tv = lv_tabview_create(lv_scr_act(), LV_DIR_TOP, LV_DPI_DEF / <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">t1 = lv_tabview_add_tab(tv, <span class="string">&quot;Selectors&quot;</span>);</span><br><span class="line">t2 = lv_tabview_add_tab(tv, <span class="string">&quot;Text input&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">lv_obj_t</span>* tab_btns = lv_tabview_get_tab_btns(tv);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>它的选项卡的默认样式是这样的：</p><img src="https://img-blog.csdnimg.cn/58d8e25b08074e9ea5ac0b254fdd77de.png"><h2 id="背景色"><a href="#背景色" class="headerlink" title="背景色"></a>背景色</h2><p><strong>修改背景色</strong><br>我们一下它的被选中时的背景色，我们只需要后面添加修改样式的代码即可，这里我使用本地样式修改，你也可以使用共享样式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lv_obj_set_style_bg_color(tab_btns, lv_palette_main(LV_PALETTE_RED), LV_PART_ITEMS | LV_STATE_CHECKED);</span><br></pre></td></tr></table></figure><p>然后我们就能看到选中时的背景颜色被修改了：</p><img src="https://img-blog.csdnimg.cn/b25418def3d64f7fa84a5ac386404ecb.png"><p><strong>去除背景色</strong><br>如果我不想要背景色呢？那我们让背景色为透明即可：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lv_obj_set_style_bg_opa(tab_btns, LV_OPA_0, LV_PART_ITEMS | LV_STATE_CHECKED);</span><br></pre></td></tr></table></figure><p>这样我们就能看到选中时没有高亮的背景色了：</p><img src="https://img-blog.csdnimg.cn/5dd852291bfd4688b062e342a4457dea.png"><h2 id="边框颜色"><a href="#边框颜色" class="headerlink" title="边框颜色"></a>边框颜色</h2><p><strong>修改边框颜色</strong><br>我们也可以修改选中时的边框颜色，我们只需要后面添加修改样式的代码即可，这里我是用本地样式修改，你也可以使用共享样式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lv_obj_set_style_border_color(tab_btns, lv_palette_main(LV_PALETTE_GREEN), LV_PART_ITEMS | LV_STATE_CHECKED);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后我们就能看到选中时的边框颜色被修改了：</p><img src="https://img-blog.csdnimg.cn/992641e298cb4cf4ae9e6e748c3ec99c.png"><p><strong>去除边框</strong><br>如果我不想要边框呢？那我们让边框为透明即可：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lv_obj_set_style_border_opa(tab_btns, LV_OPA_0, LV_PART_ITEMS | LV_STATE_CHECKED);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样我们就能看到选中时没有边框了：</p><img src="https://img-blog.csdnimg.cn/0d265fd734d0449889cd07efb480e42f.png"><h2 id="文字"><a href="#文字" class="headerlink" title="文字"></a>文字</h2><p><strong>文字颜色</strong><br>我们也可以修改文字颜色，我们只需要后面添加修改样式的代码即可，这里我是用本地样式修改，你也可以使用共享样式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//本地样式修改选中时的文字颜色</span></span><br><span class="line">   <span class="comment">//lv_obj_set_style_text_color(tab_btns, lv_palette_main(LV_PALETTE_RED), LV_PART_ITEMS | LV_STATE_CHECKED);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//本地样式修改未选中时的文字颜色</span></span><br><span class="line">   <span class="comment">//lv_obj_set_style_text_color(tab_btns, lv_palette_main(LV_PALETTE_RED), 0);</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样我们就能看到文字颜色被改变了：</p><img src="https://img-blog.csdnimg.cn/c8ee0746cfaa485c84f348314b4f5039.png"><p><strong>文字大小</strong><br>我们也可以修改文字的大小(lvgl内置字体)，我们只需要后面添加修改样式的代码即可，这里我是用本地样式修改，你也可以使用共享样式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//本地样式修改选中时的文字颜色</span></span><br><span class="line">   <span class="comment">//lv_obj_set_style_text_color(tab_btns, lv_palette_main(LV_PALETTE_RED), LV_PART_ITEMS | LV_STATE_CHECKED);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//本地样式修改未选中时的文字颜色</span></span><br><span class="line">   <span class="comment">//lv_obj_set_style_text_color(tab_btns, lv_palette_main(LV_PALETTE_RED), 0);</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样我们就能看到文字大小被改变了：</p><img src="https://img-blog.csdnimg.cn/499d58b87fe14404920285a0f09be820.png"><p><strong>显示中文</strong></p><p>通过学习 <a href="https://www.bilibili.com/video/BV1Ya411r7K2?p=15">lvgl使用中文字库</a>教程，我们就知道怎么在lvgl中快速使用中文字库了： <a href="https://www.bilibili.com/video/BV1Ya411r7K2?p=15">https://www.bilibili.com/video/BV1Ya411r7K2?p=15</a></p><p>下面我们可以让tabview的选项卡显示中文，我们只需要后面添加修改样式的代码即可，这里我是用本地样式修改，你也可以使用共享样式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 本地样式修改字体(使用自定义字体-中文)</span></span><br><span class="line">   LV_FONT_DECLARE(lv_font_source_han_sans_bold_20);</span><br><span class="line">   lv_obj_set_style_text_font(tab_btns, &amp;lv_font_source_han_sans_bold_20, <span class="number">0</span>);   <span class="comment">// 使用自定义的字库</span></span><br><span class="line">   lv_obj_set_style_text_font(tab_btns, &amp;lv_font_source_han_sans_bold_20, LV_PART_ITEMS | LV_STATE_CHECKED);   <span class="comment">// 使用自定义的字库</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样我们就能看到显示中文了：</p><img src="https://img-blog.csdnimg.cn/a81d77a9222b4656aef78372c303e6f2.png"><h1 id="代码总结"><a href="#代码总结" class="headerlink" title="代码总结"></a>代码总结</h1><p>以上的代码贴在下面了，大家可以参考自己实验看看：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">static</span> <span class="keyword">lv_obj_t</span>* tv;</span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">lv_obj_t</span>* t1;</span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">lv_obj_t</span>* t2;</span><br><span class="line"></span><br><span class="line">   tv = lv_tabview_create(lv_scr_act(), LV_DIR_TOP, LV_DPI_DEF / <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">   t1 = lv_tabview_add_tab(tv, <span class="string">&quot;Selectors&quot;</span>);</span><br><span class="line">   t2 = lv_tabview_add_tab(tv, <span class="string">&quot;Text input&quot;</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">lv_obj_t</span>* tab_btns = lv_tabview_get_tab_btns(tv);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//本地样式修改背景色</span></span><br><span class="line">   <span class="comment">//lv_obj_set_style_bg_color(tab_btns, lv_palette_main(LV_PALETTE_RED), LV_PART_ITEMS | LV_STATE_CHECKED);</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//本地样式修改透明度</span></span><br><span class="line">   <span class="comment">//lv_obj_set_style_bg_opa(tab_btns, LV_OPA_0, LV_PART_ITEMS | LV_STATE_CHECKED);</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//修改选中时边框的颜色</span></span><br><span class="line">   <span class="comment">//lv_obj_set_style_border_color(tab_btns, lv_palette_main(LV_PALETTE_GREEN), LV_PART_ITEMS | LV_STATE_CHECKED);</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//修改选中时边框的颜色透明度</span></span><br><span class="line">   <span class="comment">//lv_obj_set_style_border_opa(tab_btns, LV_OPA_0, LV_PART_ITEMS | LV_STATE_CHECKED);</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//本地样式修改选中时的文字颜色</span></span><br><span class="line">   <span class="comment">//lv_obj_set_style_text_color(tab_btns, lv_palette_main(LV_PALETTE_RED), LV_PART_ITEMS | LV_STATE_CHECKED);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//本地样式修改未选中时的文字颜色</span></span><br><span class="line">   <span class="comment">//lv_obj_set_style_text_color(tab_btns, lv_palette_main(LV_PALETTE_RED), 0);</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 本地样式修改字体(使用内置字体)</span></span><br><span class="line">   <span class="comment">//lv_obj_set_style_text_font(tab_btns, &amp;lv_font_montserrat_28, LV_PART_ITEMS | LV_STATE_CHECKED);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 本地样式修改字体(使用自定义字体-中文)</span></span><br><span class="line">   <span class="comment">//LV_FONT_DECLARE(lv_font_source_han_sans_bold_20);</span></span><br><span class="line">   <span class="comment">//lv_obj_set_style_text_font(tab_btns, &amp;lv_font_source_han_sans_bold_20, 0);   // 使用自定义的字库</span></span><br><span class="line">   <span class="comment">//lv_obj_set_style_text_font(tab_btns, &amp;lv_font_source_han_sans_bold_20, LV_PART_ITEMS | LV_STATE_CHECKED);   // 使用自定义的字库</span></span><br><span class="line">   </span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p><strong>获取LVGL内置调色板的颜色：</strong><br>lv_palette_main(LV_PALETTE_…)<br>其中 LV_PALETTE_… 有这些可选：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">    LV_PALETTE_RED,</span><br><span class="line">    LV_PALETTE_PINK,</span><br><span class="line">    LV_PALETTE_PURPLE,</span><br><span class="line">    LV_PALETTE_DEEP_PURPLE,</span><br><span class="line">    LV_PALETTE_INDIGO,</span><br><span class="line">    LV_PALETTE_BLUE,</span><br><span class="line">    LV_PALETTE_LIGHT_BLUE,</span><br><span class="line">    LV_PALETTE_CYAN,</span><br><span class="line">    LV_PALETTE_TEAL,</span><br><span class="line">    LV_PALETTE_GREEN,</span><br><span class="line">    LV_PALETTE_LIGHT_GREEN,</span><br><span class="line">    LV_PALETTE_LIME,</span><br><span class="line">    LV_PALETTE_YELLOW,</span><br><span class="line">    LV_PALETTE_AMBER,</span><br><span class="line">    LV_PALETTE_ORANGE,</span><br><span class="line">    LV_PALETTE_DEEP_ORANGE,</span><br><span class="line">    LV_PALETTE_BROWN,</span><br><span class="line">    LV_PALETTE_BLUE_GREY,</span><br><span class="line">    LV_PALETTE_GREY,</span><br><span class="line">    _LV_PALETTE_LAST,</span><br><span class="line">    LV_PALETTE_NONE = <span class="number">0xff</span>,</span><br><span class="line">&#125; <span class="keyword">lv_palette_t</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>使用自定义颜色</strong></p><p>除了使用 <code>lv_palette_main(LV_PALETTE_...)</code> 我们可以使用自定义的颜色值：</p><ul><li>十六进制颜色码： lv_color_hex(0x000000)</li><li>RGB值：LV_COLOR_MAKE(0x00, 0x00, 0x00)</li></ul><p>使用示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lv_obj_set_style_bg_color(tab_btns, lv_color_hex(<span class="number">0x000000</span>), LV_PART_ITEMS | LV_STATE_CHECKED);</span><br><span class="line">lv_obj_set_style_bg_color(tab_btns,  LV_COLOR_MAKE(<span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>), LV_PART_ITEMS | LV_STATE_CHECKED);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>lvgl视频教程</strong><br><a href="https://www.bilibili.com/video/av209749730">https://www.bilibili.com/video/av209749730</a></p><p>百问网LVGL(v8)系列课程(韦东山·监制) 教程基于lvgl v8.2版本，课程适配多个平台、多款板子</p><p>百问网LVGL(v8)视频课程(韦东山·监制) 教程基于lvgl v8.2版本，课程适配多个平台、多款板子！视频学习地址：<a href="https://www.bilibili.com/video/BV1Ya411r7K2">https://www.bilibili.com/video/BV1Ya411r7K2</a></p><p>视频教程配套资料<br><a href="https://gitee.com/weidongshan/lvgl_100ask_course_materials">https://gitee.com/weidongshan/lvgl_100ask_course_materials</a><br>相关学习资源<br>lvgl官网：<a href="https://lvgl.io/">https://lvgl.io</a><br>lvgl官方文档：<a href="https://docs.lvgl.io/">https://docs.lvgl.io</a><br>百问网lvgl中文文档：<a href="http://lvgl.100ask.net/">http://lvgl.100ask.net</a><br>百问网lvgl论坛：<a href="https://forums.100ask.net/c/13-category/13">https://forums.100ask.net/c/13-category/13</a><br>百问网lvgl学习交流群：<a href="http://lvgl.100ask.net/master/contact_us/index.html">http://lvgl.100ask.net/master/contact_us/index.html</a><br>百问网lvgl视频教程：<br><a href="https://www.bilibili.com/video/BV1Ya411r7K2">https://www.bilibili.com/video/BV1Ya411r7K2</a><br><a href="https://www.100ask.net/detail/p_61c5a317e4b0cca4a4e8b6f1/6">https://www.100ask.net/detail/p_61c5a317e4b0cca4a4e8b6f1/6</a><br>————————————————<br>版权声明：本文为CSDN博主「挨踢民工biubiu」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/qq_35181236/article/details/122121775">https://blog.csdn.net/qq_35181236/article/details/122121775</a></p><hr><h1 id="相关链接-侵删"><a href="#相关链接-侵删" class="headerlink" title="相关链接(侵删)"></a>相关链接(侵删)</h1><ol><li><a href="https://blog.csdn.net/qq_35181236/article/details/122121775">LVGL|lvgl教程之修改lvgl tabview部件顶部框(选项卡)的默认样式</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">通过Visual Studio 搭建lvgl模拟开发平台</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="C" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/C/"/>
    
    <category term="GUI" scheme="https://zml3589110.github.io/categories/GUI/"/>
    
    
    <category term="GUI" scheme="https://zml3589110.github.io/tags/GUI/"/>
    
    <category term="C" scheme="https://zml3589110.github.io/tags/C/"/>
    
    <category term="LVGL" scheme="https://zml3589110.github.io/tags/LVGL/"/>
    
    <category term="lvgl tabview" scheme="https://zml3589110.github.io/tags/lvgl-tabview/"/>
    
  </entry>
  
  <entry>
    <title>Windows Kits在根目录下自动创建</title>
    <link href="https://zml3589110.github.io/posts/2654094191.html"/>
    <id>https://zml3589110.github.io/posts/2654094191.html</id>
    <published>2022-12-20T12:28:20.000Z</published>
    <updated>2022-12-20T12:36:47.617Z</updated>
    
    <content type="html"><![CDATA[<h1 id="将-windows-kits-移到相应位置"><a href="#将-windows-kits-移到相应位置" class="headerlink" title="将 windows kits 移到相应位置"></a>将 windows kits 移到相应位置</h1><p>你是不是当时下载了Visual Stdio，然后莫名奇妙就多了个Windows Kits，<br>可以把它移动到VisualStdio里面找到你安装的Windows kits的文件夹，然后把它整个截切到想要移动的地方。<br>比如说，我就是把”D:\Windows kits”整个剪切到”D:\DevelopmentTool\VisualStdio2022\Windows Kits”。<br><strong>PS:需要注意的是这里是剪切文件夹，而不是复制，不然在你cmd下使用mklink提示“文件已经被创建”。</strong></p><h1 id="修改注册表实现链接"><a href="#修改注册表实现链接" class="headerlink" title="修改注册表实现链接"></a>修改注册表实现链接</h1><p>下载vs后，2022的直接默认在根目录下载kits文件夹，这让强迫症的我难受死了，经过三天的努力，终于解决了这个问题，<br>这个方法不是使用软连接的方法，使用软连接原来的地方还会多个快捷方式，对于别人来说治标不治本，对我来说屁用没有，<br>还是很难受，我看也没人写，我就写出来可以参考下，也免得我自己忘记。</p><p>通过修改注册表进行移动文件夹不报错。我修改了三个地方。</p><h2 id="位置一"><a href="#位置一" class="headerlink" title="位置一:"></a>位置一:</h2><ul><li>计算机\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows Kits\Installed Roots</li></ul><img src="https://i0.hdslb.com/bfs/article/bf4e8c40c5e3a820f095fa64cc03ef7414d8ed15.png@942w_401h_progressive.webp"><h2 id="位置二"><a href="#位置二" class="headerlink" title="位置二:"></a>位置二:</h2><ul><li>计算机\HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Microsoft\Microsoft SDKs\Windows\v10.0</li></ul><img src="https://i0.hdslb.com/bfs/article/5b94976f6987fe887fd038d175cf5927a699272d.png@942w_368h_progressive.webp"><h2 id="位置三"><a href="#位置三" class="headerlink" title="位置三:"></a>位置三:</h2><ul><li>计算机\HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Microsoft\Windows Kits\Installed Roots</li></ul><img src="https://i0.hdslb.com/bfs/article/87140356f377eded39f19d47c4d5a7466cf027b3.png@942w_389h_progressive.webp"><hr><blockquote><p><strong>说明：本文是收集参考文档，以方便查看（侵删）</strong></p></blockquote><hr><h1 id="信息链接"><a href="#信息链接" class="headerlink" title="信息链接:"></a>信息链接:</h1><ol><li><a href="https://www.bilibili.com/read/cv16890467">下载vs后，移动windows kits文件夹(不使用快捷方式的方法)</a></li><li><a href="https://www.zhihu.com/question/440612684">出现在E盘的Windows Kits是怎么回事？删掉可以吗？</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">Visual Stdio 安装功能组件后莫名在其根目录下增加 Windows Kits 文件夹</summary>
    
    
    
    <category term="Visual Stdio" scheme="https://zml3589110.github.io/categories/Visual-Stdio/"/>
    
    
    <category term="Visual Stdio" scheme="https://zml3589110.github.io/tags/Visual-Stdio/"/>
    
    <category term="Windows Kits" scheme="https://zml3589110.github.io/tags/Windows-Kits/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu下将Python命令默认指向为Python3</title>
    <link href="https://zml3589110.github.io/posts/213945612.html"/>
    <id>https://zml3589110.github.io/posts/213945612.html</id>
    <published>2022-11-21T12:57:20.000Z</published>
    <updated>2022-11-21T13:05:37.541Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ubuntu下将Python命令默认指向为Python3"><a href="#ubuntu下将Python命令默认指向为Python3" class="headerlink" title="ubuntu下将Python命令默认指向为Python3"></a>ubuntu下将Python命令默认指向为Python3</h1><p><strong>ubuntu</strong>下输入Python命令默认指向的是&#x2F;usr&#x2F;bin&#x2F;python</p><p>因此，为了方便使用，安装了python3后，我们一般会创建软链接使&#x2F;usr&#x2F;bin&#x2F;python指向&#x2F;usr&#x2F;bin&#x2F;python3。</p><p>备份系统自带python2的软链接：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv /usr/bin/python /usr/bin/python.bak</span><br></pre></td></tr></table></figure><p>创建python3软链接：</p><p>（安装python一般会自动生成软链接&#x2F;usr&#x2F;bin&#x2F;python3，如果没有，请将“&#x2F;usr&#x2F;bin&#x2F;python3”改为你安装的python3的位置）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /usr/bin/python3 /usr/bin/python</span><br></pre></td></tr></table></figure><p>同理，pip也一样</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /usr/bin/pip3 /usr/bin/pip</span><br></pre></td></tr></table></figure><hr><h1 id="相关链接（侵删）"><a href="#相关链接（侵删）" class="headerlink" title="相关链接（侵删）"></a>相关链接（侵删）</h1><ol><li><a href="https://blog.csdn.net/leishupei/article/details/120736802">ubuntu下将Python命令默认指向为Python3</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">将Python链接到Python3</summary>
    
    
    
    <category term="Linux" scheme="https://zml3589110.github.io/categories/Linux/"/>
    
    <category term="python" scheme="https://zml3589110.github.io/categories/python/"/>
    
    
    <category term="Ubuntu" scheme="https://zml3589110.github.io/tags/Ubuntu/"/>
    
    <category term="python" scheme="https://zml3589110.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu下编译环境多版本共存（ESP8266）</title>
    <link href="https://zml3589110.github.io/posts/1569020693.html"/>
    <id>https://zml3589110.github.io/posts/1569020693.html</id>
    <published>2022-11-21T12:24:20.000Z</published>
    <updated>2022-11-21T13:05:37.545Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ESP32编译环境多版本共存处理办法"><a href="#ESP32编译环境多版本共存处理办法" class="headerlink" title="ESP32编译环境多版本共存处理办法"></a>ESP32编译环境多版本共存处理办法</h1><h2 id="1-现有方法存在的问题"><a href="#1-现有方法存在的问题" class="headerlink" title="1.现有方法存在的问题"></a>1.现有方法存在的问题</h2><p>目前ESP32的官方开发框架ESP-IDF更新很快，我的电脑里已经存了好几个版本的ESP-IDF SDK了。尽管新版本的功能更强大，但旧版本的SDK中也有不少可以学习的知识，看到不同的编程优化思路。<br>每一个版本的SDK都需要配置编译工具所在的路径，以及配置工程路径的环境变量IDF_PATH。设置方法有两种：</p><ol><li>使用如下语句，导入SDK的编译工具和配置环境变量：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;<span class="variable">$PATH</span>:<span class="variable">$HOME</span>/esp/xtensa-esp32-elf/bin&quot;</span>  <span class="comment">#（配置SDK编译工具所在路径）</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> IDF_PATH=~/esp/esp-idf  <span class="comment"># （配置环境变量）</span></span><br></pre></td></tr></table></figure></li></ol><p>通过语句执行的配置，仅在当前终端有效，退出当前终端或者系统重启后，上述配置就失效了，即不可以执行正常的编译了。</p><p>若需继续使用，需再次敲击上述命令完成当前终端的配置。</p><ol start="2"><li>上述配置方法的原理<br>将上述语句，添加到‘～’目录下的.profile文件（这个文件在每次系统启动时就自动运行一次其中的命令），就可以保证上述配置一直有效，不需要每次使用都敲击1.1中的命令，就可以一直使用。（首次配置后，应重启系统，来使配置生效）</li></ol><p>但是，当我们下载了多个版本的SDK时，1.2的这种看起来”很方便的“配置，存在很大问题。比如，我下载了v3.17版本的SDK，也下载了v4.01版本的SDK，他们的IDF_PATH，以及编译工具的PATH都需要设置，把他们都写入到.profile文件，会出现如下所示的重名现象：</p><img src="https://img-blog.csdnimg.cn/20200812003512474.png"><p><strong>最终，IDF_PATH，PATH被赋值了两次，将以最后一次赋值为最终的配置（即对v4.01版本的SDK的配置），因此对v3.17的配置将失效，我们将不能完成v3.17的正常编译。</strong></p><blockquote><p>能不能有一种方法，让我们同时快速完成多个版本的SDK的编译环境配置呢？</p></blockquote><h2 id="2-解决方法："><a href="#2-解决方法：" class="headerlink" title="2.解决方法："></a>2.解决方法：</h2><p>切换到”～“目录下，运行 ls -al命令，查看该目录下的文件：</p><img src="https://img-blog.csdnimg.cn/20200812003731473.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmd5eDEyMzQ=,size_16,color_FFFFFF,t_70"><p><strong>若有.bash_aliases文件就打开它，并添加以下内容：（注：若没有则可以新建-因为默认启动的.bashrc会扫描.bash_aliases下文件）</strong></p><p>（注意，我的SDK版本为v4.0、v3.22、v3.17，它们的编译工具，以及esp-idf工程目录在对应的esp4,esp322,esp317目录下，你可以依据你下载的SDK版本，以及具体的路径替换下述语句的相关目录路径。）</p><p><strong>旧版本的idf 添加下述语句：</strong></p><img src="https://img-blog.csdnimg.cn/20200812003925833.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmd5eDEyMzQ=,size_16,color_FFFFFF,t_70"><p><strong>新版本的 idf 添加下述语句：</strong></p><img src="https://img-blog.csdnimg.cn/40a2169649944389bcfa658642e88b89.png"><p>**<em>注意：上述截图中第一条语句的 “.”后有一个空格。（其实不添加也不影响！）</em><br>若没有，就创建它，并添加上述内容。<br>添加后，保存该文件，并重新启动系统或者使用命令source &#x2F;home&#x2F;xxx&#x2F;.bashrc（注意使用正确的bashrc路径）刷新系统配置。</p><p><strong>下面说一下如何使用：</strong><br>如图，打开一个终端，输入printenv IDF_PATH，显示当前IDF_PATH的配置。同理，输入printenv PATH，显示当前PATH的配置。然后运行get_esp322命令，再输入printenv IDF_PATH，发现了没，我们&#x2F;esp322&#x2F;xtensa-esp32-elf&#x2F;bin已经添加到PATH环境变量里了。再运行get_e322，输入printenv PATH，发现，IDF_PATH环境变量已经变为v3.2.2对应的&#x2F;esp322&#x2F;esp-idf了。</p><blockquote><p>不知道为什么我添加的路径都是往后叠加，越加越长</p></blockquote><img src="https://img-blog.csdnimg.cn/20200812004451697.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmd5eDEyMzQ=,size_16,color_FFFFFF,t_70"><p>我们再打开一个终端，运行以下命令，并查看对应的环境变量。发现，输入get_esp317\get_e317也能完成对应于v3.17版本的SDK需要的配置。如此，在不同的终端中，我们输入不同的get_espxx 命令就可以完成设置了，不用敲击过长的命令，也不必担心环境变量名会重复而导致环境变量被反复设置而被覆盖的问题。</p><img src="https://img-blog.csdnimg.cn/20200812004512673.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmd5eDEyMzQ=,size_16,color_FFFFFF,t_70"><h2 id="上述设置的原理说明"><a href="#上述设置的原理说明" class="headerlink" title="上述设置的原理说明"></a>上述设置的原理说明</h2><p>上述设置文件中使用的aliase命令，是linux下给指令起别名的命令行工具，我们通过给export IDF_PATH&#x3D;xxxx这条长指令起别名来达到节省敲击的字符数的目的，也就是说，起别名后，执行get_esp32，就等效于在命令行输入了：</p><p>export PATH&#x3D;”$HOME&#x2F;esp322&#x2F;xtensa-esp32-elf&#x2F;bin:$PATH</p><p>因此我们可以通过输入简单的命令，完成环境的配置。</p><p>另一方面，在”～“目录下的.bash_aliases是一个特殊的文件，它专门用来存放我们给其他命令起别名的设置。并且，每当新建一个终端，在终端启动时会自动运行一次这个文件里的指令，因此，对于不同版本的SDK，我们只需要新建一个终端，运行对应版本的指令，就可以实现当前终端的环境变量的配置，而不影响其他终端，做到多版本SDK开发的共存。</p><p>_.bashrc中有对.bash_aliases的说明：</p><img src="https://img-blog.csdnimg.cn/20200812010421728.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmd5eDEyMzQ=,size_16,color_FFFFFF,t_70"><p><strong>即允许我们新建一个.bash_aliases文件来专门存放我们的起别名的操作。这正是上面我提到的一点。<br>在实践中注意修改对应的路径就可以了，该方法也适用于别的开发环境，多版本SDK共存处理的操作。</strong></p><h1 id="对-Bash-Aliases（别名）-说明"><a href="#对-Bash-Aliases（别名）-说明" class="headerlink" title="对 Bash Aliases（别名） 说明"></a>对 Bash Aliases（别名） 说明</h1><p><strong>Bash中的Aliases（别名）可以简单地称为将运行另一个命令&#x2F;程序的命令或快捷方式，当运行的命令很长且对于经常使用的命令时，那么使用Bash别名是非常有用的。</strong><br>在本文中，小编将简单整理在Linux系统中创建和使用Bash别名的不同方法，感兴趣的朋友可以关注下。</p><h2 id="在Linux中检查Bash别名"><a href="#在Linux中检查Bash别名" class="headerlink" title="在Linux中检查Bash别名"></a>在Linux中检查Bash别名</h2><blockquote><p>Bash Alias是一个shell内置命令，可以通过运行以下命令进行确认：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">type</span> -a <span class="built_in">alias</span></span></span><br><span class="line">alias is a shell builtin</span><br></pre></td></tr></table></figure><p>在跳转和设置别名之前，首先需要看到涉及的配置文件。一个别名可以在<strong>“用户级”</strong>或<strong>“系统级”</strong>中进行设置。<br>如果调用系统shell，只需在终端键入<strong>“ alias ”</strong>即可查看已定义别名的列表。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ alias</span><br></pre></td></tr></table></figure><img src="http://www.idccoupon.com/wp-content/uploads/2021/02/bashaliase.png"><p><strong>（检查已定义Linux别名的列表）</strong></p><p>在.bashrc文件或.bash_aliases文件中定义用户级别名。该.bash_aliases文件是将所有的别名到一个单独的文件，而不是把它在的.bashrc文件以及其他参数。刚开始，.bash_aliases是不可用的，所以必须创建它。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ls -la ~ | grep -i .bash_aliases       <span class="comment"># 检查文件是否可用</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> touch ~/.bash_aliases                  <span class="comment"># 创建一个空的别名文件</span></span></span><br></pre></td></tr></table></figure><img src="http://www.idccoupon.com/wp-content/uploads/2021/02/bashaliases.png"><p><strong>（创建Bash别名文件）</strong></p><p>打开.bashrc文件，并注意以下部分。这部分代码的功用是检查用户主目录下是否存在文件.bash_aliases，并在每次启动新的终端会话时将其加载。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Alias definitions.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> You may want to put all your additions into a separate file like</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ~/.bash_aliases, instead of adding them here directly.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> See /usr/share/doc/bash-doc/examples <span class="keyword">in</span> the bash-doc package.</span></span><br><span class="line"></span><br><span class="line">if [ -f ~/.bash_aliases ]; then</span><br><span class="line">    . ~/.bash_aliases</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>你还可以在任何目录下创建自定义别名文件，并在.bashrc或.profile中添加定义以加载它。但我不喜欢这样，个人比较喜欢选择将所有别名分组在.bash_aliases下。</p><p>当然，你也可以在.bashrc文件下添加别名。在.bashrc文件下查找别名部分，其中带有一些预定义的别名。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">enable</span> color support of ls and also add handy aliases</span></span><br><span class="line">if [ -x /usr/bin/dircolors ]; then</span><br><span class="line">    test -r ~/.dircolors &amp;&amp; eval &quot;$(dircolors -b ~/.dircolors)&quot; || eval &quot;$(dircolors -b)&quot;</span><br><span class="line">    alias ls=&#x27;ls --color=auto&#x27;</span><br><span class="line">    #alias dir=&#x27;dir --color=auto&#x27;</span><br><span class="line">    #alias vdir=&#x27;vdir --color=auto&#x27;</span><br><span class="line"></span><br><span class="line">    alias grep=&#x27;grep --color=auto&#x27;</span><br><span class="line">    alias fgrep=&#x27;fgrep --color=auto&#x27;</span><br><span class="line">    alias egrep=&#x27;egrep --color=auto&#x27;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> colored GCC warnings and errors</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">export</span> GCC_COLORS=<span class="string">&#x27;error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> some more ls aliases</span></span><br><span class="line">alias ll=&#x27;ls -alF&#x27;</span><br><span class="line">alias la=&#x27;ls -A&#x27;</span><br><span class="line">alias l=&#x27;ls -CF&#x27;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Add an <span class="string">&quot;alert&quot;</span> <span class="built_in">alias</span> <span class="keyword">for</span> long running commands.  Use like so:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   sleep 10; alert</span></span><br><span class="line">alias alert=&#x27;notify-send --urgency=low -i &quot;$([ $? = 0 ] &amp;&amp; echo terminal || echo error)&quot; &quot;$(history|tail </span><br></pre></td></tr></table></figure><img src="http://www.idccoupon.com/wp-content/uploads/2021/02/bas.png"><h2 id="在Linux系统中创建别名"><a href="#在Linux系统中创建别名" class="headerlink" title="在Linux系统中创建别名"></a><strong>在Linux系统中创建别名</strong></h2><p>你可以创建将仅为当前会话存储并在当前会话结束后将被销毁的临时别名，也可以创建将是持久性的永久别名。</p><p>在Linux中创建别名的命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">alias</span> &lt;name-of-the-command&gt;=<span class="string">&quot;command to run&quot;</span></span></span><br></pre></td></tr></table></figure><p>例如，创建以下的别名。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">alias</span> Hello=<span class="string">&quot;echo welcome to idccoupon&quot;</span></span></span><br></pre></td></tr></table></figure><p>打开终端并创建所需的任何<strong>别名</strong>命令。注意：如果您打开另一个会话，那么新创建的别名将不可用。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">alias</span> Hello<span class="string">&quot;echo welcome to idccoupon&quot;</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">alias</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> Hello</span></span><br></pre></td></tr></table></figure><p>要使别名永久化，请将其添加到**.bash_aliases**文件中。你可以使用自己喜欢的文本编辑器，也可以使用cat命令或echo命令添加别名。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="built_in">alias</span> nf=<span class="string">&quot;neofetch&quot;</span> &gt;&gt; ~/.bash_aliases</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat &gt;&gt; ~/.bash_aliases</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat ~/.bash_aliases</span></span><br></pre></td></tr></table></figure><img src="http://www.idccoupon.com/wp-content/uploads/2021/02/bashalias.png"><p><strong>（列出定义的别名）</strong></p><p>如果想要它起作用，必须重新加载**.bash_aliases**文件，才能使更改在当前会话中生效。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span>〜/ .bash_aliases</span></span><br></pre></td></tr></table></figure><p>现在，如果我运行<strong>“ nf”（</strong>这是“ neofetch”的别名），它将触发<strong>neofetch</strong>程序。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> nf</span></span><br></pre></td></tr></table></figure><img src="http://www.idccoupon.com/wp-content/uploads/2021/02/bashalia.png"><p><strong>（在Linux中运行Alias）</strong></p><p>此外，一个别名可以覆盖想要想覆盖任何命令。为了进行演示，这里将使用一个uptime命令，该命令将显示系统正常运行时间，登录的用户数以及系统平均负载。现在，我将创建一个别名，该别名将覆盖<strong>uptime命令</strong>的行为。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> uptime</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat &gt;&gt; ~/.bash_aliases <span class="built_in">alias</span> uptime=<span class="string">&quot;echo &#x27;I am running uptime command now&#x27;&quot;</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> ~/.bash_aliases</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> uptime</span></span><br></pre></td></tr></table></figure><img src="http://www.idccoupon.com/wp-content/uploads/2021/02/bashali.png"><p><strong>覆盖命令的默认行为）</strong></p><p>从这个例子中可以得出结论，在检查和调用实际命令之前，优先级属于bash别名。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat ~/.bash_aliases</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> ~/.bash_aliases</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> uptime</span></span><br></pre></td></tr></table></figure><img src="http://www.idccoupon.com/wp-content/uploads/2021/02/bashal.png"><h2 id="在Linux中删除别名"><a href="#在Linux中删除别名" class="headerlink" title="在Linux中删除别名"></a>在Linux中删除别名</h2><p>现在，从**.bash_aliases<strong>文件中删除</strong>正常运行时间<strong>条目，然后重新加载</strong>.bash_aliases<strong>文件，该文件仍将使用别名定义输出正常运行时间。这是因为别名定义已加载到当前的Shell会话中，所以必须启动新会话或通过运行</strong>unalias**命令取消别名定义，如下图所示。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">unalias</span> uptime</span></span><br></pre></td></tr></table></figure><img src="http://www.idccoupon.com/wp-content/uploads/2021/02/basha.png"><p><strong>在Linux中删除别名）</strong></p><p><strong>注意</strong>：Unalias将从当前加载的会话中删除别名定义，而不是从**.bashrc<strong>或</strong>.bash_aliases中删除**。</p><h2 id="添加系统范围的别名"><a href="#添加系统范围的别名" class="headerlink" title="添加系统范围的别名"></a>添加系统范围的别名</h2><p>至此，我们已经了解了如何在用户级别中设置别名。而如果想要全局设置别名，可以修改<strong>“ &#x2F;etc&#x2F;bash.bashrc”</strong>文件并添加将在全局范围内生效的别名。当然需要具有提升的特权才能修改<strong>bash.bashrc</strong>文件。</p><p>或者，在<strong>“ &#x2F;etc&#x2F;profile.d&#x2F;”</strong>下创建一个脚本。当登录到shell时，<strong>“ &#x2F; etc &#x2F; profile”</strong>将在<strong>profile.d</strong>下运行任何脚本，然后实际运行<strong>〜&#x2F; .profile</strong>。此方法将减少弄乱**&#x2F; etc &#x2F; profile<strong>或</strong>&#x2F;etc&#x2F;bash.bashrc**文件的风险。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo cat &gt;&gt; /etc/profile.d/alias.sh</span></span><br><span class="line">alias ls=”ls -ltra”</span><br></pre></td></tr></table></figure><p>以下是从**&#x2F; etc &#x2F; profile<strong>获取的代码，该代码负责运行我们放在</strong>&#x2F;etc&#x2F;profiles.d&#x2F;**下的所有脚本。它将查找带有<code>.sh</code>扩展名的所有文件，然后运行source命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tail / etc / profile</span></span><br></pre></td></tr></table></figure><img src="http://www.idccoupon.com/wp-content/uploads/2021/02/bash.png"><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><p>以上就是在Linux系统中创建和使用Bash Aliases（别名）的简单方法，不难发现，可以很容易的在Linux系统中设置别名、配置文件的别名，以及在“<strong>用户级</strong>”或“<strong>系统级</strong>”环境中设置别名的方法。</p><p>如果经常使用Linux命令，而且命令比较长的话， 那么不妨为其多设置几个别名，这样工作起来更加的便捷和高效。</p><hr><h1 id="相关链接（侵删）"><a href="#相关链接（侵删）" class="headerlink" title="相关链接（侵删）"></a>相关链接（侵删）</h1><ol><li><a href="https://blog.csdn.net/wangyx1234/article/details/107947892">ESP32编译环境多版本共存处理办法</a></li><li><a href="http://www.idccoupon.com/3938.html">Linux系统中创建和使用Bash Aliases（别名）的不同方法概述</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">Ubuntu下编译环境多版本共存，实现多芯片多版本共存,ESP8266_RTOS_SDK和esp-open-rtos共存</summary>
    
    
    
    <category term="Linux" scheme="https://zml3589110.github.io/categories/Linux/"/>
    
    <category term="编译环境" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83/"/>
    
    <category term="ESP8266" scheme="https://zml3589110.github.io/categories/ESP8266/"/>
    
    
    <category term="Ubuntu" scheme="https://zml3589110.github.io/tags/Ubuntu/"/>
    
    <category term="编译环境" scheme="https://zml3589110.github.io/tags/%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83/"/>
    
    <category term="多版本共存" scheme="https://zml3589110.github.io/tags/%E5%A4%9A%E7%89%88%E6%9C%AC%E5%85%B1%E5%AD%98/"/>
    
    <category term="Bash Aliases" scheme="https://zml3589110.github.io/tags/Bash-Aliases/"/>
    
    <category term="别名" scheme="https://zml3589110.github.io/tags/%E5%88%AB%E5%90%8D/"/>
    
  </entry>
  
  <entry>
    <title>bat字符串拼接</title>
    <link href="https://zml3589110.github.io/posts/2626575334.html"/>
    <id>https://zml3589110.github.io/posts/2626575334.html</id>
    <published>2022-11-12T03:26:20.000Z</published>
    <updated>2022-11-12T03:30:43.312Z</updated>
    
    <content type="html"><![CDATA[<h1 id="将两个字符串变量联合在一起"><a href="#将两个字符串变量联合在一起" class="headerlink" title="将两个字符串变量联合在一起"></a>将两个字符串变量联合在一起</h1><ol><li>方法一<br>可以写成set val &#x3D; %VarA%%VarB%，但是由于赋值问题，建议前后加上引号。</li></ol><p>例如：</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"></span><br><span class="line"><span class="comment">rem 两个变量拼接，等号前后一定不要有空格</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> str1=Hello</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> str2=world</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> result=“<span class="variable">%str1%</span>, <span class="variable">%str2%</span>”</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">%result%</span></span><br></pre></td></tr></table></figure><img src="https://iknow-pic.cdn.bcebos.com/94cad1c8a786c91777e8c33ac63d70cf3ac757cd?x-bce-process=image%2Fresize%2Cm_lfit%2Cw_600%2Ch_800%2Climit_1%2Fquality%2Cq_85%2Fformat%2Cf_auto"><p><strong>扩展资料</strong><br>批处理文件，在DOS和Windows（任意）系统中，.bat文件是可执行文件，由一系列命令构成，其中可以包含对其他程序的调用。</p><p>这个文件的每一行都是一条DOS命令（大部分时候就好像我们在DOS提示符下执行的命令行一样），你可以使用DOS下的Edit或者Windows的记事本(notepad)等任何文本文件编辑工具创建和修改批处理文件。</p><p>批处理中的变量基本上是万能的，可以储存各种各样的数据，不过用来计算时你会发现变量类型转为了int，数值的极端范围为[-2147483648，2147483647]，如果不拿来计算的话，似乎数万位也是可以的。</p><ol start="2"><li>方法二 <figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">:: 是的, 你这样写也是可以的, 但是还是加上引号</span><br><span class="line">:: 这样可以避免一些字符无法赋值的问题</span><br><span class="line">:: 比如:</span><br><span class="line"></span><br><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">set</span> a=<span class="number">12345</span></span><br><span class="line">    <span class="built_in">set</span> b=<span class="number">23456</span></span><br><span class="line">    <span class="built_in">set</span> &quot;c=<span class="variable">%a%</span><span class="variable">%b%</span>&quot; </span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">%c%</span></span><br><span class="line">    <span class="built_in">pause</span>&gt;<span class="built_in">nul</span></span><br><span class="line">     </span><br><span class="line">    :: 中国批处理脚本联盟</span><br></pre></td></tr></table></figure></li></ol><hr><blockquote><p><strong>说明：本文是收集参考文档，以方便查看（侵删）</strong></p></blockquote><hr><h1 id="信息链接"><a href="#信息链接" class="headerlink" title="信息链接:"></a>信息链接:</h1><ol><li><a href="https://zhidao.baidu.com/question/1383554521726188140.html">bat 如何将两个字符串变量联合在一起?</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">bat实现字符串拼接</summary>
    
    
    
    <category term="小插件类" scheme="https://zml3589110.github.io/categories/%E5%B0%8F%E6%8F%92%E4%BB%B6%E7%B1%BB/"/>
    
    <category term="BAT" scheme="https://zml3589110.github.io/categories/BAT/"/>
    
    <category term="语法" scheme="https://zml3589110.github.io/categories/%E8%AF%AD%E6%B3%95/"/>
    
    
    <category term="字符串" scheme="https://zml3589110.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="计算机" scheme="https://zml3589110.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    <category term="bat" scheme="https://zml3589110.github.io/tags/bat/"/>
    
    <category term="脚本" scheme="https://zml3589110.github.io/tags/%E8%84%9A%E6%9C%AC/"/>
    
    <category term="cmd" scheme="https://zml3589110.github.io/tags/cmd/"/>
    
  </entry>
  
  <entry>
    <title>bat函数使用</title>
    <link href="https://zml3589110.github.io/posts/3963076605.html"/>
    <id>https://zml3589110.github.io/posts/3963076605.html</id>
    <published>2022-11-12T03:19:20.000Z</published>
    <updated>2022-11-12T03:30:43.309Z</updated>
    
    <content type="html"><![CDATA[<h1 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h1><p>Windows bat脚本是一种解释性的脚本语言，可以拿到做很多事情。对于稍简单的问题：比如通过注册表判断下档期机器的语言啊，国家啊，安装了那些软件啊等等还少诶简单。但是如果有可能使用bat脚本来处理较复杂的问题时，就需要用函数来将其模块化，方便bat脚本的阅读和编写。下面来介绍下bat 函数的用法</p><h1 id="bat函数写法"><a href="#bat函数写法" class="headerlink" title="bat函数写法"></a>bat函数写法</h1><p>如下是一个最简单的函数写法；以**:func开始以 goto:eof **结束。:func和goto:eof之间的为函数内容，例如这里的echo this is a bat func</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">:func</span><br><span class="line"><span class="built_in">echo</span> this is a bat func</span><br><span class="line"><span class="function">goto:<span class="title">eof</span></span></span><br></pre></td></tr></table></figure><h1 id="bat函数调用"><a href="#bat函数调用" class="headerlink" title="bat函数调用"></a>bat函数调用</h1><p>写好了bat函数之后，我们需要调用它。如下代码片段展示了如何在bat脚本中调用函数。其实很简单，就这一句<strong>call:func</strong>即可。</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">call:<span class="title">func</span></span></span><br><span class="line"><span class="function"><span class="title">pause</span></span></span><br><span class="line"><span class="function">:<span class="title">func</span></span></span><br><span class="line"><span class="function"><span class="title">echo</span> <span class="title">this</span> <span class="title">is</span> <span class="title">a</span> <span class="title">bat</span> <span class="title">func</span></span></span><br><span class="line"><span class="function"><span class="title">goto:eof</span></span></span><br></pre></td></tr></table></figure><h1 id="bat函数返回值"><a href="#bat函数返回值" class="headerlink" title="bat函数返回值"></a>bat函数返回值</h1><p><strong>目前我了解到的bat函数返回值的获取有如下两种方法：</strong></p><ul><li>使用参数带回</li><li>使用全局变量带回</li></ul><p>这里直接贴上关于bat函数的各种条件的验证代码：</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">color</span> <span class="number">0</span>d</span><br><span class="line"><span class="built_in">echo</span> bat Function example</span><br><span class="line"><span class="built_in">echo</span> =================================</span><br><span class="line"><span class="built_in">echo</span> ==========Func No paramter ======</span><br><span class="line"><span class="built_in">echo</span> =================================</span><br><span class="line"><span class="built_in">echo</span> before <span class="keyword">call</span> myFuncNoPara</span><br><span class="line"><span class="function">call:<span class="title">myFuncNoPara</span></span></span><br><span class="line"><span class="function"><span class="title">echo</span> <span class="title">after</span> <span class="title">call</span> <span class="title">myFuncNoPara</span></span></span><br><span class="line"><span class="function"><span class="title">echo</span> =================================</span></span><br><span class="line"><span class="function"><span class="title">echo</span> ===========<span class="title">Func</span> <span class="title">has</span> <span class="title">paramter</span>=====</span></span><br><span class="line"><span class="function"><span class="title">echo</span> =================================</span></span><br><span class="line"><span class="function"><span class="title">echo</span> <span class="title">before</span> <span class="title">call</span> <span class="title">myFuncHasPara</span></span></span><br><span class="line"><span class="function"><span class="title">call:myFuncHasPara</span> 123 <span class="title">abc</span></span></span><br><span class="line"><span class="function"><span class="title">echo</span> <span class="title">after</span> <span class="title">call</span> <span class="title">myFuncHasPara</span></span></span><br><span class="line"><span class="function"><span class="title">echo</span> =================================</span></span><br><span class="line"><span class="function"><span class="title">echo</span> =======<span class="title">Func</span> <span class="title">with</span> <span class="title">return</span> <span class="title">value</span>====</span></span><br><span class="line"><span class="function"><span class="title">echo</span> =================================</span></span><br><span class="line"><span class="function"><span class="title">set</span> <span class="title">return</span>=123</span></span><br><span class="line"><span class="function"><span class="title">set</span> <span class="title">returnPara</span>=321</span></span><br><span class="line"><span class="function"><span class="title">echo</span> <span class="title">return</span>:%<span class="title">return</span>%</span></span><br><span class="line"><span class="function"><span class="title">echo</span> <span class="title">returnPara</span>:%<span class="title">returnPara</span>%</span></span><br><span class="line"><span class="function"><span class="title">echo</span> <span class="title">befora</span> <span class="title">call</span> <span class="title">myFuncReturnValue</span></span></span><br><span class="line"><span class="function"><span class="title">call:myFuncReturnValue</span> <span class="title">returnPara</span> <span class="title">abc</span></span></span><br><span class="line"><span class="function"><span class="title">echo</span> <span class="title">after</span> <span class="title">call</span> <span class="title">myFuncReturnValue</span></span></span><br><span class="line"><span class="function"><span class="title">echo</span> <span class="title">return</span>:%<span class="title">return</span>%</span></span><br><span class="line"><span class="function"><span class="title">echo</span> <span class="title">returnPara</span>:%<span class="title">returnPara</span>%</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">pause</span></span></span><br><span class="line"><span class="function">:<span class="title">myFuncNoPara</span></span></span><br><span class="line"><span class="function"><span class="title">echo</span> <span class="title">myFuncNoPara</span> <span class="title">enter</span></span></span><br><span class="line"><span class="function"><span class="title">echo</span> <span class="title">myFuncNoPara</span> <span class="title">First</span> <span class="title">para</span>:%1</span></span><br><span class="line"><span class="function"><span class="title">echo</span> <span class="title">myFuncNoPara</span> <span class="title">Second</span> <span class="title">para</span>:%2</span></span><br><span class="line"><span class="function"><span class="title">echo</span> <span class="title">myFuncNoPara</span> <span class="title">Third</span> <span class="title">para</span>:%3</span></span><br><span class="line"><span class="function"><span class="title">echo</span> <span class="title">myFuncNoPara</span> <span class="title">exit</span></span></span><br><span class="line"><span class="function"><span class="title">goto:eof</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">:<span class="title">myFuncHasPara</span></span></span><br><span class="line"><span class="function"><span class="title">echo</span> <span class="title">myFuncHasPara</span> <span class="title">enter</span></span></span><br><span class="line"><span class="function"><span class="title">echo</span> <span class="title">myFuncHasPara</span> <span class="title">First</span> <span class="title">para</span>:%1</span></span><br><span class="line"><span class="function"><span class="title">echo</span> <span class="title">myFuncHasPara</span> <span class="title">Second</span> <span class="title">para</span>:%2</span></span><br><span class="line"><span class="function"><span class="title">echo</span> <span class="title">myFuncHasPara</span> <span class="title">Third</span> <span class="title">para</span>:%3</span></span><br><span class="line"><span class="function"><span class="title">echo</span> <span class="title">myFuncHasPara</span> <span class="title">exit</span></span></span><br><span class="line"><span class="function"><span class="title">goto:eof</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">:<span class="title">myFuncReturnValue</span></span></span><br><span class="line"><span class="function"><span class="title">echo</span> <span class="title">myFuncReturnValue</span></span></span><br><span class="line"><span class="function"><span class="title">echo</span> <span class="title">myFuncReturnValue</span> <span class="title">First</span> <span class="title">para</span>:%1</span></span><br><span class="line"><span class="function"><span class="title">echo</span> <span class="title">myFuncReturnValue</span> <span class="title">Second</span> <span class="title">para</span>:%2</span></span><br><span class="line"><span class="function"><span class="title">set</span> &quot;%~1=%2%&quot;</span></span><br><span class="line"><span class="function"><span class="title">set</span> <span class="title">return</span>=%2</span></span><br><span class="line"><span class="function"><span class="title">goto:eof</span></span></span><br></pre></td></tr></table></figure><p><strong>运行效果图：</strong></p><img src="https://img-blog.csdn.net/20170630145539023?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcGVuZ19jYW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"><hr><blockquote><p><strong>说明：本文是收集参考文档，以方便查看（侵删）</strong></p></blockquote><hr><h1 id="信息链接"><a href="#信息链接" class="headerlink" title="信息链接:"></a>信息链接:</h1><ol><li><a href="https://blog.csdn.net/peng_cao/article/details/73999076">bat 脚本之 使用函数</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">bat实现类似C/C++中call函数调用，实际上是没有函数方法</summary>
    
    
    
    <category term="小插件类" scheme="https://zml3589110.github.io/categories/%E5%B0%8F%E6%8F%92%E4%BB%B6%E7%B1%BB/"/>
    
    <category term="BAT" scheme="https://zml3589110.github.io/categories/BAT/"/>
    
    <category term="语法" scheme="https://zml3589110.github.io/categories/%E8%AF%AD%E6%B3%95/"/>
    
    
    <category term="计算机" scheme="https://zml3589110.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    <category term="bat" scheme="https://zml3589110.github.io/tags/bat/"/>
    
    <category term="脚本" scheme="https://zml3589110.github.io/tags/%E8%84%9A%E6%9C%AC/"/>
    
    <category term="cmd" scheme="https://zml3589110.github.io/tags/cmd/"/>
    
    <category term="函数使用" scheme="https://zml3589110.github.io/tags/%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>bat路径字符串处理</title>
    <link href="https://zml3589110.github.io/posts/4108996742.html"/>
    <id>https://zml3589110.github.io/posts/4108996742.html</id>
    <published>2022-11-12T03:04:20.000Z</published>
    <updated>2022-11-12T03:30:43.305Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>又是实际开发中的问题，想要截取一个文件路径中的盘符、文件名等信息，第一反应是正则表达式？或者是 split 函数？这些往往都是“高级”语言中才会有的实现方法，对于批处理来说有点“带不动”啊，那么在bat批处理中要怎样处理类似的请求呢？最近找到了两种方法，接下来会逐一展示一下，不过在展示具体的写法前，我们先来看一下 %~dp0的含义。</p><h2 id="dp0的含义"><a href="#dp0的含义" class="headerlink" title="%~dp0的含义"></a>%~dp0的含义</h2><p>关于 %<del>dp0 的作用在之前的总结中[ 《.bat批处理（四）：路径相关%cd%和%</del>dp0的区别》 ](<a href="https://blog.csdn.net/albertsh/article/details/52807345">https://blog.csdn.net/albertsh/article/details/52807345</a>) 有提到过，它表示当前运行的批处理文件所在的目录，那么它是一个特殊的变量吗？</p><p>可以说算是吧，这个变量特殊在它是从参数变量 %0 扩展而来的，提到 %0 很多人都会想到它是批处理脚本的第一个参数，表示当前运行的脚本全路径，可以写个脚本试一下：</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># Albert <span class="built_in">at</span> home-pc <span class="keyword">in</span> D:\data\bat [<span class="number">0</span>:<span class="number">03</span>:<span class="number">25</span>]</span><br><span class="line">% Get-Content showparams.bat</span><br><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> %<span class="number">0</span></span><br><span class="line"><span class="built_in">echo</span> %<span class="number">1</span></span><br><span class="line"></span><br><span class="line"># Albert <span class="built_in">at</span> home-pc <span class="keyword">in</span> D:\data\bat [<span class="number">0</span>:<span class="number">03</span>:<span class="number">31</span>]</span><br><span class="line">% ./showparams.bat good</span><br><span class="line">&quot;D:\data\bat\showparams.bat&quot;</span><br><span class="line">good</span><br></pre></td></tr></table></figure><blockquote><p>类似的变量还有 1%、2%、3%… 一直到9%，都依次表示运行批处理脚本时传入的参数，这些变量还有一个本领，那就是支持扩展，写起来花里胡哨的。</p></blockquote><h1 id="扩展字符串"><a href="#扩展字符串" class="headerlink" title="扩展字符串"></a>扩展字符串</h1><p><strong>扩展字符串是批处理自带的功能，可以实现对表示文件路径的字符串进行特殊的处理，以%0 参数为例，具体功能列举如下：</strong></p><ul><li>%~0 - 删除路径中的引号</li><li>%~f0 - 将 %0 扩展到一个完全合格的路径名</li><li>%~d0 - 将 %0 扩展到一个驱动器号</li><li>%~p0 - 将 %0 扩展到一个路径</li><li>%~n0 - 将 %0 扩展到一个文件名</li><li>%~x0 - 将 %0 扩展到一个文件扩展名</li><li>%~s0 - 将 %0 扩展的路径只含有短名</li><li>%~a0 - 将 %0 扩展到文件的文件属性</li><li>%~t0 - 将 %0 扩展到文件的日期&#x2F;时间</li><li>%~z0 - 将 %0 扩展到文件的大小</li><li>%~$PATH:0 查找变量0%在环境变量$PATH的目录，并将 %0 扩展到找到的第一个完全合格的名称，$PATH未被定义或没找到文件，则结果为空字符串</li></ul><blockquote><p>当然这个写法也可以进行组合，比如 %<del>d0 和 %</del>p0 组合后变成 %<del>dp0 也就是我们常见的那个变量啦</del></p></blockquote><p><strong>可以将这些变量打印出来看一下具体的值：</strong></p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"># Albert <span class="built_in">at</span> home-pc <span class="keyword">in</span> D:\data\bat [<span class="number">0</span>:<span class="number">26</span>:<span class="number">17</span>]</span><br><span class="line">% Get-Content showparams.bat</span><br><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> %<span class="number">0</span></span><br><span class="line"><span class="built_in">echo</span> %~<span class="number">0</span></span><br><span class="line"><span class="built_in">echo</span> %~f0</span><br><span class="line"><span class="built_in">echo</span> %~d0</span><br><span class="line"><span class="built_in">echo</span> %~p0</span><br><span class="line"><span class="built_in">echo</span> %~n0</span><br><span class="line"><span class="built_in">echo</span> %~x0</span><br><span class="line"><span class="built_in">echo</span> %~s0</span><br><span class="line"><span class="built_in">echo</span> %~a0</span><br><span class="line"><span class="built_in">echo</span> %~t0</span><br><span class="line"><span class="built_in">echo</span> %~z0</span><br><span class="line"><span class="built_in">echo</span> %~dp0</span><br><span class="line"><span class="built_in">echo</span> %~nx0</span><br><span class="line"># Albert <span class="built_in">at</span> home-pc <span class="keyword">in</span> D:\data\bat [<span class="number">0</span>:<span class="number">26</span>:<span class="number">28</span>]</span><br><span class="line">% .\showparams.bat</span><br><span class="line">&quot;D:\data\bat\showparams.bat&quot;</span><br><span class="line"><span class="function">D:\<span class="title">data</span>\<span class="title">bat</span>\<span class="title">showparams.bat</span></span></span><br><span class="line"><span class="function"><span class="title">D</span>:\<span class="title">data</span>\<span class="title">bat</span>\<span class="title">showparams.bat</span></span></span><br><span class="line"><span class="function"><span class="title">D</span>:</span></span><br><span class="line"><span class="function">\<span class="title">data</span>\<span class="title">bat</span>\</span></span><br><span class="line"><span class="function"><span class="title">showparams</span></span></span><br><span class="line"><span class="function">.<span class="title">bat</span></span></span><br><span class="line"><span class="function"><span class="title">D</span>:\<span class="title">data</span>\<span class="title">bat</span>\<span class="title">showparams.bat</span></span></span><br><span class="line"><span class="function">--<span class="title">a</span>--------</span></span><br><span class="line"><span class="function">2021/10/17 00:26</span></span><br><span class="line"><span class="function">156</span></span><br><span class="line"><span class="function"><span class="title">D</span>:\<span class="title">data</span>\<span class="title">bat</span>\</span></span><br><span class="line"><span class="function"><span class="title">showparams.bat</span></span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure><h1 id="从字符串中截取路径、文件名（重点）"><a href="#从字符串中截取路径、文件名（重点）" class="headerlink" title="从字符串中截取路径、文件名（重点）"></a>从字符串中截取路径、文件名（重点）</h1><p>上面的部分解释了%~dp0，同时也知道了这些脚本参数指出扩展语法，如果是普通变量的话就不能使用扩展语法了，那么对于一个普通的包含字符串怎么才能使用扩展语法，截取到想要的部分呢？目前我知道的有两种方法：一种是传参使其变成脚本参数，也就是 %n的形式，另一种方法就是使用 for 语句，接下来分别看一下。</p><h2 id="脚本传参（这个方法很好-使用call方式调用传参）"><a href="#脚本传参（这个方法很好-使用call方式调用传参）" class="headerlink" title="脚本传参（这个方法很好-使用call方式调用传参）"></a>脚本传参（这个方法很好-使用call方式调用传参）</h2><p>普通的字符串无法进行扩展，如果想把这种变量就需要把它们变成脚本参数，这就需要将参数传递给另一个脚本，这样实现起来会将脚本调用变得复杂一些，实际上可以在一个脚本中完成截取工作，类似于C&#x2F;C++中的函数调用，可以在批处理中使用 call 命令搭配标签实现，具体代码如下：</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"># Albert <span class="built_in">at</span> home-pc <span class="keyword">in</span> D:\data\bat [<span class="number">17</span>:<span class="number">37</span>:<span class="number">54</span>]</span><br><span class="line">% Get-Content extract1.bat</span><br><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> OriginStr=&quot;C:/Demo/myproject/example.txt&quot;</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">%OriginStr%</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">call</span> :extract <span class="variable">%OriginStr%</span></span><br><span class="line"><span class="keyword">goto</span> :eof</span><br><span class="line"></span><br><span class="line">:extract</span><br><span class="line"><span class="comment">rem 获取到文件路径</span></span><br><span class="line"><span class="built_in">echo</span> %~dp1</span><br><span class="line"><span class="comment">rem 获取到文件盘符</span></span><br><span class="line"><span class="built_in">echo</span> %~d1</span><br><span class="line"><span class="comment">rem 获取到文件名称</span></span><br><span class="line"><span class="built_in">echo</span> %~n1</span><br><span class="line"><span class="comment">rem 获取到文件后缀</span></span><br><span class="line"><span class="built_in">echo</span> %~x1</span><br><span class="line"></span><br><span class="line"># Albert <span class="built_in">at</span> home-pc <span class="keyword">in</span> D:\data\bat [<span class="number">17</span>:<span class="number">41</span>:<span class="number">25</span>]</span><br><span class="line">% .\extract1.bat</span><br><span class="line">&quot;C:/Demo/myproject/example.txt&quot;</span><br><span class="line"><span class="function">C:\<span class="title">Demo</span>\<span class="title">myproject</span>\</span></span><br><span class="line"><span class="function"><span class="title">C</span>:</span></span><br><span class="line"><span class="function"><span class="title">example</span></span></span><br><span class="line"><span class="function">.<span class="title">txt</span></span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure><p><strong>在这段代码中 :eof 标签是一个默认的标签，表示文件结尾，实际需求中需根据具体要求进行调整。</strong></p><h2 id="for语法扩展"><a href="#for语法扩展" class="headerlink" title="for语法扩展"></a>for语法扩展</h2><p><strong>使用 for 循环是另一种实现方式，因为循环变量也可以支持扩展，可以将需要截取的字符串路径放在循环范围中，然后先循环输出测试下：</strong></p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># Albert <span class="built_in">at</span> home-pc <span class="keyword">in</span> D:\data\bat [<span class="number">17</span>:<span class="number">46</span>:<span class="number">29</span>]</span><br><span class="line">% Get-Content extract2.bat</span><br><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> OriginStr=&quot;C:/Demo/myproject/example.txt&quot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="variable">%%I</span> <span class="keyword">in</span> (<span class="variable">%OriginStr%</span>) <span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">%%I</span></span><br><span class="line"></span><br><span class="line"># Albert <span class="built_in">at</span> home-pc <span class="keyword">in</span> D:\data\bat [<span class="number">17</span>:<span class="number">46</span>:<span class="number">57</span>]</span><br><span class="line">% .\extract2.bat</span><br><span class="line">&quot;C:/Demo/myproject/example.txt&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>在批处理中的循环变量是 %%I的形式，需要两个 % 才可以，后面的变量名可以换成26个字母中的任意一个，并且字母会区分大小写，然后利用这些循环变量就可以进行扩展，然后完成最开始的需求，实现代码如下：</strong></p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># Albert <span class="built_in">at</span> home-pc <span class="keyword">in</span> D:\data\bat [<span class="number">17</span>:<span class="number">53</span>:<span class="number">53</span>]</span><br><span class="line">% Get-Content extract2.bat</span><br><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> OriginStr=&quot;C:/Demo/myproject/example.txt&quot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="variable">%%I</span> <span class="keyword">in</span> (<span class="variable">%OriginStr%</span>) <span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">%%I</span></span><br><span class="line"></span><br><span class="line"><span class="comment">rem 获取到文件路径</span></span><br><span class="line"><span class="keyword">for</span> <span class="variable">%%I</span> <span class="keyword">in</span> (<span class="variable">%OriginStr%</span>) <span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">%%~</span>dpI</span><br><span class="line"><span class="comment">rem 获取到文件盘符</span></span><br><span class="line"><span class="keyword">for</span> <span class="variable">%%I</span> <span class="keyword">in</span> (<span class="variable">%OriginStr%</span>) <span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">%%~</span>dI</span><br><span class="line"><span class="comment">rem 获取到文件名称</span></span><br><span class="line"><span class="keyword">for</span> <span class="variable">%%I</span> <span class="keyword">in</span> (<span class="variable">%OriginStr%</span>) <span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">%%~</span>nI</span><br><span class="line"><span class="comment">rem 获取到文件后缀</span></span><br><span class="line"><span class="keyword">for</span> <span class="variable">%%I</span> <span class="keyword">in</span> (<span class="variable">%OriginStr%</span>) <span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">%%~</span>xI</span><br><span class="line"></span><br><span class="line"># Albert <span class="built_in">at</span> home-pc <span class="keyword">in</span> D:\data\bat [<span class="number">17</span>:<span class="number">54</span>:<span class="number">01</span>]</span><br><span class="line">% .\extract2.bat</span><br><span class="line">&quot;C:/Demo/myproject/example.txt&quot;</span><br><span class="line"><span class="function">C:\<span class="title">Demo</span>\<span class="title">myproject</span>\</span></span><br><span class="line"><span class="function"><span class="title">C</span>:</span></span><br><span class="line"><span class="function"><span class="title">example</span></span></span><br><span class="line"><span class="function">.<span class="title">txt</span></span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure><blockquote><p>这种写法的好处就是无需控制标签跳转流程，通过循环命令 for 就可以获取想要的参数，使用起来会方便很多。</p></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>在批处理文件中 %~dp0 表示批处理文件所在的目录，而 %cd% 表示执行命令时所在的目录</li><li>在批处理文件中想要截取目录操作可以使用变量扩展来实现，而变量必须是 %i 的形式，其中的 i 是可以是 a<del>zA</del>Z0~9</li><li>for 表达式中的循环变量在cmd命令行中是 %i 的形式，而在批处理文件中需要协程 %%i 的形式</li><li>常用的变量扩展有：获取到文件盘符使用 %<del>d0，获取到文件名称使用 %</del>n0，获取到文件后缀使用 %~x0</li></ul><p><strong>注：使用在 【设置工程名称.bat】 文件中处理</strong></p><hr><blockquote><p><strong>说明：本文是收集参考文档，以方便查看（侵删）</strong></p></blockquote><hr><h1 id="信息链接"><a href="#信息链接" class="headerlink" title="信息链接:"></a>信息链接:</h1><ol><li><a href="https://blog.csdn.net/albertsh/article/details/120818017">.bat批处理（十）：从路径字符串中截取盘符、文件名、后缀名等信息</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">对路径字符串进行处理</summary>
    
    
    
    <category term="小插件类" scheme="https://zml3589110.github.io/categories/%E5%B0%8F%E6%8F%92%E4%BB%B6%E7%B1%BB/"/>
    
    <category term="文件管理" scheme="https://zml3589110.github.io/categories/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/"/>
    
    <category term="BAT" scheme="https://zml3589110.github.io/categories/BAT/"/>
    
    
    <category term="文件管理" scheme="https://zml3589110.github.io/tags/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/"/>
    
    <category term="计算机" scheme="https://zml3589110.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    <category term="bat" scheme="https://zml3589110.github.io/tags/bat/"/>
    
    <category term="脚本" scheme="https://zml3589110.github.io/tags/%E8%84%9A%E6%9C%AC/"/>
    
    <category term="cmd" scheme="https://zml3589110.github.io/tags/cmd/"/>
    
    <category term="路径" scheme="https://zml3589110.github.io/tags/%E8%B7%AF%E5%BE%84/"/>
    
  </entry>
  
  <entry>
    <title>C# 在复制大量文件期间不响应UI</title>
    <link href="https://zml3589110.github.io/posts/958244878.html"/>
    <id>https://zml3589110.github.io/posts/958244878.html</id>
    <published>2022-11-11T09:03:20.000Z</published>
    <updated>2022-11-11T09:07:34.341Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>我已经编写了一个备份管理器项目，该项目提供了一个文件夹，它将每个文件和文件夹都复制到另一个位置，依此类推。</p><p>它可以工作(很好地完成了复制作业)，但是在复制过程中(大约需要1分钟)，应用程序UI不会响应。我听说过线程，并且看到过并行编程一词(仅此而已)，现在我需要一些解释，比较和示例，以能够切换我的代码。</p><p>我之前对线程做过非常简单的操作，但是很久以前，我对线程还没有足够的信心。这是我的代码:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">CopyFiles</span>(<span class="params"><span class="built_in">string</span> path, <span class="built_in">string</span> dest</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    System.IO.Directory.CreateDirectory(dest + <span class="string">&quot;\\&quot;</span> + path.Split(<span class="string">&#x27;\\&#x27;</span>)[path.Split(<span class="string">&#x27;\\&#x27;</span>).Count()<span class="number">-1</span>]);</span><br><span class="line">    dest = dest + <span class="string">&quot;\\&quot;</span> + path.Split(<span class="string">&#x27;\\&#x27;</span>)[path.Split(<span class="string">&#x27;\\&#x27;</span>).Count() - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="built_in">string</span> file <span class="keyword">in</span> System.IO.Directory.GetFiles(path))</span><br><span class="line">    &#123;</span><br><span class="line">        System.IO.File.Copy(file, dest + <span class="string">&quot;\\&quot;</span> + file.Split(<span class="string">&#x27;\\&#x27;</span>)[file.Split(<span class="string">&#x27;\\&#x27;</span>).Count() - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="built_in">string</span> folder <span class="keyword">in</span> System.IO.Directory.GetDirectories(path))</span><br><span class="line">    &#123;</span><br><span class="line">        CopyFiles(folder, dest);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>我会根据特定的时间间隔在计时器中运行此程序，如果我使用线程，是否应该省略计时器？带领我，我很困惑。</p></blockquote><h1 id="最佳答案"><a href="#最佳答案" class="headerlink" title="最佳答案"></a>最佳答案</h1><p>由于您没有足够的线程信心，因此我强烈建议您阅读<a href="https://www.albahari.com/threading/">Joe Albahari’s Threading in C# Tutorial</a>。并行编程是指您以“并行”方式或同时进行多项操作(主要是将大量计算分散在多个CPU或GPU内核上)。在这种情况下，您希望线程在复制所有文件时使您的UI响应。从本质上讲，您将具有如下所示的内容:(在阅读了C#教程中的线程之后)</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Thread copyFilesThread = <span class="keyword">new</span> Thread(() =&gt; </span><br><span class="line">&#123;</span><br><span class="line">    CopyFiles(path, dest);</span><br><span class="line">&#125;);</span><br><span class="line">copyFilesThread.Start();</span><br></pre></td></tr></table></figure><p>UI在其自己的线程上运行。放入您的应用程序中的所有代码都将在UI线程上运行(除非您显式使用线程)。由于您的CopyFiles方法需要很长时间，因此它将停止UI，直到复制作业完成。使用线程将在UI线程的单独线程上运行CopyFiles，因此使UI线程响应。</p><p>编辑:至于您的计时器，它多久运行一次？<br>关于c# - 用户界面在复制大量文件期间不响应，我们在Stack Overflow上找到一个类似的问题： <a href="https://stackoverflow.com/questions/14018567/">https://stackoverflow.com/questions/14018567/</a></p><hr><h1 id="相关链接（侵删）"><a href="#相关链接（侵删）" class="headerlink" title="相关链接（侵删）"></a>相关链接（侵删）</h1><ol><li><a href="https://www.coder.work/article/7527149">c# - 用户界面在复制大量文件期间不响应</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">C#在复制大量文件期间不响应UI，导致卡顿</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="C#" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/C/"/>
    
    <category term="前端" scheme="https://zml3589110.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="文件管理" scheme="https://zml3589110.github.io/categories/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/"/>
    
    
    <category term="C#" scheme="https://zml3589110.github.io/tags/C/"/>
    
    <category term="文件管理" scheme="https://zml3589110.github.io/tags/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/"/>
    
    <category term="复制文件" scheme="https://zml3589110.github.io/tags/%E5%A4%8D%E5%88%B6%E6%96%87%E4%BB%B6/"/>
    
    <category term="UI" scheme="https://zml3589110.github.io/tags/UI/"/>
    
  </entry>
  
  <entry>
    <title>C# 文件及文件夹复制并显示进度条</title>
    <link href="https://zml3589110.github.io/posts/3190408972.html"/>
    <id>https://zml3589110.github.io/posts/3190408972.html</id>
    <published>2022-11-11T09:03:20.000Z</published>
    <updated>2022-11-11T09:29:05.819Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考给出的方案"><a href="#参考给出的方案" class="headerlink" title="参考给出的方案"></a>参考给出的方案</h1><p><strong>先求出文件和目录的数目：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="built_in">int</span> <span class="title">Count</span>(<span class="params">String src</span>)</span> &#123;</span><br><span class="line"><span class="built_in">int</span> count = <span class="number">1</span>;</span><br><span class="line">String[] sub = Directory.GetDirectories(src);</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; sub.Length; i++) &#123;</span><br><span class="line">count += Count(sub[i]);</span><br><span class="line">&#125;</span><br><span class="line">String[] files = Directory.GetFiles(src);</span><br><span class="line">count += files.Length;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>设置ProgressBar属性Maximum为上面求出的数目，然后复制：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Copy</span>(<span class="params">String src, String dest</span>)</span> &#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">Directory.CreateDirectory(dest);</span><br><span class="line">String[] sub = Directory.GetDirectories(src);</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; sub.Length; i++) &#123;</span><br><span class="line">String name = Path.GetFileName(sub[i]);</span><br><span class="line">Copy(sub[i], dest + <span class="string">&quot;\\&quot;</span> + name);</span><br><span class="line">&#125;</span><br><span class="line">String[] files = Directory.GetFiles(src);</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; files.Length; i++) &#123;</span><br><span class="line">String name = Path.GetFileName(files[i]);</span><br><span class="line">File.Copy(files[i], dest + <span class="string">&quot;\\&quot;</span> + name);</span><br><span class="line">&#125;</span><br><span class="line">progressBar1.Increment(files.Length + <span class="number">1</span>);<span class="comment">//progressBar1是进度条。</span></span><br><span class="line">&#125;catch(Exception e)&#123;</span><br><span class="line">Console.WriteLine(e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>拷贝文件夹：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CopyDirectory</span>(<span class="params"><span class="built_in">string</span> SourceDirectory, <span class="built_in">string</span> TargetDirectory</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">DirectoryInfo source = <span class="keyword">new</span> DirectoryInfo(SourceDirectory);</span><br><span class="line">DirectoryInfo target = <span class="keyword">new</span> DirectoryInfo(TargetDirectory);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Check If we have valid source</span></span><br><span class="line"><span class="keyword">if</span>(!source.Exists)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!target.Exists)</span><br><span class="line">target.Create();</span><br><span class="line"></span><br><span class="line"><span class="comment">//Copy Files</span></span><br><span class="line">FileInfo[] sourceFiles = source.GetFiles();</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; sourceFiles.Length; ++i)</span><br><span class="line">File.Copy(sourceFiles[i].FullName, target.FullName + <span class="string">&quot;\\&quot;</span> + sourceFiles[i].Name,<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Copy directories</span></span><br><span class="line">DirectoryInfo[] sourceDirectories = source.GetDirectories();</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; sourceDirectories.Length; ++j)</span><br><span class="line">CopyDirectory(sourceDirectories[j].FullName,target.FullName +<span class="string">&quot;\\&quot;</span> + sourceDirectories</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="自己最后实现的进度条显示方法的部分代码"><a href="#自己最后实现的进度条显示方法的部分代码" class="headerlink" title="自己最后实现的进度条显示方法的部分代码"></a>自己最后实现的进度条显示方法的部分代码</h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先求出文件和目录的数目：</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="built_in">int</span> <span class="title">Count</span>(<span class="params">String src</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">int</span> count = <span class="number">1</span>;</span><br><span class="line">    String[] sub = Directory.GetDirectories(src);</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; sub.Length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        count += Count(sub[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    String[] files = Directory.GetFiles(src);</span><br><span class="line">    count += files.Length;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 复制文件及文件夹</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;srcPath&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;destPath&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">copyDir</span>(<span class="params"><span class="built_in">string</span> srcPath, <span class="built_in">string</span> destPath</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DirectoryInfo dir = <span class="keyword">new</span> DirectoryInfo(srcPath);</span><br><span class="line">    <span class="comment">//获取目录下的文件和子目录</span></span><br><span class="line">    FileSystemInfo[] fileinfo = dir.GetFileSystemInfos();</span><br><span class="line">    <span class="keyword">foreach</span> (FileSystemInfo i <span class="keyword">in</span> fileinfo)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i <span class="keyword">is</span> DirectoryInfo)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//判断是否文件夹</span></span><br><span class="line">            <span class="keyword">if</span> (!Directory.Exists(destPath + <span class="string">&quot;\\&quot;</span> + i.Name))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//目标目录下不存在此文件夹即创建子文件夹</span></span><br><span class="line">                Directory.CreateDirectory(destPath + <span class="string">&quot;\\&quot;</span> + i.Name);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//递归调用复制子文件夹</span></span><br><span class="line">            copyDir(i.FullName, destPath + <span class="string">&quot;\\&quot;</span> + i.Name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//不是文件夹即复制文件，true表示可以覆盖同名文件</span></span><br><span class="line">            <span class="comment">//File.Copy(i.FullName, destPath + &quot;\\&quot; + i.Name, true);</span></span><br><span class="line">            CopyFile_1(i.FullName, destPath + <span class="string">&quot;\\&quot;</span> + i.Name, <span class="number">1024</span>);<span class="comment">//复制文件</span></span><br><span class="line">        &#125;</span><br><span class="line">        FileCnt++;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//跨线程访问UI控件，更新主线程中dataGridView表格内容</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.InvokeRequired)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.Invoke(<span class="keyword">new</span> MethodInvoker(<span class="built_in">delegate</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//此处可用于更新UI控件内容</span></span><br><span class="line">                <span class="keyword">this</span>.progressBar2.Maximum = FileMax;</span><br><span class="line">                <span class="keyword">this</span>.progressBar2.Value = FileCnt;</span><br><span class="line">                <span class="comment">//this.progressBar2.Increment(FileCnt);//progressBar1是进度条。</span></span><br><span class="line">                <span class="keyword">this</span>.label2.Text = (FileCnt*<span class="number">100</span> / FileMax).ToString() + <span class="string">&quot;%&quot;</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">this</span>.richTextBox1.AppendText(FileCnt.ToString() + <span class="string">&quot;:&quot;</span> + destPath + <span class="string">&quot;\\&quot;</span> + i.Name + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                <span class="keyword">this</span>.richTextBox1.SelectionStart = <span class="keyword">this</span>.richTextBox1.Text.Length; <span class="comment">// 光标 移动到 最后一行</span></span><br><span class="line">                <span class="keyword">this</span>.richTextBox1.ScrollToCaret();</span><br><span class="line">                </span><br><span class="line"></span><br><span class="line">                <span class="comment">//this.richTextBox1.AppendText(destPath + &quot;\\&quot; + i.Name+&quot;\n&quot;);</span></span><br><span class="line">            &#125;</span><br><span class="line">            ));</span><br><span class="line">        &#125;<span class="comment">//跨线程访问UI控件，更新主线程中dataGridView表格内容</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 文件的复制</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param FormerFile=&quot;string&quot;&gt;</span>源文件路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param toFile=&quot;string&quot;&gt;</span>目的文件路径<span class="doctag">&lt;/param&gt;</span> </span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param SectSize=&quot;int&quot;&gt;</span>传输大小<span class="doctag">&lt;/param&gt;</span> </span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param progressBar=&quot;ProgressBar&quot;&gt;</span>ProgressBar控件<span class="doctag">&lt;/param&gt;</span> </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CopyFile_1</span>(<span class="params"><span class="built_in">string</span> FormerFile, <span class="built_in">string</span> toFile, <span class="built_in">int</span> SectSize</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//progressBar1.Value = 0;//设置进度栏的当前位置为0</span></span><br><span class="line">    <span class="comment">//progressBar1.Minimum = 0;//设置进度栏的最小值为0</span></span><br><span class="line">    </span><br><span class="line">    FileStream fileToCreate = <span class="keyword">new</span> FileStream(toFile, FileMode.Create);<span class="comment">//创建目的文件，如果已存在将被覆盖</span></span><br><span class="line">    fileToCreate.Close();<span class="comment">//关闭所有资源</span></span><br><span class="line">    fileToCreate.Dispose();<span class="comment">//释放所有资源</span></span><br><span class="line">    FormerOpen = <span class="keyword">new</span> FileStream(FormerFile, FileMode.Open, FileAccess.Read);<span class="comment">//以只读方式打开源文件</span></span><br><span class="line">    ToFileOpen = <span class="keyword">new</span> FileStream(toFile, FileMode.Append, FileAccess.Write);<span class="comment">//以写方式打开目的文件</span></span><br><span class="line">    <span class="built_in">int</span> max = Convert.ToInt32(Math.Ceiling((<span class="built_in">double</span>)FormerOpen.Length / (<span class="built_in">double</span>)SectSize));<span class="comment">//根据一次传输的大小，计算传输的个数</span></span><br><span class="line">    <span class="comment">//progressBar1.Maximum = max;//设置进度栏的最大值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.InvokeRequired)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.Invoke(<span class="keyword">new</span> MethodInvoker(<span class="built_in">delegate</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//此处可用于更新UI控件内容</span></span><br><span class="line">            <span class="keyword">this</span>.progressBar1.Value = <span class="number">0</span>;<span class="comment">//增加进度栏的进度块</span></span><br><span class="line">            <span class="keyword">this</span>.progressBar1.Minimum = <span class="number">0</span>;<span class="comment">//设置进度栏的最小值为0</span></span><br><span class="line">            <span class="keyword">this</span>.progressBar1.Maximum = max;<span class="comment">//设置进度栏的最大值</span></span><br><span class="line">        &#125;</span><br><span class="line">        ));</span><br><span class="line">    &#125;<span class="comment">//跨线程访问UI控件，更新主线程中dataGridView表格内容</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> FileSize;<span class="comment">//要拷贝的文件的大小</span></span><br><span class="line">    <span class="keyword">if</span> (SectSize &lt; FormerOpen.Length)<span class="comment">//如果分段拷贝，即每次拷贝内容小于文件总长度</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">byte</span>[] buffer = <span class="keyword">new</span> <span class="built_in">byte</span>[SectSize];<span class="comment">//根据传输的大小，定义一个字节数组</span></span><br><span class="line">        <span class="built_in">int</span> copied = <span class="number">0</span>;<span class="comment">//记录传输的大小</span></span><br><span class="line">        <span class="built_in">int</span> tem_n = <span class="number">1</span>;<span class="comment">//设置进度栏中进度块的增加个数</span></span><br><span class="line">        <span class="keyword">while</span> (copied &lt;= ((<span class="built_in">int</span>)FormerOpen.Length - SectSize))<span class="comment">//拷贝主体部分</span></span><br><span class="line">        &#123;</span><br><span class="line">            FileSize = FormerOpen.Read(buffer, <span class="number">0</span>, SectSize);<span class="comment">//从0开始读，每次最大读SectSize</span></span><br><span class="line">            FormerOpen.Flush();<span class="comment">//清空缓存</span></span><br><span class="line">            ToFileOpen.Write(buffer, <span class="number">0</span>, SectSize);<span class="comment">//向目的文件写入字节</span></span><br><span class="line">            ToFileOpen.Flush();<span class="comment">//清空缓存</span></span><br><span class="line">            ToFileOpen.Position = FormerOpen.Position;<span class="comment">//使源文件和目的文件流的位置相同</span></span><br><span class="line">            copied += FileSize;<span class="comment">//记录已拷贝的大小</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//progressBar1.Value = progressBar1.Value + tem_n;//增加进度栏的进度块</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//跨线程访问UI控件，更新主线程中dataGridView表格内容</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.InvokeRequired)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>.Invoke(<span class="keyword">new</span> MethodInvoker(<span class="built_in">delegate</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//此处可用于更新UI控件内容</span></span><br><span class="line">                    <span class="keyword">this</span>.progressBar1.Value = <span class="keyword">this</span>.progressBar1.Value + tem_n;<span class="comment">//增加进度栏的进度块</span></span><br><span class="line">                    <span class="comment">//label1.Text = this.progressBar1.Value.ToString();</span></span><br><span class="line">                    <span class="comment">//label2.Text = FormerOpen.Length.ToString();</span></span><br><span class="line">                    <span class="comment">//label1.Text = ((this.progressBar1.Value / max) * 100).ToString() + &quot;%&quot;;</span></span><br><span class="line">                    <span class="comment">//label2.Text = ((1-(FormerOpen.Length / FileMax)) * 100).ToString() + &quot;%&quot;;</span></span><br><span class="line">                    <span class="comment">//label1.Text = (copied).ToString();  //当前复制大小</span></span><br><span class="line">                    <span class="comment">//label2.Text = (FormerOpen.Length).ToString();   //文件大小</span></span><br><span class="line"></span><br><span class="line">                    label1.Text = (copied / (FormerOpen.Length / <span class="number">100</span>)).ToString() + <span class="string">&quot;%&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                ));</span><br><span class="line">            &#125;<span class="comment">//跨线程访问UI控件，更新主线程中dataGridView表格内容</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">int</span> left = (<span class="built_in">int</span>)FormerOpen.Length - copied;<span class="comment">//获取剩余大小</span></span><br><span class="line">        FileSize = FormerOpen.Read(buffer, <span class="number">0</span>, left);<span class="comment">//读取剩余的字节</span></span><br><span class="line">        FormerOpen.Flush();<span class="comment">//清空缓存</span></span><br><span class="line">        ToFileOpen.Write(buffer, <span class="number">0</span>, left);<span class="comment">//写入剩余的部分</span></span><br><span class="line">        ToFileOpen.Flush();<span class="comment">//清空缓存</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span><span class="comment">//如果整体拷贝，即每次拷贝内容大于文件总长度</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">byte</span>[] buffer = <span class="keyword">new</span> <span class="built_in">byte</span>[FormerOpen.Length];<span class="comment">//获取文件的大小</span></span><br><span class="line">        FormerOpen.Read(buffer, <span class="number">0</span>, (<span class="built_in">int</span>)FormerOpen.Length);<span class="comment">//读取源文件的字节</span></span><br><span class="line">        FormerOpen.Flush();<span class="comment">//清空缓存</span></span><br><span class="line">        ToFileOpen.Write(buffer, <span class="number">0</span>, (<span class="built_in">int</span>)FormerOpen.Length);<span class="comment">//写放字节</span></span><br><span class="line">        ToFileOpen.Flush();<span class="comment">//清空缓存</span></span><br><span class="line">    &#125;</span><br><span class="line">    FormerOpen.Close();<span class="comment">//释放所有资源</span></span><br><span class="line">    ToFileOpen.Close();<span class="comment">//释放所有资源</span></span><br><span class="line">    <span class="comment">//if (MessageBox.Show(&quot;复制完成&quot;) == DialogResult.OK)//显示&quot;复制完成&quot;提示对话框</span></span><br><span class="line">    <span class="comment">//&#123;</span></span><br><span class="line">    <span class="comment">//    progressBar1.Value = 0;//设置进度栏的当有位置为0</span></span><br><span class="line">    <span class="comment">//    textBox1.Clear();//清空文本</span></span><br><span class="line">    <span class="comment">//    textBox2.Clear();</span></span><br><span class="line">    <span class="comment">//    str = &quot;&quot;;</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//单文件拷贝j结束</span></span><br><span class="line">    <span class="comment">//跨线程访问UI控件，更新主线程中dataGridView表格内容</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.InvokeRequired)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.Invoke(<span class="keyword">new</span> MethodInvoker(<span class="built_in">delegate</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//此处可用于更新UI控件内容</span></span><br><span class="line">            <span class="keyword">this</span>.progressBar1.Value = max;<span class="comment">//增加进度栏的进度块</span></span><br><span class="line">            label1.Text = <span class="string">&quot;100%&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ));</span><br><span class="line">    &#125;<span class="comment">//跨线程访问UI控件，更新主线程中dataGridView表格内容</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button5_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//Console.WriteLine(&quot;文件数：&quot; + Count(textBox1.Text));</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">string</span> path = textBox1.Text;</span><br><span class="line">    <span class="built_in">string</span> dest = textBox2.Text;</span><br><span class="line"></span><br><span class="line">    timer1.Start(); <span class="comment">//开始记录复制时间</span></span><br><span class="line">    <span class="comment">//dt1</span></span><br><span class="line">    dt1 = DateTime.Parse(<span class="string">&quot;00:00:00&quot;</span>);</span><br><span class="line">    Lab_Time.Text = <span class="string">&quot;0:00:00&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//progressBar2.Maximum = Count(path);//设置进度栏的最大值</span></span><br><span class="line">    <span class="comment">//创建线程</span></span><br><span class="line">    Thread copyFilesThread = <span class="keyword">new</span> Thread(() =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//sw.Start();</span></span><br><span class="line">        <span class="comment">//CopyFiles(path, dest);</span></span><br><span class="line">        FileCnt = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//FileMax = Count(path);</span></span><br><span class="line">        <span class="comment">//copyDir(path, dest);</span></span><br><span class="line">        <span class="comment">//Console.WriteLine(&quot;FileCnt:&quot; + FileCnt);</span></span><br><span class="line">        <span class="comment">//Console.WriteLine(&quot;FileMax:&quot; + FileMax);</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//判断选择的路径是文件还是文件夹</span></span><br><span class="line">        <span class="keyword">if</span> (File.Exists(path))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> name = System.IO.Path.GetFileName(path);<span class="comment">//名称</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;是文件&#123;0&#125;&quot;</span>, path);</span><br><span class="line">            CopyFile_1(path, dest+<span class="string">&quot;\\&quot;</span>+ name, <span class="number">1024</span>);</span><br><span class="line">            <span class="comment">//timer1.Stop(); //开始记录复制时间</span></span><br><span class="line">            <span class="comment">//Copy(path, dest);</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (Directory.Exists(path))</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;是文件夹&quot;</span>);</span><br><span class="line">            FileMax = Count(path);</span><br><span class="line">            copyDir(path, dest);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;都不是&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        timer1.Stop(); <span class="comment">//开始记录复制时间</span></span><br><span class="line">        MessageBox.Show(<span class="string">&quot;复制完成！&quot;</span>);</span><br><span class="line">        <span class="comment">//Console.WriteLine(&quot;复制时间为:&quot; + sw.Elapsed);</span></span><br><span class="line">        <span class="comment">//sw.Stop();</span></span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">    copyFilesThread.Start();    <span class="comment">//启动线程</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="相关链接（侵删）"><a href="#相关链接（侵删）" class="headerlink" title="相关链接（侵删）"></a>相关链接（侵删）</h1><ol><li><a href="https://bbs.csdn.net/topics/40147989">如何用C#实现文件及文件夹复制,且显示复制的进度条</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">C#文件及文件夹复制，并且显示进度条</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="C#" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/C/"/>
    
    <category term="前端" scheme="https://zml3589110.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="文件管理" scheme="https://zml3589110.github.io/categories/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/"/>
    
    
    <category term="C#" scheme="https://zml3589110.github.io/tags/C/"/>
    
    <category term="文件管理" scheme="https://zml3589110.github.io/tags/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/"/>
    
    <category term="复制文件" scheme="https://zml3589110.github.io/tags/%E5%A4%8D%E5%88%B6%E6%96%87%E4%BB%B6/"/>
    
    <category term="UI" scheme="https://zml3589110.github.io/tags/UI/"/>
    
    <category term="进度条" scheme="https://zml3589110.github.io/tags/%E8%BF%9B%E5%BA%A6%E6%9D%A1/"/>
    
  </entry>
  
  <entry>
    <title>C# 线程之一（理解Thread.Sleep()方法）</title>
    <link href="https://zml3589110.github.io/posts/4167242940.html"/>
    <id>https://zml3589110.github.io/posts/4167242940.html</id>
    <published>2022-11-11T08:46:20.000Z</published>
    <updated>2022-11-11T09:07:34.268Z</updated>
    
    <content type="html"><![CDATA[<h1 id="疑问？"><a href="#疑问？" class="headerlink" title="疑问？"></a>疑问？</h1><p>我们可能经常会用到 Thread.Sleep 函数来使线程挂起一段时间。那么你有没有正确的理解这个函数的用法呢？<br><strong>思考下面这两个问题：</strong></p><ol><li>假设现在是 2008-4-7 12:00:00.000，如果我调用一下 Thread.Sleep(1000) ，在 2008-4-7 12:00:01.000 的时候，这个线程会不会被唤醒？</li><li>某人的代码中用了一句看似莫明其妙的话：Thread.Sleep(0) 。既然是 Sleep 0 毫秒，那么他跟去掉这句代码相比，有啥区别么？</li></ol><blockquote><p><strong>个人补充：</strong>在B站学习C#线程时听过 Thread.Sleep(0) 说明，那是回收CPU的线程时间片！</p></blockquote><h1 id="我们先回顾一下操作系统原理"><a href="#我们先回顾一下操作系统原理" class="headerlink" title="我们先回顾一下操作系统原理"></a>我们先回顾一下操作系统原理</h1><p>操作系统中，CPU竞争有很多种策略。Unix系统使用的是时间片算法，而Windows则属于抢占式的。</p><h2 id="时间片算法"><a href="#时间片算法" class="headerlink" title="时间片算法"></a>时间片算法</h2><p>在时间片算法中，所有的进程排成一个队列。操作系统按照他们的顺序，给每个进程分配一段时间，即该进程允许运行的时间。如果在 时间片结束时进程还在运行，则CPU将被剥夺并分配给另一个进程。如果进程在时间片结束前阻塞或结束，则CPU当即进行切换。调度程 序所要做的就是维护一张就绪进程列表，，当进程用完它的时间片后，它被移到队列的末尾。</p><h2 id="抢占式操作系统"><a href="#抢占式操作系统" class="headerlink" title="抢占式操作系统"></a>抢占式操作系统</h2><p>所谓抢占式操作系统，就是说如果一个进程得到了 CPU 时间，除非它自己放弃使用 CPU ，否则将完全霸占 CPU 。因此可以看出，在抢占式操作系统中，操作系统假设所有的进程都是“人品很好”的，会主动退出 CPU 。在抢占式操作系统中，假设有若干进程，操作系统会根据他们的优先级、饥饿时间（已经多长时间没有使用过 CPU 了），给他们算出一 个总的优先级来。操作系统就会把 CPU 交给总优先级最高的这个进程。当进程执行完毕或者自己主动挂起后，操作系统就会重新计算一次所有进程的总优先级，然后再挑一个优先级最高的把 CPU 控制权交给他。</p><h2 id="两种算法举例"><a href="#两种算法举例" class="headerlink" title="两种算法举例"></a>两种算法举例</h2><p>我们用分蛋糕的场景来描述这两种算法。假设有源源不断的蛋糕（源源不断的时间），一副刀叉（一个CPU），10个等待吃蛋糕的人（10 个进程）。<br><strong>Unix 分蛋糕方式：</strong><br>如果是 Unix 操作系统来负责分蛋糕，那么他会这样定规矩：每个人上来吃 1 分钟，时间到了换下一个。最后一个人吃完了就再从头开始。于是，不管这10个人是不是优先级不同、饥饿程度不同、饭量不同，每个人上来的时候都可以吃 1 分钟。当然，如果有人本来不太饿，或者饭量小，吃了30秒钟之后就吃饱了，那么他可以跟操作系统说：我已经吃饱了（挂起）。于是操作系统就会让下一个人接着来。</p><p><strong>Windows 分蛋糕方式：</strong><br>如果是 Windows 操作系统来负责分蛋糕的，那么场面就很有意思了。他会这样定规矩：我会根据你们的优先级、饥饿程度去给你们每个人计算一个优先级。优先级最高的那个人，可以上来吃蛋糕——吃到你不想吃为止。等这个人吃完了，我再重新根据优先级、饥饿程度来计算每个人的优先级，然后再分给优先级最高的那个人。<br>这样看来，这个场面就有意思了——可能有些人是PPMM，因此具有高优先级，于是她就可以经常来吃蛋糕。可能另外一个人是个丑男，而且很ws，所以优先级特别低，于是好半天了才轮到他一次（因为随着时间的推移，他会越来越饥饿，因此算出来的总优先级就会越来越高，因此总有一天会轮到他的）。而且，如果一不小心让一个大胖子得到了刀叉，因为他饭量大，可能他会霸占着蛋糕连续吃很久很久，导致旁边的人在那里咽口水。。。<br>而且，还可能会有这种情况出现：操作系统现在计算出来的结果，5号PPMM总优先级最高，而且高出别人一大截。因此就叫5号来吃蛋糕。5号吃了一小会儿，觉得没那么饿了，于是说“我不吃了”（挂起）。因此操作系统就会重新计算所有人的优先级。因为5号刚刚吃过，因此她的饥饿程度变小了，于是总优先级变小了；而其他人因为多等了一会儿，饥饿程度都变大了，所以总优先级也变大了。不过这时候仍然有可能5号的优先级比别的都高，只不过现在只比其他的高一点点——但她仍然是总优先级最高的啊。因此操作系统就会说：5号mm上来吃蛋糕……（5号mm心里郁闷，这不刚吃过嘛……人家要减肥……谁叫你长那么漂亮，获得了那么高的优先级）。</p><p><strong>Thread.Sleep 函数意义：</strong><br>那么，Thread.Sleep 函数是干吗的呢？还用刚才的分蛋糕的场景来描述。上面的场景里面，5号MM在吃了一次蛋糕之后，觉得已经有8分饱了，她觉得在未来的半个小时之内都不想再来吃蛋糕了，那么她就会跟操作系统说：在未来的半个小时之内不要再叫我上来吃蛋糕了。这样，操作系统在随后的半个小时里面重新计算所有人总优先级的时候，就会忽略5号mm。Sleep函数就是干这事的，他告诉操作系统“在未来的多少毫秒内我不参与CPU竞争”。</p><h1 id="解答开头的问题"><a href="#解答开头的问题" class="headerlink" title="解答开头的问题"></a>解答开头的问题</h1><p>看完了 Thread.Sleep 的作用，我们再来想想文章开头的两个问题。</p><h2 id="对于第一个问题，答案是："><a href="#对于第一个问题，答案是：" class="headerlink" title="对于第一个问题，答案是："></a>对于第一个问题，答案是：</h2><p>不一定。因为你只是告诉操作系统：在未来的1000毫秒内我不想再参与到CPU竞争。那么1000毫秒过去之后，这时候也许另外一个线程正在使用CPU，那么这时候操作系统是不会重新分配CPU的，直到那个线程挂起或结束；况且，即使这个时候恰巧轮到操作系统进行CPU 分配，那么当前线程也不一定就是总优先级最高的那个，CPU还是可能被其他线程抢占去。</p><p>与此相似的，Thread有个Resume函数，是用来唤醒挂起的线程的。好像上面所说的一样，这个函数只是“告诉操作系统我从现在起开始参与CPU竞争了”，这个函数的调用并不能马上使得这个线程获得CPU控制权。（注意这个函数在net2.0以后标注为“过时”并在后续版本不提供支持了）</p><h2 id="对于第二个问题，答案是："><a href="#对于第二个问题，答案是：" class="headerlink" title="对于第二个问题，答案是："></a>对于第二个问题，答案是：</h2><p>有，而且区别很明显。假设我们刚才的分蛋糕场景里面，有另外一个PPMM 7号，她的优先级也非常非常高（因为非常非常漂亮），所以操作系统总是会叫道她来吃蛋糕。而且，7号也非常喜欢吃蛋糕，而且饭量也很大。不过，7号人品很好，她很善良，她没吃几口就会想：如果现在有别人比我更需要吃蛋糕，那么我就让给他。因此，她可以每吃几口就跟操作系统说：我们来重新计算一下所有人的总优先级吧。不过，操作系统不接受这个建议——因为操作系统不提供这个接口。于是7号mm就换了个说法：“在未来的0毫秒之内不要再叫我上来吃蛋糕了”。这个指令操作系统是接受的，于是此时操作系统就会重新计算大家的总优先级——注意这个时候是连7号一起计算的，因为“0毫秒已经过去了”嘛。因此如果没有比7号更需要吃蛋糕的人出现，那么下一次7号还是会被叫上来吃蛋糕。</p><p>因此，Thread.Sleep(0)的作用，就是“触发操作系统立刻重新进行一次CPU竞争”。竞争的结果也许是当前线程仍然获得CPU控制权，也许会换成别的线程获得CPU控制权。这也是我们在大循环里面经常会写一句Thread.Sleep(0) ，因为这样就给了其他线程比如Paint线程获得CPU控制权的权力，这样界面就不会假死在那里。</p><h1 id="其他说明"><a href="#其他说明" class="headerlink" title="其他说明"></a>其他说明</h1><p> 末了说明一下，虽然上面提到说“除非它自己放弃使用 CPU ，否则将完全霸占 CPU”，但这个行为仍然是受到制约的——操作系统会监控你霸占CPU的情况，如果发现某个线程长时间霸占CPU，会强制使这个线程挂起，因此在实际上不会出现“一个线程一直霸占着 CPU 不放”的情况。至于我们的大循环造成程序假死，并不是因为这个线程一直在霸占着CPU。实际上在这段时间操作系统已经进行过多次CPU竞争了，只不过其他线程在获得CPU控制权之后很短时间内马上就退出了，于是就又轮到了这个线程继续执行循环，于是就又用了很久才被操作系统强制挂起。。。因此反应到界面上，看起来就好像这个线程一直在霸占着CPU一样。</p><p>末了再说明一下，文中线程、进程有点混乱，其实在Windows原理层面，CPU竞争都是线程级的，本文中把这里的进程、线程看成同一个东西就好了。</p><hr><h1 id="相关链接（侵删）"><a href="#相关链接（侵删）" class="headerlink" title="相关链接（侵删）"></a>相关链接（侵删）</h1><ol><li><a href="http://www.dui580.com/Html/?901.html">C# 理解Thread.Sleep()方法</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">C# 理解Thread.Sleep()方法</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="C#" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/C/"/>
    
    <category term="前端" scheme="https://zml3589110.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="线程管理" scheme="https://zml3589110.github.io/categories/%E7%BA%BF%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
    
    
    <category term="C#" scheme="https://zml3589110.github.io/tags/C/"/>
    
    <category term="线程管理" scheme="https://zml3589110.github.io/tags/%E7%BA%BF%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
    
    <category term="Thread" scheme="https://zml3589110.github.io/tags/Thread/"/>
    
    <category term="Sleep" scheme="https://zml3589110.github.io/tags/Sleep/"/>
    
    <category term="方法" scheme="https://zml3589110.github.io/tags/%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>C# 跨线程访问UI控件</title>
    <link href="https://zml3589110.github.io/posts/2710851357.html"/>
    <id>https://zml3589110.github.io/posts/2710851357.html</id>
    <published>2022-11-11T08:22:20.000Z</published>
    <updated>2022-11-11T09:07:34.264Z</updated>
    
    <content type="html"><![CDATA[<h1 id="跨线程访问UI控件的方法（实验使用的就是这个）"><a href="#跨线程访问UI控件的方法（实验使用的就是这个）" class="headerlink" title="跨线程访问UI控件的方法（实验使用的就是这个）"></a>跨线程访问UI控件的方法（实验使用的就是这个）</h1><blockquote><p>其实往后收集的方法都大同小异</p></blockquote><h2 id="禁止对跨线程访问做检查（不使用）"><a href="#禁止对跨线程访问做检查（不使用）" class="headerlink" title="禁止对跨线程访问做检查（不使用）"></a>禁止对跨线程访问做检查（不使用）</h2><p>&#x2F;&#x2F;在Form1_Load中插入<br> &#x2F;&#x2F;允许操作其它线程创建的控件<br> Control.CheckForIllegalCrossThreadCalls &#x3D; false;</p><h2 id="使用委托方法（验证这个方法可行-UI也不卡）"><a href="#使用委托方法（验证这个方法可行-UI也不卡）" class="headerlink" title="使用委托方法（验证这个方法可行-UI也不卡）"></a>使用委托方法（验证这个方法可行-UI也不卡）</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//跨线程访问UI控件，更新主线程中dataGridView表格内容</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.InvokeRequired)</span><br><span class="line">  &#123;</span><br><span class="line">     <span class="keyword">this</span>.Invoke(<span class="keyword">new</span> MethodInvoker(<span class="built_in">delegate</span></span><br><span class="line">     &#123;</span><br><span class="line">       <span class="comment">//此处可用于更新UI控件内容</span></span><br><span class="line">     &#125;</span><br><span class="line">     ));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   &#125;<span class="comment">//跨线程访问UI控件，更新主线程中dataGridView表格内容</span></span><br></pre></td></tr></table></figure><h1 id="C-优雅的解决-多线程中访问-UI-的问题"><a href="#C-优雅的解决-多线程中访问-UI-的问题" class="headerlink" title="C# 优雅的解决 多线程中访问 UI 的问题"></a>C# 优雅的解决 多线程中访问 UI 的问题</h1><p>优雅的解决 多线程中访问 UI 的问题</p><ol><li>在WinForm 程序中可以在Form的构造函数中. 将 “是否检察跨线程的控件访问” 设为 False. 就解决了. 就可以正常的使用控件了.<br>　　Control.CheckForIllegalCrossThreadCalls &#x3D; false;</li><li>就是使用控件的Invoke 方法<br>比如:<br>　　label1.Invoke(new MethodInvoker(delegate () {this.label1.text &#x3D; “靠…!”;}));<br>使用Lambda 表达示会更优雅一点:<br>　　label1.Inovke(new MethodInvoker( () &#x3D;&gt; this.lable1.text &#x3D; “哈哈..”));<br>这是我常用的. 觉得算得上优雅的方法. 如果还有朋友知道列优雅的方法,请留言告知~~!</li></ol><h2 id="2012-11-17-日补充"><a href="#2012-11-17-日补充" class="headerlink" title="2012.11.17 日补充"></a>2012.11.17 日补充</h2><p>在使用 线程或是使用异步的方法去改变 DataGridView 控件时.. 如果直接使用第一种方法.直接允许控制跨线程访问的话.  会有这样的问题(很是恼人) :</p><p><strong>用delegate的BeginInvoke去更新DataGridView时,当异步调用完成后有这样现象:</strong></p><ol><li>如果更新后DataGridView没有出现滚动条,程序会正常运行</li><li>如果更新后DataVridView出现了滚动条,程序会卡死</li></ol><p><strong>解决的方法是 不要使用 第一种方法: 这种方法 虽然方便.. 但会带来一些意料不到的问题. 还是这样来更新控件:</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">label1.Inovke(<span class="keyword">new</span> MethodInvoker( () =&gt; <span class="keyword">this</span>.lable1.text = <span class="string">&quot;哈哈..&quot;</span>));</span><br></pre></td></tr></table></figure><p>这个MethodInvoker只是一个 返回值,无参数的代理而已. 所以你也可能 自己定义一个 比如: public delegate void MyInvoker(); 然后使用</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">label1.Inovke(<span class="keyword">new</span> MyInvoker( () =&gt; <span class="keyword">this</span>.lable1.text = <span class="string">&quot;哈哈..&quot;</span>));  是一样的.</span><br></pre></td></tr></table></figure><p><strong>同样你也可以 使用 Action</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">label1.Inovke(<span class="keyword">new</span> Action( () =&gt; <span class="keyword">this</span>.lable1.text = <span class="string">&quot;哈哈..&quot;</span>));</span><br></pre></td></tr></table></figure><p><strong>而且. 可以通过  Control.InvokeRequired 方法 ,来判断,当前访问这个控件的线程 是否是UI线程.是否需要使用 Invoke方法.</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.dgv.InvokeRequired) &#123;</span><br><span class="line">　　<span class="keyword">this</span>.dgv.Invoke(<span class="keyword">new</span> MethodInvoker(()=&gt;dgv.DataSource = ds.Tables[<span class="number">0</span>]));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果是 UI 主线程更新的话</span></span><br><span class="line">　　<span class="keyword">this</span>.dgv.DataSource = ds.Tables[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>关于Invoke的拥有者：Control</strong></p><blockquote><p>因为Control.Invoke含义是将方法委托给 <em>拥有该Control</em> 的线程去执行。因些.我们不需要使用 this.label1.Invoke 或是 this.DataGridView,Invoke 可以直接使用 : this.Invoke.  this 指针也就是当前的 UI 主线程.</p></blockquote><p>就好似 A 跟 B 说, 我不方便去你家, 你帮我用你家的电脑下点电影什么的. A 不允许直接使用 B的电脑. 但他可以让B帮他完成一些事情. B得到了 A的一些求助. 自己去使用属于自己的电脑.   这个比喻就充分的表达了.. 两个线程间的交流. </p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Method_A_Thread</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">　　<span class="comment">// Do something</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">// 让UI线程帮忙完成些 ,属于 UI线程里的内容</span></span><br><span class="line">    </span><br><span class="line">     <span class="comment">// this.Invoke(new Action(() =&gt; this.label.Text = &quot;xxx&quot;));</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Winform中如何跨线程访问UI元素"><a href="#Winform中如何跨线程访问UI元素" class="headerlink" title="Winform中如何跨线程访问UI元素"></a>Winform中如何跨线程访问UI元素</h1><blockquote><p>在C# 的应用程序开发中， 我们经常要把UI线程和工作线程分开，防止界面停止响应， 同时我们又需要在工作线程中更新UI界面上的控件。但直接访问会出现“线程间操作无效”的情况，因为.NET禁止了跨线程调用控件， 否则谁都可以操作控件，最后可能造成错误。 下面介绍几种跨线程访问的方法：</p></blockquote><h2 id="1、禁止对跨线程访问做检查-不推荐使用这种方法"><a href="#1、禁止对跨线程访问做检查-不推荐使用这种方法" class="headerlink" title="1、禁止对跨线程访问做检查 (不推荐使用这种方法)"></a>1、禁止对跨线程访问做检查 (不推荐使用这种方法)</h2><p><strong>这种方法不检查跨线程访问，允许各个线程操作UI元素，容易出现错误。</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Form2</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  InitializeComponent();</span><br><span class="line">  <span class="comment">//禁止对跨线程访问做检查 (不推荐使用这种方法)</span></span><br><span class="line">  Control.CheckForIllegalCrossThreadCalls = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、使用委托方法-将其委托给UI控件更新"><a href="#2、使用委托方法-将其委托给UI控件更新" class="headerlink" title="2、使用委托方法  将其委托给UI控件更新"></a>2、使用委托方法  将其委托给UI控件更新</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用委托方法 将其委托给UI控件更新</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button1_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Thread thread1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> ParameterizedThreadStart(UpdateLabel2));</span><br><span class="line">  thread1.Start(<span class="string">&quot;更新Label&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">UpdateLabel2</span>(<span class="params"><span class="built_in">object</span> str</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (label2.InvokeRequired)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 当一个控件的InvokeRequired属性值为真时，说明有一个创建它以外的线程想访问它</span></span><br><span class="line">    Action&lt;<span class="built_in">string</span>&gt; actionDelegate = (x) =&gt; &#123; <span class="keyword">this</span>.label2.Text = x.ToString(); &#125;;</span><br><span class="line">    <span class="comment">// 或者</span></span><br><span class="line">    <span class="comment">// Action&lt;string&gt; actionDelegate = delegate(string txt) &#123; this.label2.Text = txt; &#125;;</span></span><br><span class="line">    <span class="keyword">this</span>.label2.Invoke(actionDelegate, str);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">this</span>.label2.Text = str.ToString();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、使用delegate和BeginInvoke来从其他线程中控制控件"><a href="#3、使用delegate和BeginInvoke来从其他线程中控制控件" class="headerlink" title="3、使用delegate和BeginInvoke来从其他线程中控制控件"></a>3、使用delegate和BeginInvoke来从其他线程中控制控件</h2><p>只要把上面的 this.label2.Invoke(actionDelegate, str); 中的 Invoke 改为BeginInvoke方法就可以了。</p><p><strong>Invoke方法和BeginInvoke方法的区别是：</strong><br>Invoke方法是同步的， 它会等待工作线程完成，BeginInvoke方法是异步的， 它会另起一个线程去完成工作线。</p><h2 id="4、使用同步上下文：SynchronizationContext方法"><a href="#4、使用同步上下文：SynchronizationContext方法" class="headerlink" title="4、使用同步上下文：SynchronizationContext方法"></a>4、使用同步上下文：SynchronizationContext方法</h2><blockquote><p>该方法是取得主线程的上下文信息，然后在子线程将访问UI控件方法推送到UI上下文的消息队列里，使用POST或者Send；</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> SynchronizationContext synchronizationContext;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button2_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  synchronizationContext = SynchronizationContext.Current;</span><br><span class="line">  <span class="keyword">new</span> Thread(() =&gt; &#123; UpdateText(<span class="string">&quot;跨线程访问&quot;</span>); &#125;).Start();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UpdateText</span>(<span class="params"><span class="built_in">string</span> msg</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  synchronizationContext.Post(_ =&gt; <span class="keyword">this</span>.label2.Text = msg, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、使用BackgroundWorker组件-推荐使用这个方法"><a href="#5、使用BackgroundWorker组件-推荐使用这个方法" class="headerlink" title="5、使用BackgroundWorker组件(推荐使用这个方法)"></a>5、使用BackgroundWorker组件(推荐使用这个方法)</h2><p><strong>个人感觉没有自己开线程方便，因为还得在窗体上拉控件</strong></p><blockquote><p>BackgroundWorker是.NET里面用来执行多线程任务的控件，它允许编程者在一个单独的线程上执行一些操作。耗时的操作（如下载和数据库事务）。</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">FileManagerForm</span> : <span class="title">Form</span></span><br><span class="line">&#123;</span><br><span class="line">  FileInfo file ;</span><br><span class="line">  BackgroundWorker bw;</span><br><span class="line">  ServerFile server;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">FileManagerForm</span>(<span class="params"><span class="built_in">string</span> filePath</span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    InitializeComponent();</span><br><span class="line"></span><br><span class="line">    file = <span class="keyword">new</span> FileInfo(filePath);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">long</span> size = file.Length / <span class="number">1024</span> / <span class="number">1024</span>;</span><br><span class="line">    lblOrgSize.Text = (<span class="built_in">int</span>)size+ <span class="string">&quot;MB&quot;</span>;</span><br><span class="line">    bw = <span class="keyword">new</span> BackgroundWorker();</span><br><span class="line">    server = <span class="keyword">new</span> ServerFile(file.Name);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">FileManagerForm_Load</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    proUpFile.Minimum = <span class="number">0</span>;</span><br><span class="line">    proUpFile.Maximum = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    bw.WorkerReportsProgress = <span class="literal">true</span>;</span><br><span class="line">    bw.WorkerSupportsCancellation = <span class="literal">true</span>;</span><br><span class="line">    bw.DoWork += Bw_DoWork;</span><br><span class="line">    bw.ProgressChanged += Bw_ProgressChanged;</span><br><span class="line">    bw.RunWorkerCompleted += Bw_RunWorkerCompleted;</span><br><span class="line">    bw.RunWorkerAsync();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Bw_DoWork</span>(<span class="params"><span class="built_in">object</span> sender, DoWorkEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    <span class="keyword">using</span>(FileStream fileRead= file.OpenRead())</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">long</span> setp = file.Length / <span class="number">100</span>;</span><br><span class="line">      <span class="keyword">while</span> (file.Length &gt; fileRead.Position)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> (bw.CancellationPending)</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">byte</span>[] bytes = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="built_in">int</span> count = fileRead.Read(bytes, <span class="number">0</span>, bytes.Length);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">long</span> writeLength= server.UpFile(bytes, count);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(writeLength &gt;proUpFile.Value* setp)</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">int</span> size = (<span class="built_in">int</span>)(writeLength / <span class="number">1024</span> / <span class="number">1024</span>);</span><br><span class="line">          bw.ReportProgress(proUpFile.Value + <span class="number">1</span>, size);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">      server.Close();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Bw_ProgressChanged</span>(<span class="params"><span class="built_in">object</span> sender, ProgressChangedEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    proUpFile.Value= e.ProgressPercentage&gt; proUpFile.Maximum?proUpFile.Maximum:e.ProgressPercentage;</span><br><span class="line">    lblUpLoadSize.Text = e.UserState.ToString() + <span class="string">&quot;MB&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Bw_RunWorkerCompleted</span>(<span class="params"><span class="built_in">object</span> sender, RunWorkerCompletedEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.proUpFile.Value == <span class="keyword">this</span>.proUpFile.Maximum)</span><br><span class="line">    &#123;</span><br><span class="line">      MessageBox.Show(<span class="string">&quot;文件发送成功！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      MessageBox.Show(<span class="string">&quot;文件发送失败！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.Close();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btnCancel_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">     bw.CancelAsync();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="相关链接（侵删）"><a href="#相关链接（侵删）" class="headerlink" title="相关链接（侵删）"></a>相关链接（侵删）</h1><ol><li><a href="http://www.dui580.com/Html/?955.html">C#跨线程访问UI控件的方法</a></li><li><a href="http://t.zoukankan.com/easyfrog-p-2343075.html">C# 优雅的解决 多线程中访问 UI 的问题</a></li><li><a href="https://www.jb51.net/article/198476.htm">Winform中如何跨线程访问UI元素</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">C#跨线程访问UI控件的方法</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="C#" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/C/"/>
    
    <category term="前端" scheme="https://zml3589110.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="线程管理" scheme="https://zml3589110.github.io/categories/%E7%BA%BF%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
    
    
    <category term="C#" scheme="https://zml3589110.github.io/tags/C/"/>
    
    <category term="线程管理" scheme="https://zml3589110.github.io/tags/%E7%BA%BF%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
    
    <category term="UI访问" scheme="https://zml3589110.github.io/tags/UI%E8%AE%BF%E9%97%AE/"/>
    
  </entry>
  
  <entry>
    <title>C# 创建记录工作时间</title>
    <link href="https://zml3589110.github.io/posts/3492309518.html"/>
    <id>https://zml3589110.github.io/posts/3492309518.html</id>
    <published>2022-11-11T08:10:20.000Z</published>
    <updated>2022-11-11T09:07:34.364Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创建计时器，用来记录程序运行时间"><a href="#创建计时器，用来记录程序运行时间" class="headerlink" title="创建计时器，用来记录程序运行时间"></a>创建计时器，用来记录程序运行时间</h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建计时器，用来记录程序运行时间</span></span><br><span class="line">Stopwatch sw=<span class="keyword">new</span> stopwatch（）；</span><br><span class="line">sw.start();</span><br><span class="line">想计时的程序段</span><br><span class="line">sw.stop();</span><br><span class="line"><span class="comment">//显示计时器时间. Elapsed：消逝</span></span><br><span class="line">Console.writeline(sw.elapsed);</span><br></pre></td></tr></table></figure><h1 id="自定义时间按秒增加"><a href="#自定义时间按秒增加" class="headerlink" title="自定义时间按秒增加"></a>自定义时间按秒增加</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>我自定义了一个时间2013-05-11 19:40:11，我想在这个时间上按每秒增加，就像时钟一样。怎么做？<br>应该是dt1没有返回覆盖掉原始值，求解决办法。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> DateTime dt1=DateTime.Parse(<span class="string">&quot;2013-05-11 19:40:11&quot;</span>);</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">timer1_Tick</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">dt1.AddSeconds(<span class="number">1</span>);<span class="comment">//自增1s</span></span><br><span class="line">label1.Text = dt1.ToString();</span><br><span class="line">label2.Text = dt1.AddSeconds(<span class="number">10</span>).ToString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>timer控件也开了,设置刷新100ms<br>label1显示的还是原时间<br>label2显示的是加了10s时间，如何才能像时钟一样</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p><strong>同学，dt1 &#x3D; dt1.AddSeconds(1);&#x2F;&#x2F;这才是自增1s</strong><br>AddSeconds(1)是有返回值的，不会改变dt1本身，这也是为什么label2起作用的原因<br>追问<br>如何能够像时钟一样呢？能够自己增加<br>追答<br>你不是有一个timer吗，把timer的时间间隔设成1S<br>在timer的事件里写<br><strong>label1.text &#x3D; （dt1 &#x3D; dt1.AddSeconds(1)).ToString();</strong><br>就可以了</p><hr><h1 id="相关链接（侵删）"><a href="#相关链接（侵删）" class="headerlink" title="相关链接（侵删）"></a>相关链接（侵删）</h1><ol><li><a href="https://blog.csdn.net/mlxg99999/article/details/122221315">c#创建计时器，用来记录程序运行时间</a></li><li><a href="https://zhidao.baidu.com/question/303302704057473364.html">c# 自定义时间按秒增加</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">C#获取时间各种方法</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="C#" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/C/"/>
    
    <category term="前端" scheme="https://zml3589110.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="时间管理" scheme="https://zml3589110.github.io/categories/%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86/"/>
    
    
    <category term="C#" scheme="https://zml3589110.github.io/tags/C/"/>
    
    <category term="时间管理" scheme="https://zml3589110.github.io/tags/%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86/"/>
    
    <category term="工作时间" scheme="https://zml3589110.github.io/tags/%E5%B7%A5%E4%BD%9C%E6%97%B6%E9%97%B4/"/>
    
  </entry>
  
  <entry>
    <title>C# 获取时间各种方法</title>
    <link href="https://zml3589110.github.io/posts/4146378832.html"/>
    <id>https://zml3589110.github.io/posts/4146378832.html</id>
    <published>2022-11-11T08:05:20.000Z</published>
    <updated>2022-11-11T09:07:34.356Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-获取时间各种方法"><a href="#C-获取时间各种方法" class="headerlink" title="C#获取时间各种方法"></a>C#获取时间各种方法</h1><p>我们可以通过使用DataTime这个类来获取当前的时间。通过调用类中的各种方法我们可以获取不同的时间：如：日期（2008-09-04）、时间（12：12：12）、日期+时间（2008-09-04 12：11：10）等。</p><h2 id="获取日期和时间"><a href="#获取日期和时间" class="headerlink" title="获取日期和时间"></a>获取日期和时间</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DateTime.Now.ToString();            <span class="comment">// 2008-9-4 20:02:10</span></span><br><span class="line">DateTime.Now.ToLocalTime().ToString();        <span class="comment">// 2008-9-4 20:12:12</span></span><br></pre></td></tr></table></figure><h2 id="获取日期"><a href="#获取日期" class="headerlink" title="获取日期"></a>获取日期</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DateTime.Now.ToLongDateString().ToString();    <span class="comment">// 2008年9月4日</span></span><br><span class="line">DateTime.Now.ToShortDateString().ToString();    <span class="comment">// 2008-9-4</span></span><br><span class="line">DateTime.Now.ToString(<span class="string">&quot;yyyy-MM-dd&quot;</span>);        <span class="comment">// 2008-09-04</span></span><br><span class="line">DateTime.Now.Date.ToString();            <span class="comment">// 2008-9-4 0:00:00</span></span><br></pre></td></tr></table></figure><h2 id="获取时间"><a href="#获取时间" class="headerlink" title="获取时间"></a>获取时间</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DateTime.Now.ToLongTimeString().ToString();   <span class="comment">// 20:16:16</span></span><br><span class="line">DateTime.Now.ToShortTimeString().ToString();   <span class="comment">// 20:16</span></span><br><span class="line">DateTime.Now.ToString(<span class="string">&quot;hh:mm:ss&quot;</span>);        <span class="comment">// 08:05:57</span></span><br><span class="line">DateTime.Now.TimeOfDay.ToString();        <span class="comment">// 20:33:50.7187500</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="其他日期时间"><a href="#其他日期时间" class="headerlink" title="其他日期时间"></a>其他日期时间</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">DateTime.ToFileTime().ToString();       <span class="comment">// 128650040212500000</span></span><br><span class="line">DateTime.Now.ToFileTimeUtc().ToString();   <span class="comment">// 128650040772968750</span></span><br><span class="line">DateTime.Now.ToOADate().ToString();       <span class="comment">// 39695.8461709606</span></span><br><span class="line">DateTime.Now.ToUniversalTime().ToString();   <span class="comment">// 2008-9-4 12:19:14</span></span><br><span class="line"></span><br><span class="line">DateTime.Now.Year.ToString();         获取年份  <span class="comment">// 2008</span></span><br><span class="line">DateTime.Now.Month.ToString();      获取月份   <span class="comment">// 9</span></span><br><span class="line">DateTime.Now.DayOfWeek.ToString(); 获取星期   <span class="comment">// Thursday</span></span><br><span class="line">DateTime.Now.DayOfYear.ToString(); 获取第几天   <span class="comment">// 248</span></span><br><span class="line">DateTime.Now.Hour.ToString();          获取小时   <span class="comment">// 20</span></span><br><span class="line">DateTime.Now.Minute.ToString();     获取分钟   <span class="comment">// 31</span></span><br><span class="line">DateTime.Now.Second.ToString();     获取秒数   <span class="comment">// 45</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//n为一个数,可以数整数,也可以事小数</span></span><br><span class="line">dt.AddYears(n).ToString();   <span class="comment">//时间加n年</span></span><br><span class="line">dt.AddDays(n).ToString();   <span class="comment">//加n天</span></span><br><span class="line">dt.AddHours(n).ToString();   <span class="comment">//加n小时</span></span><br><span class="line">dt.AddMonths(n).ToString();   <span class="comment">//加n个月</span></span><br><span class="line">dt.AddSeconds(n).ToString();   <span class="comment">//加n秒</span></span><br><span class="line">dt.AddMinutes(n).ToString();   <span class="comment">//加n分</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="SQL语句使用时间和日期的函数："><a href="#SQL语句使用时间和日期的函数：" class="headerlink" title="SQL语句使用时间和日期的函数："></a>SQL语句使用时间和日期的函数：</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">getdate():获取系统当前时间</span><br><span class="line">dateadd(datepart,number,date):计算在一个时间的基础上增加一个时间后的新时间值,比如：dateadd(yy,<span class="number">30</span>,getdate())</span><br><span class="line">datediff(datepart,startdate,enddate):计算两个时间的差值,比如：datediff(yy,getdate(),<span class="string">&#x27;2008-08-08&#x27;</span>)</span><br><span class="line">dataname(datepart,date):获取时间不同部分的值，返回值为字符串</span><br><span class="line">datepart(datepart,date):和datename相似，只是返回值为整型</span><br><span class="line">day(date):获取指定时间的天数</span><br><span class="line">month(date):获取指定时间的月份</span><br><span class="line">year(date):获取指定时间的年份</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">select</span> <span class="title">year</span>(<span class="params">getdate(</span>)) ：当前年份</span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure><hr><h1 id="相关链接（侵删）"><a href="#相关链接（侵删）" class="headerlink" title="相关链接（侵删）"></a>相关链接（侵删）</h1><ol><li><a href="https://blog.csdn.net/qq_36785719/article/details/120735223">C# 如何获取时间各种方法（日期+具体时间）</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">C#获取时间各种方法</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="C#" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/C/"/>
    
    <category term="前端" scheme="https://zml3589110.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="时间管理" scheme="https://zml3589110.github.io/categories/%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86/"/>
    
    
    <category term="C#" scheme="https://zml3589110.github.io/tags/C/"/>
    
    <category term="时间管理" scheme="https://zml3589110.github.io/tags/%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86/"/>
    
    <category term="获取时间" scheme="https://zml3589110.github.io/tags/%E8%8E%B7%E5%8F%96%E6%97%B6%E9%97%B4/"/>
    
  </entry>
  
  <entry>
    <title>C# 获取文件名和路径</title>
    <link href="https://zml3589110.github.io/posts/2198426451.html"/>
    <id>https://zml3589110.github.io/posts/2198426451.html</id>
    <published>2022-11-11T07:08:20.000Z</published>
    <updated>2022-11-11T09:07:34.328Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-获取文件名和文件路径"><a href="#C-获取文件名和文件路径" class="headerlink" title="C#获取文件名和文件路径"></a>C#获取文件名和文件路径</h1><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><img src="https://img.jbzj.com/file_images/article/202207/202207220850581.png"><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">OpenFileDialog open = <span class="keyword">new</span> OpenFileDialog();</span><br><span class="line">open.RestoreDirectory = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">string</span> fullname = open.FileName;</span><br><span class="line"><span class="built_in">string</span> path = System.IO.Path.GetDirectoryName(fullname);<span class="comment">//路径</span></span><br><span class="line"><span class="built_in">string</span> name = System.IO.Path.GetFileName(fullname);<span class="comment">//名称</span></span><br></pre></td></tr></table></figure><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><img src="https://img.jbzj.com/file_images/article/202207/202207220850582.png"><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">OpenFileDialog open = <span class="keyword">new</span> OpenFileDialog();</span><br><span class="line">open.RestoreDirectory = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">string</span> fullpath = open.FileName;</span><br><span class="line"><span class="comment">//获取文件路径和文件名</span></span><br><span class="line"><span class="built_in">int</span> index = fullpath.LastIndexOf(<span class="string">&quot;//&quot;</span>);  <span class="comment">//返回“//”最后一次出现的位置</span></span><br><span class="line"><span class="built_in">string</span> filepath = fullpath.Substring(<span class="number">0</span>,index); <span class="comment">//截取字符串，0到“//”最后出现的位置</span></span><br><span class="line"><span class="built_in">string</span> filename = fullpath.Substring(index+<span class="number">1</span>);  <span class="comment">//截取文件名</span></span><br></pre></td></tr></table></figure><h1 id="C-通过文件路径获取文件名小技巧"><a href="#C-通过文件路径获取文件名小技巧" class="headerlink" title="C#通过文件路径获取文件名小技巧"></a>C#通过文件路径获取文件名小技巧</h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> fullPath = <span class="string">@&quot;\WebSite1\Default.aspx&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> filename = System.IO.Path.GetFileName(fullPath);<span class="comment">//文件名  “Default.aspx”</span></span><br><span class="line"><span class="built_in">string</span> extension = System.IO.Path.GetExtension(fullPath);<span class="comment">//扩展名 “.aspx”</span></span><br><span class="line"><span class="built_in">string</span> fileNameWithoutExtension = System.IO.Path.GetFileNameWithoutExtension(fullPath);<span class="comment">// 没有扩展名的文件名 “Default”</span></span><br></pre></td></tr></table></figure><hr><h1 id="相关链接（侵删）"><a href="#相关链接（侵删）" class="headerlink" title="相关链接（侵删）"></a>相关链接（侵删）</h1><ol><li><a href="https://www.jb51.net/article/256372.htm">C#获取文件名和文件路径的两种实现方式</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">C#获取文件名和路径的方式</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="C#" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/C/"/>
    
    <category term="前端" scheme="https://zml3589110.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="文件管理" scheme="https://zml3589110.github.io/categories/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/"/>
    
    
    <category term="C#" scheme="https://zml3589110.github.io/tags/C/"/>
    
    <category term="文件管理" scheme="https://zml3589110.github.io/tags/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/"/>
    
    <category term="获取路径" scheme="https://zml3589110.github.io/tags/%E8%8E%B7%E5%8F%96%E8%B7%AF%E5%BE%84/"/>
    
  </entry>
  
  <entry>
    <title>C# 判路径是文件还是文件夹</title>
    <link href="https://zml3589110.github.io/posts/3128236970.html"/>
    <id>https://zml3589110.github.io/posts/3128236970.html</id>
    <published>2022-11-11T07:01:20.000Z</published>
    <updated>2022-11-11T09:07:34.271Z</updated>
    
    <content type="html"><![CDATA[<h1 id="判断路径是否存在文件或文件夹"><a href="#判断路径是否存在文件或文件夹" class="headerlink" title="判断路径是否存在文件或文件夹"></a>判断路径是否存在文件或文件夹</h1><h2 id="判断文件夹是否存在"><a href="#判断文件夹是否存在" class="headerlink" title="判断文件夹是否存在"></a>判断文件夹是否存在</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> path = Application.StartupPath + <span class="string">&quot;\\新建文件夹&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (!System.IO.Directory.Exists(path))</span><br><span class="line">&#123;</span><br><span class="line">    System.IO.Directory.CreateDirectory(path);<span class="comment">//不存在就创建目录</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="判断文件是否存在"><a href="#判断文件是否存在" class="headerlink" title="判断文件是否存在"></a>判断文件是否存在</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> path = Application.StartupPath + <span class="string">&quot;\\新建文件夹\\test.txt&quot;</span></span><br><span class="line"><span class="keyword">if</span>(System.IO.File.Exists(path)) </span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;存在该文件&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;不存在该文件&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="判断路径为文件或文件夹"><a href="#判断路径为文件或文件夹" class="headerlink" title="判断路径为文件或文件夹"></a>判断路径为文件或文件夹</h1><h2 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 判断目标是文件夹还是目录(目录包括磁盘)</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;filepath&quot;&gt;</span>路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>返回true为一个文件夹，返回false为一个文件<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">IsDir</span>(<span class="params"><span class="built_in">string</span> filepath</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FileInfo fi = <span class="keyword">new</span> FileInfo(filepath);</span><br><span class="line">    <span class="keyword">if</span> ((fi.Attributes &amp; FileAttributes.Directory) != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (File.Exists(add_file))</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;是文件&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (Directory.Exists(targetPath))</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;是文件夹&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;都不是&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="相关链接（侵删）"><a href="#相关链接（侵删）" class="headerlink" title="相关链接（侵删）"></a>相关链接（侵删）</h1><ol><li><a href="https://blog.csdn.net/qq_38693757/article/details/115718818">C# 判断文件路径或文件是否存在</a></li><li><a href="https://blog.csdn.net/qq_38693757/article/details/115863494">C# 判断一个路径是文件夹还是文件</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">通过路径来判断是否存在？若存在则是文件还是文件夹</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="C#" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/C/"/>
    
    <category term="前端" scheme="https://zml3589110.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="文件管理" scheme="https://zml3589110.github.io/categories/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/"/>
    
    
    <category term="C#" scheme="https://zml3589110.github.io/tags/C/"/>
    
    <category term="文件管理" scheme="https://zml3589110.github.io/tags/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/"/>
    
    <category term="路径判断" scheme="https://zml3589110.github.io/tags/%E8%B7%AF%E5%BE%84%E5%88%A4%E6%96%AD/"/>
    
  </entry>
  
  <entry>
    <title>C#语法之三（List多维数组用法）</title>
    <link href="https://zml3589110.github.io/posts/1756346642.html"/>
    <id>https://zml3589110.github.io/posts/1756346642.html</id>
    <published>2022-11-02T01:14:20.000Z</published>
    <updated>2022-11-02T01:49:07.001Z</updated>
    
    <content type="html"><![CDATA[<h1 id="list定义"><a href="#list定义" class="headerlink" title="list定义"></a>list定义</h1><p>当我们有很多类型一样的数据时，可以使用数组来进行存储并管理，但是这样的缺点是数组的大小是提前给定的、是固定的。 如果我们有许多类型一样但数量不定的数据，</p><p>我们可以使用集合类来进行管理——例如列表List。我们可以使用列表List很方便的添加数据，删除数据以及其他的一些数据操作。List<T>类是ArrayList类的泛型等效类，该类使</T></p><p>用大小可按需动态增加的数组实现IList<T>泛型接口。</T></p><p><strong>泛型的好处：</strong>它为使用c#语言编写面向对象程序增加了极大的效力和灵活性。不会强行对值类型进行装箱和拆箱，或对引用类型进行向下强制类型转换，所以性能得到提高。<br><strong>性能注意事项：</strong>在决定使用IList<T>还是使用ArrayList类(两者具有类似的功能)时，记住IList<T>类在大多数情况下执行得更好并且是类型安全的。如果对IList<T>类的类型T 使用引用类<br>型，则两个类的行为是完全相同的。但是，如果对类型T 使用值类型，则需要考虑实现和装箱问题。</T></T></T></p><h1 id="List的用法"><a href="#List的用法" class="headerlink" title="List的用法"></a>List的用法</h1><p><strong>1、List的基础、常用方法：</strong></p><p><strong>(1)、声明：</strong><br>①、List<T> mList &#x3D; new List<T>();<br>T为列表中元素类型，现在以string类型作为例子</T></T></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;<span class="built_in">string</span>&gt; mList = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br></pre></td></tr></table></figure><p>②、List<T> testList &#x3D;new List<T> (IEnumerable<T> collection);</T></T></T></p><p>以一个集合作为参数创建List：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span>[] temArr = &#123; <span class="string">&quot;Ha&quot;</span>, <span class="string">&quot;Hunter&quot;</span>, <span class="string">&quot;Tom&quot;</span>, <span class="string">&quot;Lily&quot;</span>, <span class="string">&quot;Jay&quot;</span>, <span class="string">&quot;Jim&quot;</span>, <span class="string">&quot;Kuku&quot;</span>, <span class="string">&quot;Locu&quot;</span> &#125;;</span><br><span class="line">List&lt;<span class="built_in">string</span>&gt; testList = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;(temArr);</span><br></pre></td></tr></table></figure><p><strong>(2)、添加元素:</strong></p><p>①、 添加一个元素</p><p>　　语法： List. Add(T item) </p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;<span class="built_in">string</span>&gt; mList = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">mList.Add(<span class="string">&quot;John&quot;</span>);</span><br></pre></td></tr></table></figure><p>②、 添加一组元素</p><p>　　语法： List. AddRange(IEnumerable<T> collection)  </T></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;<span class="built_in">string</span>&gt; mList = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line"><span class="built_in">string</span>[] temArr = &#123; <span class="string">&quot;Ha&quot;</span>,<span class="string">&quot;Hunter&quot;</span>, <span class="string">&quot;Tom&quot;</span>, <span class="string">&quot;Lily&quot;</span>, <span class="string">&quot;Jay&quot;</span>, <span class="string">&quot;Jim&quot;</span>, <span class="string">&quot;Kuku&quot;</span>,  <span class="string">&quot;Locu&quot;</span> &#125;;</span><br><span class="line">mList.AddRange(temArr);</span><br></pre></td></tr></table></figure><p>③、在index位置添加一个元素</p><p>　　语法： Insert(int index, T item); </p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;<span class="built_in">string</span>&gt; mList = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">mList.Insert(<span class="number">1</span>, <span class="string">&quot;Hei&quot;</span>);</span><br></pre></td></tr></table></figure><p>④、遍历List中元素</p><p>语法：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (T element <span class="keyword">in</span> mList)  <span class="comment">//T的类型与mList声明时一样</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(element);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;<span class="built_in">string</span>&gt; mList = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">...<span class="comment">//省略部分代码</span></span><br><span class="line"><span class="keyword">foreach</span> (<span class="built_in">string</span> s <span class="keyword">in</span> mList)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>(3)、删除元素:</strong></p><p>①、删除一个值</p><p>　　语法：List. Remove(T item)</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mList.Remove(<span class="string">&quot;Hunter&quot;</span>);</span><br></pre></td></tr></table></figure><p>②、 删除下标为index的元素</p><p>　　语法：List. RemoveAt(int index);  </p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mList.RemoveAt(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>③、 从下标index开始，删除count个元素</p><p>　　语法：List. RemoveRange(int index, int count);</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mList.RemoveRange(<span class="number">3</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><p><strong>(4)、判断某个元素是否在该List中：</strong></p><p>语法：List. Contains(T item)  返回值为：true&#x2F;false</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (mList.Contains(<span class="string">&quot;Hunter&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;There is Hunter in the list&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    mList.Add(<span class="string">&quot;Hunter&quot;</span>);</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;Add Hunter successfully.&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>(5)、给List里面元素排序：</strong></p><p>　　语法： List. Sort ()  默认是元素第一个字母按升序</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mList.Sort();</span><br></pre></td></tr></table></figure><p><strong>(6)、给List里面元素顺序反转：</strong></p><p>　　语法： List. Reverse ()  可以与List. Sort ()配合使用，达到想要的效果</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mList. Reverse();</span><br></pre></td></tr></table></figure><p><strong>(7)、List清空：</strong></p><p>　　语法：List. Clear () </p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mList.Clear();</span><br></pre></td></tr></table></figure><p><strong>(8)、获得List中元素数目：</strong></p><p>　　语法： List. Count ()  返回int值</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> count = mList.Count();</span><br><span class="line">Console.WriteLine(<span class="string">&quot;The num of elements in the list: &quot;</span> +count);</span><br></pre></td></tr></table></figure><p><strong>2、List的进阶、强大方法：</strong></p><p>本段举例用的List：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span>[] temArr = &#123; <span class="string">&quot;Ha&quot;</span>,<span class="string">&quot;Hunter&quot;</span>, <span class="string">&quot;Tom&quot;</span>, <span class="string">&quot;Lily&quot;</span>, <span class="string">&quot;Jay&quot;</span>, <span class="string">&quot;Jim&quot;</span>, <span class="string">&quot;Kuku&quot;</span>, <span class="string">&quot; &quot;</span>Locu<span class="string">&quot; &#125;;</span></span><br><span class="line"><span class="string">mList.AddRange(temArr);</span></span><br></pre></td></tr></table></figure><p><strong>(1)、List.FindAll方法</strong>：检索与指定谓词所定义的条件相匹配的所有元素 </p><p>　　语法：public List<T> FindAll(Predicate<T> match);</T></T></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;<span class="built_in">string</span>&gt; subList = mList.FindAll(ListFind); <span class="comment">//委托给ListFind函数</span></span><br><span class="line"><span class="keyword">foreach</span> (<span class="built_in">string</span> s <span class="keyword">in</span> subList)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;element in subList: &quot;</span>+s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时subList存储的就是所有长度大于3的元素。</p><p><strong>(2)、List.Find 方法</strong>：搜索与指定谓词所定义的条件相匹配的元素，并返回整个 List 中的第一个匹配元素。 </p><p>　　语法：public T Find(Predicate<T> match);</T></p><p>Predicate是对方法的委托，如果传递给它的对象与委托中定义的条件匹配，则该方法返回 true。当前 List 的元素被逐个传递给Predicate委托，并在 List 中向前移动，从第一个元素开始，到最后一个元素结束。当找到匹配项时处理即停止。</p><p>Predicate 可以委托给一个函数或者一个拉姆达表达式:</p><p>委托给拉姆达表达式：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> listFind = mList.Find(name =&gt;  <span class="comment">//name是变量，代表的是mList中元素，自己设定</span></span><br><span class="line">&#123;     </span><br><span class="line">   <span class="keyword">if</span> (name.Length &gt; <span class="number">3</span>)</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;);</span><br><span class="line">Console.WriteLine(listFind);     <span class="comment">//输出是Hunter</span></span><br></pre></td></tr></table></figure><p>委托给一个函数： </p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> listFind1 = mList.Find(ListFind);  <span class="comment">//委托给ListFind函数</span></span><br><span class="line">Console.WriteLine(listFind);    <span class="comment">//输出是Hunter</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//ListFind函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">ListFind</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (name.Length &gt; <span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 这两种方法的结果是一样的。</p><p><strong>(3)、List.FindLast 方法</strong>：搜索与指定谓词所定义的条件相匹配的元素，并返回整个 List 中的最后一个匹配元素。<br>　　语法：public T FindLast(Predicate<T> match);</T></p><p>用法与List.Find相同。</p><p><strong>(4)、List.TrueForAll方法</strong>： 确定是否 List 中的每个元素都与指定的谓词所定义的条件相匹配。</p><p>　　语法：public bool TrueForAll(Predicate<T> match);</T></p><p>委托给拉姆达表达式：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bool</span> flag = mList.TrueForAll(name =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (name.Length &gt; <span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line"> 　　　　<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line"> 　　　　<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">Console.WriteLine(<span class="string">&quot;True for all:  &quot;</span>+flag);  <span class="comment">//flag值为</span></span><br></pre></td></tr></table></figure><p> 委托给一个函数，这里用到上面的ListFind函数：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bool</span> flag = mList.TrueForAll(ListFind); 　　 <span class="comment">//委托给ListFind函数</span></span><br><span class="line">Console.WriteLine(<span class="string">&quot;True for all:  &quot;</span>+flag);  <span class="comment">//flag值为false</span></span><br></pre></td></tr></table></figure><p>这两种方法的结果是一样的。</p><p><strong>(5)List.Take(n)方法：</strong> 获得前n行 返回值为IEnumetable<T>，T的类型与List<T>的类型一样</T></T></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">IEnumerable&lt;<span class="built_in">string</span>&gt; takeList=  mList.Take(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="built_in">string</span> s <span class="keyword">in</span> takeList)</span><br><span class="line">&#123;</span><br><span class="line">      Console.WriteLine(<span class="string">&quot;element in takeList: &quot;</span> + s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时takeList存放的元素就是mList中的前5个。</p><p><strong>(6)、List.Where方法</strong>：检索与指定谓词所定义的条件相匹配的所有元素。跟List.FindAll方法类似。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">IEnumerable&lt;<span class="built_in">string</span>&gt; whereList = mList.Where(name =&gt;</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">if</span> (name.Length &gt; <span class="number">3</span>)</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="built_in">string</span> s <span class="keyword">in</span> subList)</span><br><span class="line">&#123;</span><br><span class="line">   Console.WriteLine(<span class="string">&quot;element in subLis</span></span><br></pre></td></tr></table></figure><p>这时subList存储的就是所有长度大于3的元素。</p><p><strong>(7)、List.RemoveAll方法：</strong>移除与指定的谓词所定义的条件相匹配的所有元素。</p><p>　　语法： public int RemoveAll(Predicate<T> match);</T></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mList.RemoveAll(name =&gt;</span><br><span class="line">&#123;</span><br><span class="line">     <span class="keyword">if</span> (name.Length &gt; <span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="built_in">string</span> s <span class="keyword">in</span> mList)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;element in mList:     &quot;</span> + s);</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>这时mList存储的就是移除长度大于3之后的元素。<br>补充请参考<a href="https://www.cnblogs.com/wisdomforce/archive/2010/05/31/1748642.html">C#泛型类之LIST<T></T></a></p><h1 id="C-泛型类之LIST"><a href="#C-泛型类之LIST" class="headerlink" title="C#泛型类之LIST"></a>C#泛型类之LIST<T></T></h1><h3 id="1、-定义"><a href="#1、-定义" class="headerlink" title="1、    定义"></a>1、    定义</h3><p>System.Collections.Generic.List<T>类表示可通过索引访问的对象的强类型列表。提供用于对列表进行搜索、排序和操作的方法。T为类型参数，代表列表中元素的类型。该类实现了IList<T>泛型接口，是ArrayList类的泛型等效类，其大小可按需动态增加。</T></T></p><h3 id="2-构造函数"><a href="#2-构造函数" class="headerlink" title="2.构造函数"></a>2.构造函数</h3><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>List<T>()</T></td><td>初始化 List<T> 类的新实例，该实例为空并且具有默认初始容量（0）。</T></td></tr><tr><td>List<T>(IEnumerable<T>)</T></T></td><td>初始化 List<T> 类的新实例，该实例包含从指定集合复制的元素并且具有足够的容量来容纳所复制的元素。</T></td></tr><tr><td>List<T>(Int32)</T></td><td>始化 List<T> 类的新实例，该实例为空并且具有指定的初始容量。</T></td></tr></tbody></table><p>说明：默认向 List<T> 添加元素时，将通过重新分配内部数组，根据需要自动增大容量。如果可以估计集合的大小，那么当指定初始容量后，将无需在向 List<T> 中添加元素时执行大量的大小调整操作。这样可提高性能。</T></T></p><h3 id="3-List方法"><a href="#3-List方法" class="headerlink" title="3. List方法"></a>3. List<T>方法</T></h3><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>Add</td><td>将对象添加到 List<T> 的结尾处。</T></td></tr><tr><td>AddRange</td><td>将指定集合的元素添加到 List<T> 的末尾。</T></td></tr><tr><td>AsReadOnly</td><td>返回当前集合的只读 IList<T> 包装。</T></td></tr><tr><td>BinarySearch(T)</td><td>使用默认的比较器在整个已排序的 List<T> 中搜索元素，并返回该元素从零开始的索引。</T></td></tr><tr><td>BinarySearch(T, IComparer<T>)</T></td><td>使用指定的比较器在整个已排序的 List<T> 中搜索元素，并返回该元素从零开始的索引。</T></td></tr><tr><td>BinarySearch(Int32, Int32, T, IComparer<T>)</T></td><td>使用指定的比较器在已排序 List<T> 的某个元素范围中搜索元素，并返回该元素从零开始的索引。</T></td></tr><tr><td>Clear</td><td>从 List<T> 中移除所有元素。</T></td></tr><tr><td>Contains</td><td>确定某元素是否在 List<T> 中。</T></td></tr><tr><td>ConvertAll<TOutput></TOutput></td><td>将当前 List<T> 中的元素转换为另一种类型，并返回包含转换后的元素的列表。</T></td></tr><tr><td>CopyTo(T[])</td><td>将整个 List<T> 复制到兼容的一维数组中，从目标数组的开头开始放置。</T></td></tr><tr><td>Exists</td><td>确定 List<T> 是否包含与指定谓词所定义的条件相匹配的元素。</T></td></tr><tr><td>Find</td><td>搜索与指定谓词所定义的条件相匹配的元素，并返回整个 List<T> 中的第一个匹配元素。</T></td></tr><tr><td>FindIndex(Predicate<T>)</T></td><td>搜索与指定谓词所定义的条件相匹配的元素，并返回整个 List<T> 中第一个匹配元素的从零开始的索引。</T></td></tr><tr><td>ForEach</td><td>对 List<T> 的每个元素执行指定操作。</T></td></tr><tr><td>GetEnumerator</td><td>返回循环访问 List<T> 的枚举器。</T></td></tr><tr><td>IndexOf(T)</td><td>搜索指定的对象，并返回整个 List<T> 中第一个匹配项的从零开始的索引。</T></td></tr><tr><td>Insert</td><td>将元素插入 List<T> 的指定索引处。</T></td></tr><tr><td>InsertRange</td><td>将集合中的某个元素插入 List<T> 的指定索引处。</T></td></tr><tr><td>LastIndexOf(T)</td><td>搜索指定的对象，并返回整个 List<T> 中最后一个匹配项的从零开始的索引。</T></td></tr><tr><td>Remove</td><td>从 List<T> 中移除特定对象的第一个匹配项。</T></td></tr><tr><td>Reverse()</td><td>将整个 List<T> 中元素的顺序反转。</T></td></tr><tr><td>Sort()</td><td>使用默认比较器对整个 List<T> 中的元素进行排序。</T></td></tr><tr><td>TrimExcess</td><td>将容量设置为 List<T> 中的实际元素数目（如果该数目小于某个阈值）。</T></td></tr><tr><td>TrueForAll</td><td>确定是否 List<T> 中的每个元素都与指定的谓词所定义的条件相匹配。</T></td></tr></tbody></table><p>说明：上述方法说明中有用到“谓词”，谓词就是Predicate<T> 委托，它代表一组方法，该方法定义一组条件，并确定指定的参数对象是否符合这些条件，具体的参见示例程序。</T></p><h3 id="4-List属性"><a href="#4-List属性" class="headerlink" title="4. List属性"></a>4. List<T>属性</T></h3><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>Capacity</td><td>获取或设置该内部数据结构在不调整大小的情况下能够容纳的元素总数。</td></tr><tr><td>Count</td><td>获取 List<T> 中实际包含的元素数。</T></td></tr></tbody></table><p>说明：Capacity 是 List<T> 在需要调整大小之前可以存储的元素数，Count 则是 List<T> 中实际存储的元素数。</T></T></p><h3 id="5-示例程序"><a href="#5-示例程序" class="headerlink" title="5.示例程序"></a>5.示例程序</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="meta">#<span class="meta-keyword">region</span> List&lt;T&gt;类常用的方法</span></span><br><span class="line">                List&lt;<span class="built_in">string</span>&gt; dinosaurs = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();<span class="comment">//创建一个string的List集合</span></span><br><span class="line"></span><br><span class="line">                Console.WriteLine(<span class="string">&quot;\nCapacity: &#123;0&#125;&quot;</span>, dinosaurs.Capacity);<span class="comment">//输出默认容量的大小</span></span><br><span class="line"></span><br><span class="line">                dinosaurs.Add(<span class="string">&quot;Tyrannosaurus&quot;</span>);<span class="comment">//向集合添加元素</span></span><br><span class="line">                dinosaurs.Add(<span class="string">&quot;Amargasaurus&quot;</span>);</span><br><span class="line">                dinosaurs.Add(<span class="string">&quot;Mamenchisaurus&quot;</span>);</span><br><span class="line">                dinosaurs.Add(<span class="string">&quot;Deinonychus&quot;</span>);</span><br><span class="line">                dinosaurs.Add(<span class="string">&quot;Compsognathus&quot;</span>);</span><br><span class="line"></span><br><span class="line">                Console.WriteLine();</span><br><span class="line">                <span class="keyword">foreach</span> (<span class="built_in">string</span> dinosaur <span class="keyword">in</span> dinosaurs)<span class="comment">//打印集合中的元素</span></span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(dinosaur);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                Console.WriteLine(<span class="string">&quot;\nCapacity: &#123;0&#125;&quot;</span>, dinosaurs.Capacity);</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Count: &#123;0&#125;&quot;</span>, dinosaurs.Count);<span class="comment">//输出集合中实际元素的数量</span></span><br><span class="line"></span><br><span class="line">                Console.WriteLine(<span class="string">&quot;\nContains(\&quot;Deinonychus\&quot;): &#123;0&#125;&quot;</span>,</span><br><span class="line">                    dinosaurs.Contains(<span class="string">&quot;Deinonychus&quot;</span>));<span class="comment">//判断集合中是否包含某个元素</span></span><br><span class="line"></span><br><span class="line">                Console.WriteLine(<span class="string">&quot;\nInsert(2, \&quot;Compsognathus\&quot;)&quot;</span>);</span><br><span class="line">                dinosaurs.Insert(<span class="number">2</span>, <span class="string">&quot;Compsognathus&quot;</span>);<span class="comment">//将元素插入到集合的指定索引出，允许插入重复的元素</span></span><br><span class="line"></span><br><span class="line">                Console.WriteLine();</span><br><span class="line">                <span class="keyword">foreach</span> (<span class="built_in">string</span> dinosaur <span class="keyword">in</span> dinosaurs)<span class="comment">//打印集合中的元素</span></span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(dinosaur);</span><br><span class="line">                &#125;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;\ndinosaurs[3]: &#123;0&#125;&quot;</span>, dinosaurs[<span class="number">3</span>]);<span class="comment">//输出集合中索引为3的元素</span></span><br><span class="line"></span><br><span class="line">                Console.WriteLine(<span class="string">&quot;\nRemove(\&quot;Compsognathus\&quot;)&quot;</span>);</span><br><span class="line">                dinosaurs.Remove(<span class="string">&quot;Compsognathus&quot;</span>);<span class="comment">//移除集合中第一个匹配的元素</span></span><br><span class="line"></span><br><span class="line">                Console.WriteLine();</span><br><span class="line">                <span class="keyword">foreach</span> (<span class="built_in">string</span> dinosaur <span class="keyword">in</span> dinosaurs)<span class="comment">//打印集合中的元素</span></span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(dinosaur);</span><br><span class="line">                &#125;</span><br><span class="line">                dinosaurs.TrimExcess();<span class="comment">//减小容量以匹配计数，然后显示 Capacity 和 Count 属性。如果未用容量已经小于总容量的 10%，则列表容量不会进行调整。</span></span><br><span class="line">                Console.WriteLine(<span class="string">&quot;\nTrimExcess()&quot;</span>);</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Capacity: &#123;0&#125;&quot;</span>, dinosaurs.Capacity);</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Count: &#123;0&#125;&quot;</span>, dinosaurs.Count);</span><br><span class="line"></span><br><span class="line">                dinosaurs.Clear();<span class="comment">//移除列表中的所有项，然后显示 Capacity 和 Count 属性。</span></span><br><span class="line">                Console.WriteLine(<span class="string">&quot;\nClear()&quot;</span>);</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Capacity: &#123;0&#125;&quot;</span>, dinosaurs.Capacity);</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Count: &#123;0&#125;&quot;</span>, dinosaurs.Count);</span><br><span class="line">            </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">            <span class="meta">#<span class="meta-keyword">region</span> List&lt;T&gt;类的新增方法</span></span><br><span class="line"></span><br><span class="line">            List&lt;<span class="built_in">string</span>&gt; dinosaurs1 = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();<span class="comment">//创建一个string的List集合</span></span><br><span class="line"></span><br><span class="line">            dinosaurs1.Add(<span class="string">&quot;Compsognathus&quot;</span>);<span class="comment">//向集合添加元素</span></span><br><span class="line">            dinosaurs1.Add(<span class="string">&quot;Amargasaurus&quot;</span>);</span><br><span class="line">            dinosaurs1.Add(<span class="string">&quot;Oviraptor&quot;</span>);</span><br><span class="line">            dinosaurs1.Add(<span class="string">&quot;Velociraptor&quot;</span>);</span><br><span class="line">            dinosaurs1.Add(<span class="string">&quot;Deinonychus&quot;</span>);</span><br><span class="line">            dinosaurs1.Add(<span class="string">&quot;Dilophosaurus&quot;</span>);</span><br><span class="line">            dinosaurs1.Add(<span class="string">&quot;Gallimimus&quot;</span>);</span><br><span class="line">            dinosaurs1.Add(<span class="string">&quot;Triceratops&quot;</span>);</span><br><span class="line"></span><br><span class="line">            Console.WriteLine();</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="built_in">string</span> dinosaur <span class="keyword">in</span> dinosaurs1)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(dinosaur);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;\nTrueForAll(EndsWithSaurus): &#123;0&#125;&quot;</span>,</span><br><span class="line">                dinosaurs1.TrueForAll(EndsWithSaurus));<span class="comment">//确定集合中的每个元素是否都与指定的谓词所定义的条件相匹配</span></span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;\nFind(EndsWithSaurus): &#123;0&#125;&quot;</span>,</span><br><span class="line">                dinosaurs1.Find(EndsWithSaurus));<span class="comment">//搜索与指定谓词条件相匹配的第一个元素</span></span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;\nFindLast(EndsWithSaurus): &#123;0&#125;&quot;</span>,</span><br><span class="line">                dinosaurs1.FindLast(EndsWithSaurus));<span class="comment">//搜索与指定谓词条件相匹配的最后一个元素</span></span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;\nFindAll(EndsWithSaurus):&quot;</span>);</span><br><span class="line">            List&lt;<span class="built_in">string</span>&gt; sublist = dinosaurs1.FindAll(EndsWithSaurus);<span class="comment">//检索与指定谓词定义的条件匹配的所有元素</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="built_in">string</span> dinosaur <span class="keyword">in</span> sublist)<span class="comment">//打印集合</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(dinosaur);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(</span><br><span class="line">                <span class="string">&quot;\n&#123;0&#125; elements removed by RemoveAll(EndsWithSaurus).&quot;</span>,</span><br><span class="line">                dinosaurs1.RemoveAll(EndsWithSaurus));<span class="comment">//移除与指定谓词定义的条件匹配的所有元素</span></span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;\nList now contains:&quot;</span>);</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="built_in">string</span> dinosaur <span class="keyword">in</span> dinosaurs1)<span class="comment">//打印集合</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(dinosaur);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;\nExists(EndsWithSaurus): &#123;0&#125;&quot;</span>,</span><br><span class="line">                dinosaurs1.Exists(EndsWithSaurus));<span class="comment">//该方法从头开始遍历该列表，依次将每个元素传递给 EndsWithSaurus 方法。如果 EndsWithSaurus 方法针对任何元素返回 true，搜索即停止</span></span><br><span class="line">            dinosaurs1.Sort();<span class="comment">//对集合中的元素排序</span></span><br><span class="line">            dinosaurs1.Reverse();<span class="comment">//将集合中的元素顺序反转</span></span><br><span class="line">            dinosaurs1.ForEach(Print);<span class="comment">//对集合中的每个元素执行指定的方法（如Print方法）</span></span><br><span class="line">            Console.Read();</span><br><span class="line">            <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 搜索谓词方法，该方法接受一个字符串作为参数，并返回一个布尔值，指示输入的字符串是否以“saurus”结尾。</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">EndsWithSaurus</span>(<span class="params">String s</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">if</span> ((s.Length &gt; <span class="number">5</span>) &amp;&amp;</span><br><span class="line">                (s.Substring(s.Length - <span class="number">6</span>).ToLower() == <span class="string">&quot;saurus&quot;</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义打印集合的方法</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Print</span>(<span class="params"><span class="built_in">string</span> s</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="6-备注"><a href="#6-备注" class="headerlink" title="6.备注"></a>6.备注</h3><p>1、 List<T> 类既使用相等比较器又使用排序比较器。</T></p><ul><li>诸如 Contains、IndexOf、LastIndexOf 和 Remove 这样的方法对列表元素使用相等比较器。类型 T 的默认相等比较器按如下方式确定。如果类型 T 实现 IEquatable<T> 泛型接口，则相等比较器为该接口的 Equals(T) 方法；否则，默认相等比较器为 Object.Equals(Object)。</T></li><li>诸如 BinarySearch 和 Sort 这样的方法对列表元素使用排序比较器。类型 T 的默认比较器按如下方式确定。如果类型 T 实现 IComparable<T> 泛型接口，则默认比较器为该接口的 CompareTo(T) 方法；否则，如果类型 T 实现非泛型 IComparable 接口，则默认比较器为该接口的 CompareTo(Object) 方法。如果类型 T 没有实现其中任一个接口，则不存在默认比较器，并且必须显式提供比较器或比较委托。</T></li></ul><p>2、 List<T> 不保证是排序的。在执行要求 List<T> 已排序的操作（例如 BinarySearch）之前，您必须对 List<T> 进行排序。</T></T></T></p><p>3、 List<T> 不保证是排序的。在执行要求 List<T> 已排序的操作（例如 BinarySearch）之前，您必须对 List<T> 进行排序。</T></T></T></p><p>4、 使用整数索引可以访问此集合中的元素。此集合中的索引从零开始。</p><p>5、 List<T> 接受 null 作为引用类型的有效值并且允许有重复的元素。</T></p><p>6、 大多数情况下List<T>执行得更好并且是类型安全的,可以替换ArrayList,但是如果对类型 T 使用值类型，则编译器将特别针对该值类型生成 List<T> 类的实现。这意味着不必对 List<T> 对象的列表元素进行装箱就可以使用该元素，并且在创建大约 500 个列表元素之后，不对列表元素装箱所节省的内存将大于生成该类实现所使用的内存。如果创建小于500个元素，建议使用ArrayList.</T></T></T></p><h1 id="用CopyTo方法将List集合元素拷贝到数组Array"><a href="#用CopyTo方法将List集合元素拷贝到数组Array" class="headerlink" title="用CopyTo方法将List集合元素拷贝到数组Array"></a>用CopyTo方法将List集合元素拷贝到数组Array</h1><p>在C#的List集合操作中，有时候需要将List元素对象拷贝存放到对应的数组Array中，此时就可以使用到List集合的CopyTo方法来实现，CopyTo方法是List集合的扩展方法，共有3个重载方法签名，分别为void CopyTo(T[] array)、void CopyTo(T[] array, int arrayIndex)、void CopyTo(int index, T[] array, int arrayIndex, int count)等三种形式，此文重点介绍CopyTo的第一种方法签名形式void CopyTo(T[] array)。</p><p>首先定义个用于测试的类TestModel，具体的类定义如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestModel</span></span><br><span class="line">  &#123;</span><br><span class="line">       <span class="keyword">public</span> <span class="built_in">int</span> Index &#123; <span class="keyword">set</span>; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">set</span>; <span class="keyword">get</span>; &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>然后定义一个List<TestModel>集合，并往里面写入3条TestModel数据，具体实现如下：</TestModel></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">List&lt;TestModel&gt; testList = <span class="keyword">new</span> List&lt;ConsoleApplication1.TestModel&gt;();</span><br><span class="line">          testList.Add(<span class="keyword">new</span> TestModel()</span><br><span class="line">          &#123;</span><br><span class="line">               Index=<span class="number">1</span>,</span><br><span class="line">               Name=<span class="string">&quot;Index1&quot;</span></span><br><span class="line">          &#125;);</span><br><span class="line">          testList.Add(<span class="keyword">new</span> TestModel()</span><br><span class="line">          &#123;</span><br><span class="line">              Index = <span class="number">2</span>,</span><br><span class="line">              Name = <span class="string">&quot;Index2&quot;</span></span><br><span class="line">          &#125;);</span><br><span class="line">          testList.Add(<span class="keyword">new</span> TestModel()</span><br><span class="line">          &#123;</span><br><span class="line">              Index = <span class="number">3</span>,</span><br><span class="line">              Name = <span class="string">&quot;Index3&quot;</span></span><br><span class="line">          &#125;);</span><br></pre></td></tr></table></figure><p>我们需要达到的目的是，将testList集合的元素对象拷贝到数组Array中，此时可使用下列语句实现：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TestModel[] copyArray = <span class="keyword">new</span> TestModel[testList.Count];</span><br><span class="line"> testList.CopyTo(copyArray);</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>上述程序语句中的CopyTo方法为浅层次拷贝，当修改copyArray数组的时候，也会联动修改List集合对象testList。例如赋值copyArray[0].Index &#x3D; 10后，List集合对象testList的第一个元素testList[0]对象的Index属性也被修改为10。</p><h1 id="List-二维数组的使用（最重要的！踩了坑才记录这篇文章）"><a href="#List-二维数组的使用（最重要的！踩了坑才记录这篇文章）" class="headerlink" title="List 二维数组的使用（最重要的！踩了坑才记录这篇文章）"></a>List 二维数组的使用（最重要的！踩了坑才记录这篇文章）</h1><h2 id="C-泛型列表List实现二维数组的功能（令附C-泛型列表List基本用法总结）"><a href="#C-泛型列表List实现二维数组的功能（令附C-泛型列表List基本用法总结）" class="headerlink" title="C#泛型列表List实现二维数组的功能（令附C#泛型列表List基本用法总结）"></a>C#泛型列表List实现二维数组的功能（令附C#泛型列表List基本用法总结）</h2><blockquote><p><strong>是通过这篇文章才解决画图时传入多维数组数组问题</strong></p></blockquote><p>在决定使用 List<T> 还是使用 ArrayList 类（两者具有类似的功能）时，记住 List<T> 类在大多数情况下执行得更好并且是类型安全的。 如果对 List<T> 类的类型 T 使用引用类型，则两个类的行为是完全相同的。 但是，如果对类型 T 使用值类型，则需要考虑实现和装箱问题。想二维数组和一维数组那样能用好多方法，在这里可以实现：那就是利用泛型List<T>。</T></T></T></T></p><p>举个例子：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">view plaincopy to clipboardprint?</span><br><span class="line">List&lt;List&lt;<span class="built_in">int</span>&gt;&gt; array1 = <span class="keyword">new</span> List&lt;List&lt;<span class="built_in">int</span>&gt;&gt;();  </span><br><span class="line">        List&lt;<span class="built_in">int</span>&gt; array2 = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;();         </span><br><span class="line"> </span><br><span class="line">        array2.Add(<span class="number">2</span>);  </span><br><span class="line">        array2.Add(<span class="number">3</span>);  </span><br><span class="line">        array2.Add(<span class="number">6</span>);  </span><br><span class="line">        array2.Add(<span class="number">6</span>);  </span><br><span class="line">        array2.Add(<span class="number">6</span>);  </span><br><span class="line">        List&lt;<span class="built_in">int</span>&gt; array3 = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;();  </span><br><span class="line">        array3.Add(<span class="number">1</span>);  </span><br><span class="line">        array3.Add(<span class="number">4</span>);  </span><br><span class="line">        array3.Add(<span class="number">5</span>);  </span><br><span class="line">        array3.Add(<span class="number">12</span>);  </span><br><span class="line">        array3.Add(<span class="number">32</span>);  </span><br><span class="line">        array3.Add(<span class="number">42</span>);  </span><br><span class="line">        array1.Add(array2);  </span><br><span class="line">        array1.Add(array3);  </span><br><span class="line">        List&lt;<span class="built_in">string</span>&gt; array4 = array1[<span class="number">0</span>];  </span><br><span class="line">        List&lt;<span class="built_in">string</span>&gt; array5 = array1[<span class="number">1</span>]; </span><br></pre></td></tr></table></figure><p>-—————————————————————–</p><p>原理是：把列表合并再拆开，把数组中的每一行看做是一个列表的数据。</p><p>代码中定义两个列表的类型array1，利用List<T>的方法赋值，之后拆开，把值传到两个列表中。这样就实现了二维数组的赋值取值。这是二维数组，多维数组举一反三。例子只是为了说明用法 毫无代码价值。</T></p><p>C#泛型列表List<T>基本用法总结：（饮水思源：<a href="http://space.itpub.net/14466241/viewspace-624132%EF%BC%89">http://space.itpub.net/14466241/viewspace-624132）</a></T></p><p>示例代码如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">SampleListT</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line"> &#123;</span><br><span class="line">   <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>   &#123;</span><br><span class="line">     <span class="comment">//using System.Collections.Generic; 命名空间中的List&lt;T&gt;</span></span><br><span class="line">     <span class="comment">//using System.Collections;　命名空间中的ArrayList</span></span><br><span class="line">     <span class="comment">//都实现了列表集合，一个是泛形集合，一个是非泛型的</span></span><br><span class="line">     <span class="comment">//下面我们将Person对象加到集合中</span></span><br><span class="line"></span><br><span class="line">​     Person p1 = <span class="keyword">new</span> Person( <span class="string">&quot;aladdin&quot;</span> , <span class="number">20</span> );</span><br><span class="line">​     Person p2 = <span class="keyword">new</span> Person(<span class="string">&quot;zhao&quot;</span>, <span class="number">10</span>);</span><br><span class="line">​     Person p3 = <span class="keyword">new</span> Person(<span class="string">&quot;jacky&quot;</span>, <span class="number">40</span>);</span><br><span class="line"></span><br><span class="line">​     <span class="comment">//如果不制定list的容器大小，默认是０,只要有元素加入是，会自动扩展到４,如果第５个元素加入时，就变成了８,第９个加入，就成１６</span></span><br><span class="line">​     <span class="comment">//可以看出，总是成倍的增长，扩展时要重新开辟内存，这样会影响效率，如果事先知道元素个数，或者可能个数，最好给个尽量大的权衡值</span></span><br><span class="line">​     <span class="comment">//我们加入３个元素，设容器大小为４.注：设为４不是指只能放４个元素，如果超出，一样也会成倍扩展，这样做只是为了尽量扩展带来的开销</span></span><br><span class="line">​     List&lt;Person&gt; list = <span class="keyword">new</span> List&lt;Person&gt;(<span class="number">4</span>);</span><br><span class="line">​     list.Add(p1);</span><br><span class="line">​     list.Add(p2);</span><br><span class="line">​     list.Add(p3);</span><br><span class="line"></span><br><span class="line">​     <span class="comment">//本方法是清除多于的没有用的内存空间，例：如果开辟大小为１００,而我们只用了４个，其余的放着，是不是很浪费　</span></span><br><span class="line">​     <span class="comment">//本方法调用时会检查元素个数是不是占到了容器大小的９０％以上，如果是，则不进行回收．</span></span><br><span class="line">​     list.TrimExcess();</span><br><span class="line"></span><br><span class="line">​     <span class="comment">//ArrayList方法与List&lt;&gt;用法一样，不同的是，它是对象集合，参数是Object这样会有装箱拆箱的可能，尽量用List&lt;&gt;</span></span><br><span class="line">​     <span class="comment">//本处不再做演示</span></span><br><span class="line"></span><br><span class="line">​     <span class="comment">// 1 初始化集合器</span></span><br><span class="line">​     <span class="comment">// C#3.0开始，提供了初始化功能，但是并没有反应到ＩＬ代码中，在ＩＬ中，一样也是把个转化成ADD方法来调用</span></span><br><span class="line">​     List&lt;<span class="built_in">int</span>&gt; l2 = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;() &#123; <span class="number">1</span> ,<span class="number">2</span> ,<span class="number">3</span> ,<span class="number">4</span> ,<span class="number">5</span> &#125;;</span><br><span class="line"></span><br><span class="line">​     <span class="comment">// 2 添加元素 AddRange() 本方法可以一次性添加一批对象</span></span><br><span class="line">​     List&lt;Person&gt; lists = <span class="keyword">new</span> List&lt;Person&gt;(<span class="number">10</span>);</span><br><span class="line">​     <span class="comment">//参数是一个必须可能跌代的对象,也可是数组</span></span><br><span class="line">​     list.AddRange( <span class="keyword">new</span> Person[] &#123; <span class="keyword">new</span> Person( <span class="string">&quot;aladdin&quot;</span> ,<span class="number">20</span>) , <span class="keyword">new</span> Person(<span class="string">&quot;zhao&quot;</span>,<span class="number">6</span>)&#125;);</span><br><span class="line"></span><br><span class="line">​     <span class="comment">//构造传入批量参数 ,与AddRange效果一样</span></span><br><span class="line">​     List&lt;Person&gt; mylist = <span class="keyword">new</span> List&lt;Person&gt;(<span class="keyword">new</span> Person[] &#123; <span class="keyword">new</span> Person( <span class="string">&quot;aladdin&quot;</span> ,<span class="number">20</span>) , <span class="keyword">new</span> Person(<span class="string">&quot;zhao&quot;</span>,<span class="number">6</span>)&#125;);</span><br><span class="line"></span><br><span class="line">​     <span class="comment">// 3 插入元素</span></span><br><span class="line">​     <span class="comment">// 使用Insert()方法,可以在指定位置插入元素</span></span><br><span class="line">​     <span class="comment">// 例 我们在1位置插入 则最后变成了 aladdin jacky zhao..插入意思就是,这个位我占了,以前占这位的和他之后的,通通往后移一位</span></span><br><span class="line">​     mylist.Insert( <span class="number">1</span> , <span class="keyword">new</span> Person( <span class="string">&quot;jacky&quot;</span> , <span class="number">88</span> ));</span><br><span class="line"></span><br><span class="line">​     <span class="keyword">foreach</span> (Person p <span class="keyword">in</span> mylist)</span><br><span class="line">​     &#123;</span><br><span class="line">​       Console.WriteLine(p.name);</span><br><span class="line">​     &#125;</span><br><span class="line"></span><br><span class="line">​     <span class="comment">// 4 访问元素</span></span><br><span class="line">​     <span class="comment">// ArrayList 与 List&lt;T&gt;都是提供了索引器来访问的</span></span><br><span class="line">​     Console.WriteLine( <span class="string">&quot;----------------访问元素------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">​     <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; mylist.Count; i++)</span><br><span class="line">​     &#123;</span><br><span class="line">​       Console.WriteLine(mylist[i].name);</span><br><span class="line">​     &#125;</span><br><span class="line">​     <span class="comment">//还可以使用foreach跌代器来实现,些处不再举例</span></span><br><span class="line"></span><br><span class="line">​     <span class="comment">//使用Foreach方法</span></span><br><span class="line">​     <span class="comment">//public delegate void Action&lt;T&gt;(T obj);例用委托做为参数</span></span><br><span class="line">​     <span class="comment">//些处我们用呀妈Day表达式实现</span></span><br><span class="line">​     Console.WriteLine( <span class="string">&quot;-----------------用ForEach方法输出------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">​     mylist.ForEach( param =&gt; Console.WriteLine(param.name) ) ;</span><br><span class="line"></span><br><span class="line">​     <span class="comment">// 5删除元素</span></span><br><span class="line">​     <span class="comment">//删除元素可以使用RemoveAt()直接传入索引器值</span></span><br><span class="line">​     <span class="comment">//将第一个元素直接删除</span></span><br><span class="line">​     mylist.RemoveAt(<span class="number">0</span>);</span><br><span class="line">​     <span class="comment">//也可以将要删除的元素传给Remove方法</span></span><br><span class="line"></span><br><span class="line">​     List&lt;Person&gt; lists2 = <span class="keyword">new</span> List&lt;Person&gt;(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">​     Person per1 = <span class="keyword">new</span> Person( <span class="string">&quot;aladdin&quot;</span> , <span class="number">100</span> );</span><br><span class="line">​     Person per2 = <span class="keyword">new</span> Person(<span class="string">&quot;zhao&quot;</span>, <span class="number">100</span>);</span><br><span class="line">​     Person per3 = <span class="keyword">new</span> Person(<span class="string">&quot;jacky&quot;</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">​     lists2.Add(per1);</span><br><span class="line">​     lists2.Add(per2);</span><br><span class="line">​     lists2.Add(per3);</span><br><span class="line"></span><br><span class="line">​     lists2.Remove(per3);</span><br><span class="line"></span><br><span class="line">​     Console.WriteLine( <span class="string">&quot;-------删除后的元素---------&quot;</span>);</span><br><span class="line"></span><br><span class="line">​     <span class="keyword">foreach</span> (Person per <span class="keyword">in</span> lists2)</span><br><span class="line">​     &#123;</span><br><span class="line">​       Console.WriteLine(per.name);</span><br><span class="line">​     &#125;</span><br><span class="line">​     <span class="comment">//从结果可以看出 名称为Jacky的元素被删除了</span></span><br><span class="line">​     <span class="comment">//下面说一下Remove方法的删除过程</span></span><br><span class="line">​     <span class="comment">// 用IndexOf方法确定出对象的索引,然后按索引删除</span></span><br><span class="line">​     <span class="comment">// 在IndexOf方法内,首先检查元素是不是实现了IEquatable接口,如果是,就调用这个接口中的Equals方法</span></span><br><span class="line">​     <span class="comment">// 如果没有实现,则调用Object中的Equals方法比较元素(也就是址址比较)</span></span><br><span class="line">​     <span class="comment">// 以上我们删除per3,很显明显一个地址,所以被删除了 </span></span><br><span class="line"></span><br><span class="line">​     <span class="comment">// 下面我们改装了Person ,实现了IEquatable&lt;Person&gt;,在比较方法中,始终返回false , 则per3会比较失败,不会被删除</span></span><br><span class="line">​     <span class="comment">// 结果3个都在</span></span><br><span class="line">​     <span class="comment">// 如果要删除对象,最好使用索引直接删除,因为Remove方法经历了一系列过程后,最后才按索引删除!</span></span><br><span class="line"></span><br><span class="line">​     <span class="comment">// RemoveRange()删除一个范围</span></span><br><span class="line">​     <span class="comment">// 第一个参数 开始位置 第二个 个数</span></span><br><span class="line">​     <span class="comment">//lists2.RemoveRange( 1 , 2 );</span></span><br><span class="line">​     <span class="comment">//Console.WriteLine( &quot;批量删除后----------------&quot;);</span></span><br><span class="line"></span><br><span class="line">​     <span class="comment">//foreach (Person per in lists2)</span></span><br><span class="line">​     <span class="comment">//&#123;</span></span><br><span class="line">​     <span class="comment">//  Console.WriteLine(per.name);</span></span><br><span class="line">​     <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">​     <span class="comment">// 6 搜索</span></span><br><span class="line">​     <span class="comment">// 搜索有很多种方式,可以使用IndexOf LastIndexOf FindIndex FindLasIndex Find FindLas ,如果只是查看元素存不,可以使用Exists()方法</span></span><br><span class="line">​     <span class="comment">// IndexOf() 方法 需要将一个对象做参数, 如果打到,就返回本元素在集合中的索引,如果找不到就返回-1,IndexOf还可以使用IEquatable接口来比较元素</span></span><br><span class="line"></span><br><span class="line">​     List&lt;Person&gt; ls3 = <span class="keyword">new</span> List&lt;Person&gt;(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">​     Person person1 = <span class="keyword">new</span> Person(<span class="string">&quot;aladdin&quot;</span>, <span class="number">100</span>);</span><br><span class="line">​     Person person2 = <span class="keyword">new</span> Person(<span class="string">&quot;zhao&quot;</span>, <span class="number">100</span>);</span><br><span class="line">​     Person person3 = <span class="keyword">new</span> Person(<span class="string">&quot;jacky&quot;</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">​     ls3.Add(person1);</span><br><span class="line">​     ls3.Add(person2);</span><br><span class="line">​     ls3.Add(person3);</span><br><span class="line"></span><br><span class="line">​     <span class="comment">// 为了使用默认的地址比较,我们把Person的接口暂时去掉</span></span><br><span class="line">​     <span class="built_in">int</span> index = ls3.IndexOf(person3);</span><br><span class="line">​     Console.WriteLine( <span class="string">&quot;per3 的索引:&quot;</span> + index); <span class="comment">//2</span></span><br><span class="line">​     <span class="comment">// 还可以指定搜索范围 从第3个开始,范围长度是1</span></span><br><span class="line">​     <span class="built_in">int</span> index2 = ls3.IndexOf(person3,<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line">​     Console.WriteLine(index2);</span><br><span class="line">​     <span class="comment">//IEquatable比较方法前面已经写过,不再举例</span></span><br><span class="line"></span><br><span class="line">​     <span class="comment">// FindIndex()方法是用来搜索带有一定特性的元素</span></span><br><span class="line">​     <span class="comment">// 例用委托做参数 public delegate bool Predicate&lt;T&gt;(T obj);</span></span><br><span class="line"></span><br><span class="line">​     <span class="built_in">int</span> index3 = ls3.FindIndex(param =&gt; param.name.Equals(<span class="string">&quot;jacky&quot;</span>));</span><br><span class="line">​     Console.WriteLine( index3 );<span class="comment">// 2</span></span><br><span class="line">​     <span class="comment">// FindLastIndex是从后面查第一个出现的元素,因为我们这里没有重复元素,所以体现不出他只查找一个,就停下来的效果</span></span><br><span class="line">​     <span class="built_in">int</span> index4 = ls3.FindLastIndex(p =&gt; p.name.Equals(<span class="string">&quot;aladdin&quot;</span>));</span><br><span class="line">​     Console.WriteLine(index4);</span><br><span class="line">​     <span class="comment">// Find方法与FindIndex方法用法一样,不同的是,它返回的是元素本身</span></span><br><span class="line">​     Person ppp = ls3.Find( p =&gt; p.name.Equals(<span class="string">&quot;jacky&quot;</span>)) ;</span><br><span class="line">​     Console.WriteLine(ppp);</span><br><span class="line"></span><br><span class="line">​     <span class="comment">// 如果要查找所有的匹配元素,而不是找到第一个就停下来,就使用FindAll方法</span></span><br><span class="line">​     <span class="comment">// 我们查找所有年纪等于100的对象,3个都符合</span></span><br><span class="line">​     List&lt;Person&gt; newList = ls3.FindAll(p =&gt; p.age == <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">​     Console.WriteLine( <span class="string">&quot;----------查找所有---------&quot;</span>);</span><br><span class="line"></span><br><span class="line">​     <span class="keyword">foreach</span> (Person p <span class="keyword">in</span> newList)</span><br><span class="line">​     &#123;</span><br><span class="line">​       Console.WriteLine(p.name);</span><br><span class="line">​     &#125;</span><br><span class="line"></span><br><span class="line">​     <span class="comment">// 7 排序</span></span><br><span class="line">​     <span class="comment">// List可以例用Sort方法排序,实现算法是快速排序</span></span><br><span class="line">​     <span class="comment">// 本方法有好几个重载</span></span><br><span class="line">​     <span class="comment">//public void Sort(); //只对元素实现了IComparable才能使用这个方法 ,如果实现了则,可以直接调用一次sort之后,就排好序了</span></span><br><span class="line">​     <span class="comment">//public void Sort(Comparison&lt;T&gt; comparison); //我们的Person并没有实现那个接口,所以要用泛型委托当参数的方法</span></span><br><span class="line">​     <span class="comment">//public void Sort(IComparer&lt;T&gt; comparer); //泛型接口当参数 public delegate int Comparison&lt;T&gt;(T x, T y);</span></span><br><span class="line">​     <span class="comment">//public void Sort(int index, int count, IComparer&lt;T&gt; comparer); //可以指定范围</span></span><br><span class="line"></span><br><span class="line">​     List&lt;Person&gt; ls4 = <span class="keyword">new</span> List&lt;Person&gt;(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">​     Person person4 = <span class="keyword">new</span> Person(<span class="string">&quot;aladdin&quot;</span>, <span class="number">100</span>);</span><br><span class="line">​     Person person5 = <span class="keyword">new</span> Person(<span class="string">&quot;zhao&quot;</span>, <span class="number">33</span>);</span><br><span class="line">​     Person person6 = <span class="keyword">new</span> Person(<span class="string">&quot;jacky&quot;</span>, <span class="number">44</span>);</span><br><span class="line"></span><br><span class="line">​     ls4.Add(person4);</span><br><span class="line">​     ls4.Add(person5);</span><br><span class="line">​     ls4.Add(person6);</span><br><span class="line"></span><br><span class="line">​     ls4.Sort(MyComparFunc);</span><br><span class="line">​     Console.WriteLine( <span class="string">&quot;-------------排序后的-------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">​     <span class="keyword">foreach</span> (Person p <span class="keyword">in</span> ls4)</span><br><span class="line">​     &#123;</span><br><span class="line">​       Console.WriteLine(p.name+ p.age );</span><br><span class="line">​     &#125;</span><br><span class="line"></span><br><span class="line">​     Console.WriteLine( <span class="string">&quot;--------颠倒循序------------------&quot;</span>);</span><br><span class="line">​     ls4.Reverse();</span><br><span class="line"></span><br><span class="line">​     <span class="keyword">foreach</span> (Person p <span class="keyword">in</span> ls4)</span><br><span class="line">​     &#123;</span><br><span class="line">​       Console.WriteLine(p.name+ p.age);</span><br><span class="line">​     &#125;</span><br><span class="line"></span><br><span class="line">​     <span class="comment">// 8 类型转换</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//可以将集合中的元素转换成任意类型的元素,比如,我们要将集合中的Person转换成为Racer对象Racer只包含名字,没有年纪</span></span><br><span class="line">     <span class="comment">// public List&lt;TOutput&gt; ConvertAll&lt;TOutput&gt;(Converter&lt;T, TOutput&gt; converter);</span></span><br><span class="line">     <span class="comment">// public delegate TOutput Converter&lt;TInput, TOutput&gt;(TInput input); 委托参数</span></span><br><span class="line">     List&lt;Racer&gt; ls5 = ls4.ConvertAll&lt;Racer&gt;((input) =&gt; <span class="keyword">new</span> Racer(input.name)) ;</span><br><span class="line"></span><br><span class="line">​     Console.WriteLine( <span class="string">&quot;-----------转换后的玩意--------&quot;</span>);</span><br><span class="line">​     <span class="keyword">foreach</span> (Racer r <span class="keyword">in</span> ls5)</span><br><span class="line">​     &#123;</span><br><span class="line">​       Console.WriteLine(r.name);</span><br><span class="line">​     &#125;</span><br><span class="line"></span><br><span class="line">​     <span class="comment">// 9 只读集合</span></span><br><span class="line">​     <span class="comment">// 在创建完集合以后,肯定是可读写的,如果不是,他就不能再添加新元素了,但是,如果是认为填充完毕,不要再做修改.</span></span><br><span class="line">​     <span class="comment">// 可以使用只读集合,使用AsReadOnly方法() 返回ReadOnlyCollection&lt;T&gt;类型,它与List&lt;&gt;操作是一样的,但是一但有修改集合的操作,就会刨出异常</span></span><br><span class="line">​     <span class="comment">// 他屏蔽了通常的ADD等方法</span></span><br><span class="line"></span><br><span class="line">​     ReadOnlyCollection&lt;Racer&gt; persss = ls5.AsReadOnly();</span><br><span class="line"></span><br><span class="line">​     Console.WriteLine(<span class="string">&quot;输出只读集合&quot;</span>);</span><br><span class="line"></span><br><span class="line">​     <span class="keyword">foreach</span> (Racer r <span class="keyword">in</span> persss)</span><br><span class="line">​     &#123;</span><br><span class="line">​       Console.WriteLine(r.name);</span><br><span class="line">​     &#125;</span><br><span class="line"></span><br><span class="line">​     Console.ReadLine();</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//为了比较写的委托实现方法</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">MyComparFunc</span>(<span class="params">Person p1, Person p2</span>)</span></span><br><span class="line"><span class="function"></span>   &#123;</span><br><span class="line">     <span class="keyword">if</span> (p1.age == p2.age)</span><br><span class="line">     &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">else</span> <span class="keyword">if</span> (p1.age &gt; p2.age)</span><br><span class="line">     &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">     &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//two helper classes</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Person</span><span class="comment">//:IEquatable&lt;Person&gt;</span></span><br><span class="line"> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">int</span> age;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"> <span class="built_in">string</span> name , <span class="built_in">int</span> age </span>)</span></span><br><span class="line"><span class="function"></span>   &#123;</span><br><span class="line">     <span class="keyword">this</span>.name= name;</span><br><span class="line">     <span class="keyword">this</span>.age = age;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment"><span class="doctag">///</span>/始终给一个False值</span></span><br><span class="line">   <span class="comment">//public bool Equals(Person other)</span></span><br><span class="line">   <span class="comment">//&#123;</span></span><br><span class="line">   <span class="comment">//  return false;</span></span><br><span class="line">   <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">class</span> <span class="title">Racer</span></span><br><span class="line"> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Racer</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line"><span class="function"></span>   &#123;</span><br><span class="line">     <span class="keyword">this</span>.name= name;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="用List创建二维数组（未测试过，应当为正常）"><a href="#用List创建二维数组（未测试过，应当为正常）" class="headerlink" title="用List创建二维数组（未测试过，应当为正常）"></a>用List创建二维数组（未测试过，应当为正常）</h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">List&lt;List&lt;<span class="built_in">int</span>&gt;&gt; dList = <span class="keyword">new</span> List&lt;List&lt;<span class="built_in">int</span>&gt;&gt;();</span><br><span class="line"></span><br><span class="line">List&lt;<span class="built_in">int</span>&gt; list = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;(<span class="keyword">new</span> <span class="built_in">int</span>[]&#123;<span class="number">10</span>,<span class="number">1</span>,<span class="number">13</span>,<span class="number">16</span>,<span class="number">17</span>&#125;);</span><br><span class="line"></span><br><span class="line">List&lt;<span class="built_in">int</span>&gt; list2 = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;(<span class="keyword">new</span> <span class="built_in">int</span>[]&#123;<span class="number">21</span>,<span class="number">2</span>,<span class="number">23</span>,<span class="number">26</span>,<span class="number">27</span>&#125;);</span><br><span class="line"></span><br><span class="line">dList.Add(list);</span><br><span class="line">dList.Add(list);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>; i &lt; dList.Count; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> j=<span class="number">0</span>; j &lt; dList[i].Count; j++)</span><br><span class="line">&#123;</span><br><span class="line">Console.Write(dList[i][j]+<span class="string">&quot;,&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">Console.WriteLine(<span class="string">&quot;第&#123;0&#125;行数据&quot;</span>,i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最近在解决一个地图图层操作的问题，图层操作的原理大致是这样的：<br>   每层图片划分为同样大小的网格，划分后可以看成一个二维数组，每一个网格代表数组中的一个元素，将其转化 为一      维数组（后面还会增加一维，由于对超过二维的数组有一种天然的的恐惧感，这里就把其转化为一维的了）;<br> 将每一层看做一维数组中的一个元素，这样对图层的操作就变成一个对二维数组的操作;<br> 预设的目标是能够实现动态的增加图层，增加的图层放在最上层;<br> 相邻两个图层之间能够交换顺序，即数组list[0]和数组list[1]能够交换位置;<br>   能够删除某一指定的层;<br> 就如上上面提到的一样，我想到的解决办法就是使用二维数组，但我需要的图层数目是动态的增加和减少的，而且某一层的顺序位置是可以变化的，这就涉及到数组的添加，删除，顺序变化，这些是普通的二维数组是实现不了的，于是就想到是用List，然后就在网上查了一些资料和MSDN文档，写了下面的测试代码：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span>[] a = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">5</span>];</span><br><span class="line">           <span class="built_in">int</span>[] b = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">5</span>];</span><br><span class="line">           <span class="built_in">int</span>[] c = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">5</span>];</span><br><span class="line">           <span class="built_in">int</span>[] d = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">5</span>];</span><br><span class="line">           <span class="built_in">int</span>[] e = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">5</span>];</span><br><span class="line">           <span class="built_in">int</span>[] f = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">5</span>];  <span class="comment">//创建一维数组</span></span><br><span class="line">           List&lt;<span class="built_in">int</span>[]&gt; list = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>[]&gt;();</span><br><span class="line">           list.Add(a);</span><br><span class="line">           list.Add(b);</span><br><span class="line">           list.Add(c);</span><br><span class="line"></span><br><span class="line">           list.Add(d);  <span class="comment">//添加图层</span></span><br><span class="line">           list[<span class="number">0</span>][<span class="number">3</span>] = <span class="number">20</span>;</span><br><span class="line">           list[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">2</span>;  <span class="comment">//这里和普通二维数组的使用[,] 不一样</span></span><br><span class="line">           list[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">40</span>;</span><br><span class="line"></span><br><span class="line">           list.Reverse(<span class="number">1</span>,<span class="number">2</span>);    <span class="comment">//图层交换</span></span><br></pre></td></tr></table></figure><hr><h1 id="相关链接（侵删）"><a href="#相关链接（侵删）" class="headerlink" title="相关链接（侵删）"></a>相关链接（侵删）</h1><ol><li><a href="https://www.cnblogs.com/xingyuanzier/p/11081279.html">C# 之list</a></li><li><a href="https://www.cnblogs.com/wisdomforce/archive/2010/05/31/1748642.html">C#泛型类之LIST<T></T></a></li><li><a href="https://www.jb51.net/article/232317.htm">C#中List用法介绍详解（这个说的很详细）</a></li><li><a href="https://www.cnblogs.com/xu-yi/p/11026480.html">C#中使用CopyTo方法将List集合元素拷贝到数组Array中</a></li><li><a href="https://www.cnblogs.com/canlay/archive/2011/09/06/2168507.html">C#泛型列表List实现二维数组的功能（令附C#泛型列表List基本用法总结）</a></li><li><a href="https://bbs.csdn.net/topics/392372606">关于 List[][] 大家见过这样的用法么？</a></li><li><a href="https://blog.csdn.net/qq_42675313/article/details/103342637">C# 创建二维List的简单例子</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">C#中 list 的基本用法</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="C#" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/C/"/>
    
    <category term="前端" scheme="https://zml3589110.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="C#" scheme="https://zml3589110.github.io/tags/C/"/>
    
    <category term="语法" scheme="https://zml3589110.github.io/tags/%E8%AF%AD%E6%B3%95/"/>
    
    <category term="List" scheme="https://zml3589110.github.io/tags/List/"/>
    
    <category term="二维数组" scheme="https://zml3589110.github.io/tags/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84/"/>
    
    <category term="泛型" scheme="https://zml3589110.github.io/tags/%E6%B3%9B%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>C#串口功能之五（串口调试助手温度曲线的显示）</title>
    <link href="https://zml3589110.github.io/posts/526450441.html"/>
    <id>https://zml3589110.github.io/posts/526450441.html</id>
    <published>2022-10-28T03:11:20.000Z</published>
    <updated>2022-10-28T03:30:56.913Z</updated>
    
    <content type="html"><![CDATA[<h1 id="c-串口调试助手、上位机"><a href="#c-串口调试助手、上位机" class="headerlink" title="c#串口调试助手、上位机"></a>c#串口调试助手、上位机</h1><p><strong>简介：</strong><br>此串口调试助手是在windows下开发的，工具是 Visual Studio 2017开发的，串口调试助手支持 600<del>115200波特率，端口号是 CMO1</del>CMO9，支持数据位、停止位、奇偶位，支持数据的接收与发送，接收方式十六进制、字符的选择，对接收端数据的清空，并能对温度传感器数据进行接收与绘折线图，并且能设置正常温度现实的区间，及时判断温度是否显示正常与否，并能对曲线的显示进行刷新重新绘制。</p><p><strong>效果图片：</strong></p><img src="https://img-blog.csdnimg.cn/20181219132507652.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpY2tpbHlnb3U=,size_10,color_FF0000,t_70"><p>源码文件名：Csha_demo-master</p><p><strong>想要源代码的可以关注公众号回复：上位机</strong></p><img src="https://img-blog.csdnimg.cn/20181226195010361.jpg"><h2 id="串口参数介绍"><a href="#串口参数介绍" class="headerlink" title="串口参数介绍"></a>串口参数介绍</h2><p><strong>简介：</strong><br>典型地，串口用于ASCII码字符的传输。通信使用3根线完成：（1）地线，（2）发送，（3）接收。由于串口通信是异步的，端口能够在一根线上发送数据同时在另一根线上接收数据。</p><p><strong>波特率：</strong><br>这是一个衡量符号传输速率的参数。它表示每秒钟传送的符号的个数。例如300波特表示每秒钟发送300个符号。当我们提到时钟周期时，我们就是指波特率，例如如果协议需要4800波特率，那么时钟是4800Hz。这意味着串口通信在数据线上的采样率为4800Hz。通常电话线的波特率为14400，28800和36600。波特率可以远远大于这些值，但是波特率和距离成反比。高波特率常常用于放置的很近的仪器间的通信，典型的例子就是GPIB设备的通信。</p><p><strong>数据位：</strong><br>数据位表示一组数据实际包含的数据位数。数据位紧跟在起始位之后，是通信中的真正有效信息。数据位的位数由通信双方共同约定，一般可以是6位、7位或8位，比如标准的ASCII码是0—127（7位），扩展的ASCII码是0—255（8位）。传输数据时先传送字符的低位，后传送字符的高位，即低位（LSB）在前，高位（MSB）在后。</p><p><strong>奇偶位：</strong><br>奇偶校验通常用在数据通信中来保证数据的有效性。奇偶校验位是一个表示给定位数的二进制数中 1 的个数是奇数还是偶数的二进制数。奇偶校验位是最简单的错误检测码。</p><p><strong>停止位：</strong><br>用于表示单个包的最后一位。典型的值为1，1.5和2位。由于数据是在传输线上定时的，并且每一个设备有其自己的时钟，很可能在通信中两台设备间出现了小小的不同步。因此停止位不仅仅是表示传输的结束，并且提供计算机校正时钟同步的机会。适用于停止位的位数越多，不同时钟同步的容忍程度越大，但是数据传输率同时也越慢。</p><h2 id="串口通信模块-SerialPort"><a href="#串口通信模块-SerialPort" class="headerlink" title="串口通信模块(SerialPort)"></a>串口通信模块(SerialPort)</h2><ul><li><strong>配置IO文件</strong><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.IO.Ports;</span><br></pre></td></tr></table></figure></li><li><strong>图标</strong></li></ul><img src="https://img-blog.csdnimg.cn/20181219154748906.png"><table><thead><tr><th>属性</th><th>介绍</th></tr></thead><tbody><tr><td>BaudRate</td><td>波特率</td></tr><tr><td>DataBits</td><td>数据位</td></tr><tr><td>Parity</td><td>奇偶校验位</td></tr><tr><td>PortName</td><td>端口号</td></tr><tr><td>StopBits</td><td>停止位</td></tr><tr><td>ByteToRead</td><td>获取输入缓冲区的</td></tr><tr><td>IsOpen</td><td>获取是否开启串口</td></tr></tbody></table><ul><li><strong>Serialport 通信模块的事件</strong></li></ul><img src="https://img-blog.csdnimg.cn/2018121915571354.png"><p>在这里我们只用到DataReceived串口接收函数，如需了解另外两个请自己查阅</p><table><thead><tr><th>事件</th><th>介绍</th></tr></thead><tbody><tr><td>DataReceived</td><td>串口接收函数</td></tr><tr><td>ErrorReceived</td><td>串口数据接收错误</td></tr><tr><td>PinChanged</td><td>串口号发生改变</td></tr></tbody></table><h2 id="串口窗口介绍"><a href="#串口窗口介绍" class="headerlink" title="串口窗口介绍"></a>串口窗口介绍</h2><img src="https://img-blog.csdnimg.cn/20181219161228702.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpY2tpbHlnb3U=,size_10,color_FF0000,t_70"><p><strong>由图可以看出正常温度区间设置的是20-25度之间，测试温度的过程中温度曲线黄色的为正常的曲线，红色的曲线为温度异常。温度刷新，温度曲线重新读取画线</strong></p><p>在窗体上添加4个Groupbox控件：</p><ul><li>第一个：串口设置</li><li>第二的：接收数据</li><li>第三个：发送数据</li><li>第四个：温度曲线显示</li></ul><h1 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h1><h2 id="串口初始化函数"><a href="#串口初始化函数" class="headerlink" title="串口初始化函数"></a>串口初始化函数</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button_open_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">           <span class="comment">// if(Button_on == 1)</span></span><br><span class="line">            <span class="keyword">if</span> (!serialPort1.IsOpen)<span class="comment">//如果串口是开</span></span><br><span class="line">            &#123;</span><br><span class="line">                serialPort1.PortName = comboBox1.Text;<span class="comment">//端口号</span></span><br><span class="line">                serialPort1.BaudRate = Convert.ToInt32(comboBox2.Text, <span class="number">10</span>);<span class="comment">//波特率</span></span><br><span class="line">                <span class="built_in">float</span> f = Convert.ToSingle(comboBox3.Text.Trim());<span class="comment">//trim去除字符串前后的空格</span></span><br><span class="line">                <span class="keyword">if</span> (f == <span class="number">0</span>)<span class="comment">//设置停止位</span></span><br><span class="line">                    serialPort1.StopBits = StopBits.None;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (f == <span class="number">1.5</span>)</span><br><span class="line">                    serialPort1.StopBits = StopBits.OnePointFive;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (f == <span class="number">1</span>)</span><br><span class="line">                    serialPort1.StopBits = StopBits.One;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (f == <span class="number">2</span>)</span><br><span class="line">                    serialPort1.StopBits = StopBits.Two;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    serialPort1.StopBits = StopBits.One;</span><br><span class="line">                <span class="comment">//设置数据位</span></span><br><span class="line">                serialPort1.DataBits = Convert.ToInt32(comboBox4.Text.Trim());</span><br><span class="line">                <span class="comment">//设置奇偶校验位</span></span><br><span class="line">                <span class="built_in">string</span> s = comboBox5.Text.Trim();</span><br><span class="line">                <span class="keyword">if</span> (s.CompareTo(<span class="string">&quot;无&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">                    serialPort1.Parity = Parity.None;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (s.CompareTo(<span class="string">&quot;奇校验&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">                    serialPort1.Parity = Parity.Odd;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (s.CompareTo(<span class="string">&quot;偶校验&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">                    serialPort1.Parity = Parity.Even;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    serialPort1.Parity = Parity.None;</span><br><span class="line">                <span class="keyword">try</span></span><br><span class="line">                &#123;</span><br><span class="line">                    serialPort1.Open();     <span class="comment">//打开串口</span></span><br><span class="line">                    button_open.Text = <span class="string">&quot;关闭串口&quot;</span>;</span><br><span class="line">                    comboBox1.Enabled = <span class="literal">false</span>;<span class="comment">//关闭使能</span></span><br><span class="line">                    comboBox2.Enabled = <span class="literal">false</span>;</span><br><span class="line">                    comboBox3.Enabled = <span class="literal">false</span>;</span><br><span class="line">                    comboBox4.Enabled = <span class="literal">false</span>;</span><br><span class="line">                    comboBox5.Enabled = <span class="literal">false</span>;</span><br><span class="line">                    comboBox6.Enabled = <span class="literal">false</span>;</span><br><span class="line">                    comboBox7.Enabled = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                catch</span><br><span class="line">                &#123;</span><br><span class="line">                    MessageBox.Show(<span class="string">&quot;串口打开失败！&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span><span class="comment">//如果串口是打开的则将其关闭</span></span><br><span class="line">            &#123;</span><br><span class="line">                serialPort1.Close();</span><br><span class="line">                button_open.Text = <span class="string">&quot;打开串口&quot;</span>;</span><br><span class="line">                comboBox1.Enabled = <span class="literal">true</span>;<span class="comment">//使能配置</span></span><br><span class="line">                comboBox2.Enabled = <span class="literal">true</span>;</span><br><span class="line">                comboBox3.Enabled = <span class="literal">true</span>;</span><br><span class="line">                comboBox4.Enabled = <span class="literal">true</span>;</span><br><span class="line">                comboBox5.Enabled = <span class="literal">true</span>;</span><br><span class="line">                comboBox6.Enabled = <span class="literal">true</span>;</span><br><span class="line">                comboBox7.Enabled = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="画坐标图"><a href="#画坐标图" class="headerlink" title="画坐标图"></a>画坐标图</h2><img src="https://img-blog.csdnimg.cn/20181219164023414.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpY2tpbHlnb3U=,size_16,color_FF0000,t_70"><h3 id="画坐标时用到头文件："><a href="#画坐标时用到头文件：" class="headerlink" title="画坐标时用到头文件："></a>画坐标时用到头文件：</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Drawing;</span><br><span class="line"><span class="keyword">using</span> System.Drawing.Drawing2D;</span><br></pre></td></tr></table></figure><h3 id="画线时用到类graphics"><a href="#画线时用到类graphics" class="headerlink" title="画线时用到类graphics"></a><strong>画线时用到类graphics</strong></h3><blockquote><p>graphics是抽象函数不能实例化，并且画线的时候编辑器是以左上角为坐标原点画的，想要把它改成左下角，只能自己计算坐标点，根据自己的需求把它画成称自己想要的，如上图我把（50,218）这个坐标表示成原点</p></blockquote><p><strong>注意：Graphics是在控件Groupbox控件下事件Paint下写的</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">groupBox4_Paint</span>(<span class="params"><span class="built_in">object</span> sender, PaintEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            FontFamily family = <span class="keyword">new</span> FontFamily(<span class="string">&quot;Arial&quot;</span>);<span class="comment">//实例化字体的类型</span></span><br><span class="line">            <span class="built_in">int</span> fontstyle = (<span class="built_in">int</span>)FontStyle.Italic;<span class="comment">//设置字体的样式</span></span><br><span class="line">            GraphicsPath gp = <span class="keyword">new</span> GraphicsPath();</span><br><span class="line">            <span class="built_in">string</span> Str;</span><br><span class="line">            <span class="comment">//Draw y纵向轴绘制</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">14</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                e.Graphics.DrawLine(TablePen, StartPrint + i * Unit_length, StartPrint - <span class="number">32</span>, StartPrint + i * Unit_length, <span class="number">10</span> * Unit_length + <span class="number">18</span>);<span class="comment">//画线</span></span><br><span class="line">                gp.AddString((i * <span class="number">10</span>).ToString(), family, fontstyle, <span class="number">8</span>, <span class="keyword">new</span> RectangleF(StartPrint + i * Unit_length - <span class="number">7</span>, <span class="number">10</span> * Unit_length + <span class="number">18</span> + <span class="number">4</span>, <span class="number">400</span>, <span class="number">50</span>), <span class="literal">null</span>);<span class="comment">//添加文字</span></span><br><span class="line">            &#125;</span><br><span class="line">            gp.AddString(<span class="string">&quot;时间(s)&quot;</span>, family, fontstyle, <span class="number">12</span>, <span class="keyword">new</span> RectangleF(groupBox4.ClientRectangle.Width / <span class="number">2</span> , <span class="number">9</span> * Unit_length + <span class="number">55</span>, <span class="number">400</span>, <span class="number">50</span>), <span class="literal">null</span>);</span><br><span class="line">            Draw X 横向轴绘制</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">10</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                e.Graphics.DrawLine(TablePen, StartPrint, i * Unit_length + <span class="number">18</span>, StartPrint + <span class="number">14</span> * Unit_length, i * Unit_length + <span class="number">18</span>);<span class="comment">//画线</span></span><br><span class="line">                Str = Convert.ToString((<span class="number">10</span> - i) * <span class="number">5</span>);</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">0</span>)</span><br><span class="line">                    Str = <span class="string">&quot;50&quot;</span>;</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">10</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                gp.AddString(Str, family, fontstyle, <span class="number">8</span>, <span class="keyword">new</span> RectangleF(<span class="number">20</span>, i * Unit_length +<span class="number">16</span>, <span class="number">400</span>, <span class="number">50</span>), <span class="literal">null</span>);<span class="comment">//添加文字</span></span><br><span class="line">            &#125;</span><br><span class="line">            gp.AddString(<span class="string">&quot;温&quot;</span>, family, fontstyle, <span class="number">12</span>, <span class="keyword">new</span> RectangleF(<span class="number">0</span>, groupBox4.ClientRectangle.Height / <span class="number">2</span> - StartPrint, <span class="number">400</span>, <span class="number">50</span>), <span class="literal">null</span>);</span><br><span class="line">            gp.AddString(<span class="string">&quot;度&quot;</span>, family, fontstyle, <span class="number">12</span>, <span class="keyword">new</span> RectangleF(<span class="number">0</span>, groupBox4.ClientRectangle.Height / <span class="number">2</span> + <span class="number">18</span> - StartPrint, <span class="number">400</span>, <span class="number">50</span>), <span class="literal">null</span>);</span><br><span class="line">            gp.AddString(<span class="string">&quot;°C&quot;</span>, family, fontstyle, <span class="number">12</span>, <span class="keyword">new</span> RectangleF(<span class="number">0</span>, groupBox4.ClientRectangle.Height / <span class="number">2</span> + <span class="number">32</span> - StartPrint, <span class="number">400</span>, <span class="number">50</span>), <span class="literal">null</span>);</span><br><span class="line">            e.Graphics.DrawPath(Pens.White, gp);<span class="comment">//写文字</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="方法介绍"><a href="#方法介绍" class="headerlink" title="方法介绍"></a><strong>方法介绍</strong></h3><p><strong>DrawLine(Pen pen, int x1, int y1, int x2, int y2);</strong></p><blockquote><p>pen：定义线条的宽度、颜色、样式<br>画线由(x1,y1)向(x2,y2)画</p></blockquote><p><strong>public void AddString(string s, FontFamily family, int style, float emSize, RectangleF layoutRect, StringFormat format);</strong></p><blockquote><p>s：绘制的字符<br>family：绘制的字体类型<br>style：字体的样式<br>emsize：方形块的高度<br>layoutRect：文本的矩形<br>format：文本格式设置信息</p></blockquote><h3 id="c-延时函数"><a href="#c-延时函数" class="headerlink" title="c#延时函数"></a><strong>c#延时函数</strong></h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Delay</span>(<span class="params"><span class="built_in">int</span> milliSecond</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="built_in">int</span> start = Environment.TickCount;</span><br><span class="line">            <span class="keyword">while</span> (Math.Abs(Environment.TickCount - start) &lt; milliSecond)<span class="comment">//毫秒</span></span><br><span class="line">            &#123;</span><br><span class="line">                Application.DoEvents();<span class="comment">//可执行某无聊的操作</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p><strong>关于Math.Abs():</strong><br>Environment.TickCount，内部API是用DWORD GetTickCount()来实现的，该属性的值从系统计时器派生，并以 32 位有符号整数的形式存储。因此，如果系统连续运行，TickCount 将在约 24.9 天内从零递增至 Int32. MaxValue ，然后跳至 Int32. MinValue （这是一个负数），再在接下来的 24.9 天内递增至零。DWORD是无符号的，而 Environment.TickCount属性返回的值是有符号的，所以有一半的值用负数表示！</p><h3 id="串口写函数"><a href="#串口写函数" class="headerlink" title="串口写函数"></a>串口写函数</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button_send_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;<span class="comment">//发送数据</span></span><br><span class="line">            <span class="keyword">if</span>(serialPort1.IsOpen)</span><br><span class="line">            &#123;<span class="comment">//如果串口开启</span></span><br><span class="line">                <span class="keyword">if</span> (textBox_send.Text.Trim() != <span class="string">&quot;&quot;</span>)<span class="comment">//如果框内不为空则</span></span><br><span class="line">                &#123;</span><br><span class="line">                    serialPort1.Write(textBox_send.Text.Trim());<span class="comment">//写数据</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    MessageBox.Show(<span class="string">&quot;发送框没有数据&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                MessageBox.Show(<span class="string">&quot;串口未打开&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="串口读函数（如果是温度传感器并选择温度传感器画温度曲线）"><a href="#串口读函数（如果是温度传感器并选择温度传感器画温度曲线）" class="headerlink" title="串口读函数（如果是温度传感器并选择温度传感器画温度曲线）"></a>串口读函数（如果是温度传感器并选择温度传感器画温度曲线）</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">post_DataReceived</span>(<span class="params"><span class="built_in">object</span> sender, SerialDataReceivedEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="built_in">float</span> Up, Dw,t;</span><br><span class="line">            Graphics graphics = groupBox4.CreateGraphics();</span><br><span class="line">            <span class="keyword">if</span> (!radioButton1.Checked)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">string</span> str = serialPort1.ReadExisting();<span class="comment">//字符串方式读</span></span><br><span class="line">                <span class="keyword">if</span>(!radioButton3.Checked)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//提取字符串中的数字</span></span><br><span class="line">                    <span class="built_in">string</span> result = System.Text.RegularExpressions.Regex.Replace(str, <span class="string">@&quot;[^0-9]+&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                    Console.WriteLine(result);</span><br><span class="line">                    <span class="comment">//设置正常温度上限下限</span></span><br><span class="line">                    Dw = Convert.ToSingle(comboBox6.Text);</span><br><span class="line">                    Up = Convert.ToSingle(comboBox7.Text);</span><br><span class="line">                    <span class="keyword">if</span>(Dw&lt;Up)</span><br><span class="line">                    &#123;</span><br><span class="line">                        t = Dw;</span><br><span class="line">                        Dw = Up;</span><br><span class="line">                        Up = t;</span><br><span class="line">                    &#125;</span><br><span class="line">                    dstr2 = Convert.ToSingle(result);<span class="comment">//字符串的转换成float</span></span><br><span class="line">                    textBox_T.Text = result + <span class="string">&quot;度&quot;</span>;</span><br><span class="line">                    textBox_receive.AppendText(str);</span><br><span class="line">                    <span class="comment">//正常温度的曲线</span></span><br><span class="line">                    <span class="keyword">if</span>(dstr2&gt;=Up&amp;&amp;dstr2&lt;=Dw)</span><br><span class="line">                    &#123;</span><br><span class="line">                        graphics.DrawLine(LinesPen, Origin_x + i * Unit_length, dstr1, Origin_x + (i+<span class="number">0.1f</span>) * Unit_length, Origin_y - dstr2 * <span class="number">4</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span><span class="comment">//异常温度的曲线</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        graphics.DrawLine(LinesEpen, Origin_x + i * Unit_length, dstr1, Origin_x + (i + <span class="number">0.1f</span>) * Unit_length, Origin_y - dstr2 * <span class="number">4</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    i += <span class="number">0.1f</span>;</span><br><span class="line">                    dstr1 = Origin_y - dstr2 * <span class="number">4</span>;</span><br><span class="line">                    Delay(<span class="number">1000</span>);<span class="comment">//不延时的话不显示</span></span><br><span class="line">                    <span class="comment">//textBox_T.Clear();无所谓</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    textBox_receive.AppendText(str);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">byte</span> data;</span><br><span class="line">                data = (<span class="built_in">byte</span>)serialPort1.ReadByte();</span><br><span class="line">                <span class="built_in">string</span> str = Convert.ToString(data, <span class="number">16</span>).ToUpper();<span class="comment">//</span></span><br><span class="line">                textBox_receive.AppendText(<span class="string">&quot;0x&quot;</span> + (str.Length == <span class="number">1</span> ? <span class="string">&quot;0&quot;</span> + str : str) + <span class="string">&quot;  &quot;</span>);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><hr><h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><ol><li><a href="https://blog.csdn.net/lickilygou/article/details/85102538">c#串口调试助手温度曲线的显示-上位机的开发-串口参数介绍</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">实现基础串口功能，通过正则表达式解析数据等</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="C#" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/C/"/>
    
    <category term="前端" scheme="https://zml3589110.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="通讯" scheme="https://zml3589110.github.io/categories/%E9%80%9A%E8%AE%AF/"/>
    
    
    <category term="C#" scheme="https://zml3589110.github.io/tags/C/"/>
    
    <category term="串口通讯" scheme="https://zml3589110.github.io/tags/%E4%B8%B2%E5%8F%A3%E9%80%9A%E8%AE%AF/"/>
    
    <category term="绘图" scheme="https://zml3589110.github.io/tags/%E7%BB%98%E5%9B%BE/"/>
    
    <category term="曲线" scheme="https://zml3589110.github.io/tags/%E6%9B%B2%E7%BA%BF/"/>
    
  </entry>
  
  <entry>
    <title>C# winfrom 全屏自适应屏幕分辨率</title>
    <link href="https://zml3589110.github.io/posts/3006246467.html"/>
    <id>https://zml3589110.github.io/posts/3006246467.html</id>
    <published>2022-10-27T08:41:20.000Z</published>
    <updated>2022-10-28T03:30:56.900Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Rectangle rect = <span class="keyword">new</span> Rectangle();</span><br><span class="line">rect = Screen.GetWorkingArea(<span class="keyword">this</span>);</span><br><span class="line">   </span><br><span class="line"><span class="keyword">this</span>.Width = rect.Width;<span class="comment">//屏幕宽</span></span><br><span class="line"><span class="keyword">this</span>.Height = rect.Height;<span class="comment">//屏幕高</span></span><br><span class="line"><span class="keyword">this</span>.ControlBox = <span class="literal">false</span>;   <span class="comment">// 设置不出现关闭按钮</span></span><br><span class="line"><span class="keyword">this</span>.FormBorderStyle = FormBorderStyle.None;<span class="comment">//无边框</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//名字空间&quot;System.Windows.Forms&quot;中的&quot;Screen&quot;类的GetWorkingArea（）方法</span></span><br><span class="line"><span class="comment">//Rectangle rect = new Rectangle ( ) ;</span></span><br><span class="line"><span class="comment">//rect = Screen.GetWorkingArea ( this ) ;</span></span><br><span class="line"><span class="comment">//&quot;屏幕宽&quot;＝ rect.Width ;</span></span><br><span class="line"><span class="comment">//&quot;屏幕长&quot;＝ rect.Height ;</span></span><br></pre></td></tr></table></figure><hr><h1 id="相关链接（侵删）"><a href="#相关链接（侵删）" class="headerlink" title="相关链接（侵删）"></a>相关链接（侵删）</h1><ol><li><a href="https://www.cnblogs.com/winformasp/articles/12065948.html">winfrom 全屏自适应屏幕分辨率</a></li><li><a href="https://bbs.csdn.net/topics/60157463?list=lz">怎样得到桌面的大小？</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">C# winfrom 全屏自适应屏幕分辨率</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="C#" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/C/"/>
    
    <category term="前端" scheme="https://zml3589110.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="C#" scheme="https://zml3589110.github.io/tags/C/"/>
    
    <category term="GetWorkingArea" scheme="https://zml3589110.github.io/tags/GetWorkingArea/"/>
    
    <category term="分辨率" scheme="https://zml3589110.github.io/tags/%E5%88%86%E8%BE%A8%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title>C#操作注册表（读写注册表）</title>
    <link href="https://zml3589110.github.io/posts/1321126257.html"/>
    <id>https://zml3589110.github.io/posts/1321126257.html</id>
    <published>2022-10-27T06:01:20.000Z</published>
    <updated>2022-10-27T06:22:44.369Z</updated>
    
    <content type="html"><![CDATA[<h1 id="注册表起源和作用"><a href="#注册表起源和作用" class="headerlink" title="注册表起源和作用"></a>注册表起源和作用</h1><p>自Windows95以来的所有Windows版本中，注册表是包含Windows安装，用户首选项，以及已安装软件和设备的所有配置信息的核心存储库。目前，几乎所有的商用软件都使用注册表来存储这些信息，COM组件必须把它们的信息存储在注册表中，才能有客户端调用。.NET Framework引入了独立存储器的概念，通过它应用程序可以在文件中存储专用于每个用户的信息，.NET Framework将确保为每个在机器上注册的用户单独地存储数据。<br>注册表的库和.NET库一样复杂，它包括访问注册表的类。其中有两个类涉及注册表，即Registry和RegistryKey，这两个类都在Microsoft Win32 名称控件中。</p><h1 id="注册表简介"><a href="#注册表简介" class="headerlink" title="注册表简介"></a>注册表简介</h1><blockquote><p><strong>注册表的层次结构非常类似于文件系统的层次结构。查看和修改注册表的内容的一般方式是使用regedit或regedt32应用程序。</strong></p></blockquote><p>在运行中输入：regedit，可以看到如下界面：</p><img src="https://img-blog.csdn.net/20170313145601719?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveW91bmdoYWlxaW5n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"><img src="https://img-blog.csdn.net/20170313145719901?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveW91bmdoYWlxaW5n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"><img src="https://img-blog.csdn.net/20170313145726604?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveW91bmdoYWlxaW5n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"><img src="https://img-blog.csdn.net/20170313145909325?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveW91bmdoYWlxaW5n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"><h1 id="NET-注册表类"><a href="#NET-注册表类" class="headerlink" title="NET 注册表类"></a>NET 注册表类</h1><blockquote><p><strong>要访问注册表，就可以使用Registry和RegistryKey。</strong></p></blockquote><p>RegistryKey实例表示一个注册表键。这个类实现的方法可以浏览子键，创建新键，读取或修改键中的值。换句话说，通过这类可以实现对注册建所有的操作，包括设置键的安全级别。<br>Registry类只能对注册表键进行单一的访问，以执行简单的操作。Registry类的另一个作用是提供表示顶级键的RegistryKey实例，以便开始在注册表中定位。Registry通过静态属性来提供这些实例。<br>那么接下来先介绍一下Registry 类<br>作用：提供了 RegistryKey 表示 Windows 注册表中的根键的对象和 static 方法，以访问键&#x2F;值对。</p><h2 id="Registry方法"><a href="#Registry方法" class="headerlink" title="Registry方法"></a>Registry方法</h2><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>GetValue(String, String, Object)</td><td>检索与指定的注册表项中具有指定名称关联的值。 如果未在指定的键中找到的名称，将返回你提供一个默认值或 null 如果指定的键不存在。</td></tr><tr><td>SetValue(String, String, Object)</td><td>设置指定的注册表项指定的名称&#x2F;值对。 如果指定的键不存在，则创建它。</td></tr><tr><td>SetValue(String, String, Object, RegistryValueKind)</td><td>使用指定的注册表数据类型的指定的注册表项设置的名称&#x2F;值对。 如果指定的键不存在，则创建它。</td></tr></tbody></table><h2 id="Registry字段"><a href="#Registry字段" class="headerlink" title="Registry字段"></a>Registry字段</h2><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>ClassesRoot</td><td>定义文档以及与这些类型相关联的属性类型 （或类）。 此字段中读取的 Windows 注册表基项 HKEY_CLASSES_ROOT。</td></tr><tr><td>CurrentConfig</td><td>包含与不是特定于用户的硬件相关的配置信息。 此字段中读取的 Windows 注册表基项 HKEY_CURRENT_CONFIG。</td></tr><tr><td>CurrentUser</td><td>包含有关当前用户首选项的信息。 此字段中读取的 Windows 注册表基项 HKEY_CURRENT_USER</td></tr><tr><td>DynData</td><td>已过时。 包含动态注册表数据。 此字段中读取的 Windows 注册表基项 HKEY_DYN_DATA。</td></tr><tr><td>LocalMachine</td><td>包含为本地计算机的配置数据。 此字段中读取的 Windows 注册表基项 HKEY_LOCAL_MACHINE。</td></tr><tr><td>PerformanceData</td><td>包含软件组件的性能信息。 此字段中读取的 Windows 注册表基项 HKEY_PERFORMANCE_DATA。</td></tr><tr><td>Users</td><td>包含有关默认用户配置信息。 此字段中读取的 Windows 注册表基项 HKEY_USERS。</td></tr></tbody></table><h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><p>此类提供在运行 Windows 的计算机上的注册表中找到的标准的根键的集合。 注册表是有关应用程序、 用户和默认的系统设置的信息存储设施。 例如，应用程序可以使用注册表来存储信息，必须关闭该应用程序之后, 被保留并重新加载应用程序时访问这些信息。 例如，您可以存储颜色首选项、 屏幕位置或窗口的大小。 通过将信息存储在注册表中的其他位置，可以控制每个用户的此数据。<br>基或根 RegistryKey 实例公开的 Registry 类描述的子项和值在注册表中的基本存储机制。 所有键都是只读的因为注册表取决于它们存在。<br><strong>通过公开的项 Registry 是︰</strong></p><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>ClassesRoot</td><td>存储有关类型 （类） 的信息以及它们的属性。</td></tr><tr><td>CurrentConfig</td><td>将存储非特定于用户的硬件信息。</td></tr><tr><td>CurrentUser</td><td>存储有关用户首选项的信息。</td></tr><tr><td>DynData</td><td>将动态数据存储。</td></tr><tr><td>LocalMachine</td><td>存储在本地计算机的配置信息。</td></tr><tr><td>PerformanceData</td><td>存储软件组件的性能的信息。</td></tr><tr><td>Users</td><td>存储有关默认用户配置信息。</td></tr></tbody></table><p><strong>一旦确定要在其下存储&#x2F;检索信息从注册表的根密钥，您可以使用 RegistryKey 类来添加或删除子项，并处理给定键的值。</strong><br>硬件设备可以将信息放在使用自动插接口注册表中。 用于安装设备驱动程序软件可以通过写入到标准 Api 在注册表中放信息。<br>用于获取和设置值的静态方法<br>在.NET Framework 2.0 版中， Registry 类还包含 staticGetValue 和 SetValue 用于设置和从注册表项中检索值的方法。 这些方法都将打开和关闭注册表项的每个使用它们，因此它们不会执行的时间以及中的类似方法 RegistryKey 类，当您访问大量的值。<br>RegistryKey 类还提供了允许您设置的注册表项，以进行检索之前，测试一个值的数据类型并删除注册表项的 Windows 访问控制安全性的方法。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1"></a>示例 1</h3><p><strong>下面的代码示例演示如何检索 HKEY_USERS 项的子项并打印到屏幕的名称。 使用 OpenSubKey 方法来创建感兴趣的特定子项的一个实例。 然后，可以使用中的其他操作 RegistryKey 来操作该注册表项。</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Win32;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Reg</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create a RegistryKey, which will access the HKEY_USERS</span></span><br><span class="line">        <span class="comment">// key in the registry of this machine.</span></span><br><span class="line">        RegistryKey rk = Registry.Users;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Print out the keys.</span></span><br><span class="line">        PrintKeys(rk);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">PrintKeys</span>(<span class="params">RegistryKey rkey</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Retrieve all the subkeys for the specified key.</span></span><br><span class="line">        String [] names = rkey.GetSubKeyNames();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> icount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Subkeys of &quot;</span> + rkey.Name);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;-----------------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Print the contents of the array to the console.</span></span><br><span class="line">        <span class="keyword">foreach</span> (String s <span class="keyword">in</span> names) &#123;</span><br><span class="line">            Console.WriteLine(s);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// The following code puts a limit on the number</span></span><br><span class="line">            <span class="comment">// of keys displayed.  Comment it out to print the</span></span><br><span class="line">            <span class="comment">// complete list.</span></span><br><span class="line">            icount++;</span><br><span class="line">            <span class="keyword">if</span> (icount &gt;= <span class="number">10</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2"></a>示例 2</h3><p><strong>下面的代码示例将多个数据类型的值存储在一个示例键中创建密钥，因为它这样做了，然后检索并显示的值。 该示例演示如何存储和检索默认 （无名） 的名称&#x2F;值对，以及如何使用 defaultValue 名称&#x2F;值对不存在时。</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Win32;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Example</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">// The name of the key must include a valid root.</span></span><br><span class="line">        <span class="keyword">const</span> <span class="built_in">string</span> userRoot = <span class="string">&quot;HKEY_CURRENT_USER&quot;</span>;</span><br><span class="line">        <span class="keyword">const</span> <span class="built_in">string</span> subkey = <span class="string">&quot;RegistrySetValueExample&quot;</span>;</span><br><span class="line">        <span class="keyword">const</span> <span class="built_in">string</span> keyName = userRoot + <span class="string">&quot;\\&quot;</span> + subkey;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// An int value can be stored without specifying the</span></span><br><span class="line">        <span class="comment">// registry data type, but long values will be stored</span></span><br><span class="line">        <span class="comment">// as strings unless you specify the type. Note that</span></span><br><span class="line">        <span class="comment">// the int is stored in the default name/value</span></span><br><span class="line">        <span class="comment">// pair.</span></span><br><span class="line">        Registry.SetValue(keyName, <span class="string">&quot;&quot;</span>, <span class="number">5280</span>);</span><br><span class="line">        Registry.SetValue(keyName, <span class="string">&quot;TestLong&quot;</span>, <span class="number">12345678901234</span>,</span><br><span class="line">            RegistryValueKind.QWord);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Strings with expandable environment variables are</span></span><br><span class="line">        <span class="comment">// stored as ordinary strings unless you specify the</span></span><br><span class="line">        <span class="comment">// data type.</span></span><br><span class="line">        Registry.SetValue(keyName, <span class="string">&quot;TestExpand&quot;</span>, <span class="string">&quot;My path: %path%&quot;</span>);</span><br><span class="line">        Registry.SetValue(keyName, <span class="string">&quot;TestExpand2&quot;</span>, <span class="string">&quot;My path: %path%&quot;</span>,</span><br><span class="line">            RegistryValueKind.ExpandString);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Arrays of strings are stored automatically as </span></span><br><span class="line">        <span class="comment">// MultiString. Similarly, arrays of Byte are stored</span></span><br><span class="line">        <span class="comment">// automatically as Binary.</span></span><br><span class="line">        <span class="built_in">string</span>[] strings = &#123;<span class="string">&quot;One&quot;</span>, <span class="string">&quot;Two&quot;</span>, <span class="string">&quot;Three&quot;</span>&#125;;</span><br><span class="line">        Registry.SetValue(keyName, <span class="string">&quot;TestArray&quot;</span>, strings);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Your default value is returned if the name/value pair</span></span><br><span class="line">        <span class="comment">// does not exist.</span></span><br><span class="line">        <span class="built_in">string</span> noSuch = (<span class="built_in">string</span>) Registry.GetValue(keyName, </span><br><span class="line">            <span class="string">&quot;NoSuchName&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Return this default if NoSuchName does not exist.&quot;</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;\r\nNoSuchName: &#123;0&#125;&quot;</span>, noSuch);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Retrieve the int and long values, specifying </span></span><br><span class="line">        <span class="comment">// numeric default values in case the name/value pairs</span></span><br><span class="line">        <span class="comment">// do not exist. The int value is retrieved from the</span></span><br><span class="line">        <span class="comment">// default (nameless) name/value pair for the key.</span></span><br><span class="line">        <span class="built_in">int</span> tInteger = (<span class="built_in">int</span>) Registry.GetValue(keyName, <span class="string">&quot;&quot;</span>, <span class="number">-1</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;(Default): &#123;0&#125;&quot;</span>, tInteger);</span><br><span class="line">        <span class="built_in">long</span> tLong = (<span class="built_in">long</span>) Registry.GetValue(keyName, <span class="string">&quot;TestLong&quot;</span>,</span><br><span class="line">            <span class="built_in">long</span>.MinValue);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;TestLong: &#123;0&#125;&quot;</span>, tLong);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// When retrieving a MultiString value, you can specify</span></span><br><span class="line">        <span class="comment">// an array for the default return value. </span></span><br><span class="line">        <span class="built_in">string</span>[] tArray = (<span class="built_in">string</span>[]) Registry.GetValue(keyName,</span><br><span class="line">            <span class="string">&quot;TestArray&quot;</span>,</span><br><span class="line">            <span class="keyword">new</span> <span class="built_in">string</span>[] &#123;<span class="string">&quot;Default if TestArray does not exist.&quot;</span>&#125;);</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>; i&lt;tArray.Length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;TestArray(&#123;0&#125;): &#123;1&#125;&quot;</span>, i, tArray[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// A string with embedded environment variables is not</span></span><br><span class="line">        <span class="comment">// expanded if it was stored as an ordinary string.</span></span><br><span class="line">        <span class="built_in">string</span> tExpand = (<span class="built_in">string</span>) Registry.GetValue(keyName,</span><br><span class="line">             <span class="string">&quot;TestExpand&quot;</span>, </span><br><span class="line">             <span class="string">&quot;Default if TestExpand does not exist.&quot;</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;TestExpand: &#123;0&#125;&quot;</span>, tExpand);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// A string stored as ExpandString is expanded.</span></span><br><span class="line">        <span class="built_in">string</span> tExpand2 = (<span class="built_in">string</span>) Registry.GetValue(keyName,</span><br><span class="line">            <span class="string">&quot;TestExpand2&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Default if TestExpand2 does not exist.&quot;</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;TestExpand2: &#123;0&#125;...&quot;</span>,</span><br><span class="line">            tExpand2.Substring(<span class="number">0</span>, <span class="number">40</span>));</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;\r\nUse the registry editor to examine the key.&quot;</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Press the Enter key to delete the key.&quot;</span>);</span><br><span class="line">        Console.ReadLine();</span><br><span class="line">        Registry.CurrentUser.DeleteSubKey(subkey);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// This code example produces output similar to the following:</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//NoSuchName: Return this default if NoSuchName does not exist.</span></span><br><span class="line"><span class="comment">//(Default): 5280</span></span><br><span class="line"><span class="comment">//TestLong: 12345678901234</span></span><br><span class="line"><span class="comment">//TestArray(0): One</span></span><br><span class="line"><span class="comment">//TestArray(1): Two</span></span><br><span class="line"><span class="comment">//TestArray(2): Three</span></span><br><span class="line"><span class="comment">//TestExpand: My path: %path%</span></span><br><span class="line"><span class="comment">//TestExpand2: My path: D:\Program Files\Microsoft.NET\...</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//Use the registry editor to examine the key.</span></span><br><span class="line"><span class="comment">//Press the Enter key to delete the key.</span></span><br></pre></td></tr></table></figure><h1 id="RegistryKey-类"><a href="#RegistryKey-类" class="headerlink" title="RegistryKey 类"></a>RegistryKey 类</h1><img src="https://img-blog.csdn.net/20170313154357183?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveW91bmdoYWlxaW5n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"><img src="https://img-blog.csdn.net/20170313154403933?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveW91bmdoYWlxaW5n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"><h1 id="C-注册表项的创建，打开与删除"><a href="#C-注册表项的创建，打开与删除" class="headerlink" title="C#注册表项的创建，打开与删除"></a>C#注册表项的创建，打开与删除</h1><h2 id="1：创建"><a href="#1：创建" class="headerlink" title="1：创建"></a>1：创建</h2><p><strong>创建注册表项主要用到RegistryKey 的CreateSubKey()方法。如：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RegistryKey key = Registry.LocalMachine;</span><br><span class="line">RegistryKey software = key.CreateSubKey(<span class="string">&quot;software\\test&quot;</span>);</span><br><span class="line"><span class="comment">//在HKEY_LOCAL_MACHINE\SOFTWARE下新建名为test的注册表项。如果已经存在则不影响！</span></span><br></pre></td></tr></table></figure><h2 id="2：打开"><a href="#2：打开" class="headerlink" title="2：打开"></a>2：打开</h2><p><strong>打开注册表项主要用到RegistryKey 的OpenSubKey()方法。如：<br>注意，如果该注册表项不存在，这调用这个方法会抛出异常</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RegistryKey key = Registry.LocalMachine;</span><br><span class="line">RegistryKey software = key.OpenSubKey(<span class="string">&quot;software\\test&quot;</span>,<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//注意该方法后面还可以有一个布尔型的参数，true表示可以写入。</span></span><br></pre></td></tr></table></figure><h2 id="3：删除"><a href="#3：删除" class="headerlink" title="3：删除"></a>3：删除</h2><p><strong>删除注册表项主要用到RegistryKey 的DeleteSubKey()方法。如：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RegistryKey key = Registry.LocalMachine;</span><br><span class="line">key.DeleteSubKey(<span class="string">&quot;software\\test&quot;</span>,<span class="literal">true</span>); <span class="comment">//该方法无返回值，直接调用即可</span></span><br><span class="line">key.Close();</span><br></pre></td></tr></table></figure><p><strong>注意，如果该注册表项不存在，这调用这个方法会抛出异常</strong></p><h1 id="键值的创建-设置值、修改-，读取和删除"><a href="#键值的创建-设置值、修改-，读取和删除" class="headerlink" title="键值的创建(设置值、修改)，读取和删除"></a>键值的创建(设置值、修改)，读取和删除</h1><h2 id="1：创建-设置值、修改"><a href="#1：创建-设置值、修改" class="headerlink" title="1：创建(设置值、修改)"></a>1：创建(设置值、修改)</h2><p><strong>对键值的创建修改等操作主要用到RegistryKey 的SetValue()方法</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">RegistryKey key = Registry.LocalMachine;</span><br><span class="line">RegistryKey software = key.OpenSubKey(<span class="string">&quot;software\\test&quot;</span>,<span class="literal">true</span>); <span class="comment">//该项必须已存在</span></span><br><span class="line">software.SetValue(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;博客园&quot;</span>);</span><br><span class="line"><span class="comment">//在HKEY_LOCAL_MACHINE\SOFTWARE\test下创建一个名为“test”，值为“博客园”的键值。如果该键值原本已经存在，则会修改替换原来的键值，如果不存在则是创建该键值。</span></span><br><span class="line"><span class="comment">// 注意：SetValue()还有第三个参数，主要是用于设置键值的类型，如：字符串，二进制，Dword等等~~默认是字符串。如：</span></span><br><span class="line"><span class="comment">// software.SetValue(&quot;test&quot;, &quot;0&quot;, RegistryValueKind.DWord); //二进制信息</span></span><br><span class="line">Key.Close();</span><br></pre></td></tr></table></figure><h2 id="2：读取"><a href="#2：读取" class="headerlink" title="2：读取"></a>2：读取</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> info = <span class="string">&quot;&quot;</span>;</span><br><span class="line">RegistryKey Key;</span><br><span class="line">Key = Registry.LocalMachine;</span><br><span class="line">myreg = Key.OpenSubKey(<span class="string">&quot;software\\test&quot;</span>);</span><br><span class="line"><span class="comment">// myreg = Key.OpenSubKey(&quot;software\\test&quot;,true);</span></span><br><span class="line">info = myreg.GetValue(<span class="string">&quot;test&quot;</span>).ToString();</span><br><span class="line">myreg.Close();</span><br></pre></td></tr></table></figure><p><strong>info结果为：博客园</strong></p><h2 id="3：删除-1"><a href="#3：删除-1" class="headerlink" title="3：删除"></a>3：删除</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RegistryKey delKey = Registry.LocalMachine.OpenSubKey(<span class="string">&quot;Software\\test&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">delKey.DeleteValue(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">delKey.Close();</span><br></pre></td></tr></table></figure><blockquote><p><strong>细心的读者可能发现了第二个例子中OpenSubKey()方法参数与其他例子的不同。<br>如果你要修改键值，包括创建、设置、删除键值等都要在方法后面加个布尔参数，设置为true，表示可写可改；如果仅仅只是读取键值可以不加，此时可写关闭，你不能再往里写值(当然，你要加也可以true)！<br>还有读者提到读写默认键值的问题，主要在设置、读取的方法中将键名置空则就是对默认键值的操作。<br>如：<br>software.SetValue(“”, “博客园”); &#x2F;&#x2F; 在HKEY_LOCAL_MACHINE\SOFTWARE\test修改默认键值的值为“博客园”。读取类似！<br>另外，默认的键值是不能删除的，所以不要用DeleteValue()方法去删除，会抛出异常的！</strong></p></blockquote><h1 id="判断注册表项是否存在"><a href="#判断注册表项是否存在" class="headerlink" title="判断注册表项是否存在"></a>判断注册表项是否存在</h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="built_in">bool</span> <span class="title">IsRegeditItemExist</span>(<span class="params"></span>)  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="built_in">string</span> [] subkeyNames;  </span><br><span class="line">    RegistryKey hkml = Registry.LocalMachine;  </span><br><span class="line">    RegistryKey software = hkml.OpenSubKey(<span class="string">&quot;SOFTWARE&quot;</span>);  </span><br><span class="line">    <span class="comment">//RegistryKey software = hkml.OpenSubKey(&quot;SOFTWARE&quot;, true);  </span></span><br><span class="line">    subkeyNames = software.GetSubKeyNames();  </span><br><span class="line">    <span class="comment">//取得该项下所有子项的名称的序列，并传递给预定的数组中  </span></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="built_in">string</span> keyName <span class="keyword">in</span> subkeyNames)   </span><br><span class="line">    <span class="comment">//遍历整个数组  </span></span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">if</span> (keyName == <span class="string">&quot;test&quot;</span>)  </span><br><span class="line">        <span class="comment">//判断子项的名称  </span></span><br><span class="line">        &#123;   </span><br><span class="line">            hkml.Close();  </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span> ;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    hkml.Close();  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四：判断键值是否存在这里写代码片"><a href="#四：判断键值是否存在这里写代码片" class="headerlink" title="四：判断键值是否存在这里写代码片"></a>四：判断键值是否存在这里写代码片</h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="built_in">bool</span> <span class="title">IsRegeditKeyExit</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">string</span>[] subkeyNames;</span><br><span class="line">  RegistryKey hkml = Registry.LocalMachine;</span><br><span class="line">  RegistryKey software = hkml.OpenSubKey(<span class="string">&quot;SOFTWARE\\test&quot;</span>);</span><br><span class="line">  <span class="comment">//RegistryKey software = hkml.OpenSubKey(&quot;SOFTWARE\\test&quot;, true);</span></span><br><span class="line">  subkeyNames = software.GetValueNames();</span><br><span class="line">  <span class="comment">//取得该项下所有键值的名称的序列，并传递给预定的数组中</span></span><br><span class="line">  <span class="keyword">foreach</span> (<span class="built_in">string</span> keyName  <span class="keyword">in</span> subkeyNames)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (keyName ==  <span class="string">&quot;test&quot;</span>) <span class="comment">//判断键值的名称</span></span><br><span class="line">    &#123;</span><br><span class="line">        hkml.Close();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;    </span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  hkml.Close();</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="相关链接（侵删）"><a href="#相关链接（侵删）" class="headerlink" title="相关链接（侵删）"></a>相关链接（侵删）</h1><ol><li><a href="https://blog.csdn.net/younghaiqing/article/details/61918968">C#读写注册表</a></li><li><a href="https://www.cnblogs.com/txw1958/archive/2012/08/01/csharp-regidit.html">C#操作注册表</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">对注册表读写等基础操作</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="C#" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/C/"/>
    
    <category term="前端" scheme="https://zml3589110.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Windows" scheme="https://zml3589110.github.io/categories/Windows/"/>
    
    <category term="注册表" scheme="https://zml3589110.github.io/categories/%E6%B3%A8%E5%86%8C%E8%A1%A8/"/>
    
    
    <category term="C#" scheme="https://zml3589110.github.io/tags/C/"/>
    
    <category term="注册表" scheme="https://zml3589110.github.io/tags/%E6%B3%A8%E5%86%8C%E8%A1%A8/"/>
    
    <category term="读写" scheme="https://zml3589110.github.io/tags/%E8%AF%BB%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>C#获取硬件信息（封装类）</title>
    <link href="https://zml3589110.github.io/posts/2407017966.html"/>
    <id>https://zml3589110.github.io/posts/2407017966.html</id>
    <published>2022-10-25T01:40:20.000Z</published>
    <updated>2022-10-25T01:51:16.855Z</updated>
    
    <content type="html"><![CDATA[<h1 id="所获取的系统信息"><a href="#所获取的系统信息" class="headerlink" title="所获取的系统信息"></a>所获取的系统信息</h1><p>您可以获取您的系统信息，如处理器 ID、硬盘序列号、系统 MAC 地址、主板制造商、主板产品 ID、CD-DVD 驱动器路径、BIOS 制造商、BIOS 序列号、BIOS 标题、系统帐户名称、物理 RAM 内存, 主板上的 RAM 插槽编号, CPU 制造商, CPU 的当前时钟速度, 默认 IP 网关, CPU 速度, 获取当前语言, 系统信息, 处理器信息, 获取计算机名称。</p><h1 id="创建一个-Windows-窗体应用程序（form1）"><a href="#创建一个-Windows-窗体应用程序（form1）" class="headerlink" title="创建一个 Windows 窗体应用程序（form1）"></a>创建一个 Windows 窗体应用程序（form1）</h1><p>直接默认创建即可。</p><h1 id="添加参考（也可以在cs中添加using来使用）"><a href="#添加参考（也可以在cs中添加using来使用）" class="headerlink" title="添加参考（也可以在cs中添加using来使用）"></a>添加参考（也可以在cs中添加using来使用）</h1><p>添加“ System.Management ”的引用以使用C#获取计算机硬件信息。<br>请参见下图以在项目中添加参考。</p><img src="https://img-blog.csdnimg.cn/315bdf4681894d13b754879a91dbf0bd.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYWxsd2F5Mg==,size_17,color_FFFFFF,t_70,g_se,x_16"><p><strong>添加参考:</strong></p><img src="https://img-blog.csdnimg.cn/b79ce6757c4941629d1a6cf25e569664.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYWxsd2F5Mg==,size_20,color_FFFFFF,t_70,g_se,x_16"><p>添加“System.Management”的引用</p><h1 id="添加类文件"><a href="#添加类文件" class="headerlink" title="添加类文件"></a>添加类文件</h1><p>您可能会阅读：<a href="https://codescratcher.com/net-c/passing-parameters-from-one-window-to-another-window-c/">将参数从一个窗口传递到另一个窗口 c#</a></p><p>在您的项目中将类文件名添加为“ HardwareInfo.cs ”。在您的类文件中添加以下代码。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Management;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">HardwareInfo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Retrieving Processor Id.</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">GetProcessorId</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line"> </span><br><span class="line">        ManagementClass mc = <span class="keyword">new</span> ManagementClass(<span class="string">&quot;win32_processor&quot;</span>);</span><br><span class="line">        ManagementObjectCollection moc = mc.GetInstances();</span><br><span class="line">        String Id = String.Empty;</span><br><span class="line">        <span class="keyword">foreach</span> (ManagementObject mo <span class="keyword">in</span> moc)</span><br><span class="line">        &#123;</span><br><span class="line"> </span><br><span class="line">            Id = mo.Properties[<span class="string">&quot;processorID&quot;</span>].Value.ToString();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Id;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Retrieving HDD Serial No.</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">GetHDDSerialNo</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        ManagementClass mangnmt = <span class="keyword">new</span> ManagementClass(<span class="string">&quot;Win32_LogicalDisk&quot;</span>);</span><br><span class="line">        ManagementObjectCollection mcol = mangnmt.GetInstances();</span><br><span class="line">        <span class="built_in">string</span> result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (ManagementObject strt <span class="keyword">in</span> mcol)</span><br><span class="line">        &#123;</span><br><span class="line">            result += Convert.ToString(strt[<span class="string">&quot;VolumeSerialNumber&quot;</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Retrieving System MAC Address.</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">GetMACAddress</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        ManagementClass mc = <span class="keyword">new</span> ManagementClass(<span class="string">&quot;Win32_NetworkAdapterConfiguration&quot;</span>);</span><br><span class="line">        ManagementObjectCollection moc = mc.GetInstances();</span><br><span class="line">        <span class="built_in">string</span> MACAddress = String.Empty;</span><br><span class="line">        <span class="keyword">foreach</span> (ManagementObject mo <span class="keyword">in</span> moc)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (MACAddress == String.Empty)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> ((<span class="built_in">bool</span>)mo[<span class="string">&quot;IPEnabled&quot;</span>] == <span class="literal">true</span>) MACAddress = mo[<span class="string">&quot;MacAddress&quot;</span>].ToString();</span><br><span class="line">            &#125;</span><br><span class="line">            mo.Dispose();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        MACAddress = MACAddress.Replace(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> MACAddress;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Retrieving Motherboard Manufacturer.</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">GetBoardMaker</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line"> </span><br><span class="line">        ManagementObjectSearcher searcher = <span class="keyword">new</span> ManagementObjectSearcher(<span class="string">&quot;root\\CIMV2&quot;</span>, <span class="string">&quot;SELECT * FROM Win32_BaseBoard&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">foreach</span> (ManagementObject wmi <span class="keyword">in</span> searcher.Get())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> wmi.GetPropertyValue(<span class="string">&quot;Manufacturer&quot;</span>).ToString();</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            catch &#123; &#125;</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Board Maker: Unknown&quot;</span>;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Retrieving Motherboard Product Id.</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">GetBoardProductId</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line"> </span><br><span class="line">        ManagementObjectSearcher searcher = <span class="keyword">new</span> ManagementObjectSearcher(<span class="string">&quot;root\\CIMV2&quot;</span>, <span class="string">&quot;SELECT * FROM Win32_BaseBoard&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">foreach</span> (ManagementObject wmi <span class="keyword">in</span> searcher.Get())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> wmi.GetPropertyValue(<span class="string">&quot;Product&quot;</span>).ToString();</span><br><span class="line"> </span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            catch &#123; &#125;</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Product: Unknown&quot;</span>;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Retrieving CD-DVD Drive Path.</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">GetCdRomDrive</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line"> </span><br><span class="line">        ManagementObjectSearcher searcher = <span class="keyword">new</span> ManagementObjectSearcher(<span class="string">&quot;root\\CIMV2&quot;</span>, <span class="string">&quot;SELECT * FROM Win32_CDROMDrive&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">foreach</span> (ManagementObject wmi <span class="keyword">in</span> searcher.Get())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> wmi.GetPropertyValue(<span class="string">&quot;Drive&quot;</span>).ToString();</span><br><span class="line"> </span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            catch &#123; &#125;</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;CD ROM Drive Letter: Unknown&quot;</span>;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Retrieving BIOS Maker.</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">GetBIOSmaker</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line"> </span><br><span class="line">        ManagementObjectSearcher searcher = <span class="keyword">new</span> ManagementObjectSearcher(<span class="string">&quot;root\\CIMV2&quot;</span>, <span class="string">&quot;SELECT * FROM Win32_BIOS&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">foreach</span> (ManagementObject wmi <span class="keyword">in</span> searcher.Get())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> wmi.GetPropertyValue(<span class="string">&quot;Manufacturer&quot;</span>).ToString();</span><br><span class="line"> </span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            catch &#123; &#125;</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;BIOS Maker: Unknown&quot;</span>;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Retrieving BIOS Serial No.</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">GetBIOSserNo</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line"> </span><br><span class="line">        ManagementObjectSearcher searcher = <span class="keyword">new</span> ManagementObjectSearcher(<span class="string">&quot;root\\CIMV2&quot;</span>, <span class="string">&quot;SELECT * FROM Win32_BIOS&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">foreach</span> (ManagementObject wmi <span class="keyword">in</span> searcher.Get())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> wmi.GetPropertyValue(<span class="string">&quot;SerialNumber&quot;</span>).ToString();</span><br><span class="line"> </span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            catch &#123; &#125;</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;BIOS Serial Number: Unknown&quot;</span>;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Retrieving BIOS Caption.</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">GetBIOScaption</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line"> </span><br><span class="line">        ManagementObjectSearcher searcher = <span class="keyword">new</span> ManagementObjectSearcher(<span class="string">&quot;root\\CIMV2&quot;</span>, <span class="string">&quot;SELECT * FROM Win32_BIOS&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">foreach</span> (ManagementObject wmi <span class="keyword">in</span> searcher.Get())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> wmi.GetPropertyValue(<span class="string">&quot;Caption&quot;</span>).ToString();</span><br><span class="line"> </span><br><span class="line">            &#125;</span><br><span class="line">            catch &#123; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;BIOS Caption: Unknown&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Retrieving System Account Name.</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">GetAccountName</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line"> </span><br><span class="line">        ManagementObjectSearcher searcher = <span class="keyword">new</span> ManagementObjectSearcher(<span class="string">&quot;root\\CIMV2&quot;</span>, <span class="string">&quot;SELECT * FROM Win32_UserAccount&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">foreach</span> (ManagementObject wmi <span class="keyword">in</span> searcher.Get())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line"> </span><br><span class="line">                <span class="keyword">return</span> wmi.GetPropertyValue(<span class="string">&quot;Name&quot;</span>).ToString();</span><br><span class="line">            &#125;</span><br><span class="line">            catch &#123; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User Account Name: Unknown&quot;</span>;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Retrieving Physical Ram Memory.</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">GetPhysicalMemory</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        ManagementScope oMs = <span class="keyword">new</span> ManagementScope();</span><br><span class="line">        ObjectQuery oQuery = <span class="keyword">new</span> ObjectQuery(<span class="string">&quot;SELECT Capacity FROM Win32_PhysicalMemory&quot;</span>);</span><br><span class="line">        ManagementObjectSearcher oSearcher = <span class="keyword">new</span> ManagementObjectSearcher(oMs, oQuery);</span><br><span class="line">        ManagementObjectCollection oCollection = oSearcher.Get();</span><br><span class="line"> </span><br><span class="line">        <span class="built_in">long</span> MemSize = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">long</span> mCap = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// In case more than one Memory sticks are installed</span></span><br><span class="line">        <span class="keyword">foreach</span> (ManagementObject obj <span class="keyword">in</span> oCollection)</span><br><span class="line">        &#123;</span><br><span class="line">            mCap = Convert.ToInt64(obj[<span class="string">&quot;Capacity&quot;</span>]);</span><br><span class="line">            MemSize += mCap;</span><br><span class="line">        &#125;</span><br><span class="line">        MemSize = (MemSize / <span class="number">1024</span>) / <span class="number">1024</span>;</span><br><span class="line">        <span class="keyword">return</span> MemSize.ToString() + <span class="string">&quot;MB&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Retrieving No of Ram Slot on Motherboard.</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">GetNoRamSlots</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="built_in">int</span> MemSlots = <span class="number">0</span>;</span><br><span class="line">        ManagementScope oMs = <span class="keyword">new</span> ManagementScope();</span><br><span class="line">        ObjectQuery oQuery2 = <span class="keyword">new</span> ObjectQuery(<span class="string">&quot;SELECT MemoryDevices FROM Win32_PhysicalMemoryArray&quot;</span>);</span><br><span class="line">        ManagementObjectSearcher oSearcher2 = <span class="keyword">new</span> ManagementObjectSearcher(oMs, oQuery2);</span><br><span class="line">        ManagementObjectCollection oCollection2 = oSearcher2.Get();</span><br><span class="line">        <span class="keyword">foreach</span> (ManagementObject obj <span class="keyword">in</span> oCollection2)</span><br><span class="line">        &#123;</span><br><span class="line">            MemSlots = Convert.ToInt32(obj[<span class="string">&quot;MemoryDevices&quot;</span>]);</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> MemSlots.ToString();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Get CPU Temprature.</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> method for retrieving the CPU Manufacturer</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> using the WMI class</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> CPU Manufacturer</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">GetCPUManufacturer</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="built_in">string</span> cpuMan = String.Empty;</span><br><span class="line">        <span class="comment">//create an instance of the Managemnet class with the</span></span><br><span class="line">        <span class="comment">//Win32_Processor class</span></span><br><span class="line">        ManagementClass mgmt = <span class="keyword">new</span> ManagementClass(<span class="string">&quot;Win32_Processor&quot;</span>);</span><br><span class="line">        <span class="comment">//create a ManagementObjectCollection to loop through</span></span><br><span class="line">        ManagementObjectCollection objCol = mgmt.GetInstances();</span><br><span class="line">        <span class="comment">//start our loop for all processors found</span></span><br><span class="line">        <span class="keyword">foreach</span> (ManagementObject obj <span class="keyword">in</span> objCol)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (cpuMan == String.Empty)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// only return manufacturer from first CPU</span></span><br><span class="line">                cpuMan = obj.Properties[<span class="string">&quot;Manufacturer&quot;</span>].Value.ToString();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cpuMan;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> method to retrieve the CPU&#x27;s current</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> clock speed using the WMI class</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Clock speed</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">GetCPUCurrentClockSpeed</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="built_in">int</span> cpuClockSpeed = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//create an instance of the Managemnet class with the</span></span><br><span class="line">        <span class="comment">//Win32_Processor class</span></span><br><span class="line">        ManagementClass mgmt = <span class="keyword">new</span> ManagementClass(<span class="string">&quot;Win32_Processor&quot;</span>);</span><br><span class="line">        <span class="comment">//create a ManagementObjectCollection to loop through</span></span><br><span class="line">        ManagementObjectCollection objCol = mgmt.GetInstances();</span><br><span class="line">        <span class="comment">//start our loop for all processors found</span></span><br><span class="line">        <span class="keyword">foreach</span> (ManagementObject obj <span class="keyword">in</span> objCol)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (cpuClockSpeed == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// only return cpuStatus from first CPU</span></span><br><span class="line">                cpuClockSpeed = Convert.ToInt32(obj.Properties[<span class="string">&quot;CurrentClockSpeed&quot;</span>].Value.ToString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//return the status</span></span><br><span class="line">        <span class="keyword">return</span> cpuClockSpeed;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> method to retrieve the network adapters</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> default IP gateway using WMI</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> adapters default IP gateway</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">GetDefaultIPGateway</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">//create out management class object using the</span></span><br><span class="line">        <span class="comment">//Win32_NetworkAdapterConfiguration class to get the attributes</span></span><br><span class="line">        <span class="comment">//of the network adapter</span></span><br><span class="line">        ManagementClass mgmt = <span class="keyword">new</span> ManagementClass(<span class="string">&quot;Win32_NetworkAdapterConfiguration&quot;</span>);</span><br><span class="line">        <span class="comment">//create our ManagementObjectCollection to get the attributes with</span></span><br><span class="line">        ManagementObjectCollection objCol = mgmt.GetInstances();</span><br><span class="line">        <span class="built_in">string</span> gateway = String.Empty;</span><br><span class="line">        <span class="comment">//loop through all the objects we find</span></span><br><span class="line">        <span class="keyword">foreach</span> (ManagementObject obj <span class="keyword">in</span> objCol)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (gateway == String.Empty)  <span class="comment">// only return MAC Address from first card</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//grab the value from the first network adapter we find</span></span><br><span class="line">                <span class="comment">//you can change the string to an array and get all</span></span><br><span class="line">                <span class="comment">//network adapters found as well</span></span><br><span class="line">                <span class="comment">//check to see if the adapter&#x27;s IPEnabled</span></span><br><span class="line">                <span class="comment">//equals true</span></span><br><span class="line">                <span class="keyword">if</span> ((<span class="built_in">bool</span>)obj[<span class="string">&quot;IPEnabled&quot;</span>] == <span class="literal">true</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    gateway = obj[<span class="string">&quot;DefaultIPGateway&quot;</span>].ToString();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//dispose of our object</span></span><br><span class="line">            obj.Dispose();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//replace the &quot;:&quot; with an empty space, this could also</span></span><br><span class="line">        <span class="comment">//be removed if you wish</span></span><br><span class="line">        gateway = gateway.Replace(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="comment">//return the mac address</span></span><br><span class="line">        <span class="keyword">return</span> gateway;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Retrieve CPU Speed.</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">double</span>? GetCpuSpeedInGHz()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">double</span>? GHz = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">using</span> (ManagementClass mc = <span class="keyword">new</span> ManagementClass(<span class="string">&quot;Win32_Processor&quot;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (ManagementObject mo <span class="keyword">in</span> mc.GetInstances())</span><br><span class="line">            &#123;</span><br><span class="line">                GHz = <span class="number">0.001</span> * (UInt32)mo.Properties[<span class="string">&quot;CurrentClockSpeed&quot;</span>].Value;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> GHz;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Retrieving Current Language</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">GetCurrentLanguage</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line"> </span><br><span class="line">        ManagementObjectSearcher searcher = <span class="keyword">new</span> ManagementObjectSearcher(<span class="string">&quot;root\\CIMV2&quot;</span>, <span class="string">&quot;SELECT * FROM Win32_BIOS&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">foreach</span> (ManagementObject wmi <span class="keyword">in</span> searcher.Get())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> wmi.GetPropertyValue(<span class="string">&quot;CurrentLanguage&quot;</span>).ToString();</span><br><span class="line"> </span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            catch &#123; &#125;</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;BIOS Maker: Unknown&quot;</span>;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Retrieving Current Language.</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">GetOSInformation</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        ManagementObjectSearcher searcher = <span class="keyword">new</span> ManagementObjectSearcher(<span class="string">&quot;SELECT * FROM Win32_OperatingSystem&quot;</span>);</span><br><span class="line">        <span class="keyword">foreach</span> (ManagementObject wmi <span class="keyword">in</span> searcher.Get())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> ((<span class="built_in">string</span>)wmi[<span class="string">&quot;Caption&quot;</span>]).Trim() + <span class="string">&quot;, &quot;</span> + (<span class="built_in">string</span>)wmi[<span class="string">&quot;Version&quot;</span>] + <span class="string">&quot;, &quot;</span> + (<span class="built_in">string</span>)wmi[<span class="string">&quot;OSArchitecture&quot;</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            catch &#123; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;BIOS Maker: Unknown&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Retrieving Processor Information.</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">GetProcessorInformation</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        ManagementClass mc = <span class="keyword">new</span> ManagementClass(<span class="string">&quot;win32_processor&quot;</span>);</span><br><span class="line">        ManagementObjectCollection moc = mc.GetInstances();</span><br><span class="line">        String info = String.Empty;</span><br><span class="line">        <span class="keyword">foreach</span> (ManagementObject mo <span class="keyword">in</span> moc)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> name = (<span class="built_in">string</span>)mo[<span class="string">&quot;Name&quot;</span>];</span><br><span class="line">            name = name.Replace(<span class="string">&quot;(TM)&quot;</span>, <span class="string">&quot;™&quot;</span>).Replace(<span class="string">&quot;(tm)&quot;</span>, <span class="string">&quot;™&quot;</span>).Replace(<span class="string">&quot;(R)&quot;</span>, <span class="string">&quot;®&quot;</span>).Replace(<span class="string">&quot;(r)&quot;</span>, <span class="string">&quot;®&quot;</span>).Replace(<span class="string">&quot;(C)&quot;</span>, <span class="string">&quot;©&quot;</span>).Replace(<span class="string">&quot;(c)&quot;</span>, <span class="string">&quot;©&quot;</span>).Replace(<span class="string">&quot;    &quot;</span>, <span class="string">&quot; &quot;</span>).Replace(<span class="string">&quot;  &quot;</span>, <span class="string">&quot; &quot;</span>);</span><br><span class="line"> </span><br><span class="line">            info = name + <span class="string">&quot;, &quot;</span> + (<span class="built_in">string</span>)mo[<span class="string">&quot;Caption&quot;</span>] + <span class="string">&quot;, &quot;</span> + (<span class="built_in">string</span>)mo[<span class="string">&quot;SocketDesignation&quot;</span>];</span><br><span class="line">            <span class="comment">//mo.Properties[&quot;Name&quot;].Value.ToString();</span></span><br><span class="line">            <span class="comment">//break;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Retrieving Computer Name.</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">GetComputerName</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        ManagementClass mc = <span class="keyword">new</span> ManagementClass(<span class="string">&quot;Win32_ComputerSystem&quot;</span>);</span><br><span class="line">        ManagementObjectCollection moc = mc.GetInstances();</span><br><span class="line">        String info = String.Empty;</span><br><span class="line">        <span class="keyword">foreach</span> (ManagementObject mo <span class="keyword">in</span> moc)</span><br><span class="line">        &#123;</span><br><span class="line">            info = (<span class="built_in">string</span>)mo[<span class="string">&quot;Name&quot;</span>];</span><br><span class="line">            <span class="comment">//mo.Properties[&quot;Name&quot;].Value.ToString();</span></span><br><span class="line">            <span class="comment">//break;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="设计窗口形式"><a href="#设计窗口形式" class="headerlink" title="设计窗口形式"></a>设计窗口形式</h1><p>请参见下图设计您的 Windows 窗体并生成按钮单击事件以使用 C# 获取计算机硬件信息。</p><p><strong>设计形式：</strong></p><img src="https://img-blog.csdnimg.cn/img_convert/3ad6d4278b9ff44dbc06418abb9eb73c.png"><h1 id="添加代码隐藏源"><a href="#添加代码隐藏源" class="headerlink" title="添加代码隐藏源"></a>添加代码隐藏源</h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.ComponentModel;</span><br><span class="line"><span class="keyword">using</span> System.Data;</span><br><span class="line"><span class="keyword">using</span> System.Drawing;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">HardwareInformation</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">HardwareInfo_CodeScratcher</span> : <span class="title">Form</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">HardwareInfo_CodeScratcher</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">HardwareInfo_CodeScratcher_Load</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ProcId_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            lblPid.Text = HardwareInfo.GetProcessorId();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">HDDSNo_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            lblHDD.Text = HardwareInfo.GetHDDSerialNo();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">BoardMake_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            lblBM.Text = HardwareInfo.GetBoardMaker();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">BIOSMkr_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            lblBios.Text = HardwareInfo.GetBIOSmaker();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">PhysicalMem_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            lblPM.Text = HardwareInfo.GetPhysicalMemory();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">CPUSpeed_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            lblCS.Text = HardwareInfo.GetCpuSpeedInGHz().ToString();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">CPUMkr_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            lblCM.Text = HardwareInfo.GetCPUManufacturer();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="运行项目并检查最终输出"><a href="#运行项目并检查最终输出" class="headerlink" title="运行项目并检查最终输出"></a>运行项目并检查最终输出</h1><p><strong>硬件信息 - 输出：</strong></p><img src="https://img-blog.csdnimg.cn/img_convert/358df9e80341ab221277746f8c5e6bfc.gif"><hr><h1 id="相关链接（侵删）"><a href="#相关链接（侵删）" class="headerlink" title="相关链接（侵删）"></a>相关链接（侵删）</h1><ol><li><a href="https://blog.csdn.net/allway2/article/details/123154410">使用 C# 获取计算机硬件信息</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">设置自定义获取当前电脑硬件信息的类文件功能</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="C#" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/C/"/>
    
    <category term="前端" scheme="https://zml3589110.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="C#" scheme="https://zml3589110.github.io/tags/C/"/>
    
    <category term="硬件信息" scheme="https://zml3589110.github.io/tags/%E7%A1%AC%E4%BB%B6%E4%BF%A1%E6%81%AF/"/>
    
    <category term="自定义类" scheme="https://zml3589110.github.io/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB/"/>
    
  </entry>
  
</feed>
