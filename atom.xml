<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>赵逸尘个人博客</title>
  
  <subtitle>记录工作生活</subtitle>
  <link href="https://zml3589110.github.io/atom.xml" rel="self"/>
  
  <link href="https://zml3589110.github.io/"/>
  <updated>2023-01-03T07:20:38.465Z</updated>
  <id>https://zml3589110.github.io/</id>
  
  <author>
    <name>ZhaoYichen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ESP32开发SDK-IDF环境搭建(Ubuntu)</title>
    <link href="https://zml3589110.github.io/posts/2870405859.html"/>
    <id>https://zml3589110.github.io/posts/2870405859.html</id>
    <published>2023-01-03T02:50:20.000Z</published>
    <updated>2023-01-03T07:20:38.465Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ubuntu系统跟常用工具安装"><a href="#Ubuntu系统跟常用工具安装" class="headerlink" title="Ubuntu系统跟常用工具安装"></a>Ubuntu系统跟常用工具安装</h1><p>因为之前安装过esp8266 SDK-3.0版本，所以本次就在这个系统内安装<a href="https://zml3589110.github.io/posts/2171885577.html">传送门</a></p><ol><li><p>在安装中发现新版本的编译形式有变化，不能使用虚拟机自带的共享进行编译，需要使用Samba网络共享！因编译过程需要建立软链接。</p></li><li><p>记得将Python版本调整为Python 3</p></li></ol><h1 id="下载-SDK-IDF"><a href="#下载-SDK-IDF" class="headerlink" title="下载 SDK-IDF"></a>下载 SDK-IDF</h1><p><strong>开始使用的是 guthub 上的库，那速度要多慢有多慢，毕竟没有搭上梯子，后来就参考使用了 gittee 码云上的库，直接换飞机的速度了啊</strong></p><h2 id="一、下载重定向脚本-esp-gitee-tools"><a href="#一、下载重定向脚本-esp-gitee-tools" class="headerlink" title="一、下载重定向脚本 esp-gitee-tools"></a>一、下载重定向脚本 esp-gitee-tools</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://gitee.com/EspressifSystems/esp-gitee-tools.git</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="二、下载SDK"><a href="#二、下载SDK" class="headerlink" title="二、下载SDK"></a>二、下载SDK</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://gitee.com/EspressifSystems/esp-idf.git -b release/v5.0</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="三、使用-esp-gitee-tools-拉取子模块"><a href="#三、使用-esp-gitee-tools-拉取子模块" class="headerlink" title="三、使用 esp-gitee-tools 拉取子模块"></a>三、使用 esp-gitee-tools 拉取子模块</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> esp-gitee-tools </span><br><span class="line"><span class="built_in">export</span> EGT_PATH=$(<span class="built_in">pwd</span>) </span><br><span class="line"><span class="built_in">cd</span> .. </span><br><span class="line"><span class="built_in">cd</span> esp-idf </span><br><span class="line"><span class="variable">$EGT_PATH</span>/submodule-update.sh</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="四、安装编译工具链"><a href="#四、安装编译工具链" class="headerlink" title="四、安装编译工具链"></a>四、安装编译工具链</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">. install.sh</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个步骤是自动安装编译所需要的各类软件，比如编译器、调试器等</p><p>由于是从 github 上下载下来，所以速度奇慢无比，总共花了两天才下载完成！</p><p><strong>再执行：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">. ./export.sh</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="补充：下载主要文件"><a href="#补充：下载主要文件" class="headerlink" title="补充：下载主要文件"></a>补充：下载主要文件</h2><p>install.sh 下载工具文件路径为 $HOME&#x2F;.espressif&#x2F;dist</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">总用量 332M</span><br><span class="line">drwxrwxr-x 2 yichen yichen 4.0K 1月   2 11:38 ./</span><br><span class="line">drwxrwxr-x 5 yichen yichen 4.0K 1月   2 11:38 ../</span><br><span class="line">-rwxrwxrwx 1 yichen yichen  11M 1月   2 11:32 esp32ulp-elf-2.35_20220830-linux-amd64.tar.gz*</span><br><span class="line">-rwxrwxrwx 1 yichen yichen 2.4M 1月   2 11:37 esp-rom-elfs-20220823.tar.gz*</span><br><span class="line">-rwxrwxrwx 1 yichen yichen 2.0M 1月   2 11:34 openocd-esp32-linux-amd64-0.11.0-esp32-20221026.tar.gz*</span><br><span class="line">-rwxrwxrwx 1 yichen yichen 106M 1月   2 11:31 riscv32-esp-elf-gcc11_2_0-esp-2022r1-linux-amd64.tar.xz*</span><br><span class="line">-rwxrwxrwx 1 yichen yichen  26M 1月   2 11:25 riscv32-esp-elf-gdb-11.2_20220823-x86_64-linux-gnu.tar.gz*</span><br><span class="line">-rwxrwxrwx 1 yichen yichen  62M 1月   2 11:26 xtensa-esp32-elf-gcc11_2_0-esp-2022r1-linux-amd64.tar.xz*</span><br><span class="line">-rwxrwxrwx 1 yichen yichen  50M 1月   2 11:28 xtensa-esp32s2-elf-gcc11_2_0-esp-2022r1-linux-amd64.tar.xz*</span><br><span class="line">-rwxrwxrwx 1 yichen yichen  50M 1月   2 11:29 xtensa-esp32s3-elf-gcc11_2_0-esp-2022r1-linux-amd64.tar.xz*</span><br><span class="line">-rwxrwxrwx 1 yichen yichen  26M 1月   2 11:19 xtensa-esp-elf-gdb-11.2_20220823-x86_64-linux-gnu.tar.gz*</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用的是 5.0版本 SDK 下载，放到共享里，给有需要的人下载后解压到该目录下应该就可以通过！（未测试过）<br><a href="https://download.csdn.net/download/zml3589110/87360531">传送门</a></p><h1 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h1><p>因为需要多环境共存，毕竟还要玩esp8266嘛，所以就使用 aliases 方式进行别名命令设置，每次仅对跟窗体有效</p><p>这是我的ubuntu下编译esp32所需要的两个环境变量，将其添加到 ~&#x2F;.bash_aliases 文件中，然后重启即可<br>之后打开命令窗口时执行 get_esp32 和 get_e32 后就可以快速设置 ESP32环境了！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> get_esp32=<span class="string">&#x27;export PATH=$PATH:/home/yichen/.espressif/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> get_e32=<span class="string">&#x27;. $HOME/esp/esp-idf/export.sh&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="复制例程工程"><a href="#复制例程工程" class="headerlink" title="复制例程工程"></a>复制例程工程</h1><p>可以选择 idf 目录下的 example 文件中的例程，将它复制到 共享 share 文件中，这样也方便 Windows下查看编辑代码！（注意：不是虚拟机共享的文件夹，而是Samba共享的文件夹）</p><p>例如可以使用 $HOME&#x2F;esp&#x2F;esp-idf&#x2F;examples&#x2F;get-started&#x2F;hello_world 文件来测试</p><h1 id="配置编译工程"><a href="#配置编译工程" class="headerlink" title="配置编译工程"></a>配置编译工程</h1><ol><li>设置esp32系列模组</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">idf.py set-target esp32</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>通过 menuconfig 菜单配置参数</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">idf.py menuconfig</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以设置Wi-Fi 网络名称、密码以及各种组件配置等，不过每次配置完之后都得全部编译一遍！</p><ol start="3"><li>编译所选工程</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">idf.py build</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第一次编译得构建 build 文件，所以慢很多！如果环境正常基本上能出结果，否则就根据错误提示一个个排查处理。<br>最后会得到 二进制文件 bootloader.bin、partition-table.bin 和 hello_world.bin（你构建的工程文件名）</p><ol start="4"><li>烧录到设备</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">idf.py flash monitor</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这是两个命令组合起来，意思是烧录程序到 ESP32 并打开 监视窗口。<br>其中烧录波特率默认为 460800</p><p>如果想要自定义波特率则可以自己设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">idf.py -p PORT [-b BAUD] flash</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>由于我的开发板BOOT按键独立，没有自动下载功能，需要在下载前按住 BOOT 按键至识别到 ESP32 ，连接监视窗口也是如此！开始还一直以为没有连接好USB，或者需另外设置</strong></p><hr><h1 id="相关链接（侵删）"><a href="#相关链接（侵删）" class="headerlink" title="相关链接（侵删）"></a>相关链接（侵删）</h1><ol><li><a href="https://blog.csdn.net/chenbenzhen/article/details/124523241">【ESP32】虚拟机ubuntu下搭建 ESP-IDF 开发环境（详细）</a></li><li><a href="https://blog.csdn.net/weixin_38016446/article/details/128028260">ESP32-ESP-IDF-CMD编译烧写（自用）</a></li><li><a href="https://gitee.com/EspressifSystems/esp-idf/tree/release%2Fv5.0/">乐鑫gitee库</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">Ubuntu下搭建ESP32开发环境，完成example参考程序编译</summary>
    
    
    
    <category term="Linux" scheme="https://zml3589110.github.io/categories/Linux/"/>
    
    <category term="文件共享" scheme="https://zml3589110.github.io/categories/%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB/"/>
    
    <category term="乐鑫" scheme="https://zml3589110.github.io/categories/%E4%B9%90%E9%91%AB/"/>
    
    <category term="ESP32" scheme="https://zml3589110.github.io/categories/ESP32/"/>
    
    
    <category term="Ubuntu" scheme="https://zml3589110.github.io/tags/Ubuntu/"/>
    
    <category term="物联网" scheme="https://zml3589110.github.io/tags/%E7%89%A9%E8%81%94%E7%BD%91/"/>
    
    <category term="乐鑫" scheme="https://zml3589110.github.io/tags/%E4%B9%90%E9%91%AB/"/>
    
    <category term="ESP32" scheme="https://zml3589110.github.io/tags/ESP32/"/>
    
    <category term="SDK-IDF" scheme="https://zml3589110.github.io/tags/SDK-IDF/"/>
    
    <category term="开发环境" scheme="https://zml3589110.github.io/tags/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    
  </entry>
  
  <entry>
    <title>GIT更新子模块</title>
    <link href="https://zml3589110.github.io/posts/970792788.html"/>
    <id>https://zml3589110.github.io/posts/970792788.html</id>
    <published>2023-01-03T02:25:20.000Z</published>
    <updated>2023-01-03T07:20:38.451Z</updated>
    
    <content type="html"><![CDATA[<p><strong>当主项目中用Git管理源代码，并且项目中用submodule方式引入了子模块，当子模块更新代码后，在主项目中如何更新子模块最新代码呢？</strong></p><h1 id="执行之模块更新步骤"><a href="#执行之模块更新步骤" class="headerlink" title="执行之模块更新步骤"></a>执行之模块更新步骤</h1><h2 id="1-如果是第一次pull子项目代码"><a href="#1-如果是第一次pull子项目代码" class="headerlink" title="1.如果是第一次pull子项目代码"></a>1.如果是第一次pull子项目代码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule init</span><br></pre></td></tr></table></figure><h2 id="2-然后执行："><a href="#2-然后执行：" class="headerlink" title="2.然后执行："></a>2.然后执行：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule update --remote --recursive</span><br></pre></td></tr></table></figure><p><strong>这个命令，只是更新子模块的branch和commit id信息，并不会pull新代码</strong></p><h2 id="3-然后，进入主项目中子项目的目录"><a href="#3-然后，进入主项目中子项目的目录" class="headerlink" title="3. 然后，进入主项目中子项目的目录"></a>3. 然后，进入主项目中子项目的目录</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure><h2 id="4-后续，如果主项目所引用的子项目的branch发生了变化，则在第3步时执行："><a href="#4-后续，如果主项目所引用的子项目的branch发生了变化，则在第3步时执行：" class="headerlink" title="4. 后续，如果主项目所引用的子项目的branch发生了变化，则在第3步时执行："></a>4. 后续，如果主项目所引用的子项目的branch发生了变化，则在第3步时执行：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git fetch</span><br><span class="line"></span><br><span class="line">git checkout submodule_newBranch submodule_newBranch</span><br><span class="line"></span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><p>另：</p><p>在第4步中，在 git fetch 之后，如果使用的用jetbrain的IDE工具，比如IDEA &#x2F; GoLand等，它们会管理远程仓库，此时可以通过点击右下角的branch弹出窗口，来选择需要checkout子项目哪个分支。 </p><hr><blockquote><p><strong>说明：本文是收集参考文档，以方便查看(侵删)</strong></p></blockquote><hr><h1 id="信息链接"><a href="#信息链接" class="headerlink" title="信息链接:"></a>信息链接:</h1><ol><li><a href="https://blog.csdn.net/bglmmz/article/details/127755543">Git submodule update，如何更新子模块</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">GIT更新子模块</summary>
    
    
    
    <category term="Git" scheme="https://zml3589110.github.io/categories/Git/"/>
    
    
    <category term="常用命令" scheme="https://zml3589110.github.io/tags/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
    <category term="版本控制" scheme="https://zml3589110.github.io/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
    <category term="git" scheme="https://zml3589110.github.io/tags/git/"/>
    
    <category term="子模块" scheme="https://zml3589110.github.io/tags/%E5%AD%90%E6%A8%A1%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu开启Samba服务</title>
    <link href="https://zml3589110.github.io/posts/2332243333.html"/>
    <id>https://zml3589110.github.io/posts/2332243333.html</id>
    <published>2023-01-03T02:07:20.000Z</published>
    <updated>2023-01-03T07:20:38.420Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ubuntu开启samba"><a href="#Ubuntu开启samba" class="headerlink" title="Ubuntu开启samba"></a>Ubuntu开启samba</h1><h2 id="安装samba"><a href="#安装samba" class="headerlink" title="安装samba"></a>安装samba</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install samba</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="修改samba配置文件"><a href="#修改samba配置文件" class="headerlink" title="修改samba配置文件"></a>修改samba配置文件</h2><blockquote><p>如遇到未安装vim的提示，先输入安装vim指令（sudo apt-get install vim）</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/samba/smb.conf</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>文件末尾添加以下代码<br>—①按下G跳可快速转到文件末尾<br>—②按下i进入输入模式</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[share]</span><br><span class="line">path = /home/username   <span class="comment">#path 测试机需要共享的路径，可自定义</span></span><br><span class="line">valid users = username  <span class="comment">#username 可以自定义</span></span><br><span class="line">available = yes</span><br><span class="line">browseable = yes</span><br><span class="line">writable = yes</span><br><span class="line">public = no</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>按下ESC切换到命令模式，输入:wq保存并退出vi</p><ul><li><p>创建samba用户<br>—新密码需要两次</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo smbpasswd -a username       <span class="comment">#username 可以自定义</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">test</span>@ubuntu：~$ sudo smbpasswd -a username</span><br><span class="line">New SMB password：</span><br><span class="line">Retype new SMB password：</span><br><span class="line">Adder user username.</span><br><span class="line"><span class="built_in">test</span>@ubuntu：~$</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>重启samba</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo service smbd restart</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="验证是否启动成功-在Windows上连接"><a href="#验证是否启动成功-在Windows上连接" class="headerlink" title="验证是否启动成功(在Windows上连接)"></a>验证是否启动成功(在Windows上连接)</h1><ul><li>查看测试机的IP地址的指令 <code>ifconfig</code>(如提示无次命令需要暗转，输入安装指令<code>sudo apt install net-tools</code>)<br>—-这里192.168.150.129是测试机的IP地址</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">test</span>@ubuntu：~$ ifconfig</span><br><span class="line">ens33: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.150.129  netmask 255.255.255.0  broadcast 192.168.150.255</span><br><span class="line">        inet6 fe80::8545:a880:67f0:36c4  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:2c:a8:cc  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 3296121  bytes 4268278683 (4.2 GB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 764829  bytes 541486956 (541.4 MB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 7323  bytes 949831 (949.8 KB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 7323  bytes 949831 (949.8 KB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>在Windows上连接，按 win+R 弹出运行窗口，输入\192.168.150.129，点确定,然后输入用户名和密码就可以访问了</li></ul><img src="https://img-blog.csdnimg.cn/e958da999d3c4ee0829eac16bb686331.png"><ul><li>如下图share文件夹就是对应测试机共享的文件夹</li></ul><img src="https://img-blog.csdnimg.cn/f84169f374904a6692d216e36a688bf1.png"><ul><li>把共享文件夹映射成磁盘</li></ul><img src="https://img-blog.csdnimg.cn/074efa9b2bab4079ad255a1ecfbc0aa7.png"><p><strong>也可以直接使用ubuntu计算机名称来连接-这样IP地址改变时也不影响</strong></p><hr><h1 id="相关链接（侵删）"><a href="#相关链接（侵删）" class="headerlink" title="相关链接（侵删）"></a>相关链接（侵删）</h1><ol><li><a href="https://blog.csdn.net/qq_21312147/article/details/126500453">最靠谱的解决方案之Linux系列（1.ubuntu开启Samba服务）</a></li><li><a href="https://blog.csdn.net/qq_22870815/article/details/125113580">Ubuntu开启samba共享文件夹</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">Ubuntu开启Samba服务，主要是针对esp32编译环境需要软链接，之前用虚拟机共享出现Windows没有软链接功能导致异常</summary>
    
    
    
    <category term="Linux" scheme="https://zml3589110.github.io/categories/Linux/"/>
    
    <category term="文件共享" scheme="https://zml3589110.github.io/categories/%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB/"/>
    
    
    <category term="Ubuntu" scheme="https://zml3589110.github.io/tags/Ubuntu/"/>
    
    <category term="文件共享" scheme="https://zml3589110.github.io/tags/%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB/"/>
    
    <category term="Samba" scheme="https://zml3589110.github.io/tags/Samba/"/>
    
  </entry>
  
  <entry>
    <title>GIT改当前项目仓库地址</title>
    <link href="https://zml3589110.github.io/posts/2885709092.html"/>
    <id>https://zml3589110.github.io/posts/2885709092.html</id>
    <published>2023-01-02T02:56:20.000Z</published>
    <updated>2023-01-03T07:20:38.443Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近公司将gitlab整体迁移了，换了新的地址，虽然在迁移的时候将相关分支信息、代码拷过去了；<br>但是我们开发人员在迁移过程中也会有新的代码产出；或者由于项目原因，没有及时更新地址，造成大量新的代码产出！</p><p>怎么样将自己新产出的代码提交的新库呢？<br><strong>方法：更新仓库地址</strong></p><h1 id="怎么更改已有仓库地址"><a href="#怎么更改已有仓库地址" class="headerlink" title="怎么更改已有仓库地址"></a>怎么更改已有仓库地址</h1><hr><p><strong>注意：以下操作均在 右键 &#x3D;&gt; Git Bash Here 窗口中执行</strong></p><hr><h2 id="方法1："><a href="#方法1：" class="headerlink" title="方法1："></a>方法1：</h2><p>删除本地仓库当前关联的无效远程地址，再为本地仓库添加新的远程仓库地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git remote -v                       // 查看git对应的远程仓库地址</span><br><span class="line">git remote rm origin                // 删除关联对应的远程仓库地址</span><br><span class="line">git remote -v                       // 查看是否删除成功，如果没有任何返回结果，表示OK</span><br><span class="line">git remote add origin <span class="string">&quot;新的仓库地址&quot;</span> // 重新关联git远程仓库地址</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="方法2："><a href="#方法2：" class="headerlink" title="方法2："></a>方法2：</h2><p>直接修改本地仓库所关联的远程仓库的地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git remote      // 查看远程仓库名称：origin </span><br><span class="line">git remote get-url origin                  // 查看远程仓库地址</span><br><span class="line">git remote set-url origin <span class="string">&quot;新的仓库地址&quot;</span>    // ( 如果未设置ssh-key，此处仓库地址为 http://... 开头)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="方法3："><a href="#方法3：" class="headerlink" title="方法3："></a>方法3：</h2><p>修改 .git&#x2F;config 配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> .git      // 进入.git目录</span><br><span class="line">vim config   // 修改config配置文件，快速找到remote <span class="string">&quot;origin&quot;</span>下面的url并替换即可实现快速关联和修改</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><blockquote><p><strong>说明：本文是收集参考文档，以方便查看(侵删)</strong></p></blockquote><hr><h1 id="信息链接"><a href="#信息链接" class="headerlink" title="信息链接:"></a>信息链接:</h1><ol><li><a href="https://blog.csdn.net/halo1416/article/details/123566471">git修改当前项目仓库地址的三种方法</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">GIT改当前项目仓库地址</summary>
    
    
    
    <category term="Git" scheme="https://zml3589110.github.io/categories/Git/"/>
    
    
    <category term="版本控制" scheme="https://zml3589110.github.io/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
    <category term="git" scheme="https://zml3589110.github.io/tags/git/"/>
    
    <category term="仓库地址" scheme="https://zml3589110.github.io/tags/%E4%BB%93%E5%BA%93%E5%9C%B0%E5%9D%80/"/>
    
  </entry>
  
  <entry>
    <title>LVGL模拟器NXP GUI Guider使用</title>
    <link href="https://zml3589110.github.io/posts/278272964.html"/>
    <id>https://zml3589110.github.io/posts/278272964.html</id>
    <published>2022-12-31T01:31:20.000Z</published>
    <updated>2023-01-03T07:20:38.454Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GUI-Guider说明"><a href="#GUI-Guider说明" class="headerlink" title="GUI Guider说明"></a>GUI Guider说明</h1><p>GUI Guider是恩智浦提供的用户友好型图形用户界面开发工具，可通过<a href="https://www.nxp.com.cn/design/software/embedded-software/lvgl-open-source-graphics-library:LITTLEVGL-OPEN-SOURCE-GRAPHICS-LIBRARY">开源LVGL图形库</a>快速开发高品质的显示。GUI Guider的拖放编辑器可以轻松利用LVGL的众多特性，如小部件、动画和样式来创建GUI，而只需少量代码或根本无需任何代码。</p><p>下载地址  <a href="https://www.nxp.com.cn/design/software/development-software/gui-guider:GUI-GUIDER">GUI Guider_NXP 半导体</a>  可能需要注册nxp的账号 目前最新的是1.04  。运行需要安装jave环境 jre 。里边自带了mingw编译器使用sdl驱动用来跑模拟器，如果使用8.3的lvgl库还可以导出micropython文件。这个比lvgl官方的SquareLine Studio 好在没有免费账号屏幕数跟wigt数量限制，并且还有中文界面 可以改显示语言 主题 调整屏幕刷新率可以提高帧率 ，其实是每一帧的渲染时间 修改过lv-conf.h的就明白</p><img src="https://img2022.cnblogs.com/blog/2109578/202208/2109578-20220819202726655-1228122971.png"><p>能看出来界面是基于elctron的，代码是基于java加模板生成的</p><p>还可以很简单的给控件加事件  甚至都不用写一行代码    下图里给按钮的clicked 添加事件 使按键自己隐藏</p><img src="https://img2022.cnblogs.com/blog/2109578/202208/2109578-20220819203246759-944758677.png"><p>更好玩的是可以用这个模拟器来练习lvgl库里的例程  。先看工程导出的文件夹</p><img src="https://img2022.cnblogs.com/blog/2109578/202208/2109578-20220820092036530-562638066.png"><p>custom是自定义的程序，generated就是自动生成的代码，包含gui设计与事件，这里不要动，每次点运行模拟器都会重新生成代码。</p><img src="https://img2022.cnblogs.com/blog/2109578/202208/2109578-20220820092516260-1329959598.png"><p>lvgl-simulator是模拟的用的代码，可以参考里边的main.c来移植到别的硬件，观察他的初始化</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*Create a GUI-Guider app  创造app */</span></span><br><span class="line">   setup_ui(&amp;guider_ui);<span class="comment">//设计小部件的ui布局</span></span><br><span class="line">   events_init(&amp;guider_ui);<span class="comment">//设置小部件的事件</span></span><br><span class="line">   custom_init(&amp;guider_ui);<span class="comment">//运行自定义的程序</span></span><br><span class="line">   </span><br></pre></td></tr></table></figure><p>我们要测试代码片段的话就在 custom文件夹里修改   这里做个小测试，找到从github上拖下来的lvgl库里的例子 在这个地方</p><img src="https://img2022.cnblogs.com/blog/2109578/202208/2109578-20220820093137112-1961924878.png"><p>把回调函数跟测试函数拷贝到 刚才的guiguider的 custom.c里  就像这样</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line"><span class="comment">// Copyright 2020 NXP</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file custom.c</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*********************</span></span><br><span class="line"><span class="comment"> *      INCLUDES</span></span><br><span class="line"><span class="comment"> *********************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;lvgl.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;custom.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*********************</span></span><br><span class="line"><span class="comment"> *      DEFINES</span></span><br><span class="line"><span class="comment"> *********************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**********************</span></span><br><span class="line"><span class="comment"> *      TYPEDEFS</span></span><br><span class="line"><span class="comment"> **********************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**********************</span></span><br><span class="line"><span class="comment"> *  STATIC PROTOTYPES</span></span><br><span class="line"><span class="comment"> **********************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**********************</span></span><br><span class="line"><span class="comment"> *  STATIC VARIABLES</span></span><br><span class="line"><span class="comment"> **********************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Create a demo application</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">event_cb</span><span class="params">(<span class="keyword">lv_event_t</span> * e)</span><span class="comment">//事件声明</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LV_LOG_USER(<span class="string">&quot;Clicked&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">uint32_t</span> cnt = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">lv_obj_t</span> * btn = lv_event_get_target(e);</span><br><span class="line">    <span class="keyword">lv_obj_t</span> * label = lv_obj_get_child(btn, <span class="number">0</span>);</span><br><span class="line">    lv_label_set_text_fmt(label, <span class="string">&quot;%&quot;</span>LV_PRIu32, cnt);</span><br><span class="line">    cnt++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lv_example_event_1</span><span class="params">(<span class="keyword">void</span>)</span>  <span class="comment">//创建一个带标签的按钮</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">lv_obj_t</span> * btn = lv_btn_create(lv_scr_act());</span><br><span class="line">    lv_obj_set_size(btn, <span class="number">100</span>, <span class="number">50</span>);</span><br><span class="line">    lv_obj_center(btn);</span><br><span class="line">    lv_obj_add_event_cb(btn, event_cb, LV_EVENT_CLICKED, <span class="literal">NULL</span>);<span class="comment">//把刚才的回调函数添加到按钮上</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">lv_obj_t</span> * label = lv_label_create(btn);</span><br><span class="line">    lv_label_set_text(label, <span class="string">&quot;Click me!&quot;</span>);</span><br><span class="line">    lv_obj_center(label);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">custom_init</span><span class="params">(lv_ui *ui)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    lv_example_event_1();    在custom-init里运行自定义函数，主要不要把回调函数写到custom-init里，会导致无法运行</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>保存文件，点guider的绿色三角按键运行。可以看到除了我们在guider里设计的按钮，还出现了自定义的按钮。点击这个按钮上边的数字会加1.这比每次测试都要烧录单片机快多了。注意这里必须要先给当前屏幕里随便添加个带事件的widget（标签不带事件不能使用），要不然不会自动生成某些代码导致报错</p><img src="https://img2022.cnblogs.com/blog/2109578/202208/2109578-20220820094207266-489501388.png"><h1 id="Gui-Guider使用"><a href="#Gui-Guider使用" class="headerlink" title="Gui-Guider使用"></a>Gui-Guider使用</h1><p>最近NXP给LVGL出了一款组态软件，让我们coding LVGL组件之外，又多了一种开发方式，可以简化为：拖拖控件，点点鼠标就能完成简单的嵌入式GUI</p><p>虽然他仅仅支持NXP的版本，但是你可以把生成的代码copy出来直接用在自己的板子上！爽歪歪？需要改善的地方就是启动太慢！！！</p><p>下面我们上一张图来看下效果</p><img src="https://img-blog.csdnimg.cn/20210224183317457.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1hpYW9YaWFvUGVuZ0Jv,size_16,color_FFFFFF,t_70"><p>视频效果如下：</p><iframe id="Y9YQDnfK-1614164354713" src="https://player.bilibili.com/player.html?aid=971784786" allowfullscreen="true" data-mediaembed="bilibili" style="box-sizing: border-box; outline: 0px; margin: 0px; padding: 0px; font-weight: normal; overflow-wrap: break-word; display: block; width: 730px; height: 365px;"></iframe><p>LVGL出PC拖控件软件了！</p><p>目前仅支持WIN10以及ubuntu,截止到2021&#x2F;02&#x2F;24最新的版本是V1.0，官网如下：</p><p><a href="https://www.nxp.com/design/software/development-software/gui-guider:GUI-GUIDER">https://www.nxp.com/design/software/development-software/gui-guider:GUI-GUIDER</a></p><p>为了简化你们的下载流程（NXP官网下载有点麻烦，需要填各种信息），我特意把软件以及user guide上传到公众号了</p><p>关注如下，发送LVGL电脑软件就会自动获取下载地址：</p><img src="https://img-blog.csdnimg.cn/20210224185847177.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1hpYW9YaWFvUGVuZ0Jv,size_16,color_FFFFFF,t_70"><hr><h1 id="相关链接-侵删"><a href="#相关链接-侵删" class="headerlink" title="相关链接(侵删)"></a>相关链接(侵删)</h1><ol><li><a href="https://www.cnblogs.com/kyo413/p/16607189.html">NXP GUI-Guider，lvgl的好伴侣 拖曳式设计并自动生成代码，而且还可以当模拟器练习代码，如何使用gui guider自定义代码</a></li><li><a href="https://blog.csdn.net/XiaoXiaoPengBo/article/details/114033697">NXP给LVGL出组态软件啦！！撒花！Gui-Guider使用</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">LVGL使用模拟器NXP GUI Guider完成界面拖拽和代码生成</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="C" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/C/"/>
    
    <category term="GUI" scheme="https://zml3589110.github.io/categories/GUI/"/>
    
    <category term="LVGL" scheme="https://zml3589110.github.io/categories/LVGL/"/>
    
    
    <category term="C" scheme="https://zml3589110.github.io/tags/C/"/>
    
    <category term="GUI" scheme="https://zml3589110.github.io/tags/GUI/"/>
    
    <category term="LVGL" scheme="https://zml3589110.github.io/tags/LVGL/"/>
    
    <category term="模拟器" scheme="https://zml3589110.github.io/tags/%E6%A8%A1%E6%8B%9F%E5%99%A8/"/>
    
    <category term="NXP" scheme="https://zml3589110.github.io/tags/NXP/"/>
    
    <category term="GUI Guider" scheme="https://zml3589110.github.io/tags/GUI-Guider/"/>
    
  </entry>
  
  <entry>
    <title>STM32实现SPI跟DMA功能</title>
    <link href="https://zml3589110.github.io/posts/423287766.html"/>
    <id>https://zml3589110.github.io/posts/423287766.html</id>
    <published>2022-12-30T12:16:20.000Z</published>
    <updated>2023-01-03T07:20:38.438Z</updated>
    
    <content type="html"><![CDATA[<p>一是想总结一下SPI总线的特点与注意点，二是总结一下SPI DMA的使用</p><h1 id="SPI总线"><a href="#SPI总线" class="headerlink" title="SPI总线"></a>SPI总线</h1><h2 id="SPI信号线说明"><a href="#SPI信号线说明" class="headerlink" title="SPI信号线说明"></a>SPI信号线说明</h2><p>通常SPI通过4个引脚与外部器件相连：</p><ul><li>MISO：主设备输入&#x2F;从设备输出引脚。该引脚在从模式下发送数据，在主模式下接收数据。</li><li>MOSI：主设备输出&#x2F;从设备输入引脚。该引脚在主模式下发送数据，在从模式下接收数据。</li><li>SCK：串口时钟，作为主设备的输出，从设备的输入</li><li>NSS：从设备选择。这是一个可选的引脚，用来选择主&#x2F;从设备。它的功能是用来作为“片选引脚”，让主设备可以单独地与特定从设备通讯，避免数据线上的冲突。</li></ul><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>MOSI脚相互连接，MISO脚相互连接。这样，数据在主和从之间串行地传输(MSB位在前)。</p><p>通信总是由主设备发起。主设备通过MOSI脚把数据发送给从设备，从设备通过MISO引脚回传数据。这意味全双工通信的数据输出和数据输入是用同一个时钟信号同步的；时钟信号由主设备通过SCK脚提供。</p><img src="https://img-blog.csdnimg.cn/img_convert/9ddeb43117eecfcfd19dfaae933c13c4.png"><h2 id="NSS说明与注意点"><a href="#NSS说明与注意点" class="headerlink" title="NSS说明与注意点"></a>NSS说明与注意点</h2><img src="https://img-blog.csdnimg.cn/img_convert/acf2381be4d45baae87331ce53abb813.png"><p>NSS分为内部引脚和外部引脚。</p><p>　　NSS外部引脚可以作为输入信号或者输出信号，输入信号一般用作硬件方式从机的片选，而输出信号一般用于主SPI去片选与之相连的从SPI。</p><p>　　NSS从设备选择有两种模式：</p><p><strong>1、软件模式</strong></p><p>　　可以通过设置SPI_CR1寄存器的SSM位来使能这种模式，当它为1时，NSS引脚上的电平由SSI决定。在这种模式下NSS外部引脚可以用作它用，而内部NSS信号电平可以通过写SPI_CR1的SSI位来驱动。　 </p><p><strong>2、硬件模式</strong></p><p>​    两种方式：</p><p>（1）对于主SPI，NSS可以直接接高电平，对于从SPI，可以直接接低电平。　　</p><p>（2）当STM32F10xxx工作为主SPI，并且NSS输出已经通过SPI_CR2寄存器的SSOE位使能，这时主机的NSS讲作为输出信号，引脚信号被拉低，所有NSS引脚与这个主SPI的NSS引脚相连并配置为硬件NSS的SPI设备，将自动变成从SPI设备。</p><p>　　此时两个的NSS信号线可以接个上拉电阻直连。</p><h1 id="DMA说明"><a href="#DMA说明" class="headerlink" title="DMA说明"></a>DMA说明</h1><p>DMA是AMBA的先进高性能总线(AHB)上的设备，它有2个AHB端口：一个是从端口，用于配置DMA，另一个是主端口，使得DMA可以在不同的从设备之间传输数据。</p><p>　　DMA的作用是在没有Cortex-M3核心的干预下，在后台完成数据传输。在传输数据的过程中，主处理器可以执行其它任务，只有在整个数据块传输结束后，需要处理这些数据时才会中断主处理器的操作。它可以在对系统性能产生较小影响的情况下，实现大量数据的传输。</p><h2 id="DMA原理"><a href="#DMA原理" class="headerlink" title="DMA原理"></a>DMA原理</h2><img src="https://img-blog.csdnimg.cn/138381ccb0ff43cd9bb719cd8017f29b.png"><p>1.CPU配置好DMA。</p><p>2.SPI发出DMA请求。（在DMA_Mode_Normal模式下，该请求实际上需要CPU命令SPI发出请求）</p><p>3.若该通道有多个请求，DMA控制器通过仲裁器判断，根据配置的优先级，选择先回应该通道高优先级的请求，再回应低优先级的请求。（此过程不需要CPU参与）</p><p>4.DMA控制器回应请求后，自动根据配置，进行数据传输。（此过程不需要CPU参与）</p><h2 id="DMA通道资源分配"><a href="#DMA通道资源分配" class="headerlink" title="DMA通道资源分配"></a>DMA通道资源分配</h2><p><strong>DMA1通道</strong></p><img src="https://img-blog.csdnimg.cn/31268ec27cad48b7a00f79f4dbdb8dec.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5Y-r5oiR6LCi5biD5pav,size_20,color_FFFFFF,t_70,g_se,x_16"><p><strong>DMA2通道</strong></p><img src="https://img-blog.csdnimg.cn/4588f91124354944b34e22e937e7c960.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5Y-r5oiR6LCi5biD5pav,size_20,color_FFFFFF,t_70,g_se,x_16"><h1 id="SPI-DMA的通信过程"><a href="#SPI-DMA的通信过程" class="headerlink" title="SPI_DMA的通信过程"></a>SPI_DMA的通信过程</h1><ul><li><p>设置外设地址</p></li><li><p>设置存储器地址</p></li><li><p>设置传输数据量</p></li><li><p>设置通道的配置信息</p></li><li><p>使能DMA通道，启动传输</p></li><li><p>发送时，在每次TXE被设置为’1’时发出DMA请求，DMA控制器则写数据至SPI_DR寄存器，TXE标志因此而被清除。</p></li><li><p>接收时，在每次RXNE被设置为’1’时发出DMA请求，DMA控制器则从SPI_DR寄存器读出数据，RXNE标志因此而被清除。</p></li></ul><h2 id="相关配置代码（方法一）"><a href="#相关配置代码（方法一）" class="headerlink" title="相关配置代码（方法一）"></a>相关配置代码（方法一）</h2><p>这里使用的是SPI1</p><p><strong>SPI_DMA配置</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment">* Function Name  : SPI1_DMA_Configuration</span></span><br><span class="line"><span class="comment">* Description    : 配置SPI1_RX的DMA通道2，SPI1_TX的DMA通道3</span></span><br><span class="line"><span class="comment">* Input          : None</span></span><br><span class="line"><span class="comment">* Output         : None</span></span><br><span class="line"><span class="comment">* Return         : None</span></span><br><span class="line"><span class="comment">* Attention             :</span></span><br><span class="line"><span class="comment">*******************************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SPI1_DMA_Configuration</span><span class="params">( <span class="keyword">void</span> )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DMA_InitTypeDef DMA_InitStructure;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* DMA1 Channel2 (triggered by SPI1 Rx event) Config */</span></span><br><span class="line">  DMA_DeInit(DMA1_Channel2);</span><br><span class="line">  DMA_InitStructure.DMA_PeripheralBaseAddr = SPI1_DR_Addr;                          <span class="comment">//设置 SPI1 发送外设(0x4001300C) 地址(目的地址)</span></span><br><span class="line">  DMA_InitStructure.DMA_MemoryBaseAddr = (<span class="keyword">uint32_t</span>)SPI1_RX_Buff;                    <span class="comment">//设置 SRAM 存储地址(目的地址)</span></span><br><span class="line">  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;                                <span class="comment">//传输方向 外设-内存</span></span><br><span class="line">  DMA_InitStructure.DMA_BufferSize = SPI1_ReciveBufferSize;                         <span class="comment">//设置 SPI1 发送长度</span></span><br><span class="line">  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;</span><br><span class="line">  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;</span><br><span class="line">  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;</span><br><span class="line">  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;</span><br><span class="line">  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;</span><br><span class="line">  DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;</span><br><span class="line">  DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;</span><br><span class="line">  DMA_Init(DMA1_Channel2, &amp;DMA_InitStructure);</span><br><span class="line"> </span><br><span class="line">  DMA_ITConfig(DMA1_Channel2, DMA_IT_TC, ENABLE);</span><br><span class="line">  <span class="comment">/* Enable SPI1 DMA RX request */</span></span><br><span class="line">  SPI1-&gt;CR2 |= <span class="number">1</span>&lt;&lt;<span class="number">0</span>;                                                                 <span class="comment">//接收缓冲区DMA使能</span></span><br><span class="line">  DMA_Cmd(DMA1_Channel2, ENABLE);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* DMA1 Channel3 (triggered by SPI1 Tx event) Config */</span></span><br><span class="line">  DMA_DeInit(DMA1_Channel3);</span><br><span class="line">  DMA_InitStructure.DMA_PeripheralBaseAddr = SPI1_DR_Addr;                          <span class="comment">//设置  接收外设(0x4001300C) 地址(源地址)</span></span><br><span class="line">  DMA_InitStructure.DMA_MemoryBaseAddr = (<span class="keyword">uint32_t</span>)SPI1_TX_Buff;                    <span class="comment">//设置 SRAM 存储地址(源地址)</span></span><br><span class="line">  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST;                                <span class="comment">//传输方向 内存-外设</span></span><br><span class="line">  DMA_InitStructure.DMA_BufferSize = SPI1_SendBufferSize;                           <span class="comment">//设置 SPI1 接收长度</span></span><br><span class="line">  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;                  <span class="comment">//外设地址增量(不变)</span></span><br><span class="line">  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;                           <span class="comment">//内存地址增量(变化)</span></span><br><span class="line">  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;           <span class="comment">//外设传输宽度(字节)</span></span><br><span class="line">  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;                   <span class="comment">//内存传输宽度(字节)</span></span><br><span class="line">  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;                                     <span class="comment">//传输方式,一次传输完停止,不重新加载</span></span><br><span class="line">  DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;                           <span class="comment">//中断方式-高(三级)</span></span><br><span class="line">  DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;                                      <span class="comment">//内存到内存方式禁止</span></span><br><span class="line">  DMA_Init(DMA1_Channel3, &amp;DMA_InitStructure);</span><br><span class="line"> </span><br><span class="line">  DMA_ITConfig(DMA1_Channel3, DMA_IT_TC, ENABLE);                                   <span class="comment">//开启 DMA1_Channel3 传输完成中断</span></span><br><span class="line">  DMA_ITConfig(DMA1_Channel3, DMA_IT_TE, ENABLE);                                   <span class="comment">//开启 DMA1_Channel3 传输错误中断</span></span><br><span class="line">  <span class="comment">/* Enable SPI1 DMA TX request */</span></span><br><span class="line">  SPI1-&gt;CR2 |= <span class="number">1</span>&lt;&lt;<span class="number">1</span>;                                                                <span class="comment">//发送缓冲区DMA使能</span></span><br><span class="line">  DMA_Cmd(DMA1_Channel3, DISABLE);                                                  <span class="comment">//开启 DMA 通道 DMA1_Channel3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>SPI发送</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment">* Function Name  : SPI1_Send</span></span><br><span class="line"><span class="comment">* Description    : SPI1的DMA方式发送</span></span><br><span class="line"><span class="comment">* Input          : SPI1_TX_Buff[SPI1_SendBufferSize]</span></span><br><span class="line"><span class="comment">* Output         : None</span></span><br><span class="line"><span class="comment">* Return         : None</span></span><br><span class="line"><span class="comment">* Attention             : 关闭DMA通道3之前必须等待TXE为1，等待忙标志为0</span></span><br><span class="line"><span class="comment">*******************************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SPI1_Send</span><span class="params">( u8 *buff, u32 len )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DMA1_Channel3-&gt;CPAR = SPI1_DR_Addr; <span class="comment">//外设地址</span></span><br><span class="line">    DMA1_Channel3-&gt;CMAR = (u32) buff; <span class="comment">//mem地址</span></span><br><span class="line">    DMA1_Channel3-&gt;CNDTR = len ; <span class="comment">//传输长度</span></span><br><span class="line">    DMA1_Channel3-&gt;CCR = (<span class="number">0</span> &lt;&lt; <span class="number">14</span>) | <span class="comment">// 非存储器到存储器模式</span></span><br><span class="line">            (<span class="number">2</span> &lt;&lt; <span class="number">12</span>) | <span class="comment">// 通道优先级高</span></span><br><span class="line">            (<span class="number">0</span> &lt;&lt; <span class="number">11</span>) | <span class="comment">// 存储器数据宽度8bit</span></span><br><span class="line">            (<span class="number">0</span> &lt;&lt; <span class="number">10</span>) | <span class="comment">// 存储器数据宽度8bit</span></span><br><span class="line">            (<span class="number">0</span> &lt;&lt;  <span class="number">9</span>) | <span class="comment">// 外设数据宽度8bit</span></span><br><span class="line">            (<span class="number">0</span> &lt;&lt;  <span class="number">8</span>) | <span class="comment">// 外设数据宽度8bit</span></span><br><span class="line">            (<span class="number">1</span> &lt;&lt;  <span class="number">7</span>) | <span class="comment">// 存储器地址增量模式</span></span><br><span class="line">            (<span class="number">0</span> &lt;&lt;  <span class="number">6</span>) | <span class="comment">// 外设地址增量模式(不增)</span></span><br><span class="line">            (<span class="number">0</span> &lt;&lt;  <span class="number">5</span>) | <span class="comment">// 非循环模式</span></span><br><span class="line">            (<span class="number">1</span> &lt;&lt;  <span class="number">4</span>) | <span class="comment">// 从存储器读</span></span><br><span class="line">            (<span class="number">1</span> &lt;&lt;  <span class="number">3</span>) | <span class="comment">// 允许传输错误中断</span></span><br><span class="line">            (<span class="number">0</span> &lt;&lt;  <span class="number">2</span>) | <span class="comment">// 允许半传输中断</span></span><br><span class="line">            (<span class="number">1</span> &lt;&lt;  <span class="number">1</span>) | <span class="comment">// 允许传输完成中断</span></span><br><span class="line">            (<span class="number">1</span>);        <span class="comment">// 通道开启</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>SPI接收</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment">* Function Name  : SPI1_Recive</span></span><br><span class="line"><span class="comment">* Description    : SPI1的DMA方式接收</span></span><br><span class="line"><span class="comment">* Input          : None</span></span><br><span class="line"><span class="comment">* Output         : SPI1_RX_Buff[SPI1_ReciveBufferSize]</span></span><br><span class="line"><span class="comment">* Return         : None</span></span><br><span class="line"><span class="comment">* Attention             : 必须要先关闭通道2,然后再配置通道2的参数</span></span><br><span class="line"><span class="comment">*******************************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SPI1_Recive</span><span class="params">( u8 *buff, u32 len )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DMA1_Channel2-&gt;CCR &amp;= ~( <span class="number">1</span> &lt;&lt; <span class="number">0</span> );          <span class="comment">//关闭DMA通道2</span></span><br><span class="line"> </span><br><span class="line">    DMA1_Channel2-&gt;CPAR = SPI1_DR_Addr; <span class="comment">//外设地址</span></span><br><span class="line">    DMA1_Channel2-&gt;CMAR = (<span class="keyword">uint32_t</span>)buff; <span class="comment">//mem地址</span></span><br><span class="line">    DMA1_Channel2-&gt;CNDTR = len ; <span class="comment">//传输长度</span></span><br><span class="line">    DMA1_Channel2-&gt;CCR = (<span class="number">0</span> &lt;&lt; <span class="number">14</span>) | <span class="comment">// 非存储器到存储器模式</span></span><br><span class="line">            (<span class="number">2</span> &lt;&lt; <span class="number">12</span>) | <span class="comment">// 通道优先级高</span></span><br><span class="line">            (<span class="number">0</span> &lt;&lt; <span class="number">11</span>) | <span class="comment">// 存储器数据宽度8bit</span></span><br><span class="line">            (<span class="number">0</span> &lt;&lt; <span class="number">10</span>) | <span class="comment">// 存储器数据宽度8bit</span></span><br><span class="line">            (<span class="number">0</span> &lt;&lt;  <span class="number">9</span>) | <span class="comment">// 外设数据宽度8bit</span></span><br><span class="line">            (<span class="number">0</span> &lt;&lt;  <span class="number">8</span>) | <span class="comment">// 外设数据宽度8bit</span></span><br><span class="line">            (<span class="number">1</span> &lt;&lt;  <span class="number">7</span>) | <span class="comment">// 存储器地址增量模式</span></span><br><span class="line">            (<span class="number">0</span> &lt;&lt;  <span class="number">6</span>) | <span class="comment">// 外设地址增量模式(不增)</span></span><br><span class="line">            (<span class="number">0</span> &lt;&lt;  <span class="number">5</span>) | <span class="comment">// 非循环模式</span></span><br><span class="line">            (<span class="number">0</span> &lt;&lt;  <span class="number">4</span>) | <span class="comment">// 传输方向 外设-内存</span></span><br><span class="line">            (<span class="number">0</span> &lt;&lt;  <span class="number">3</span>) | <span class="comment">// 允许传输错误中断</span></span><br><span class="line">            (<span class="number">0</span> &lt;&lt;  <span class="number">2</span>) | <span class="comment">// 允许半传输中断</span></span><br><span class="line">            (<span class="number">1</span> &lt;&lt;  <span class="number">1</span>) | <span class="comment">// 允许传输完成中断</span></span><br><span class="line">            (<span class="number">1</span>);        <span class="comment">// 通道开启</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="相关配置代码（方法二）"><a href="#相关配置代码（方法二）" class="headerlink" title="相关配置代码（方法二）"></a>相关配置代码（方法二）</h2><p><em>既然使用的是SPI+DMA,必定要使能SPI，详细请参考</em></p><p><em><a href="https://blog.csdn.net/m0_67530207/article/details/127021750">SPI配置</a></em></p><p><em>配置完SPI后，配置DMA，如下</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dma_init</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> SendBuff,<span class="keyword">unsigned</span> <span class="keyword">int</span> buffer_size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> </span><br><span class="line">DMA_InitTypeDef DMA_InitStructure;</span><br><span class="line">RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1,ENABLE);</span><br><span class="line">DMA_DeInit(DMA1_Channel3);</span><br><span class="line"><span class="comment">/*DMA配置*/</span></span><br><span class="line"> </span><br><span class="line">DMA_InitStructure.DMA_PeripheralBaseAddr = (<span class="keyword">uint32_t</span>)&amp;SPI1-&gt;DR;</span><br><span class="line"><span class="comment">//SPI数据寄存器地址</span></span><br><span class="line">DMA_InitStructure.DMA_MemoryBaseAddr = (<span class="keyword">uint32_t</span>)SendBuff; </span><br><span class="line"><span class="comment">//内存地址(要传输的变量的指针)</span></span><br><span class="line">DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST; </span><br><span class="line"><span class="comment">//方向(从内存到外设)</span></span><br><span class="line"><span class="comment">//DMA_DIR_PeripheralSRC为从外设到内存</span></span><br><span class="line">DMA_InitStructure.DMA_BufferSize = buffer_size; </span><br><span class="line"><span class="comment">//传输内容的大小</span></span><br><span class="line">DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable; </span><br><span class="line"><span class="comment">//外设地址不增</span></span><br><span class="line">DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable; </span><br><span class="line"><span class="comment">//内存地址自增</span></span><br><span class="line">DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte ; </span><br><span class="line"><span class="comment">//外设数据单位</span></span><br><span class="line">DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte ; </span><br><span class="line"><span class="comment">//内存数据单位</span></span><br><span class="line">DMA_InitStructure.DMA_Mode = DMA_Mode_Normal ; </span><br><span class="line"><span class="comment">//DMA模式：一次传输</span></span><br><span class="line">DMA_InitStructure.DMA_Priority = DMA_Priority_Medium ; </span><br><span class="line"><span class="comment">//优先级：高</span></span><br><span class="line">DMA_InitStructure.DMA_M2M = DMA_M2M_Disable; </span><br><span class="line"><span class="comment">//禁止内存到内存的传输</span></span><br><span class="line"> </span><br><span class="line">DMA_Init(DMA1_Channel3, &amp;DMA_InitStructure); </span><br><span class="line"><span class="comment">//配置DMA1的3通道</span></span><br><span class="line">DMA_Cmd(DMA1_Channel3, ENABLE);       <span class="comment">//使能DMA</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：DMA_PeripheralBaseAddr不是SPI外设的地址，而是SPI1-&gt;DR即SPI数据寄存器的地址</strong></p><p><strong>因为DMA_Mode_Normal模式使用一次后DMA_BufferSize会清零，如下代码用于重置DMA_BufferSize</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DMA_Buffercounter_reset</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> buffer_size)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">DMA_Cmd(DMA1_Channel3, DISABLE );     </span><br><span class="line"><span class="comment">//失能DMA，使得DMA_SetCurrDataCounter能够使用</span></span><br><span class="line"> DMA_SetCurrDataCounter(DMA1_Channel3,buffer_size); </span><br><span class="line"><span class="comment">//一次传输模式，DMA_BufferSize执行一次后会清零</span></span><br><span class="line"><span class="comment">//后续需要重复传输的时候，需要使用该函数再次设置DMA_BufferSize</span></span><br><span class="line"> DMA_Cmd(DMA1_Channel3, ENABLE);       </span><br><span class="line"><span class="comment">//使能DMA</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="主函数编写如下"><a href="#主函数编写如下" class="headerlink" title="主函数编写如下"></a>主函数编写如下</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> buff_size 256</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> sendbuff[buff_size];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mian</span><span class="params">(coid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dma_init((<span class="keyword">unsigned</span> <span class="keyword">int</span>)sendbuff,buff_size);</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span> ;i&lt;buff_size;i++)</span><br><span class="line">&#123;</span><br><span class="line">          sendbuff[i]=color;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span> ; i&lt;(<span class="number">32768</span>/buff_size); i++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  SPI_I2S_DMACmd(SPI1,SPI_I2S_DMAReq_Tx,ENABLE); </span><br><span class="line">          <span class="comment">//SPI向DMA发出请求，DMA会通过仲裁器自动回应请求 </span></span><br><span class="line">  DMA_Buffercounter_reset(buff_size);</span><br><span class="line">          <span class="comment">//重置DMA_BufferSize，为下一次DMA传送做好准备</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(DMA_GetFlagStatus(DMA1_FLAG_TC3)!=RESET)<span class="comment">//判断DMA是否传输完成</span></span><br><span class="line">&#123;</span><br><span class="line">DMA_ClearFlag(DMA1_FLAG_TC3);<span class="comment">//DMA传输完成，清除标志位</span></span><br><span class="line"><span class="keyword">break</span>; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="相关链接-侵删"><a href="#相关链接-侵删" class="headerlink" title="相关链接(侵删)"></a>相关链接(侵删)</h1><ol><li><a href="https://blog.csdn.net/ba_wang_mao/article/details/109166336">STM32 SPI DMA 的使用</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">STM32实现SPI跟DMA传输功能</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="C" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/C/"/>
    
    <category term="STM32" scheme="https://zml3589110.github.io/categories/STM32/"/>
    
    <category term="DMA" scheme="https://zml3589110.github.io/categories/DMA/"/>
    
    <category term="SPI" scheme="https://zml3589110.github.io/categories/SPI/"/>
    
    
    <category term="STM32" scheme="https://zml3589110.github.io/tags/STM32/"/>
    
    <category term="C" scheme="https://zml3589110.github.io/tags/C/"/>
    
    <category term="SPI" scheme="https://zml3589110.github.io/tags/SPI/"/>
    
    <category term="keil" scheme="https://zml3589110.github.io/tags/keil/"/>
    
    <category term="DMA" scheme="https://zml3589110.github.io/tags/DMA/"/>
    
  </entry>
  
  <entry>
    <title>STM32通过SPI驱动ST7789(使用DMA)</title>
    <link href="https://zml3589110.github.io/posts/944314574.html"/>
    <id>https://zml3589110.github.io/posts/944314574.html</id>
    <published>2022-12-30T09:03:20.000Z</published>
    <updated>2023-01-03T07:20:38.428Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DMA简单介绍"><a href="#DMA简单介绍" class="headerlink" title="DMA简单介绍"></a>DMA简单介绍</h1><p>DMA 直接内存搬运技术，使数据不经过cpu，直接从内存搬运到spi的发送的寄存器里面，这样做的好处是减少cpu的负担，而且能大大提升显示屏的刷新速率</p><h1 id="使用spi直接驱动ST7789显示屏"><a href="#使用spi直接驱动ST7789显示屏" class="headerlink" title="使用spi直接驱动ST7789显示屏"></a>使用spi直接驱动ST7789显示屏</h1><p>最开始我是用spi直接驱动 显示屏幕，但我发现即使是使用spi的最大频率发送数据，刷屏的速率依旧很慢</p><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;sys.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;st7789.h&quot;</span></span></span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"> </span>&#123; </span><br><span class="line"> delay_init();     <span class="comment">//ÑÓÊ±º¯Êý³õÊ¼»¯  </span></span><br><span class="line"> initlcd();</span><br><span class="line"> <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"> fillScreen(<span class="number">0xf800</span>);</span><br><span class="line">   <span class="comment">//delay_us(100);</span></span><br><span class="line"> fillScreen(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// delay_us(100);</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>&lt;st7789.h&gt;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;sys.h&quot;</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DC    PBout(11) <span class="comment">//DC  </span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initlcd</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">writeData</span><span class="params">(u8 data)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">writeCommand</span><span class="params">(u8 data)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fillScreen</span><span class="params">(u16 color)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SPI1_Init</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SPI1_SetSpeed</span><span class="params">(u8 SpeedSet)</span></span>;   </span><br><span class="line"><span class="function">u8 <span class="title">SPI1_ReadWriteByte</span><span class="params">(u8 TxData)</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>&lt;st7789.c&gt;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;st7789.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;delay.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">SPI_InitTypeDef  SPI_InitStructure;</span><br><span class="line"><span class="comment">//spi1的初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SPI1_Init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">    </span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA|RCC_APB2Periph_SPI1, ENABLE );</span><br><span class="line"> </span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7;</span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;  <span class="comment">//¸´ÓÃÍÆÍìÊä³ö</span></span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line"> GPIO_SetBits(GPIOA,GPIO_Pin_5|GPIO_Pin_6|GPIO_Pin_7);</span><br><span class="line"></span><br><span class="line">SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;  <span class="comment">//</span></span><br><span class="line">SPI_InitStructure.SPI_Mode = SPI_Mode_Master;<span class="comment">//</span></span><br><span class="line">SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;<span class="comment">//</span></span><br><span class="line">SPI_InitStructure.SPI_CPOL = SPI_CPOL_High;<span class="comment">//</span></span><br><span class="line">SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;<span class="comment">//</span></span><br><span class="line">SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;</span><br><span class="line">SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_256;<span class="comment">//</span></span><br><span class="line">SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;<span class="comment">//</span></span><br><span class="line">SPI_InitStructure.SPI_CRCPolynomial = <span class="number">7</span>;<span class="comment">//</span></span><br><span class="line">SPI_Init(SPI1, &amp;SPI_InitStructure);  <span class="comment">//</span></span><br><span class="line"> </span><br><span class="line">SPI_Cmd(SPI1, ENABLE); <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">SPI1_ReadWriteByte(<span class="number">0xff</span>);<span class="comment">// </span></span><br><span class="line">&#125;   </span><br><span class="line"></span><br><span class="line"> <span class="comment">//设置spi的传输速率</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SPI1_SetSpeed</span><span class="params">(u8 SpeedSet)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SPI_InitStructure.SPI_BaudRatePrescaler = SpeedSet ;</span><br><span class="line">  SPI_Init(SPI1, &amp;SPI_InitStructure);</span><br><span class="line">SPI_Cmd(SPI1,ENABLE);</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//spi 读写</span></span><br><span class="line"><span class="function">u8 <span class="title">SPI1_ReadWriteByte</span><span class="params">(u8 TxData)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u8 retry=<span class="number">0</span>; </span><br><span class="line"><span class="keyword">while</span> (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET) <span class="comment">//</span></span><br><span class="line">&#123;</span><br><span class="line">retry++;</span><br><span class="line"><span class="keyword">if</span>(retry&gt;<span class="number">200</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br><span class="line">SPI_I2S_SendData(SPI1, TxData); </span><br><span class="line">retry=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET)<span class="comment">//</span></span><br><span class="line">&#123;</span><br><span class="line">retry++;</span><br><span class="line"><span class="keyword">if</span>(retry&gt;<span class="number">200</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;      </span><br><span class="line"><span class="keyword">return</span> SPI_I2S_ReceiveData(SPI1); <span class="comment">//    </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化显示屏</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initlcd</span><span class="params">()</span></span>&#123;</span><br><span class="line"> RCC-&gt;APB2ENR|=<span class="number">1</span>&lt;&lt;<span class="number">3</span>;<span class="comment">//时钟使能 </span></span><br><span class="line">GPIOB-&gt;CRH&amp;=<span class="number">0XFFFF0FFF</span>;<span class="comment">//设置为输出模式</span></span><br><span class="line">GPIOB-&gt;CRH|=<span class="number">0X00003000</span>;</span><br><span class="line">GPIOB-&gt;ODR|=<span class="number">1</span>&lt;<span class="number">11</span>;     <span class="comment">//dc high</span></span><br><span class="line"></span><br><span class="line">    SPI1_Init();</span><br><span class="line">SPI1_SetSpeed(SPI_BaudRatePrescaler_2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    writeCommand(<span class="number">0x01</span>);</span><br><span class="line">delay_us(<span class="number">150</span>);</span><br><span class="line">writeCommand(<span class="number">0x11</span>);</span><br><span class="line">delay_us(<span class="number">120</span>);</span><br><span class="line">writeCommand(<span class="number">0x3A</span>);</span><br><span class="line">writeData(<span class="number">0x55</span>);</span><br><span class="line">writeCommand(<span class="number">0x36</span>);</span><br><span class="line">writeData(<span class="number">0x00</span>);</span><br><span class="line">writeCommand(<span class="number">0x21</span>);</span><br><span class="line">writeCommand(<span class="number">0x13</span>);</span><br><span class="line">writeCommand(<span class="number">0x29</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">writeData</span><span class="params">(u8 data)</span></span>&#123;</span><br><span class="line">   DC = <span class="number">1</span>;</span><br><span class="line">   SPI1_ReadWriteByte(data);</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">writeCommand</span><span class="params">(u8 cmd)</span></span>&#123;</span><br><span class="line"> DC = <span class="number">0</span>;</span><br><span class="line">   SPI1_ReadWriteByte(cmd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fillScreen</span><span class="params">(u16 color)</span></span>&#123;</span><br><span class="line">  u16 i ,j;</span><br><span class="line">  writeCommand(<span class="number">0x2A</span>);</span><br><span class="line">  writeData(<span class="number">0</span>);</span><br><span class="line">  writeData(<span class="number">0</span>);</span><br><span class="line">  writeData(<span class="number">0</span>);</span><br><span class="line">  writeData(<span class="number">240</span>);</span><br><span class="line">  writeCommand(<span class="number">0X2B</span>);</span><br><span class="line">  writeData(<span class="number">0</span>);</span><br><span class="line">  writeData(<span class="number">0</span>);</span><br><span class="line">  writeData(<span class="number">0X01</span>);</span><br><span class="line">  writeData(<span class="number">0X40</span>);</span><br><span class="line">  writeCommand(<span class="number">0X2C</span>);</span><br><span class="line">  <span class="keyword">for</span>(i = <span class="number">0</span> ; i&lt;<span class="number">240</span> ; i++)&#123;</span><br><span class="line">  <span class="keyword">for</span>(j = <span class="number">0</span> ; j&lt;<span class="number">320</span> ; j++)&#123;</span><br><span class="line">       writeData(color&gt;&gt;<span class="number">8</span>);  </span><br><span class="line">          writeData(color);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p><strong>刷新频率约 1秒3帧</strong></p><img src="https://img-blog.csdnimg.cn/20200523130634474.gif#pic_center"><h1 id="使用spi加dma驱动ST7789显示屏"><a href="#使用spi加dma驱动ST7789显示屏" class="headerlink" title="使用spi加dma驱动ST7789显示屏"></a>使用spi加dma驱动ST7789显示屏</h1><blockquote><p>在使dma搬运数据后刷新速率有了明显的提升</p></blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;sys.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;st7789.h&quot;</span>    </span></span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"> </span>&#123; </span><br><span class="line"> delay_init();       </span><br><span class="line"> initlcd();</span><br><span class="line"> <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">   fillScreen(<span class="number">0xf800</span>);</span><br><span class="line">   fillScreen(<span class="number">0xffff</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>&lt;st7789.h&gt;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;sys.h&quot;</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DC    PBout(11) <span class="comment">//DC  </span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initlcd</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">writeData</span><span class="params">(u8 data)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">writeCommand</span><span class="params">(u8 data)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fillScreen</span><span class="params">(u16 color)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SPI1_Init</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SPI1_SetSpeed</span><span class="params">(u8 SpeedSet)</span></span>;   </span><br><span class="line"><span class="function">u8 <span class="title">SPI1_ReadWriteByte</span><span class="params">(u8 TxData)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MYDMA_Config</span><span class="params">(DMA_Channel_TypeDef*DMA_CHx,u32 cpar,u32 cmar,u16 cndtr)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MYDMA_Enable</span><span class="params">(DMA_Channel_TypeDef*DMA_CHx)</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>&lt;st7789.c&gt;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;st7789.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;sys.h&quot;</span></span></span><br><span class="line">u8 SendBuff[<span class="number">480</span>];</span><br><span class="line">DMA_InitTypeDef DMA_InitStructure;</span><br><span class="line">u16 DMA1_MEM_LEN;    </span><br><span class="line"><span class="comment">//配置dma</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MYDMA_Config</span><span class="params">(DMA_Channel_TypeDef* DMA_CHx,u32 cpar,u32 cmar,u16 cndtr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);<span class="comment">//Ê¹ÄÜDMA´«Êä</span></span><br><span class="line"></span><br><span class="line">    DMA_DeInit(DMA_CHx);   <span class="comment">//将dma1的某通道</span></span><br><span class="line">DMA1_MEM_LEN=cndtr;</span><br><span class="line">DMA_InitStructure.DMA_PeripheralBaseAddr = cpar;  <span class="comment">//dma 要搬运到的外设地址</span></span><br><span class="line">DMA_InitStructure.DMA_MemoryBaseAddr = cmar;  <span class="comment">//dma要搬运的内存的地址</span></span><br><span class="line">DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST;  <span class="comment">//搬运方向， 从内存到外设</span></span><br><span class="line">DMA_InitStructure.DMA_BufferSize = cndtr; <span class="comment">//要搬运的内存的大小</span></span><br><span class="line">DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable; <span class="comment">//  传输过程中外设的基地址不变</span></span><br><span class="line">DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;  <span class="comment">//传输过程中内存地址递增</span></span><br><span class="line">DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;  <span class="comment">//数据宽度为八位</span></span><br><span class="line">DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;<span class="comment">//数据宽度为八位 </span></span><br><span class="line">DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;  <span class="comment">//正常传输模式</span></span><br><span class="line">DMA_InitStructure.DMA_Priority = DMA_Priority_Medium; <span class="comment">//优先级设置</span></span><br><span class="line">DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;  <span class="comment">//没有内存到内存的传输</span></span><br><span class="line">DMA_Init(DMA_CHx, &amp;DMA_InitStructure);  <span class="comment">//</span></span><br><span class="line">  </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//使能dma1的通道3，因为spi输出对应的是此通道</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MYDMA_Enable</span><span class="params">(DMA_Channel_TypeDef*DMA_CHx)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">DMA_Cmd(DMA_CHx, DISABLE );    </span><br><span class="line"> DMA_SetCurrDataCounter(DMA1_Channel3,DMA1_MEM_LEN);</span><br><span class="line"> DMA_Cmd(DMA_CHx, ENABLE);  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SPI_InitTypeDef  SPI_InitStructure;</span><br><span class="line"><span class="comment">//spi1的初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SPI1_Init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">  </span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA|RCC_APB2Periph_SPI1, ENABLE );</span><br><span class="line"> </span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7;</span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;  </span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line"> GPIO_SetBits(GPIOA,GPIO_Pin_5|GPIO_Pin_6|GPIO_Pin_7);</span><br><span class="line"></span><br><span class="line">SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;  </span><br><span class="line">SPI_InitStructure.SPI_Mode = SPI_Mode_Master;</span><br><span class="line">SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;</span><br><span class="line">SPI_InitStructure.SPI_CPOL = SPI_CPOL_High;</span><br><span class="line">SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;</span><br><span class="line">SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;</span><br><span class="line">SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_256;<span class="comment">//</span></span><br><span class="line">SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;</span><br><span class="line">SPI_InitStructure.SPI_CRCPolynomial = <span class="number">7</span>;</span><br><span class="line">SPI_Init(SPI1, &amp;SPI_InitStructure); <span class="comment">//´æÆ÷</span></span><br><span class="line"> </span><br><span class="line">SPI_Cmd(SPI1, ENABLE); </span><br><span class="line"></span><br><span class="line">SPI1_ReadWriteByte(<span class="number">0xff</span>); </span><br><span class="line">&#125;   </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SPI1_SetSpeed</span><span class="params">(u8 SpeedSet)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SPI_InitStructure.SPI_BaudRatePrescaler = SpeedSet ;</span><br><span class="line">  SPI_Init(SPI1, &amp;SPI_InitStructure);</span><br><span class="line">SPI_Cmd(SPI1,ENABLE);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">u8 <span class="title">SPI1_ReadWriteByte</span><span class="params">(u8 TxData)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u8 retry=<span class="number">0</span>; </span><br><span class="line"><span class="keyword">while</span> (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET) <span class="comment">//</span></span><br><span class="line">&#123;</span><br><span class="line">retry++;</span><br><span class="line"><span class="keyword">if</span>(retry&gt;<span class="number">200</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br><span class="line">SPI_I2S_SendData(SPI1, TxData); </span><br><span class="line">retry=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET)<span class="comment">//</span></span><br><span class="line">&#123;</span><br><span class="line">retry++;</span><br><span class="line"><span class="keyword">if</span>(retry&gt;<span class="number">200</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;      </span><br><span class="line"><span class="keyword">return</span> SPI_I2S_ReceiveData(SPI1);     </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initlcd</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"> RCC-&gt;APB2ENR|=<span class="number">1</span>&lt;&lt;<span class="number">3</span>;<span class="comment">//?????IO PORTC??  </span></span><br><span class="line">GPIOB-&gt;CRH&amp;=<span class="number">0XFFFF0FFF</span>;<span class="comment">//PC11/12 </span></span><br><span class="line">GPIOB-&gt;CRH|=<span class="number">0X00003000</span>;</span><br><span class="line">GPIOB-&gt;ODR|=<span class="number">1</span>&lt;<span class="number">11</span>;     <span class="comment">//PC11,12 ???</span></span><br><span class="line">  </span><br><span class="line">  SPI1_Init();</span><br><span class="line">SPI1_SetSpeed(SPI_BaudRatePrescaler_2);</span><br><span class="line"><span class="comment">//配置dma</span></span><br><span class="line">MYDMA_Config(DMA1_Channel3,(u32)&amp;SPI1-&gt;DR,(u32)SendBuff,<span class="number">480</span>);</span><br><span class="line"></span><br><span class="line">  writeCommand(<span class="number">0x01</span>);</span><br><span class="line">delay_us(<span class="number">150</span>);</span><br><span class="line">writeCommand(<span class="number">0x11</span>);</span><br><span class="line">delay_us(<span class="number">120</span>);</span><br><span class="line">writeCommand(<span class="number">0x3A</span>);</span><br><span class="line">writeData(<span class="number">0x55</span>);</span><br><span class="line">writeCommand(<span class="number">0x36</span>);</span><br><span class="line">writeData(<span class="number">0x00</span>);</span><br><span class="line">writeCommand(<span class="number">0x21</span>);</span><br><span class="line">writeCommand(<span class="number">0x13</span>);</span><br><span class="line">writeCommand(<span class="number">0x29</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">writeData</span><span class="params">(u8 data)</span></span>&#123;</span><br><span class="line">   DC = <span class="number">1</span>;</span><br><span class="line">   SPI1_ReadWriteByte(data);</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">writeCommand</span><span class="params">(u8 cmd)</span></span>&#123;</span><br><span class="line"> DC = <span class="number">0</span>;</span><br><span class="line">   SPI1_ReadWriteByte(cmd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fillScreen</span><span class="params">(u16 color)</span></span>&#123;</span><br><span class="line">u16 i ,j;</span><br><span class="line"><span class="comment">//DC = 0;</span></span><br><span class="line">  writeCommand(<span class="number">0x2A</span>);</span><br><span class="line">  writeData(<span class="number">0</span>);</span><br><span class="line">  writeData(<span class="number">0</span>);</span><br><span class="line">writeData(<span class="number">0</span>);</span><br><span class="line">writeData(<span class="number">240</span>);</span><br><span class="line">  writeCommand(<span class="number">0X2B</span>);</span><br><span class="line">  writeData(<span class="number">0</span>);</span><br><span class="line">  writeData(<span class="number">0</span>);</span><br><span class="line">writeData(<span class="number">0X01</span>);</span><br><span class="line">writeData(<span class="number">0X40</span>);</span><br><span class="line">  writeCommand(<span class="number">0X2C</span>);</span><br><span class="line">DC = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span> ;j&lt;<span class="number">480</span>;)&#123;</span><br><span class="line">      SendBuff[j] = color&gt;&gt;<span class="number">8</span>;</span><br><span class="line">  SendBuff[j+<span class="number">1</span>] = color;</span><br><span class="line">  j += <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(i = <span class="number">0</span> ; i&lt;<span class="number">320</span> ; i++)&#123;</span><br><span class="line"></span><br><span class="line">  SPI_I2S_DMACmd(SPI1,SPI_I2S_DMAReq_Tx,ENABLE); <span class="comment">//????1?DMA?? </span></span><br><span class="line">      MYDMA_Enable(DMA1_Channel3);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(DMA_GetFlagStatus(DMA1_FLAG_TC3)!=RESET)<span class="comment">//µÈ´ýÍ¨µÀ4´«ÊäÍê³É</span></span><br><span class="line">&#123;</span><br><span class="line">DMA_ClearFlag(DMA1_FLAG_TC3);<span class="comment">//Çå³ýÍ¨µÀ4´«ÊäÍê³É±êÖ¾</span></span><br><span class="line"><span class="keyword">break</span>; </span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h2><p><strong>刷新速率约一秒十多帧</strong></p><img src="https://img-blog.csdnimg.cn/20200523130804683.gif#pic_center"><h1 id="连线"><a href="#连线" class="headerlink" title="连线"></a>连线</h1><p>DC(A0)———— PB11<br>CLK———– PA5<br>MISO——— PA6<br>MOSI(SDA)——— PA7<br>CS———— GND</p><p>RESET———— VDD<br>BL———— VDD</p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p>dma和spi部分参考正点原子代码，示例使用的主控芯片是stm32f103</p><hr><h1 id="相关链接-侵删"><a href="#相关链接-侵删" class="headerlink" title="相关链接(侵删)"></a>相关链接(侵删)</h1><ol><li><a href="https://blog.csdn.net/fengli1995/article/details/106298491">基于stm32 标准库spi驱动st7789(使用DMA)</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">STM32使用DMA通过SPI驱动ST7789，点亮屏幕</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="C" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/C/"/>
    
    <category term="FreeRTOS" scheme="https://zml3589110.github.io/categories/FreeRTOS/"/>
    
    <category term="STM32" scheme="https://zml3589110.github.io/categories/STM32/"/>
    
    <category term="DMA" scheme="https://zml3589110.github.io/categories/DMA/"/>
    
    <category term="ST7789" scheme="https://zml3589110.github.io/categories/ST7789/"/>
    
    
    <category term="STM32" scheme="https://zml3589110.github.io/tags/STM32/"/>
    
    <category term="C" scheme="https://zml3589110.github.io/tags/C/"/>
    
    <category term="FreeRTOS" scheme="https://zml3589110.github.io/tags/FreeRTOS/"/>
    
    <category term="SPI" scheme="https://zml3589110.github.io/tags/SPI/"/>
    
    <category term="keil" scheme="https://zml3589110.github.io/tags/keil/"/>
    
    <category term="DMA" scheme="https://zml3589110.github.io/tags/DMA/"/>
    
    <category term="LCD" scheme="https://zml3589110.github.io/tags/LCD/"/>
    
    <category term="TFT" scheme="https://zml3589110.github.io/tags/TFT/"/>
    
    <category term="ST7789" scheme="https://zml3589110.github.io/tags/ST7789/"/>
    
  </entry>
  
  <entry>
    <title>KEIL下载完程序后自动启动</title>
    <link href="https://zml3589110.github.io/posts/4258229454.html"/>
    <id>https://zml3589110.github.io/posts/4258229454.html</id>
    <published>2022-12-30T08:45:20.000Z</published>
    <updated>2023-01-03T07:20:38.425Z</updated>
    
    <content type="html"><![CDATA[<h1 id="勾选自动运行选项"><a href="#勾选自动运行选项" class="headerlink" title="勾选自动运行选项"></a>勾选自动运行选项</h1><p>勾选-&gt; Flash Download -&gt; Reset and Run 选项</p><img src="https://img-blog.csdnimg.cn/4a6f3487c7ee4d068f3f702bcc746922.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55-z5aS054mb,size_20,color_FFFFFF,t_70,g_se,x_16"><h1 id="取消勾选pack功能"><a href="#取消勾选pack功能" class="headerlink" title="取消勾选pack功能"></a>取消勾选pack功能</h1><p>取消勾选-&gt; Pack -&gt; Enable</p><img src="https://img-blog.csdnimg.cn/b748d9e401594748b7e154942a21fa03.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA55-z5aS054mb,size_20,color_FFFFFF,t_70,g_se,x_16"><hr><blockquote><p><strong>说明：本文是收集参考网络文档，以方便查看（侵删）</strong></p></blockquote><hr><h1 id="信息链接"><a href="#信息链接" class="headerlink" title="信息链接:"></a>信息链接:</h1><ol><li><a href="https://blog.csdn.net/weixin_43869518/article/details/123950248">KEIL下载完程序,芯片程序自动重启必要的两个配置</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">KEIL下载完程序后自动启动,而不需要按复位按键</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="KEIL" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/KEIL/"/>
    
    
    <category term="KEIL5" scheme="https://zml3589110.github.io/tags/KEIL5/"/>
    
    <category term="下载程序" scheme="https://zml3589110.github.io/tags/%E4%B8%8B%E8%BD%BD%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>STM32系统学习(FreeRTOS)(一)之移植FreeRTOS</title>
    <link href="https://zml3589110.github.io/posts/789507877.html"/>
    <id>https://zml3589110.github.io/posts/789507877.html</id>
    <published>2022-12-24T03:34:20.000Z</published>
    <updated>2022-12-24T07:23:24.509Z</updated>
    
    <content type="html"><![CDATA[<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="下载FreeRTOS系统"><a href="#下载FreeRTOS系统" class="headerlink" title="下载FreeRTOS系统"></a>下载FreeRTOS系统</h2><p><strong>在移植之前，我们首先要获取到FreeRTOS的官方的源码包。这里我们提供两个下载链接:</strong></p><blockquote><p>一个是官网：<a href="http://www.freertos.org/">http://www.freertos.org/</a><br>另外一个是代码托管网站：<a href="https://sourceforge.net/projects/freertos/files/FreeRTOS/">https://sourceforge.net/projects/freertos/files/FreeRTOS/</a></p></blockquote><p>这里我们演示如何在代码托管网站里面下载。打开网站链接之后，我们选择FreeRTOS的最新版本V9.0.0（2016年），尽管现在FreeRTOS的版本已经更新到V10.0.1了，但是我们还是选择V9.0.0，因为内核很稳定，并且网上资料很多，因为V10.0.0版本之后是亚马逊收购了FreeRTOS之后才出来的版本，主要添加了一些云端组件，我们本书所讲的FreeRTOS是实时内核，采用V9.0.0版本足以。</p><p><strong>注：本次自己测试使用的是官网中下载最新版本 FreeRTOSv202112.00</strong></p><ul><li>打开官网后如图所示，并点击右上角绿色按钮</li></ul><img src="https://img-blog.csdnimg.cn/37daecc952f149d9a2c1dbd744307de9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATENJT1Q=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><ul><li>跳转到如下页面之后，点击下载即可</li></ul><img src="https://img-blog.csdnimg.cn/3b449f5cadbd4ea1a0857f1f14158a85.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATENJT1Q=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><ul><li>下载完成之后解压，如图所示</li></ul><img src="https://img-blog.csdnimg.cn/7c796a6edba64079867b0b65756494e3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATENJT1Q=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><h2 id="简单介绍FreeRTOS"><a href="#简单介绍FreeRTOS" class="headerlink" title="简单介绍FreeRTOS"></a>简单介绍FreeRTOS</h2><p>FreeRTOS包含Demo例程和内核源码（比较重要，我们就需要提取该目录下的大部分文件）。<br><strong>Source</strong>文件夹里面包含的是FreeRTOS内核的源代码，我们移植FreeRTOS的时候就需要这部分源代码；<br><strong>Demo</strong> 文件夹里面包含了FreeRTOS官方为各个单片机移植好的工程代码，FreeRTOS为了推广自己，会给各种半导体厂商的评估板写好完整的工程程序，这些程序就放在Demo这个目录下，这部分Demo非常有参考价值。</p><img src="https://img2018.cnblogs.com/blog/1834930/201910/1834930-20191015211446972-80282122.png"><h3 id="Source文件夹"><a href="#Source文件夹" class="headerlink" title="Source文件夹"></a>Source文件夹</h3><p>这里我们再重点分析下FreeRTOS&#x2F; Source文件夹下的文件，①和③包含的是FreeRTOS的通用的头文件和C文件，这两部分的文件试用于各种编译器和处理器，是通用的。需要移植的头文件和C文件放在②portblle这个文件夹。</p><img src="https://img2018.cnblogs.com/blog/1834930/201910/1834930-20191015211447309-2081394159.png"><p>portblle文件夹，是与编译器相关的文件夹，在不同的编译器中使用不同的支持文件。①中的KEIL就是我们就是我们使用的编译器，其实KEIL里面的内容跟RVDS里面的内容一样，所以我们只需要③RVDS文件夹里面的内容即可，里面包含了各种处理器相关的文件夹，从文件夹的名字我们就非常熟悉了，我们学习的STM32有M0、M3、M4等各种系列，FreeRTOS是一个软件，单片机是一个硬件，FreeRTOS要想运行在一个单片机上面，它们就必须关联在一起。MemMang文件夹下存放的是跟内存管理相关的源文件。</p><img src="https://img2018.cnblogs.com/blog/1834930/201910/1834930-20191015211447629-790327210.png"><h2 id="使用简单基本STM32工程"><a href="#使用简单基本STM32工程" class="headerlink" title="使用简单基本STM32工程"></a>使用简单基本STM32工程</h2><p>要移植 FreeRTOS，肯定需要一个基础工程，基础工程越简单越好，这里我使用的是STM32F103RET6的板子，例程则选择最基础的OLED实验来作为基础工程<br>复制 stm32f103vet6_OLED_I2C 到工程位置即可</p><h1 id="移植过程参考一（这个测试）"><a href="#移植过程参考一（这个测试）" class="headerlink" title="移植过程参考一（这个测试）"></a>移植过程参考一（这个测试）</h1><p><strong>注意：这个方法是跑不起来，进不去任务，是因为配置文件不对，在使用了后边方法修改的配置文件后才实现！</strong></p><h2 id="2-1、添加FreeRTOS-源码"><a href="#2-1、添加FreeRTOS-源码" class="headerlink" title="2.1、添加FreeRTOS 源码"></a>2.1、添加FreeRTOS 源码</h2><blockquote><p>在基础工程中新建一个名为 FreeRTOS 的文件夹，如图所示</p></blockquote><img src="https://img-blog.csdnimg.cn/5d186f8ba890426aa3d126d6e752991f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATENJT1Q=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><blockquote><p>创建 FreeRTOS 文件夹以后就可以将 FreeRTOS 的源码添加到这个文件夹中，打开刚刚下载的FreeRTOS源码，找到路径为：FreeRTOSv202111.00\FreeRTOS\Source下的文件</p></blockquote><img src="https://img-blog.csdnimg.cn/33f5aac8f52f40efba5a9c9b0ec4807a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATENJT1Q=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><blockquote><p>将所有.c文件以及include、portable两个文件夹复制到基础工程下刚刚创建的FreeRTOS 文件夹中，如下图所示：</p></blockquote><img src="https://img-blog.csdnimg.cn/b499afd4026f463a94a8640d09871203.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATENJT1Q=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><blockquote><p>复制完成之后打开portable文件夹，我们只需要留下 keil、MemMang 和 RVDS 这三个文件夹，其他的都可以删除掉，删除完成之后如下图所示</p></blockquote><img src="https://img-blog.csdnimg.cn/067b726c6c5f4d6db1a33f446bfc1747.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATENJT1Q=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><p>接着打开FreeRTOS源码，找到路径为：FreeRTOSv202111.00\FreeRTOS\Demo\CORTEX_STM32F103_Keil下的 FreeRTOSConfig.h文件，将其复制到基础工程路径为：实验1 LED灯闪烁\FreeRTOS\include下，如下图所示：</p><img src="https://img-blog.csdnimg.cn/fc7c96ad96464f3fa2516241289dcce3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATENJT1Q=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><img src="https://img-blog.csdnimg.cn/f0f9a9d1f6a14de790fb6b8ba20775dc.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATENJT1Q=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><h2 id="2-2、向工程分组中添加文件"><a href="#2-2、向工程分组中添加文件" class="headerlink" title="2.2、向工程分组中添加文件"></a>2.2、向工程分组中添加文件</h2><blockquote><p>打开基础工程，新建分组 FreeRTOS_CORE 和 FreeRTOS_PORTABLE</p></blockquote><img src="https://img-blog.csdnimg.cn/18107e3ad9974853b0cb99654185955e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATENJT1Q=,size_14,color_FFFFFF,t_70,g_se,x_16#pic_center"><blockquote><p>接着往这两个分组里添加文件，FreeRTOS_CORE 分组添加路径为：实验1 LED灯闪烁\FreeRTOS下的所有.c文件</p></blockquote><img src="https://img-blog.csdnimg.cn/448f6907d3dc443ca207cb9c4d1931d7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATENJT1Q=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><blockquote><p>FreeRTOS_PORTABLE分组添加路径为：实验1 LED灯闪烁\FreeRTOS\portable\MemMang下的heap_4.c文件以及路径为：实验1 LED灯闪烁\FreeRTOS\portable\RVDS\ARM_CM3下的port.c文件</p></blockquote><img src="https://img-blog.csdnimg.cn/34e33db805f14efdba88487386a1ad8e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATENJT1Q=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><img src="https://img-blog.csdnimg.cn/cfcf1479d17745c8913e27e76919656e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATENJT1Q=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><blockquote><p>添加完成如下图所示：</p></blockquote><img src="https://img-blog.csdnimg.cn/c45e060994a04201a11a12e624b0cabc.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATENJT1Q=,size_15,color_FFFFFF,t_70,g_se,x_16#pic_center"><h2 id="2-3、添加相对应的头文件路径"><a href="#2-3、添加相对应的头文件路径" class="headerlink" title="2.3、添加相对应的头文件路径"></a>2.3、添加相对应的头文件路径</h2><p>添加完 FreeRTOS 源码中的 C 文件以后还要添加 FreeRTOS 源码的头文件路径，头文件路径如下图所示：</p><img src="https://img-blog.csdnimg.cn/23ce9182d3c44acaacc0e11c5be9f2c3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATENJT1Q=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><h2 id="2-4、修改BasicSYSTEM文件"><a href="#2-4、修改BasicSYSTEM文件" class="headerlink" title="2.4、修改BasicSYSTEM文件"></a>2.4、修改BasicSYSTEM文件</h2><p>SYSTEM 文件夹里面的文件一开始是针对UCOS 而编写的，所以如果使用 FreeRTOS 的话 就需要做相应的修改。本来打算让 SYSTEM 文件夹也支持 FreeRTOS，但是这样的话会导致 SYSTEM 里面的文件太过于复杂，这样非常不利于初学者学习，所以这里就专门针对 FreeRTOS 修改了 SYSTEM 里面的文件。<br>1、修改 sys.h 文件 sys.h 文件修改很简单，在 sys.h 文件里面用宏 SYSTEM_SUPPORT_OS 来定义是否使用 OS， 我们使用了 FreeRTOS，所以应该将宏 SYSTEM_SUPPORT_OS 改为 1。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//0,不支持 os</span></span><br><span class="line"><span class="comment">//1,支持 os</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYSTEM_SUPPORT_OS1<span class="comment">//定义系统文件夹是否支持OS</span></span></span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/2fb4d647ecd94c3f8fb0b339020cd24e.png#pic_center"><p>2、修改 usart.c 文件 usart.c 文件修改也很简单，usart.c 文件有两部分要修改，一个是添加 FreeRTOS.h 头文件， 默认是添加的 UCOS 中的 includes.h 头文件，修改以后如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//0,不支持 os</span></span><br><span class="line"><span class="comment">//1,支持 os</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYSTEM_SUPPORT_OS1<span class="comment">//定义系统文件夹是否支持OS</span></span></span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/079ee3e4955f43888d021f924256b189.png#pic_center"><p>另外一个就是 USART1 的中断服务函数，在使用 UCOS 的时候进出中断的时候需要添加 OSIntEnter()和 OSIntExit()，使用 FreeRTOS 的话就不需要了，所以将这两行代码删除掉，修改以后如下：<br><strong>维持了原有，因为用不到</strong></p><img src="https://img-blog.csdnimg.cn/112ca3e502bd4d1281239855730e5d14.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATENJT1Q=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><p>3、修改 delay.c 文件 delay.c 文件修改的就比较大了，因为涉及到 FreeRTOS 的系统时钟，delay.c 文件里面有 4 个函数，先来看一下函数 SysTick_Handler()，此函数是滴答定时器的中断服务函数，代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果使用 os,则包括下面的头文件即可.</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> SYSTEM_SUPPORT_OS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;FreeRTOS.h&quot;</span><span class="comment">// os 使用  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;task.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;event_groups.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">xPortSysTickHandler</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="comment">//systick 中断服务函数,使用 os 时用到</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SysTick_Handler</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line"><span class="keyword">if</span>(xTaskGetSchedulerState()!=taskSCHEDULER_NOT_STARTED)<span class="comment">//系统已经运行</span></span><br><span class="line">&#123;</span><br><span class="line">xPortSysTickHandler();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/f2a3b89968624129bfddff8749426522.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATENJT1Q=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><p>FreeRTOS 的心跳就是由滴答定时器产生的，根据 FreeRTOS 的系统时钟节拍设置好滴答定 时器的周期，这样就会周期触发滴答定时器中断了。在滴答定时器中断服务函数中调用 FreeRTOS 的API函数 xPortSysTickHandler()。 delay_init()是用来初始化滴答定时器和延时函数，代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化延迟函数 </span></span><br><span class="line"><span class="comment">//SYSTICK 的时钟固定为 AHB 时钟,基础例程里面 SYSTICK 的时钟固定为HCLK时钟的1/8</span></span><br><span class="line"><span class="comment">//这里为了兼容FreeTROS，所以将 SYSTICK 的时钟频率改为 AHB 的频率</span></span><br><span class="line"><span class="comment">//SYSCLK:系统时钟频率</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay_init</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u32 reload;</span><br><span class="line">SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK);<span class="comment">//选择外部时钟  HCLK</span></span><br><span class="line">fac_us=SystemCoreClock/<span class="number">1000000</span>;<span class="comment">//不论是否使用 OS,fac_us 都需要使用</span></span><br><span class="line">reload=SystemCoreClock/<span class="number">1000000</span>;<span class="comment">//每秒钟的计数次数 单位为 M</span></span><br><span class="line">reload*=<span class="number">1000000</span>/configTICK_RATE_HZ;<span class="comment">//根据 configTICK_BATE_HZ 设定溢出时间</span></span><br><span class="line"><span class="comment">//时间 reload 为 24 位寄存器,最大值:</span></span><br><span class="line"><span class="comment">//16777216,在 72M 下,约合 0.233s 左右</span></span><br><span class="line">fac_ms=<span class="number">1000</span>/configTICK_RATE_HZ;<span class="comment">//代表 os 可以延时的最少单位 </span></span><br><span class="line">SysTick-&gt;CTRL|=SysTick_CTRL_TICKINT_Msk;   <span class="comment">//开启SYSTICK中断</span></span><br><span class="line">SysTick-&gt;LOAD=reload; <span class="comment">//每1/configTICK_BATE_HZ 秒中断一次</span></span><br><span class="line">SysTick-&gt;CTRL|=SysTick_CTRL_ENABLE_Msk;   <span class="comment">//开启SYSTICK</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/4e503df80ec74cc186a99723eb473e22.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATENJT1Q=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><p>前面我们说了 FreeRTOS 的系统时钟是由滴答定时器提供的，那么肯定要根据 FreeRTOS 的 系统时钟节拍来初始化滴答定时器了，delay_init()就是来完成这个功能的。FreeRTOS 的系统时 钟节拍由宏 configTICK_RATE_HZ 来设置，这个值我们可以自由设置，但是一旦设置好以后我 们就要根据这个值来初始化滴答定时器，其实就是设置滴答定时器的中断周期。在基础例程中 滴答定时器的时钟频率设置的是 AHB 的 1&#x2F;8，这里为了兼容 FreeRTOS 将滴答定时器的时钟频 率改为了 AHB，也就是 72MHz！这一点一定要注意！ 接下来的三个函数都是延时的，代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//延时 nus</span></span><br><span class="line"><span class="comment">//nus:为要延时的 us 数.</span></span><br><span class="line"><span class="comment">//nus:0~204522252(最大值即 2^32/fac_us@fac_us=168)       </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay_us</span><span class="params">(u32 nus)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u32 ticks;</span><br><span class="line">u32 told,tnow,tcnt=<span class="number">0</span>;</span><br><span class="line">u32 reload=SysTick-&gt;LOAD;<span class="comment">//LOAD的值     </span></span><br><span class="line">ticks=nus*fac_us; <span class="comment">//需要的节拍数   </span></span><br><span class="line"><span class="comment">//tcnt=0;</span></span><br><span class="line">told=SysTick-&gt;VAL;        <span class="comment">//刚进入时的计数器值</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">tnow=SysTick-&gt;VAL;</span><br><span class="line"><span class="keyword">if</span>(tnow!=told)</span><br><span class="line">&#123;    </span><br><span class="line"><span class="comment">//这里注意一下 SYSTICK 是一个递减的计数器就可以了.</span></span><br><span class="line"><span class="keyword">if</span>(tnow&lt;told)tcnt+=told-tnow;</span><br><span class="line"><span class="keyword">else</span> tcnt+=reload-tnow+told;    </span><br><span class="line">told=tnow;</span><br><span class="line"><span class="keyword">if</span>(tcnt&gt;=ticks)<span class="keyword">break</span>;<span class="comment">//时间超过/等于要延迟的时间,则退出.</span></span><br><span class="line">&#125;  </span><br><span class="line">&#125;;     </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//延时 nms,会引起任务调度</span></span><br><span class="line"><span class="comment">//nms:要延时的 ms 数</span></span><br><span class="line"><span class="comment">//nms:0~65535</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay_ms</span><span class="params">(u16 nms)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(xTaskGetSchedulerState()!=taskSCHEDULER_NOT_STARTED)<span class="comment">//系统已经运行</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(nms&gt;=fac_ms)<span class="comment">//延时的时间大于 os 的最少时间周期 </span></span><br><span class="line">&#123;</span><br><span class="line">   vTaskDelay(nms/fac_ms);<span class="comment">//FreeRTOS 延时</span></span><br><span class="line">&#125;</span><br><span class="line">nms%=fac_ms;<span class="comment">//os 已经无法提供这么小的延时了,</span></span><br><span class="line"><span class="comment">//采用普通方式延时    </span></span><br><span class="line">&#125;</span><br><span class="line">delay_us((u32)(nms*<span class="number">1000</span>));<span class="comment">//普通方式延时,此时ucos无法启动调度.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//延时 nms,不会引起任务调度</span></span><br><span class="line"><span class="comment">//nms:要延时的 ms 数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay_xms</span><span class="params">(u32 nms)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u32 i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;nms;i++) delay_us(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/d3908341b407477eac243c8f2266f519.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATENJT1Q=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><img src="https://img-blog.csdnimg.cn/911fd424dd274d3eaf01f16ba761cdcb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATENJT1Q=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><p>delay_us()是 us 级延时函数，delay_ms 和 delay_xms()都是 ms 级的延时函数，delay_us()和 delay_xms()不会导致任务切换。delay_ms()其实就是对 FreeRTOS 中的延时函数 vTaskDelay()的 简单封装，所以在使用 delay_ms()的时候就会导致任务切换。 delay.c 修改完成以后编译一下，会提示如下图所示错误：</p><img src="https://img-blog.csdnimg.cn/424e3d3cb7234e7595483017c5b93bf2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATENJT1Q=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><p>上图的错误提示表示在 port.c、delay.c 和 stm32f10x_it.c 中三个重复定义的函数： SysTick_Handler()、SVC_Handler()和 PendSV_Handler()，这三个函数分别为滴答定时器中断服 务函数、SVC 中断服务函数和 PendSV 中断服务函数，将 stm32f10x_it.c 中的三个函数屏蔽掉， 如下图所示：</p><img src="https://img-blog.csdnimg.cn/d4546dc73c0041749a6e194ec053c825.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATENJT1Q=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><p>再次编译代码，应该没有错误了，如果还是错误的话自行根据错误类型修改！至此，SYSTEM 文件夹就修改完成了，接下来我们进行跑马灯测试，测试代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;sys.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;usart.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;oled_bmp.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;oled_font.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;oled.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;led.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;FreeRTOS.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;task.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//任务优先级</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> START_TASK_PRIO1</span></span><br><span class="line"><span class="comment">//任务堆栈大小</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>START_STK_SIZE128</span></span><br><span class="line"><span class="comment">//任务句柄</span></span><br><span class="line">TaskHandle_t StartTask_Handler;</span><br><span class="line"><span class="comment">//任务函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">start_task</span><span class="params">(<span class="keyword">void</span> *pvParameters)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//任务优先级</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LED0_TASK_PRIO2</span></span><br><span class="line"><span class="comment">//任务堆栈大小</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>LED0_STK_SIZE50</span></span><br><span class="line"><span class="comment">//任务句柄</span></span><br><span class="line">TaskHandle_t LED0Task_Handler;</span><br><span class="line"><span class="comment">//任务函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">led0_task</span><span class="params">(<span class="keyword">void</span> *pvParameters)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//任务优先级</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LED1_TASK_PRIO3</span></span><br><span class="line"><span class="comment">//任务堆栈大小</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>LED1_STK_SIZE50</span></span><br><span class="line"><span class="comment">//任务句柄</span></span><br><span class="line">TaskHandle_t LED1Task_Handler;</span><br><span class="line"><span class="comment">//任务函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">led1_task</span><span class="params">(<span class="keyword">void</span> *pvParameters)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">////delay_init();</span></span><br><span class="line"><span class="comment">//OLED_Init();</span></span><br><span class="line"><span class="comment">////</span></span><br><span class="line"><span class="comment">////OLED_ShowString(0,0,&quot;ABCDEFG&quot;,8);</span></span><br><span class="line"><span class="comment">////OLED_ShowString(0,1,&quot;ABCDEFG&quot;,8);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//OLED_ShowString(0,0,&quot;ABCDEFG&quot;,16);</span></span><br><span class="line"><span class="comment">//OLED_ShowString(0,2,&quot;这一切足够了&quot;,16);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//OLED_Draw12864BMP(BMP1);</span></span><br><span class="line"><span class="comment">//while(1)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);<span class="comment">//设置系统中断优先级分组4</span></span><br><span class="line">delay_init();<span class="comment">//延时函数初始化</span></span><br><span class="line"><span class="comment">//uart_init(115200);//初始化串口</span></span><br><span class="line">LED_Init();</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建开始任务</span></span><br><span class="line">xTaskCreate((TaskFunction_t )start_task,<span class="comment">//任务函数</span></span><br><span class="line"> (<span class="keyword">const</span> <span class="keyword">char</span>*    )<span class="string">&quot;start_task&quot;</span>,<span class="comment">//任务名称</span></span><br><span class="line"> (<span class="keyword">uint16_t</span> )START_STK_SIZE,<span class="comment">//任务堆栈大小</span></span><br><span class="line"> (<span class="keyword">void</span>* )<span class="literal">NULL</span>,<span class="comment">//传递给任务函数的参数</span></span><br><span class="line"> (UBaseType_t )START_TASK_PRIO,<span class="comment">//任务优先级</span></span><br><span class="line"> (TaskHandle_t* )&amp;StartTask_Handler);<span class="comment">//任务句柄</span></span><br><span class="line">vTaskStartScheduler();<span class="comment">//开启任务调度</span></span><br><span class="line"><span class="comment">//while(1);</span></span><br><span class="line"><span class="comment">//LED_Init();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//开始任务任务函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">start_task</span><span class="params">(<span class="keyword">void</span> *pvParameters)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">taskENTER_CRITICAL();<span class="comment">//进入临界区</span></span><br><span class="line"><span class="comment">//创建LED0任务</span></span><br><span class="line">xTaskCreate((TaskFunction_t )led0_task,<span class="comment">//任务函数</span></span><br><span class="line"> (<span class="keyword">const</span> <span class="keyword">char</span>*    )<span class="string">&quot;led0_task&quot;</span>,<span class="comment">//任务名称</span></span><br><span class="line"> (<span class="keyword">uint16_t</span> )LED0_STK_SIZE,<span class="comment">//任务堆栈大小</span></span><br><span class="line"> (<span class="keyword">void</span>* )<span class="literal">NULL</span>,<span class="comment">//传递给任务函数的参数</span></span><br><span class="line"> (UBaseType_t )LED0_TASK_PRIO,<span class="comment">//任务优先级</span></span><br><span class="line"> (TaskHandle_t* )&amp;LED0Task_Handler);<span class="comment">//任务句柄</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//创建LED0任务</span></span><br><span class="line">xTaskCreate((TaskFunction_t )led1_task,<span class="comment">//任务函数</span></span><br><span class="line"> (<span class="keyword">const</span> <span class="keyword">char</span>*    )<span class="string">&quot;led1_task&quot;</span>,<span class="comment">//任务名称</span></span><br><span class="line"> (<span class="keyword">uint16_t</span> )LED1_STK_SIZE,<span class="comment">//任务堆栈大小</span></span><br><span class="line"> (<span class="keyword">void</span>* )<span class="literal">NULL</span>,<span class="comment">//传递给任务函数的参数</span></span><br><span class="line"> (UBaseType_t )LED1_TASK_PRIO,<span class="comment">//任务优先级</span></span><br><span class="line"> (TaskHandle_t* )&amp;LED1Task_Handler);<span class="comment">//任务句柄 </span></span><br><span class="line">vTaskDelete(StartTask_Handler);<span class="comment">//删除开始任务 </span></span><br><span class="line">taskEXIT_CRITICAL();<span class="comment">//退出临界区 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//LED0任务函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">led0_task</span><span class="params">(<span class="keyword">void</span> *pvParameters)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vTaskDelay(<span class="number">800</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">LED0=~LED0;</span><br><span class="line"><span class="comment">//GPIO_SetBits(GPIOA,GPIO_Pin_8);</span></span><br><span class="line">vTaskDelay(<span class="number">500</span>);</span><br><span class="line"><span class="comment">//GPIO_ResetBits(GPIOA,GPIO_Pin_8);</span></span><br><span class="line"><span class="comment">//vTaskDelay(500);</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//LED1任务函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">led1_task</span><span class="params">(<span class="keyword">void</span> *pvParameters)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vTaskDelay(<span class="number">800</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">LED1=<span class="number">0</span>;</span><br><span class="line">vTaskDelay(<span class="number">200</span>);</span><br><span class="line">LED1=<span class="number">1</span>;</span><br><span class="line">vTaskDelay(<span class="number">800</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/9fcc5d34a30f45f387cf03510600c9d8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATENJT1Q=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><p>测试代码中创建了 3 个任务：LED0 测试任务、LED1 测试任务和浮点测试任务，它们的任务函数分别为：led0_task()、led1_task()。led0_task()和 led1_task()任务很简单，就是让 LED0 和 LED1 周期性闪烁<br>编译并下载代码到 STM32F103VET6 开发板中，下载进去以后会看到 LED0 和 LED1 开始闪烁， LED0 均匀闪烁，那是因为我们在 LED0 的任务代码中设置好的 LED0 亮 500ms，灭 500ms。 LED1 亮的时间短，灭的时间长，这是因为在 LED1 的任务代码中设置好的亮 200ms，灭 800ms。</p><h2 id="设置配置文件"><a href="#设置配置文件" class="headerlink" title="设置配置文件"></a>设置配置文件</h2><blockquote><p>到这里还是没能跑起来，还需要参考后边设置的 FreeRTOSConfig.h 后才能工作</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * FreeRTOS V202112.00</span></span><br><span class="line"><span class="comment"> * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy of</span></span><br><span class="line"><span class="comment"> * this software and associated documentation files (the &quot;Software&quot;), to deal in</span></span><br><span class="line"><span class="comment"> * the Software without restriction, including without limitation the rights to</span></span><br><span class="line"><span class="comment"> * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of</span></span><br><span class="line"><span class="comment"> * the Software, and to permit persons to whom the Software is furnished to do so,</span></span><br><span class="line"><span class="comment"> * subject to the following conditions:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></span><br><span class="line"><span class="comment"> * copies or substantial portions of the Software.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></span><br><span class="line"><span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS</span></span><br><span class="line"><span class="comment"> * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR</span></span><br><span class="line"><span class="comment"> * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER</span></span><br><span class="line"><span class="comment"> * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN</span></span><br><span class="line"><span class="comment"> * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * http://www.FreeRTOS.org</span></span><br><span class="line"><span class="comment"> * http://aws.amazon.com/freertos</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1 tab == 4 spaces!</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> FREERTOS_CONFIG_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FREERTOS_CONFIG_H</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*-----------------------------------------------------------</span></span><br><span class="line"><span class="comment"> * Application specific definitions.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * These definitions should be adjusted for your particular hardware and</span></span><br><span class="line"><span class="comment"> * application requirements.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * THESE PARAMETERS ARE DESCRIBED WITHIN THE &#x27;CONFIGURATION&#x27; SECTION OF THE</span></span><br><span class="line"><span class="comment"> * FreeRTOS API DOCUMENTATION AVAILABLE ON THE FreeRTOS.org WEB SITE. </span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * See http://www.freertos.org/a00110.html</span></span><br><span class="line"><span class="comment"> *----------------------------------------------------------*/</span></span><br><span class="line"><span class="comment">/************************************************************************</span></span><br><span class="line"><span class="comment"> *               FreeRTOS基础配置配置选项 </span></span><br><span class="line"><span class="comment"> *********************************************************************/</span></span><br><span class="line"><span class="comment">/* 置1：RTOS使用抢占式调度器；置0：RTOS使用协作式调度器（时间片）</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 注：在多任务管理机制上，操作系统可以分为抢占式和协作式两种。</span></span><br><span class="line"><span class="comment"> * 协作式操作系统是任务主动释放CPU后，切换到下一个任务。</span></span><br><span class="line"><span class="comment"> * 任务切换的时机完全取决于正在运行的任务。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_PREEMPTION1</span></span><br><span class="line"><span class="comment">//1使能时间片调度(默认式使能的)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_TIME_SLICING1</span></span><br><span class="line"><span class="comment">/* 某些运行FreeRTOS的硬件有两种方法选择下一个要执行的任务：</span></span><br><span class="line"><span class="comment"> * 通用方法和特定于硬件的方法（以下简称“特殊方法”）。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 通用方法：</span></span><br><span class="line"><span class="comment"> *      1.configUSE_PORT_OPTIMISED_TASK_SELECTION 为 0 或者硬件不支持这种特殊方法。</span></span><br><span class="line"><span class="comment"> *      2.可以用于所有FreeRTOS支持的硬件</span></span><br><span class="line"><span class="comment"> *      3.完全用C实现，效率略低于特殊方法。</span></span><br><span class="line"><span class="comment"> *      4.不强制要求限制最大可用优先级数目</span></span><br><span class="line"><span class="comment"> * 特殊方法：</span></span><br><span class="line"><span class="comment"> *      1.必须将configUSE_PORT_OPTIMISED_TASK_SELECTION设置为1。</span></span><br><span class="line"><span class="comment"> *      2.依赖一个或多个特定架构的汇编指令（一般是类似计算前导零[CLZ]指令）。</span></span><br><span class="line"><span class="comment"> *      3.比通用方法更高效</span></span><br><span class="line"><span class="comment"> *      4.一般强制限定最大可用优先级数目为32</span></span><br><span class="line"><span class="comment"> * 一般是硬件计算前导零指令，如果所使用的，MCU没有这些硬件指令的话此宏应该设置为0！</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_PORT_OPTIMISED_TASK_SELECTION        1    </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">/* 置1：使能低功耗tickless模式；置0：保持系统节拍（tick）中断一直运行</span></span><br><span class="line"><span class="comment"> * 假设开启低功耗的话可能会导致下载出现问题，因为程序在睡眠中,可用以下办法解决</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 下载方法：</span></span><br><span class="line"><span class="comment"> *      1.将开发版正常连接好</span></span><br><span class="line"><span class="comment"> *      2.按住复位按键，点击下载瞬间松开复位按键</span></span><br><span class="line"><span class="comment"> *     </span></span><br><span class="line"><span class="comment"> *      1.通过跳线帽将 BOOT 0 接高电平(3.3V)</span></span><br><span class="line"><span class="comment"> *      2.重新上电，下载</span></span><br><span class="line"><span class="comment"> *    </span></span><br><span class="line"><span class="comment"> * 1.使用FlyMcu擦除一下芯片，然后进行下载</span></span><br><span class="line"><span class="comment"> *STMISP -&gt; 清除芯片(z)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_TICKLESS_IDLE0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 写入实际的CPU内核时钟频率，也就是CPU指令执行频率，通常称为Fclk</span></span><br><span class="line"><span class="comment"> * Fclk为供给CPU内核的时钟信号，我们所说的cpu主频为 XX MHz，</span></span><br><span class="line"><span class="comment"> * 就是指的这个时钟信号，相应的，1/Fclk即为cpu时钟周期；</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configCPU_CLOCK_HZ  (SystemCoreClock)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//RTOS系统节拍中断的频率。即一秒中断的次数，每次中断RTOS都会进行任务调度</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configTICK_RATE_HZ  (( TickType_t )1000)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//可使用的最大优先级</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configMAX_PRIORITIES  (32)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//空闲任务使用的堆栈大小</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configMINIMAL_STACK_SIZE((unsigned short)128)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//任务名字字符串长度</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configMAX_TASK_NAME_LEN(16)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//系统节拍计数器变量数据类型，1表示为16位无符号整形，0表示为32位无符号整形</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_16_BIT_TICKS0   </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//空闲任务放弃CPU使用权给其他同优先级的用户任务</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configIDLE_SHOULD_YIELD1  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//启用队列</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_QUEUE_SETS  1    </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//开启任务通知功能，默认开启</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_TASK_NOTIFICATIONS    1   </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用互斥信号量</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_MUTEXES    1   </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用递归互斥信号量                                            </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_RECURSIVE_MUTEXES1  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//为1时使用计数信号量</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_COUNTING_SEMAPHORES1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设置可以注册的信号量和消息队列个数 */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configQUEUE_REGISTRY_SIZE10     </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_APPLICATION_TASK_TAG  0        </span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*****************************************************************</span></span><br><span class="line"><span class="comment">              FreeRTOS与内存申请有关配置选项                                               </span></span><br><span class="line"><span class="comment">*****************************************************************/</span></span><br><span class="line"><span class="comment">//支持动态内存申请</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configSUPPORT_DYNAMIC_ALLOCATION        1    </span></span><br><span class="line"><span class="comment">//支持静态内存</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configSUPPORT_STATIC_ALLOCATION0</span></span><br><span class="line"><span class="comment">//系统所有总的堆大小</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configTOTAL_HEAP_SIZE((size_t)(36*1024))    </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/***************************************************************</span></span><br><span class="line"><span class="comment">             FreeRTOS与钩子函数有关的配置选项                                            </span></span><br><span class="line"><span class="comment">**************************************************************/</span></span><br><span class="line"><span class="comment">/* 置1：使用空闲钩子（Idle Hook类似于回调函数）；置0：忽略空闲钩子</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 空闲任务钩子是一个函数，这个函数由用户来实现，</span></span><br><span class="line"><span class="comment"> * FreeRTOS规定了函数的名字和参数：void vApplicationIdleHook(void )，</span></span><br><span class="line"><span class="comment"> * 这个函数在每个空闲任务周期都会被调用</span></span><br><span class="line"><span class="comment"> * 对于已经删除的RTOS任务，空闲任务可以释放分配给它们的堆栈内存。</span></span><br><span class="line"><span class="comment"> * 因此必须保证空闲任务可以被CPU执行</span></span><br><span class="line"><span class="comment"> * 使用空闲钩子函数设置CPU进入省电模式是很常见的</span></span><br><span class="line"><span class="comment"> * 不可以调用会引起空闲任务阻塞的API函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_IDLE_HOOK0      </span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 置1：使用时间片钩子（Tick Hook）；置0：忽略时间片钩子</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 时间片钩子是一个函数，这个函数由用户来实现，</span></span><br><span class="line"><span class="comment"> * FreeRTOS规定了函数的名字和参数：void vApplicationTickHook(void )</span></span><br><span class="line"><span class="comment"> * 时间片中断可以周期性的调用</span></span><br><span class="line"><span class="comment"> * 函数必须非常短小，不能大量使用堆栈，</span></span><br><span class="line"><span class="comment"> * 不能调用以”FromISR&quot; 或 &quot;FROM_ISR”结尾的API函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="comment">/*xTaskIncrementTick函数是在xPortSysTickHandler中断函数中被调用的。因此，vApplicationTickHook()函数执行的时间必须很短才行*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_TICK_HOOK0           </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用内存申请失败钩子函数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_MALLOC_FAILED_HOOK0 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 大于0时启用堆栈溢出检测功能，如果使用此功能 </span></span><br><span class="line"><span class="comment"> * 用户必须提供一个栈溢出钩子函数，如果使用的话</span></span><br><span class="line"><span class="comment"> * 此值可以为1或者2，因为有两种栈溢出检测方法 */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configCHECK_FOR_STACK_OVERFLOW0   </span></span><br><span class="line"></span><br><span class="line"><span class="comment">/********************************************************************</span></span><br><span class="line"><span class="comment">          FreeRTOS与运行时间和任务状态收集有关的配置选项   </span></span><br><span class="line"><span class="comment">**********************************************************************/</span></span><br><span class="line"><span class="comment">//启用运行时间统计功能</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configGENERATE_RUN_TIME_STATS        0             </span></span><br><span class="line"><span class="comment">//启用可视化跟踪调试</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_TRACE_FACILITY      0    </span></span><br><span class="line"><span class="comment">/* 与宏configUSE_TRACE_FACILITY同时为1时会编译下面3个函数</span></span><br><span class="line"><span class="comment"> * prvWriteNameToBuffer()</span></span><br><span class="line"><span class="comment"> * vTaskList(),</span></span><br><span class="line"><span class="comment"> * vTaskGetRunTimeStats()</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_STATS_FORMATTING_FUNCTIONS1        </span></span><br><span class="line"></span><br><span class="line"><span class="comment">/********************************************************************</span></span><br><span class="line"><span class="comment">                FreeRTOS与协程有关的配置选项                                                </span></span><br><span class="line"><span class="comment">*********************************************************************/</span></span><br><span class="line"><span class="comment">//启用协程，启用协程以后必须添加文件croutine.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_CO_ROUTINES           0                 </span></span><br><span class="line"><span class="comment">//协程的有效优先级数目</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configMAX_CO_ROUTINE_PRIORITIES       ( 2 )       </span></span><br><span class="line"></span><br><span class="line"><span class="comment">/***********************************************************************</span></span><br><span class="line"><span class="comment">                FreeRTOS与软件定时器有关的配置选项      </span></span><br><span class="line"><span class="comment">**********************************************************************/</span></span><br><span class="line"> <span class="comment">//启用软件定时器</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_TIMERS            1                              </span></span><br><span class="line"><span class="comment">//软件定时器优先级</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configTIMER_TASK_PRIORITY        (configMAX_PRIORITIES-1)        </span></span><br><span class="line"><span class="comment">//软件定时器队列长度</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configTIMER_QUEUE_LENGTH        10                               </span></span><br><span class="line"><span class="comment">//软件定时器任务堆栈大小</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configTIMER_TASK_STACK_DEPTH      (configMINIMAL_STACK_SIZE*2)    </span></span><br><span class="line"></span><br><span class="line"><span class="comment">/************************************************************</span></span><br><span class="line"><span class="comment">            FreeRTOS可选函数配置选项                                                     </span></span><br><span class="line"><span class="comment">************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INCLUDE_xTaskGetSchedulerState       1                       </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INCLUDE_vTaskPrioritySet         1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INCLUDE_uxTaskPriorityGet         1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INCLUDE_vTaskDelete           1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INCLUDE_vTaskCleanUpResources       1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INCLUDE_vTaskSuspend           1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INCLUDE_vTaskDelayUntil         1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INCLUDE_vTaskDelay           1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INCLUDE_eTaskGetState           1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INCLUDE_xTimerPendFunctionCall     1</span></span><br><span class="line"><span class="comment">//#define INCLUDE_xTaskGetCurrentTaskHandle       1</span></span><br><span class="line"><span class="comment">//#define INCLUDE_uxTaskGetStackHighWaterMark     0</span></span><br><span class="line"><span class="comment">//#define INCLUDE_xTaskGetIdleTaskHandle          0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************************************</span></span><br><span class="line"><span class="comment">            FreeRTOS与中断有关的配置选项                                                 </span></span><br><span class="line"><span class="comment">******************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __NVIC_PRIO_BITS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configPRIO_BITS       __NVIC_PRIO_BITS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configPRIO_BITS       4                  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="comment">//中断最低优先级</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configLIBRARY_LOWEST_INTERRUPT_PRIORITY15     </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//系统可管理的最高中断优先级</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY5 </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configKERNEL_INTERRUPT_PRIORITY ( configLIBRARY_LOWEST_INTERRUPT_PRIORITY &lt;&lt; (8 - configPRIO_BITS) )<span class="comment">/* 240 */</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configMAX_SYSCALL_INTERRUPT_PRIORITY ( configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY &lt;&lt; (8 - configPRIO_BITS) )</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/****************************************************************</span></span><br><span class="line"><span class="comment">            FreeRTOS与中断服务函数有关的配置选项                         </span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> xPortPendSVHandler PendSV_Handler</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vPortSVCHandler SVC_Handler</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 以下为使用Percepio Tracealyzer需要的东西，不需要时将 configUSE_TRACE_FACILITY 定义为 0 */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> ( configUSE_TRACE_FACILITY == 1 )</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;trcRecorder.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INCLUDE_xTaskGetCurrentTaskHandle               1   <span class="comment">// 启用一个可选函数（该函数被 Trace源码使用，默认该值为0 表示不用）</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//#define configUSE_IDLE_HOOK0</span></span><br><span class="line"><span class="comment">//#define configUSE_TICK_HOOK0</span></span><br><span class="line"><span class="comment">//#define configCPU_CLOCK_HZ( ( unsigned long ) 72000000 )</span></span><br><span class="line"><span class="comment">//#define configTICK_RATE_HZ( ( TickType_t ) 1000 )</span></span><br><span class="line"><span class="comment">//#define configMAX_PRIORITIES( 5 )</span></span><br><span class="line"><span class="comment">//#define configMINIMAL_STACK_SIZE( ( unsigned short ) 128 )</span></span><br><span class="line"><span class="comment">//#define configTOTAL_HEAP_SIZE( ( size_t ) ( 17 * 1024 ) )</span></span><br><span class="line"><span class="comment">//#define configMAX_TASK_NAME_LEN( 16 )</span></span><br><span class="line"><span class="comment">//#define configUSE_TRACE_FACILITY0</span></span><br><span class="line"><span class="comment">//#define configUSE_16_BIT_TICKS0</span></span><br><span class="line"><span class="comment">//#define configIDLE_SHOULD_YIELD1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Co-routine definitions. */</span></span><br><span class="line"><span class="comment">//#define configUSE_CO_ROUTINES 0</span></span><br><span class="line"><span class="comment">//#define configMAX_CO_ROUTINE_PRIORITIES ( 2 )</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Set the following definitions to 1 to include the API function, or zero</span></span><br><span class="line"><span class="comment">to exclude the API function. */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#define INCLUDE_vTaskPrioritySet1</span></span><br><span class="line"><span class="comment">//#define INCLUDE_uxTaskPriorityGet1</span></span><br><span class="line"><span class="comment">//#define INCLUDE_vTaskDelete1</span></span><br><span class="line"><span class="comment">//#define INCLUDE_vTaskCleanUpResources0</span></span><br><span class="line"><span class="comment">//#define INCLUDE_vTaskSuspend1</span></span><br><span class="line"><span class="comment">//#define INCLUDE_vTaskDelayUntil1</span></span><br><span class="line"><span class="comment">//#define INCLUDE_vTaskDelay1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#define INCLUDE_xTaskGetSchedulerState1</span></span><br><span class="line"><span class="comment">//#define INCLUDE_xTaskGetCurrentTaskHandle1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* This is the raw value as per the Cortex-M3 NVIC.  Values can be 255</span></span><br><span class="line"><span class="comment">(lowest) to 0 (1?) (highest). */</span></span><br><span class="line"><span class="comment">//#define configKERNEL_INTERRUPT_PRIORITY 255</span></span><br><span class="line"><span class="comment">/* !!!! configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to zero !!!!</span></span><br><span class="line"><span class="comment">See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html. */</span></span><br><span class="line"><span class="comment">//#define configMAX_SYSCALL_INTERRUPT_PRIORITY 191 /* equivalent to 0xb0, or priority 11. */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* This is the value being used as per the ST library which permits 16</span></span><br><span class="line"><span class="comment">priority values, 0 to 15.  This must correspond to the</span></span><br><span class="line"><span class="comment">configKERNEL_INTERRUPT_PRIORITY setting.  Here 15 corresponds to the lowest</span></span><br><span class="line"><span class="comment">NVIC value of 255. */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configLIBRARY_KERNEL_INTERRUPT_PRIORITY15</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* FREERTOS_CONFIG_H */</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="移植过程参考二（超详细说明）"><a href="#移植过程参考二（超详细说明）" class="headerlink" title="移植过程参考二（超详细说明）"></a>移植过程参考二（超详细说明）</h1><h2 id="提取源码"><a href="#提取源码" class="headerlink" title="提取源码"></a>提取源码</h2><ol><li>首先在我们的STM32裸机工程模板根目录下新建一个文件夹，命名为“FreeRTOS”，并且在FreeRTOS文件夹下新建两个空文件夹，分别命名为“src”与“port”，src文件夹用于保存FreeRTOS中的核心源文件，也就是我们常说的‘.c文件’，port文件夹用于保存内存管理以及处理器架构相关代码，这些代码FreeRTOS官方已经提供给我们的，直接使用即可，在前面已经说了，FreeRTOS是软件，我们的开发版是硬件，软硬件必须有桥梁来连接，这些与处理器架构相关的代码，可以称之为RTOS硬件接口层，它们位于FreeRTOS&#x2F;Source&#x2F;Portable文件夹下。</li><li>打开FreeRTOS V9.0.0源码，在“FreeRTOSv9.0.0\FreeRTOS\Source”目录下找到所有的‘.c文件’，将它们拷贝到我们新建的src文件夹中，</li></ol><p><img src="https://img2018.cnblogs.com/blog/1834930/201910/1834930-20191015211447870-1007359084.png" alt="在这里插入图片描述"></p><ol><li>打开FreeRTOS V9.0.0源码，在“FreeRTOSv9.0.0\FreeRTOS\Source\portable”目录下找到“MemMang”文件夹与“RVDS”文件夹，将它们拷贝到我们新建的port文件夹中</li></ol><p><img src="https://img2018.cnblogs.com/blog/1834930/201910/1834930-20191015211448127-1332532196.png" alt="在这里插入图片描述"></p><ol><li>打开FreeRTOS V9.0.0源码，在“FreeRTOSv9.0.0\ FreeRTOS\Source”目录下找到“include”文件夹，它是我们需要用到FreeRTOS的一些头文件，将它直接拷贝到我们新建的FreeRTOS文件夹中，完成这一步之后就可以看到我们新建的FreeRTOS文件夹已经有3个文件夹，这3个文件夹就包含FreeRTOS的核心文件，至此，FreeRTOS的源码就提取完成。</li></ol><p><img src="https://img2018.cnblogs.com/blog/1834930/201910/1834930-20191015211448601-1848993234.png" alt="在这里插入图片描述"></p><h2 id="添加到工程"><a href="#添加到工程" class="headerlink" title="添加到工程"></a>添加到工程</h2><p><strong>添加FreeRTOSConfig.h文件</strong><br>FreeRTOSConfig.h文件是FreeRTOS的工程配置文件，因为FreeRTOS是可以裁剪的实时操作内核，应用于不同的处理器平台，用户可以通过修改这个FreeRTOS内核的配置头文件来裁剪FreeRTOS的功能，所以我们把它拷贝一份放在user这个文件夹下面。<br>打开FreeRTOSv9.0.0源码，在“FreeRTOSv9.0.0\FreeRTOS\Demo”文件夹下面找到“CORTEX_STM32F103_Keil”这个文件夹，双击打开，在其根目录下找到这个“FreeRTOSConfig.h”文件，然后拷贝到我们工程的user文件夹下即可，等下我们需要对这个文件进行修改。</p><p><strong>创建工程分组</strong><br>接下来我们在mdk里面新建FreeRTOS&#x2F;src和FreeRTOS&#x2F;port两个组文件夹，其中FreeRTOS&#x2F;src用于存放src文件夹的内容，FreeRTOS&#x2F;port用于存放port\MemMang文件夹 与port\RVDS\ARM_CM3文件夹的内容。<br>然后我们将工程文件中FreeRTOS的内容添加到工程中去，按照已经新建的分组添加我们的FreeRTOS工程源码。<br>在FreeRTOS&#x2F;port分组中添加MemMang文件夹中的文件只需选择其中一个即可，我们选择“heap_4.c”，这是FreeRTOS的一个内存管理源码文件。<br>添加完成后：</p><p><img src="https://img2018.cnblogs.com/blog/1834930/201910/1834930-20191015211448785-6286460.png" alt="在这里插入图片描述"></p><p>** 添加头文件路径**<br>FreeRTOS的源码已经添加到开发环境的组文件夹下面，编译的时候需要为这些源文件指定头文件的路径，不然编译会报错。FreeRTOS的源码里面只有FreeRTOS\include和FreeRTOS\port\RVDS\ARM_CM3这两个文件夹下面有头文件，只需要将这两个头文件的路径在开发环境里面指定即可。同时我们还将FreeRTOSConfig.h这个头文件拷贝到了工程根目录下的user文件夹下，所以user的路径也要加到开发环境里面。<br><img src="https://img2018.cnblogs.com/blog/1834930/201910/1834930-20191015211449084-364826338.png" alt="在这里插入图片描述"></p><h2 id="修改FreeRTOSConfig-h"><a href="#修改FreeRTOSConfig-h" class="headerlink" title="修改FreeRTOSConfig.h"></a>修改FreeRTOSConfig.h</h2><p>FreeRTOSConfig.h是直接从demo文件夹下面拷贝过来的，该头文件对裁剪整个FreeRTOS所需的功能的宏均做了定义，有些宏定义被使能，有些宏定义被失能，一开始我们只需要配置最简单的功能即可。要想随心所欲的配置FreeRTOS的功能，我们必须对这些宏定义的功能有所掌握，下面我们先简单的介绍下这些宏定义的含义，然后再对这些宏定义进行修改。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> FREERTOS_CONFIG_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FREERTOS_CONFIG_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bsp_usart.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//针对不同的编译器调用不同的stdint.h文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(__ICCARM__) || defined(__CC_ARM) || defined(__GNUC__)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line">    <span class="keyword">extern</span> <span class="keyword">uint32_t</span> SystemCoreClock;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//断言</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vAssertCalled(char,int) printf(<span class="meta-string">&quot;Error:%s,%d\r\n&quot;</span>,char,int)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configASSERT(x) <span class="meta-keyword">if</span>((x)==0) vAssertCalled(__FILE__,__LINE__)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/************************************************************************</span></span><br><span class="line"><span class="comment"> *               FreeRTOS基础配置配置选项 </span></span><br><span class="line"><span class="comment"> *********************************************************************/</span></span><br><span class="line"><span class="comment">/* 置1：RTOS使用抢占式调度器；置0：RTOS使用协作式调度器（时间片）</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 注：在多任务管理机制上，操作系统可以分为抢占式和协作式两种。</span></span><br><span class="line"><span class="comment"> * 协作式操作系统是任务主动释放CPU后，切换到下一个任务。</span></span><br><span class="line"><span class="comment"> * 任务切换的时机完全取决于正在运行的任务。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_PREEMPTION  1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1使能时间片调度(默认式使能的)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_TIME_SLICING1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 某些运行FreeRTOS的硬件有两种方法选择下一个要执行的任务：</span></span><br><span class="line"><span class="comment"> * 通用方法和特定于硬件的方法（以下简称“特殊方法”）。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 通用方法：</span></span><br><span class="line"><span class="comment"> *      1.configUSE_PORT_OPTIMISED_TASK_SELECTION 为 0 或者硬件不支持这种特殊方法。</span></span><br><span class="line"><span class="comment"> *      2.可以用于所有FreeRTOS支持的硬件</span></span><br><span class="line"><span class="comment"> *      3.完全用C实现，效率略低于特殊方法。</span></span><br><span class="line"><span class="comment"> *      4.不强制要求限制最大可用优先级数目</span></span><br><span class="line"><span class="comment"> * 特殊方法：</span></span><br><span class="line"><span class="comment"> *      1.必须将configUSE_PORT_OPTIMISED_TASK_SELECTION设置为1。</span></span><br><span class="line"><span class="comment"> *      2.依赖一个或多个特定架构的汇编指令（一般是类似计算前导零[CLZ]指令）。</span></span><br><span class="line"><span class="comment"> *      3.比通用方法更高效</span></span><br><span class="line"><span class="comment"> *      4.一般强制限定最大可用优先级数目为32</span></span><br><span class="line"><span class="comment"> * 一般是硬件计算前导零指令，如果所使用的，MCU没有这些硬件指令的话此宏应该设置为0！</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_PORT_OPTIMISED_TASK_SELECTION        1                       </span></span><br><span class="line">                                                                        </span><br><span class="line"><span class="comment">/* 置1：使能低功耗tickless模式；置0：保持系统节拍（tick）中断一直运行</span></span><br><span class="line"><span class="comment"> * 假设开启低功耗的话可能会导致下载出现问题，因为程序在睡眠中,可用以下办法解决</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 下载方法：</span></span><br><span class="line"><span class="comment"> *      1.将开发版正常连接好</span></span><br><span class="line"><span class="comment"> *      2.按住复位按键，点击下载瞬间松开复位按键</span></span><br><span class="line"><span class="comment"> *     </span></span><br><span class="line"><span class="comment"> *      1.通过跳线帽将 BOOT 0 接高电平(3.3V)</span></span><br><span class="line"><span class="comment"> *      2.重新上电，下载</span></span><br><span class="line"><span class="comment"> *    </span></span><br><span class="line"><span class="comment"> * 1.使用FlyMcu擦除一下芯片，然后进行下载</span></span><br><span class="line"><span class="comment"> *STMISP -&gt; 清除芯片(z)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_TICKLESS_IDLE0   </span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 写入实际的CPU内核时钟频率，也就是CPU指令执行频率，通常称为Fclk</span></span><br><span class="line"><span class="comment"> * Fclk为供给CPU内核的时钟信号，我们所说的cpu主频为 XX MHz，</span></span><br><span class="line"><span class="comment"> * 就是指的这个时钟信号，相应的，1/Fclk即为cpu时钟周期；</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configCPU_CLOCK_HZ  (SystemCoreClock)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//RTOS系统节拍中断的频率。即一秒中断的次数，每次中断RTOS都会进行任务调度</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configTICK_RATE_HZ  (( TickType_t )1000)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//可使用的最大优先级</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configMAX_PRIORITIES  (32)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//空闲任务使用的堆栈大小</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configMINIMAL_STACK_SIZE((unsigned short)128)</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//任务名字字符串长度</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configMAX_TASK_NAME_LEN(16)</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">//系统节拍计数器变量数据类型，1表示为16位无符号整形，0表示为32位无符号整形</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_16_BIT_TICKS0                      </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//空闲任务放弃CPU使用权给其他同优先级的用户任务</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configIDLE_SHOULD_YIELD1           </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//启用队列</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_QUEUE_SETS  1    </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//开启任务通知功能，默认开启</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_TASK_NOTIFICATIONS    1   </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用互斥信号量</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_MUTEXES    1    </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用递归互斥信号量                                            </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_RECURSIVE_MUTEXES1   </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//为1时使用计数信号量</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_COUNTING_SEMAPHORES1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设置可以注册的信号量和消息队列个数 */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configQUEUE_REGISTRY_SIZE10                                 </span></span><br><span class="line">                                                                       </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_APPLICATION_TASK_TAG  0                       </span></span><br><span class="line">                      </span><br><span class="line"></span><br><span class="line"><span class="comment">/*****************************************************************</span></span><br><span class="line"><span class="comment">              FreeRTOS与内存申请有关配置选项                                               </span></span><br><span class="line"><span class="comment">*****************************************************************/</span></span><br><span class="line"><span class="comment">//支持动态内存申请</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configSUPPORT_DYNAMIC_ALLOCATION        1    </span></span><br><span class="line"><span class="comment">//支持静态内存</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configSUPPORT_STATIC_ALLOCATION0</span></span><br><span class="line"><span class="comment">//系统所有总的堆大小</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configTOTAL_HEAP_SIZE((size_t)(36*1024))    </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/***************************************************************</span></span><br><span class="line"><span class="comment">             FreeRTOS与钩子函数有关的配置选项                                            </span></span><br><span class="line"><span class="comment">**************************************************************/</span></span><br><span class="line"><span class="comment">/* 置1：使用空闲钩子（Idle Hook类似于回调函数）；置0：忽略空闲钩子</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 空闲任务钩子是一个函数，这个函数由用户来实现，</span></span><br><span class="line"><span class="comment"> * FreeRTOS规定了函数的名字和参数：void vApplicationIdleHook(void )，</span></span><br><span class="line"><span class="comment"> * 这个函数在每个空闲任务周期都会被调用</span></span><br><span class="line"><span class="comment"> * 对于已经删除的RTOS任务，空闲任务可以释放分配给它们的堆栈内存。</span></span><br><span class="line"><span class="comment"> * 因此必须保证空闲任务可以被CPU执行</span></span><br><span class="line"><span class="comment"> * 使用空闲钩子函数设置CPU进入省电模式是很常见的</span></span><br><span class="line"><span class="comment"> * 不可以调用会引起空闲任务阻塞的API函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_IDLE_HOOK0      </span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 置1：使用时间片钩子（Tick Hook）；置0：忽略时间片钩子</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 时间片钩子是一个函数，这个函数由用户来实现，</span></span><br><span class="line"><span class="comment"> * FreeRTOS规定了函数的名字和参数：void vApplicationTickHook(void )</span></span><br><span class="line"><span class="comment"> * 时间片中断可以周期性的调用</span></span><br><span class="line"><span class="comment"> * 函数必须非常短小，不能大量使用堆栈，</span></span><br><span class="line"><span class="comment"> * 不能调用以”FromISR&quot; 或 &quot;FROM_ISR”结尾的API函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="comment">/*xTaskIncrementTick函数是在xPortSysTickHandler中断函数中被调用的。因此，vApplicationTickHook()函数执行的时间必须很短才行*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_TICK_HOOK0           </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用内存申请失败钩子函数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_MALLOC_FAILED_HOOK0 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 大于0时启用堆栈溢出检测功能，如果使用此功能 </span></span><br><span class="line"><span class="comment"> * 用户必须提供一个栈溢出钩子函数，如果使用的话</span></span><br><span class="line"><span class="comment"> * 此值可以为1或者2，因为有两种栈溢出检测方法 */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configCHECK_FOR_STACK_OVERFLOW0   </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/********************************************************************</span></span><br><span class="line"><span class="comment">          FreeRTOS与运行时间和任务状态收集有关的配置选项   </span></span><br><span class="line"><span class="comment">**********************************************************************/</span></span><br><span class="line"><span class="comment">//启用运行时间统计功能</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configGENERATE_RUN_TIME_STATS        0             </span></span><br><span class="line"> <span class="comment">//启用可视化跟踪调试</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_TRACE_FACILITY      0    </span></span><br><span class="line"><span class="comment">/* 与宏configUSE_TRACE_FACILITY同时为1时会编译下面3个函数</span></span><br><span class="line"><span class="comment"> * prvWriteNameToBuffer()</span></span><br><span class="line"><span class="comment"> * vTaskList(),</span></span><br><span class="line"><span class="comment"> * vTaskGetRunTimeStats()</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_STATS_FORMATTING_FUNCTIONS1                       </span></span><br><span class="line">                                                                        </span><br><span class="line">                                                                        </span><br><span class="line"><span class="comment">/********************************************************************</span></span><br><span class="line"><span class="comment">                FreeRTOS与协程有关的配置选项                                                </span></span><br><span class="line"><span class="comment">*********************************************************************/</span></span><br><span class="line"><span class="comment">//启用协程，启用协程以后必须添加文件croutine.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_CO_ROUTINES           0                 </span></span><br><span class="line"><span class="comment">//协程的有效优先级数目</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configMAX_CO_ROUTINE_PRIORITIES       ( 2 )                   </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/***********************************************************************</span></span><br><span class="line"><span class="comment">                FreeRTOS与软件定时器有关的配置选项      </span></span><br><span class="line"><span class="comment">**********************************************************************/</span></span><br><span class="line"> <span class="comment">//启用软件定时器</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_TIMERS            1                              </span></span><br><span class="line"><span class="comment">//软件定时器优先级</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configTIMER_TASK_PRIORITY        (configMAX_PRIORITIES-1)        </span></span><br><span class="line"><span class="comment">//软件定时器队列长度</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configTIMER_QUEUE_LENGTH        10                               </span></span><br><span class="line"><span class="comment">//软件定时器任务堆栈大小</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configTIMER_TASK_STACK_DEPTH      (configMINIMAL_STACK_SIZE*2)    </span></span><br><span class="line"></span><br><span class="line"><span class="comment">/************************************************************</span></span><br><span class="line"><span class="comment">            FreeRTOS可选函数配置选项                                                     </span></span><br><span class="line"><span class="comment">************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INCLUDE_xTaskGetSchedulerState       1                       </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INCLUDE_vTaskPrioritySet         1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INCLUDE_uxTaskPriorityGet         1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INCLUDE_vTaskDelete           1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INCLUDE_vTaskCleanUpResources       1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INCLUDE_vTaskSuspend           1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INCLUDE_vTaskDelayUntil         1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INCLUDE_vTaskDelay           1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INCLUDE_eTaskGetState           1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INCLUDE_xTimerPendFunctionCall     1</span></span><br><span class="line"><span class="comment">//#define INCLUDE_xTaskGetCurrentTaskHandle       1</span></span><br><span class="line"><span class="comment">//#define INCLUDE_uxTaskGetStackHighWaterMark     0</span></span><br><span class="line"><span class="comment">//#define INCLUDE_xTaskGetIdleTaskHandle          0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************************************</span></span><br><span class="line"><span class="comment">            FreeRTOS与中断有关的配置选项                                                 </span></span><br><span class="line"><span class="comment">******************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __NVIC_PRIO_BITS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configPRIO_BITS       __NVIC_PRIO_BITS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configPRIO_BITS       4                  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="comment">//中断最低优先级</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configLIBRARY_LOWEST_INTERRUPT_PRIORITY15     </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//系统可管理的最高中断优先级</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY5 </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configKERNEL_INTERRUPT_PRIORITY ( configLIBRARY_LOWEST_INTERRUPT_PRIORITY &lt;&lt; (8 - configPRIO_BITS) )<span class="comment">/* 240 */</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configMAX_SYSCALL_INTERRUPT_PRIORITY ( configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY &lt;&lt; (8 - configPRIO_BITS) )</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/****************************************************************</span></span><br><span class="line"><span class="comment">            FreeRTOS与中断服务函数有关的配置选项                         </span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> xPortPendSVHandler PendSV_Handler</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vPortSVCHandler SVC_Handler</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 以下为使用Percepio Tracealyzer需要的东西，不需要时将 configUSE_TRACE_FACILITY 定义为 0 */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> ( configUSE_TRACE_FACILITY == 1 )</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;trcRecorder.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INCLUDE_xTaskGetCurrentTaskHandle               1   <span class="comment">// 启用一个可选函数（该函数被 Trace源码使用，默认该值为0 表示不用）</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* FREERTOS_CONFIG_H */</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="修改stm32f10x-it-c"><a href="#修改stm32f10x-it-c" class="headerlink" title="修改stm32f10x_it.c"></a>修改stm32f10x_it.c</h2><p>SysTick中断服务函数是一个非常重要的函数，FreeRTOS所有跟时间相关的事情都在里面处理，SysTick就是FreeRTOS的一个心跳时钟，驱动着FreeRTOS的运行，就像人的心跳一样，假如没有心跳，我们就相当于“死了”，同样的，FreeRTOS没有了心跳，那么它就会卡死在某个地方，不能进行任务调度，不能运行任何的东西，因此我们需要实现一个FreeRTOS的心跳时钟，FreeRTOS帮我们实现了SysTick的启动的配置：在port.c文件中已经实现vPortSetupTimerInterrupt()函数，并且FreeRTOS通用的SysTick中断服务函数也实现了：在port.c文件中已经实现xPortSysTickHandler()函数，所以移植的时候只需要我们在stm32f10x_it.c文件中实现我们对应（STM32）平台上的SysTick_Handler()函数即可。FreeRTOS为开发者考虑得特别多，PendSV_Handler()与SVC_Handler()这两个很重要的函数都帮我们实现了，在在port.c文件中已经实现xPortPendSVHandler()与vPortSVCHandler()函数，防止我们自己实现不了，那么在stm32f10x_it.c中就需要我们注释掉PendSV_Handler()与SVC_Handler()这两个函数了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//void SVC_Handler(void)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//void PendSV_Handler(void)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">xPortSysTickHandler</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//systick中断服务函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SysTick_Handler</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">if</span> (INCLUDE_xTaskGetSchedulerState  == 1 )</span></span><br><span class="line">      <span class="keyword">if</span> (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)</span><br><span class="line">      &#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span>  <span class="comment">/* INCLUDE_xTaskGetSchedulerState */</span>  </span></span><br><span class="line">        xPortSysTickHandler();</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">if</span> (INCLUDE_xTaskGetSchedulerState  == 1 )</span></span><br><span class="line">      &#125;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span>  <span class="comment">/* INCLUDE_xTaskGetSchedulerState */</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="创建任务"><a href="#创建任务" class="headerlink" title="创建任务"></a>创建任务</h3><p>这里，我们创建一个单任务，任务使用的栈和任务控制块是在创建任务的时候FreeRTOS动态分配的。<br>任务必须是一个死循环，否则任务将通过LR返回，如果LR指向了非法的内存就会产生HardFault_Handler，而FreeRTOS指向一个死循环，那么任务返回之后就在死循环中执行，这样子的任务是不安全的，所以避免这种情况，任务一般都是死循环并且无返回值的。<br><strong>并且每个任务循环主体中应该有阻塞任务的函数，否则就会饿死比它优先级更低的任务！！！</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* FreeRTOS头文件 */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;FreeRTOS.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;task.h&quot;</span></span></span><br><span class="line"><span class="comment">/* 开发板硬件bsp头文件 */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bsp_led.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">AppTaskCreate</span><span class="params">(<span class="keyword">void</span>)</span></span>;<span class="comment">/* AppTask任务 */</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">/* 创建任务句柄 */</span></span><br><span class="line"><span class="keyword">static</span> TaskHandle_t AppTask_Handle = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  BaseType_t xReturn = pdPASS;<span class="comment">/* 定义一个创建信息返回值，默认为pdPASS */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 开发板硬件初始化 */</span></span><br><span class="line">  BSP_Init();</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 创建AppTaskCreate任务 */</span></span><br><span class="line">  xReturn = xTaskCreate((TaskFunction_t )AppTask,  <span class="comment">/* 任务入口函数 */</span></span><br><span class="line">                        (<span class="keyword">const</span> <span class="keyword">char</span>*    )<span class="string">&quot;AppTask&quot;</span>,<span class="comment">/* 任务名字 */</span></span><br><span class="line">                        (<span class="keyword">uint16_t</span>       )<span class="number">512</span>,  <span class="comment">/* 任务栈大小 */</span></span><br><span class="line">                        (<span class="keyword">void</span>*          )<span class="literal">NULL</span>,<span class="comment">/* 任务入口函数参数 */</span></span><br><span class="line">                        (UBaseType_t    )<span class="number">1</span>, <span class="comment">/* 任务的优先级 */</span></span><br><span class="line">                        (TaskHandle_t*  )&amp;AppTask_Handle);<span class="comment">/* 任务控制块指针 */</span> </span><br><span class="line">  <span class="comment">/* 启动任务调度 */</span>           </span><br><span class="line">  <span class="keyword">if</span>(pdPASS == xReturn)</span><br><span class="line">    vTaskStartScheduler();   <span class="comment">/* 启动任务，开启调度 */</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;  </span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span>(<span class="number">1</span>);   <span class="comment">/* 正常不会执行到这里 */</span>    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">AppTask</span><span class="params">(<span class="keyword">void</span>* parameter)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        LED1_ON;</span><br><span class="line">        vTaskDelay(<span class="number">500</span>);   <span class="comment">/* 延时500个tick */</span></span><br><span class="line">        LED1_OFF;     </span><br><span class="line">        vTaskDelay(<span class="number">500</span>);   <span class="comment">/* 延时500个tick */</span> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="相关链接-侵删"><a href="#相关链接-侵删" class="headerlink" title="相关链接(侵删)"></a>相关链接(侵删)</h1><ol><li><a href="https://www.cnblogs.com/iot-dev/p/11681067.html">超详细的FreeRTOS移植全教程——基于srm32</a></li><li><a href="https://blog.csdn.net/hao1__/article/details/122038566">STM32F1+FreeRTOS系统移植例程</a></li><li><a href="https://blog.csdn.net/cs953575/article/details/118443722">https://blog.csdn.net/cs953575/article/details/118443722</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">基于 keil 基础工程实现最新 FreeRTOS 的移植,并在任务中实现 LED 灯闪烁</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="C" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/C/"/>
    
    <category term="FreeRTOS" scheme="https://zml3589110.github.io/categories/FreeRTOS/"/>
    
    <category term="STM32" scheme="https://zml3589110.github.io/categories/STM32/"/>
    
    
    <category term="STM32" scheme="https://zml3589110.github.io/tags/STM32/"/>
    
    <category term="C" scheme="https://zml3589110.github.io/tags/C/"/>
    
    <category term="FreeRTOS" scheme="https://zml3589110.github.io/tags/FreeRTOS/"/>
    
    <category term="keil" scheme="https://zml3589110.github.io/tags/keil/"/>
    
    <category term="移植" scheme="https://zml3589110.github.io/tags/%E7%A7%BB%E6%A4%8D/"/>
    
  </entry>
  
  <entry>
    <title>LVGL学习(一)之模拟器搭建</title>
    <link href="https://zml3589110.github.io/posts/1814094880.html"/>
    <id>https://zml3589110.github.io/posts/1814094880.html</id>
    <published>2022-12-22T06:47:20.000Z</published>
    <updated>2022-12-22T07:25:37.899Z</updated>
    
    <content type="html"><![CDATA[<h1 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h1><img src="https://img-blog.csdnimg.cn/52c6cb43948f4c23aef162e9c03cec90.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5oyo6Lii5rCR5belYml1Yml1,size_20,color_FFFFFF,t_70,g_se,x_16"><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>lvgl提供了非常多的部件(30多个)给用户使用，这些部件的所有样式都是可以修改的。它们都有默认的样式，但是当我们觉得默认的样式不合适自己项目的时候可以就需要进行修改了，本文来教大家怎么修改 tabview部件顶部框(选项卡)的默认样式。</p><p>配置：</p><ul><li>codeblocks 20.03</li><li>lvgl v 8.1</li></ul><h1 id="修改样式"><a href="#修改样式" class="headerlink" title="修改样式"></a>修改样式</h1><p><strong>默认的样式</strong><br>正常我们这样就可以创建出一个 tabview部件：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">lv_obj_t</span>* tv;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">lv_obj_t</span>* t1;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">lv_obj_t</span>* t2;</span><br><span class="line"></span><br><span class="line">tv = lv_tabview_create(lv_scr_act(), LV_DIR_TOP, LV_DPI_DEF / <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">t1 = lv_tabview_add_tab(tv, <span class="string">&quot;Selectors&quot;</span>);</span><br><span class="line">t2 = lv_tabview_add_tab(tv, <span class="string">&quot;Text input&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">lv_obj_t</span>* tab_btns = lv_tabview_get_tab_btns(tv);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>它的选项卡的默认样式是这样的：</p><img src="https://img-blog.csdnimg.cn/58d8e25b08074e9ea5ac0b254fdd77de.png"><h2 id="背景色"><a href="#背景色" class="headerlink" title="背景色"></a>背景色</h2><p><strong>修改背景色</strong><br>我们一下它的被选中时的背景色，我们只需要后面添加修改样式的代码即可，这里我使用本地样式修改，你也可以使用共享样式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lv_obj_set_style_bg_color(tab_btns, lv_palette_main(LV_PALETTE_RED), LV_PART_ITEMS | LV_STATE_CHECKED);</span><br></pre></td></tr></table></figure><p>然后我们就能看到选中时的背景颜色被修改了：</p><img src="https://img-blog.csdnimg.cn/b25418def3d64f7fa84a5ac386404ecb.png"><p><strong>去除背景色</strong><br>如果我不想要背景色呢？那我们让背景色为透明即可：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lv_obj_set_style_bg_opa(tab_btns, LV_OPA_0, LV_PART_ITEMS | LV_STATE_CHECKED);</span><br></pre></td></tr></table></figure><p>这样我们就能看到选中时没有高亮的背景色了：</p><img src="https://img-blog.csdnimg.cn/5dd852291bfd4688b062e342a4457dea.png"><h2 id="边框颜色"><a href="#边框颜色" class="headerlink" title="边框颜色"></a>边框颜色</h2><p><strong>修改边框颜色</strong><br>我们也可以修改选中时的边框颜色，我们只需要后面添加修改样式的代码即可，这里我是用本地样式修改，你也可以使用共享样式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lv_obj_set_style_border_color(tab_btns, lv_palette_main(LV_PALETTE_GREEN), LV_PART_ITEMS | LV_STATE_CHECKED);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后我们就能看到选中时的边框颜色被修改了：</p><img src="https://img-blog.csdnimg.cn/992641e298cb4cf4ae9e6e748c3ec99c.png"><p><strong>去除边框</strong><br>如果我不想要边框呢？那我们让边框为透明即可：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lv_obj_set_style_border_opa(tab_btns, LV_OPA_0, LV_PART_ITEMS | LV_STATE_CHECKED);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样我们就能看到选中时没有边框了：</p><img src="https://img-blog.csdnimg.cn/0d265fd734d0449889cd07efb480e42f.png"><h2 id="文字"><a href="#文字" class="headerlink" title="文字"></a>文字</h2><p><strong>文字颜色</strong><br>我们也可以修改文字颜色，我们只需要后面添加修改样式的代码即可，这里我是用本地样式修改，你也可以使用共享样式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//本地样式修改选中时的文字颜色</span></span><br><span class="line">   <span class="comment">//lv_obj_set_style_text_color(tab_btns, lv_palette_main(LV_PALETTE_RED), LV_PART_ITEMS | LV_STATE_CHECKED);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//本地样式修改未选中时的文字颜色</span></span><br><span class="line">   <span class="comment">//lv_obj_set_style_text_color(tab_btns, lv_palette_main(LV_PALETTE_RED), 0);</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样我们就能看到文字颜色被改变了：</p><img src="https://img-blog.csdnimg.cn/c8ee0746cfaa485c84f348314b4f5039.png"><p><strong>文字大小</strong><br>我们也可以修改文字的大小(lvgl内置字体)，我们只需要后面添加修改样式的代码即可，这里我是用本地样式修改，你也可以使用共享样式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//本地样式修改选中时的文字颜色</span></span><br><span class="line">   <span class="comment">//lv_obj_set_style_text_color(tab_btns, lv_palette_main(LV_PALETTE_RED), LV_PART_ITEMS | LV_STATE_CHECKED);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//本地样式修改未选中时的文字颜色</span></span><br><span class="line">   <span class="comment">//lv_obj_set_style_text_color(tab_btns, lv_palette_main(LV_PALETTE_RED), 0);</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样我们就能看到文字大小被改变了：</p><img src="https://img-blog.csdnimg.cn/499d58b87fe14404920285a0f09be820.png"><p><strong>显示中文</strong></p><p>通过学习 <a href="https://www.bilibili.com/video/BV1Ya411r7K2?p=15">lvgl使用中文字库</a>教程，我们就知道怎么在lvgl中快速使用中文字库了： <a href="https://www.bilibili.com/video/BV1Ya411r7K2?p=15">https://www.bilibili.com/video/BV1Ya411r7K2?p=15</a></p><p>下面我们可以让tabview的选项卡显示中文，我们只需要后面添加修改样式的代码即可，这里我是用本地样式修改，你也可以使用共享样式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 本地样式修改字体(使用自定义字体-中文)</span></span><br><span class="line">   LV_FONT_DECLARE(lv_font_source_han_sans_bold_20);</span><br><span class="line">   lv_obj_set_style_text_font(tab_btns, &amp;lv_font_source_han_sans_bold_20, <span class="number">0</span>);   <span class="comment">// 使用自定义的字库</span></span><br><span class="line">   lv_obj_set_style_text_font(tab_btns, &amp;lv_font_source_han_sans_bold_20, LV_PART_ITEMS | LV_STATE_CHECKED);   <span class="comment">// 使用自定义的字库</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样我们就能看到显示中文了：</p><img src="https://img-blog.csdnimg.cn/a81d77a9222b4656aef78372c303e6f2.png"><h1 id="代码总结"><a href="#代码总结" class="headerlink" title="代码总结"></a>代码总结</h1><p>以上的代码贴在下面了，大家可以参考自己实验看看：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">static</span> <span class="keyword">lv_obj_t</span>* tv;</span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">lv_obj_t</span>* t1;</span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">lv_obj_t</span>* t2;</span><br><span class="line"></span><br><span class="line">   tv = lv_tabview_create(lv_scr_act(), LV_DIR_TOP, LV_DPI_DEF / <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">   t1 = lv_tabview_add_tab(tv, <span class="string">&quot;Selectors&quot;</span>);</span><br><span class="line">   t2 = lv_tabview_add_tab(tv, <span class="string">&quot;Text input&quot;</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">lv_obj_t</span>* tab_btns = lv_tabview_get_tab_btns(tv);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//本地样式修改背景色</span></span><br><span class="line">   <span class="comment">//lv_obj_set_style_bg_color(tab_btns, lv_palette_main(LV_PALETTE_RED), LV_PART_ITEMS | LV_STATE_CHECKED);</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//本地样式修改透明度</span></span><br><span class="line">   <span class="comment">//lv_obj_set_style_bg_opa(tab_btns, LV_OPA_0, LV_PART_ITEMS | LV_STATE_CHECKED);</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//修改选中时边框的颜色</span></span><br><span class="line">   <span class="comment">//lv_obj_set_style_border_color(tab_btns, lv_palette_main(LV_PALETTE_GREEN), LV_PART_ITEMS | LV_STATE_CHECKED);</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//修改选中时边框的颜色透明度</span></span><br><span class="line">   <span class="comment">//lv_obj_set_style_border_opa(tab_btns, LV_OPA_0, LV_PART_ITEMS | LV_STATE_CHECKED);</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//本地样式修改选中时的文字颜色</span></span><br><span class="line">   <span class="comment">//lv_obj_set_style_text_color(tab_btns, lv_palette_main(LV_PALETTE_RED), LV_PART_ITEMS | LV_STATE_CHECKED);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//本地样式修改未选中时的文字颜色</span></span><br><span class="line">   <span class="comment">//lv_obj_set_style_text_color(tab_btns, lv_palette_main(LV_PALETTE_RED), 0);</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 本地样式修改字体(使用内置字体)</span></span><br><span class="line">   <span class="comment">//lv_obj_set_style_text_font(tab_btns, &amp;lv_font_montserrat_28, LV_PART_ITEMS | LV_STATE_CHECKED);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 本地样式修改字体(使用自定义字体-中文)</span></span><br><span class="line">   <span class="comment">//LV_FONT_DECLARE(lv_font_source_han_sans_bold_20);</span></span><br><span class="line">   <span class="comment">//lv_obj_set_style_text_font(tab_btns, &amp;lv_font_source_han_sans_bold_20, 0);   // 使用自定义的字库</span></span><br><span class="line">   <span class="comment">//lv_obj_set_style_text_font(tab_btns, &amp;lv_font_source_han_sans_bold_20, LV_PART_ITEMS | LV_STATE_CHECKED);   // 使用自定义的字库</span></span><br><span class="line">   </span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p><strong>获取LVGL内置调色板的颜色：</strong><br>lv_palette_main(LV_PALETTE_…)<br>其中 LV_PALETTE_… 有这些可选：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">    LV_PALETTE_RED,</span><br><span class="line">    LV_PALETTE_PINK,</span><br><span class="line">    LV_PALETTE_PURPLE,</span><br><span class="line">    LV_PALETTE_DEEP_PURPLE,</span><br><span class="line">    LV_PALETTE_INDIGO,</span><br><span class="line">    LV_PALETTE_BLUE,</span><br><span class="line">    LV_PALETTE_LIGHT_BLUE,</span><br><span class="line">    LV_PALETTE_CYAN,</span><br><span class="line">    LV_PALETTE_TEAL,</span><br><span class="line">    LV_PALETTE_GREEN,</span><br><span class="line">    LV_PALETTE_LIGHT_GREEN,</span><br><span class="line">    LV_PALETTE_LIME,</span><br><span class="line">    LV_PALETTE_YELLOW,</span><br><span class="line">    LV_PALETTE_AMBER,</span><br><span class="line">    LV_PALETTE_ORANGE,</span><br><span class="line">    LV_PALETTE_DEEP_ORANGE,</span><br><span class="line">    LV_PALETTE_BROWN,</span><br><span class="line">    LV_PALETTE_BLUE_GREY,</span><br><span class="line">    LV_PALETTE_GREY,</span><br><span class="line">    _LV_PALETTE_LAST,</span><br><span class="line">    LV_PALETTE_NONE = <span class="number">0xff</span>,</span><br><span class="line">&#125; <span class="keyword">lv_palette_t</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>使用自定义颜色</strong></p><p>除了使用 <code>lv_palette_main(LV_PALETTE_...)</code> 我们可以使用自定义的颜色值：</p><ul><li>十六进制颜色码： lv_color_hex(0x000000)</li><li>RGB值：LV_COLOR_MAKE(0x00, 0x00, 0x00)</li></ul><p>使用示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lv_obj_set_style_bg_color(tab_btns, lv_color_hex(<span class="number">0x000000</span>), LV_PART_ITEMS | LV_STATE_CHECKED);</span><br><span class="line">lv_obj_set_style_bg_color(tab_btns,  LV_COLOR_MAKE(<span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>), LV_PART_ITEMS | LV_STATE_CHECKED);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>lvgl视频教程</strong><br><a href="https://www.bilibili.com/video/av209749730">https://www.bilibili.com/video/av209749730</a></p><p>百问网LVGL(v8)系列课程(韦东山·监制) 教程基于lvgl v8.2版本，课程适配多个平台、多款板子</p><p>百问网LVGL(v8)视频课程(韦东山·监制) 教程基于lvgl v8.2版本，课程适配多个平台、多款板子！视频学习地址：<a href="https://www.bilibili.com/video/BV1Ya411r7K2">https://www.bilibili.com/video/BV1Ya411r7K2</a></p><p>视频教程配套资料<br><a href="https://gitee.com/weidongshan/lvgl_100ask_course_materials">https://gitee.com/weidongshan/lvgl_100ask_course_materials</a><br>相关学习资源<br>lvgl官网：<a href="https://lvgl.io/">https://lvgl.io</a><br>lvgl官方文档：<a href="https://docs.lvgl.io/">https://docs.lvgl.io</a><br>百问网lvgl中文文档：<a href="http://lvgl.100ask.net/">http://lvgl.100ask.net</a><br>百问网lvgl论坛：<a href="https://forums.100ask.net/c/13-category/13">https://forums.100ask.net/c/13-category/13</a><br>百问网lvgl学习交流群：<a href="http://lvgl.100ask.net/master/contact_us/index.html">http://lvgl.100ask.net/master/contact_us/index.html</a><br>百问网lvgl视频教程：<br><a href="https://www.bilibili.com/video/BV1Ya411r7K2">https://www.bilibili.com/video/BV1Ya411r7K2</a><br><a href="https://www.100ask.net/detail/p_61c5a317e4b0cca4a4e8b6f1/6">https://www.100ask.net/detail/p_61c5a317e4b0cca4a4e8b6f1/6</a><br>————————————————<br>版权声明：本文为CSDN博主「挨踢民工biubiu」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/qq_35181236/article/details/122121775">https://blog.csdn.net/qq_35181236/article/details/122121775</a></p><hr><h1 id="相关链接-侵删"><a href="#相关链接-侵删" class="headerlink" title="相关链接(侵删)"></a>相关链接(侵删)</h1><ol><li><a href="https://blog.csdn.net/qq_35181236/article/details/122121775">LVGL|lvgl教程之修改lvgl tabview部件顶部框(选项卡)的默认样式</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">通过Visual Studio 搭建lvgl模拟开发平台</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="C" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/C/"/>
    
    <category term="GUI" scheme="https://zml3589110.github.io/categories/GUI/"/>
    
    
    <category term="C" scheme="https://zml3589110.github.io/tags/C/"/>
    
    <category term="GUI" scheme="https://zml3589110.github.io/tags/GUI/"/>
    
    <category term="LVGL" scheme="https://zml3589110.github.io/tags/LVGL/"/>
    
    <category term="lvgl tabview" scheme="https://zml3589110.github.io/tags/lvgl-tabview/"/>
    
  </entry>
  
  <entry>
    <title>Windows Kits在根目录下自动创建</title>
    <link href="https://zml3589110.github.io/posts/2654094191.html"/>
    <id>https://zml3589110.github.io/posts/2654094191.html</id>
    <published>2022-12-20T12:28:20.000Z</published>
    <updated>2022-12-22T07:25:37.902Z</updated>
    
    <content type="html"><![CDATA[<h1 id="将-windows-kits-移到相应位置"><a href="#将-windows-kits-移到相应位置" class="headerlink" title="将 windows kits 移到相应位置"></a>将 windows kits 移到相应位置</h1><p>你是不是当时下载了Visual Stdio，然后莫名奇妙就多了个Windows Kits，<br>可以把它移动到VisualStdio里面找到你安装的Windows kits的文件夹，然后把它整个截切到想要移动的地方。<br>比如说，我就是把”D:\Windows kits”整个剪切到”D:\DevelopmentTool\VisualStdio2022\Windows Kits”。<br><strong>PS:需要注意的是这里是剪切文件夹，而不是复制，不然在你cmd下使用mklink提示“文件已经被创建”。</strong></p><h1 id="修改注册表实现链接"><a href="#修改注册表实现链接" class="headerlink" title="修改注册表实现链接"></a>修改注册表实现链接</h1><p>下载vs后，2022的直接默认在根目录下载kits文件夹，这让强迫症的我难受死了，经过三天的努力，终于解决了这个问题，<br>这个方法不是使用软连接的方法，使用软连接原来的地方还会多个快捷方式，对于别人来说治标不治本，对我来说屁用没有，<br>还是很难受，我看也没人写，我就写出来可以参考下，也免得我自己忘记。</p><p>通过修改注册表进行移动文件夹不报错。我修改了三个地方。</p><h2 id="位置一"><a href="#位置一" class="headerlink" title="位置一:"></a>位置一:</h2><ul><li>计算机\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows Kits\Installed Roots</li></ul><img src="https://i0.hdslb.com/bfs/article/bf4e8c40c5e3a820f095fa64cc03ef7414d8ed15.png@942w_401h_progressive.webp"><h2 id="位置二"><a href="#位置二" class="headerlink" title="位置二:"></a>位置二:</h2><ul><li>计算机\HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Microsoft\Microsoft SDKs\Windows\v10.0</li></ul><img src="https://i0.hdslb.com/bfs/article/5b94976f6987fe887fd038d175cf5927a699272d.png@942w_368h_progressive.webp"><h2 id="位置三"><a href="#位置三" class="headerlink" title="位置三:"></a>位置三:</h2><ul><li>计算机\HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Microsoft\Windows Kits\Installed Roots</li></ul><img src="https://i0.hdslb.com/bfs/article/87140356f377eded39f19d47c4d5a7466cf027b3.png@942w_389h_progressive.webp"><hr><blockquote><p><strong>说明：本文是收集参考文档，以方便查看（侵删）</strong></p></blockquote><hr><h1 id="信息链接"><a href="#信息链接" class="headerlink" title="信息链接:"></a>信息链接:</h1><ol><li><a href="https://www.bilibili.com/read/cv16890467">下载vs后，移动windows kits文件夹(不使用快捷方式的方法)</a></li><li><a href="https://www.zhihu.com/question/440612684">出现在E盘的Windows Kits是怎么回事？删掉可以吗？</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">Visual Stdio 安装功能组件后莫名在其根目录下增加 Windows Kits 文件夹</summary>
    
    
    
    <category term="Visual Stdio" scheme="https://zml3589110.github.io/categories/Visual-Stdio/"/>
    
    
    <category term="Visual Stdio" scheme="https://zml3589110.github.io/tags/Visual-Stdio/"/>
    
    <category term="Windows Kits" scheme="https://zml3589110.github.io/tags/Windows-Kits/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu下将Python命令默认指向为Python3</title>
    <link href="https://zml3589110.github.io/posts/213945612.html"/>
    <id>https://zml3589110.github.io/posts/213945612.html</id>
    <published>2022-11-21T12:57:20.000Z</published>
    <updated>2022-11-21T13:05:37.541Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ubuntu下将Python命令默认指向为Python3"><a href="#ubuntu下将Python命令默认指向为Python3" class="headerlink" title="ubuntu下将Python命令默认指向为Python3"></a>ubuntu下将Python命令默认指向为Python3</h1><p><strong>ubuntu</strong>下输入Python命令默认指向的是&#x2F;usr&#x2F;bin&#x2F;python</p><p>因此，为了方便使用，安装了python3后，我们一般会创建软链接使&#x2F;usr&#x2F;bin&#x2F;python指向&#x2F;usr&#x2F;bin&#x2F;python3。</p><p>备份系统自带python2的软链接：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv /usr/bin/python /usr/bin/python.bak</span><br></pre></td></tr></table></figure><p>创建python3软链接：</p><p>（安装python一般会自动生成软链接&#x2F;usr&#x2F;bin&#x2F;python3，如果没有，请将“&#x2F;usr&#x2F;bin&#x2F;python3”改为你安装的python3的位置）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /usr/bin/python3 /usr/bin/python</span><br></pre></td></tr></table></figure><p>同理，pip也一样</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /usr/bin/pip3 /usr/bin/pip</span><br></pre></td></tr></table></figure><hr><h1 id="相关链接（侵删）"><a href="#相关链接（侵删）" class="headerlink" title="相关链接（侵删）"></a>相关链接（侵删）</h1><ol><li><a href="https://blog.csdn.net/leishupei/article/details/120736802">ubuntu下将Python命令默认指向为Python3</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">将Python链接到Python3</summary>
    
    
    
    <category term="Linux" scheme="https://zml3589110.github.io/categories/Linux/"/>
    
    <category term="python" scheme="https://zml3589110.github.io/categories/python/"/>
    
    
    <category term="Ubuntu" scheme="https://zml3589110.github.io/tags/Ubuntu/"/>
    
    <category term="python" scheme="https://zml3589110.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu下编译环境多版本共存（ESP8266）</title>
    <link href="https://zml3589110.github.io/posts/1569020693.html"/>
    <id>https://zml3589110.github.io/posts/1569020693.html</id>
    <published>2022-11-21T12:24:20.000Z</published>
    <updated>2023-01-03T02:04:37.517Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ESP32编译环境多版本共存处理办法"><a href="#ESP32编译环境多版本共存处理办法" class="headerlink" title="ESP32编译环境多版本共存处理办法"></a>ESP32编译环境多版本共存处理办法</h1><h2 id="1-现有方法存在的问题"><a href="#1-现有方法存在的问题" class="headerlink" title="1.现有方法存在的问题"></a>1.现有方法存在的问题</h2><p>目前ESP32的官方开发框架ESP-IDF更新很快，我的电脑里已经存了好几个版本的ESP-IDF SDK了。尽管新版本的功能更强大，但旧版本的SDK中也有不少可以学习的知识，看到不同的编程优化思路。<br>每一个版本的SDK都需要配置编译工具所在的路径，以及配置工程路径的环境变量IDF_PATH。设置方法有两种：</p><ol><li>使用如下语句，导入SDK的编译工具和配置环境变量：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;<span class="variable">$PATH</span>:<span class="variable">$HOME</span>/esp/xtensa-esp32-elf/bin&quot;</span>  <span class="comment">#（配置SDK编译工具所在路径）</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> IDF_PATH=~/esp/esp-idf  <span class="comment"># （配置环境变量）</span></span><br></pre></td></tr></table></figure></li></ol><p>通过语句执行的配置，仅在当前终端有效，退出当前终端或者系统重启后，上述配置就失效了，即不可以执行正常的编译了。</p><p>若需继续使用，需再次敲击上述命令完成当前终端的配置。</p><ol start="2"><li>上述配置方法的原理<br>将上述语句，添加到‘～’目录下的.profile文件（这个文件在每次系统启动时就自动运行一次其中的命令），就可以保证上述配置一直有效，不需要每次使用都敲击1.1中的命令，就可以一直使用。（首次配置后，应重启系统，来使配置生效）</li></ol><p>但是，当我们下载了多个版本的SDK时，1.2的这种看起来”很方便的“配置，存在很大问题。比如，我下载了v3.17版本的SDK，也下载了v4.01版本的SDK，他们的IDF_PATH，以及编译工具的PATH都需要设置，把他们都写入到.profile文件，会出现如下所示的重名现象：</p><img src="https://img-blog.csdnimg.cn/20200812003512474.png"><p><strong>最终，IDF_PATH，PATH被赋值了两次，将以最后一次赋值为最终的配置（即对v4.01版本的SDK的配置），因此对v3.17的配置将失效，我们将不能完成v3.17的正常编译。</strong></p><blockquote><p>能不能有一种方法，让我们同时快速完成多个版本的SDK的编译环境配置呢？</p></blockquote><h2 id="2-解决方法："><a href="#2-解决方法：" class="headerlink" title="2.解决方法："></a>2.解决方法：</h2><p>切换到”～“目录下，运行 ls -al命令，查看该目录下的文件：</p><img src="https://img-blog.csdnimg.cn/20200812003731473.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmd5eDEyMzQ=,size_16,color_FFFFFF,t_70"><p><strong>若有.bash_aliases文件就打开它，并添加以下内容：（注：若没有则可以新建-因为默认启动的.bashrc会扫描.bash_aliases下文件）</strong></p><p>（注意，我的SDK版本为v4.0、v3.22、v3.17，它们的编译工具，以及esp-idf工程目录在对应的esp4,esp322,esp317目录下，你可以依据你下载的SDK版本，以及具体的路径替换下述语句的相关目录路径。）</p><p><strong>旧版本的idf 添加下述语句：</strong></p><img src="https://img-blog.csdnimg.cn/20200812003925833.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmd5eDEyMzQ=,size_16,color_FFFFFF,t_70"><p><strong>新版本的 idf 添加下述语句：</strong></p><img src="https://img-blog.csdnimg.cn/40a2169649944389bcfa658642e88b89.png"><p>**<em>注意：上述截图中第一条语句的 “.”后有一个空格。（其实不添加也不影响！）</em><br>若没有，就创建它，并添加上述内容。<br>添加后，保存该文件，并重新启动系统或者使用命令source &#x2F;home&#x2F;xxx&#x2F;.bashrc（注意使用正确的bashrc路径）刷新系统配置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> get_esp32=<span class="string">&#x27;export PATH=$PATH:/home/yichen/.espressif/tools/xtensa-esp32-elf/esp-2022r1-11.2.0/xtensa-esp32-elf/bin&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> get_e32=<span class="string">&#x27;. $HOME/esp/esp-idf/export.sh&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>下面说一下如何使用：</strong><br>如图，打开一个终端，输入printenv IDF_PATH，显示当前IDF_PATH的配置。同理，输入printenv PATH，显示当前PATH的配置。然后运行get_esp322命令，再输入printenv IDF_PATH，发现了没，我们&#x2F;esp322&#x2F;xtensa-esp32-elf&#x2F;bin已经添加到PATH环境变量里了。再运行get_e322，输入printenv PATH，发现，IDF_PATH环境变量已经变为v3.2.2对应的&#x2F;esp322&#x2F;esp-idf了。</p><blockquote><p>不知道为什么我添加的路径都是往后叠加，越加越长</p></blockquote><img src="https://img-blog.csdnimg.cn/20200812004451697.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmd5eDEyMzQ=,size_16,color_FFFFFF,t_70"><p>我们再打开一个终端，运行以下命令，并查看对应的环境变量。发现，输入get_esp317\get_e317也能完成对应于v3.17版本的SDK需要的配置。如此，在不同的终端中，我们输入不同的get_espxx 命令就可以完成设置了，不用敲击过长的命令，也不必担心环境变量名会重复而导致环境变量被反复设置而被覆盖的问题。</p><img src="https://img-blog.csdnimg.cn/20200812004512673.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmd5eDEyMzQ=,size_16,color_FFFFFF,t_70"><h2 id="上述设置的原理说明"><a href="#上述设置的原理说明" class="headerlink" title="上述设置的原理说明"></a>上述设置的原理说明</h2><p>上述设置文件中使用的aliase命令，是linux下给指令起别名的命令行工具，我们通过给export IDF_PATH&#x3D;xxxx这条长指令起别名来达到节省敲击的字符数的目的，也就是说，起别名后，执行get_esp32，就等效于在命令行输入了：</p><p>export PATH&#x3D;”$HOME&#x2F;esp322&#x2F;xtensa-esp32-elf&#x2F;bin:$PATH</p><p>因此我们可以通过输入简单的命令，完成环境的配置。</p><p>另一方面，在”～“目录下的.bash_aliases是一个特殊的文件，它专门用来存放我们给其他命令起别名的设置。并且，每当新建一个终端，在终端启动时会自动运行一次这个文件里的指令，因此，对于不同版本的SDK，我们只需要新建一个终端，运行对应版本的指令，就可以实现当前终端的环境变量的配置，而不影响其他终端，做到多版本SDK开发的共存。</p><p>_.bashrc中有对.bash_aliases的说明：</p><img src="https://img-blog.csdnimg.cn/20200812010421728.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmd5eDEyMzQ=,size_16,color_FFFFFF,t_70"><p><strong>即允许我们新建一个.bash_aliases文件来专门存放我们的起别名的操作。这正是上面我提到的一点。<br>在实践中注意修改对应的路径就可以了，该方法也适用于别的开发环境，多版本SDK共存处理的操作。</strong></p><h1 id="对-Bash-Aliases（别名）-说明"><a href="#对-Bash-Aliases（别名）-说明" class="headerlink" title="对 Bash Aliases（别名） 说明"></a>对 Bash Aliases（别名） 说明</h1><p><strong>Bash中的Aliases（别名）可以简单地称为将运行另一个命令&#x2F;程序的命令或快捷方式，当运行的命令很长且对于经常使用的命令时，那么使用Bash别名是非常有用的。</strong><br>在本文中，小编将简单整理在Linux系统中创建和使用Bash别名的不同方法，感兴趣的朋友可以关注下。</p><h2 id="在Linux中检查Bash别名"><a href="#在Linux中检查Bash别名" class="headerlink" title="在Linux中检查Bash别名"></a>在Linux中检查Bash别名</h2><blockquote><p>Bash Alias是一个shell内置命令，可以通过运行以下命令进行确认：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">type</span> -a <span class="built_in">alias</span></span></span><br><span class="line">alias is a shell builtin</span><br></pre></td></tr></table></figure><p>在跳转和设置别名之前，首先需要看到涉及的配置文件。一个别名可以在<strong>“用户级”</strong>或<strong>“系统级”</strong>中进行设置。<br>如果调用系统shell，只需在终端键入<strong>“ alias ”</strong>即可查看已定义别名的列表。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ alias</span><br></pre></td></tr></table></figure><img src="http://www.idccoupon.com/wp-content/uploads/2021/02/bashaliase.png"><p><strong>（检查已定义Linux别名的列表）</strong></p><p>在.bashrc文件或.bash_aliases文件中定义用户级别名。该.bash_aliases文件是将所有的别名到一个单独的文件，而不是把它在的.bashrc文件以及其他参数。刚开始，.bash_aliases是不可用的，所以必须创建它。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ls -la ~ | grep -i .bash_aliases       <span class="comment"># 检查文件是否可用</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> touch ~/.bash_aliases                  <span class="comment"># 创建一个空的别名文件</span></span></span><br></pre></td></tr></table></figure><img src="http://www.idccoupon.com/wp-content/uploads/2021/02/bashaliases.png"><p><strong>（创建Bash别名文件）</strong></p><p>打开.bashrc文件，并注意以下部分。这部分代码的功用是检查用户主目录下是否存在文件.bash_aliases，并在每次启动新的终端会话时将其加载。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Alias definitions.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> You may want to put all your additions into a separate file like</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ~/.bash_aliases, instead of adding them here directly.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> See /usr/share/doc/bash-doc/examples <span class="keyword">in</span> the bash-doc package.</span></span><br><span class="line"></span><br><span class="line">if [ -f ~/.bash_aliases ]; then</span><br><span class="line">    . ~/.bash_aliases</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>你还可以在任何目录下创建自定义别名文件，并在.bashrc或.profile中添加定义以加载它。但我不喜欢这样，个人比较喜欢选择将所有别名分组在.bash_aliases下。</p><p>当然，你也可以在.bashrc文件下添加别名。在.bashrc文件下查找别名部分，其中带有一些预定义的别名。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">enable</span> color support of ls and also add handy aliases</span></span><br><span class="line">if [ -x /usr/bin/dircolors ]; then</span><br><span class="line">    test -r ~/.dircolors &amp;&amp; eval &quot;$(dircolors -b ~/.dircolors)&quot; || eval &quot;$(dircolors -b)&quot;</span><br><span class="line">    alias ls=&#x27;ls --color=auto&#x27;</span><br><span class="line">    #alias dir=&#x27;dir --color=auto&#x27;</span><br><span class="line">    #alias vdir=&#x27;vdir --color=auto&#x27;</span><br><span class="line"></span><br><span class="line">    alias grep=&#x27;grep --color=auto&#x27;</span><br><span class="line">    alias fgrep=&#x27;fgrep --color=auto&#x27;</span><br><span class="line">    alias egrep=&#x27;egrep --color=auto&#x27;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> colored GCC warnings and errors</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">export</span> GCC_COLORS=<span class="string">&#x27;error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> some more ls aliases</span></span><br><span class="line">alias ll=&#x27;ls -alF&#x27;</span><br><span class="line">alias la=&#x27;ls -A&#x27;</span><br><span class="line">alias l=&#x27;ls -CF&#x27;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Add an <span class="string">&quot;alert&quot;</span> <span class="built_in">alias</span> <span class="keyword">for</span> long running commands.  Use like so:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   sleep 10; alert</span></span><br><span class="line">alias alert=&#x27;notify-send --urgency=low -i &quot;$([ $? = 0 ] &amp;&amp; echo terminal || echo error)&quot; &quot;$(history|tail </span><br></pre></td></tr></table></figure><img src="http://www.idccoupon.com/wp-content/uploads/2021/02/bas.png"><h2 id="在Linux系统中创建别名"><a href="#在Linux系统中创建别名" class="headerlink" title="在Linux系统中创建别名"></a><strong>在Linux系统中创建别名</strong></h2><p>你可以创建将仅为当前会话存储并在当前会话结束后将被销毁的临时别名，也可以创建将是持久性的永久别名。</p><p>在Linux中创建别名的命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">alias</span> &lt;name-of-the-command&gt;=<span class="string">&quot;command to run&quot;</span></span></span><br></pre></td></tr></table></figure><p>例如，创建以下的别名。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">alias</span> Hello=<span class="string">&quot;echo welcome to idccoupon&quot;</span></span></span><br></pre></td></tr></table></figure><p>打开终端并创建所需的任何<strong>别名</strong>命令。注意：如果您打开另一个会话，那么新创建的别名将不可用。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">alias</span> Hello<span class="string">&quot;echo welcome to idccoupon&quot;</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">alias</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> Hello</span></span><br></pre></td></tr></table></figure><p>要使别名永久化，请将其添加到**.bash_aliases**文件中。你可以使用自己喜欢的文本编辑器，也可以使用cat命令或echo命令添加别名。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="built_in">alias</span> nf=<span class="string">&quot;neofetch&quot;</span> &gt;&gt; ~/.bash_aliases</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat &gt;&gt; ~/.bash_aliases</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat ~/.bash_aliases</span></span><br></pre></td></tr></table></figure><img src="http://www.idccoupon.com/wp-content/uploads/2021/02/bashalias.png"><p><strong>（列出定义的别名）</strong></p><p>如果想要它起作用，必须重新加载**.bash_aliases**文件，才能使更改在当前会话中生效。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span>〜/ .bash_aliases</span></span><br></pre></td></tr></table></figure><p>现在，如果我运行<strong>“ nf”（</strong>这是“ neofetch”的别名），它将触发<strong>neofetch</strong>程序。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> nf</span></span><br></pre></td></tr></table></figure><img src="http://www.idccoupon.com/wp-content/uploads/2021/02/bashalia.png"><p><strong>（在Linux中运行Alias）</strong></p><p>此外，一个别名可以覆盖想要想覆盖任何命令。为了进行演示，这里将使用一个uptime命令，该命令将显示系统正常运行时间，登录的用户数以及系统平均负载。现在，我将创建一个别名，该别名将覆盖<strong>uptime命令</strong>的行为。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> uptime</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat &gt;&gt; ~/.bash_aliases <span class="built_in">alias</span> uptime=<span class="string">&quot;echo &#x27;I am running uptime command now&#x27;&quot;</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> ~/.bash_aliases</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> uptime</span></span><br></pre></td></tr></table></figure><img src="http://www.idccoupon.com/wp-content/uploads/2021/02/bashali.png"><p><strong>覆盖命令的默认行为）</strong></p><p>从这个例子中可以得出结论，在检查和调用实际命令之前，优先级属于bash别名。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat ~/.bash_aliases</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> ~/.bash_aliases</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> uptime</span></span><br></pre></td></tr></table></figure><img src="http://www.idccoupon.com/wp-content/uploads/2021/02/bashal.png"><h2 id="在Linux中删除别名"><a href="#在Linux中删除别名" class="headerlink" title="在Linux中删除别名"></a>在Linux中删除别名</h2><p>现在，从**.bash_aliases<strong>文件中删除</strong>正常运行时间<strong>条目，然后重新加载</strong>.bash_aliases<strong>文件，该文件仍将使用别名定义输出正常运行时间。这是因为别名定义已加载到当前的Shell会话中，所以必须启动新会话或通过运行</strong>unalias**命令取消别名定义，如下图所示。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">unalias</span> uptime</span></span><br></pre></td></tr></table></figure><img src="http://www.idccoupon.com/wp-content/uploads/2021/02/basha.png"><p><strong>在Linux中删除别名）</strong></p><p><strong>注意</strong>：Unalias将从当前加载的会话中删除别名定义，而不是从**.bashrc<strong>或</strong>.bash_aliases中删除**。</p><h2 id="添加系统范围的别名"><a href="#添加系统范围的别名" class="headerlink" title="添加系统范围的别名"></a>添加系统范围的别名</h2><p>至此，我们已经了解了如何在用户级别中设置别名。而如果想要全局设置别名，可以修改<strong>“ &#x2F;etc&#x2F;bash.bashrc”</strong>文件并添加将在全局范围内生效的别名。当然需要具有提升的特权才能修改<strong>bash.bashrc</strong>文件。</p><p>或者，在<strong>“ &#x2F;etc&#x2F;profile.d&#x2F;”</strong>下创建一个脚本。当登录到shell时，<strong>“ &#x2F; etc &#x2F; profile”</strong>将在<strong>profile.d</strong>下运行任何脚本，然后实际运行<strong>〜&#x2F; .profile</strong>。此方法将减少弄乱**&#x2F; etc &#x2F; profile<strong>或</strong>&#x2F;etc&#x2F;bash.bashrc**文件的风险。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo cat &gt;&gt; /etc/profile.d/alias.sh</span></span><br><span class="line">alias ls=”ls -ltra”</span><br></pre></td></tr></table></figure><p>以下是从**&#x2F; etc &#x2F; profile<strong>获取的代码，该代码负责运行我们放在</strong>&#x2F;etc&#x2F;profiles.d&#x2F;**下的所有脚本。它将查找带有<code>.sh</code>扩展名的所有文件，然后运行source命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tail / etc / profile</span></span><br></pre></td></tr></table></figure><img src="http://www.idccoupon.com/wp-content/uploads/2021/02/bash.png"><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><p>以上就是在Linux系统中创建和使用Bash Aliases（别名）的简单方法，不难发现，可以很容易的在Linux系统中设置别名、配置文件的别名，以及在“<strong>用户级</strong>”或“<strong>系统级</strong>”环境中设置别名的方法。</p><p>如果经常使用Linux命令，而且命令比较长的话， 那么不妨为其多设置几个别名，这样工作起来更加的便捷和高效。</p><hr><h1 id="相关链接（侵删）"><a href="#相关链接（侵删）" class="headerlink" title="相关链接（侵删）"></a>相关链接（侵删）</h1><ol><li><a href="https://blog.csdn.net/wangyx1234/article/details/107947892">ESP32编译环境多版本共存处理办法</a></li><li><a href="http://www.idccoupon.com/3938.html">Linux系统中创建和使用Bash Aliases（别名）的不同方法概述</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">Ubuntu下编译环境多版本共存，实现多芯片多版本共存,ESP8266_RTOS_SDK和esp-open-rtos共存</summary>
    
    
    
    <category term="Linux" scheme="https://zml3589110.github.io/categories/Linux/"/>
    
    <category term="编译环境" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83/"/>
    
    <category term="ESP8266" scheme="https://zml3589110.github.io/categories/ESP8266/"/>
    
    
    <category term="Ubuntu" scheme="https://zml3589110.github.io/tags/Ubuntu/"/>
    
    <category term="编译环境" scheme="https://zml3589110.github.io/tags/%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83/"/>
    
    <category term="多版本共存" scheme="https://zml3589110.github.io/tags/%E5%A4%9A%E7%89%88%E6%9C%AC%E5%85%B1%E5%AD%98/"/>
    
    <category term="Bash Aliases" scheme="https://zml3589110.github.io/tags/Bash-Aliases/"/>
    
    <category term="别名" scheme="https://zml3589110.github.io/tags/%E5%88%AB%E5%90%8D/"/>
    
  </entry>
  
  <entry>
    <title>bat字符串拼接</title>
    <link href="https://zml3589110.github.io/posts/2626575334.html"/>
    <id>https://zml3589110.github.io/posts/2626575334.html</id>
    <published>2022-11-12T03:26:20.000Z</published>
    <updated>2022-11-12T03:30:43.312Z</updated>
    
    <content type="html"><![CDATA[<h1 id="将两个字符串变量联合在一起"><a href="#将两个字符串变量联合在一起" class="headerlink" title="将两个字符串变量联合在一起"></a>将两个字符串变量联合在一起</h1><ol><li>方法一<br>可以写成set val &#x3D; %VarA%%VarB%，但是由于赋值问题，建议前后加上引号。</li></ol><p>例如：</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"></span><br><span class="line"><span class="comment">rem 两个变量拼接，等号前后一定不要有空格</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> str1=Hello</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> str2=world</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> result=“<span class="variable">%str1%</span>, <span class="variable">%str2%</span>”</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">%result%</span></span><br></pre></td></tr></table></figure><img src="https://iknow-pic.cdn.bcebos.com/94cad1c8a786c91777e8c33ac63d70cf3ac757cd?x-bce-process=image%2Fresize%2Cm_lfit%2Cw_600%2Ch_800%2Climit_1%2Fquality%2Cq_85%2Fformat%2Cf_auto"><p><strong>扩展资料</strong><br>批处理文件，在DOS和Windows（任意）系统中，.bat文件是可执行文件，由一系列命令构成，其中可以包含对其他程序的调用。</p><p>这个文件的每一行都是一条DOS命令（大部分时候就好像我们在DOS提示符下执行的命令行一样），你可以使用DOS下的Edit或者Windows的记事本(notepad)等任何文本文件编辑工具创建和修改批处理文件。</p><p>批处理中的变量基本上是万能的，可以储存各种各样的数据，不过用来计算时你会发现变量类型转为了int，数值的极端范围为[-2147483648，2147483647]，如果不拿来计算的话，似乎数万位也是可以的。</p><ol start="2"><li>方法二 <figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">:: 是的, 你这样写也是可以的, 但是还是加上引号</span><br><span class="line">:: 这样可以避免一些字符无法赋值的问题</span><br><span class="line">:: 比如:</span><br><span class="line"></span><br><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">set</span> a=<span class="number">12345</span></span><br><span class="line">    <span class="built_in">set</span> b=<span class="number">23456</span></span><br><span class="line">    <span class="built_in">set</span> &quot;c=<span class="variable">%a%</span><span class="variable">%b%</span>&quot; </span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">%c%</span></span><br><span class="line">    <span class="built_in">pause</span>&gt;<span class="built_in">nul</span></span><br><span class="line">     </span><br><span class="line">    :: 中国批处理脚本联盟</span><br></pre></td></tr></table></figure></li></ol><hr><blockquote><p><strong>说明：本文是收集参考文档，以方便查看（侵删）</strong></p></blockquote><hr><h1 id="信息链接"><a href="#信息链接" class="headerlink" title="信息链接:"></a>信息链接:</h1><ol><li><a href="https://zhidao.baidu.com/question/1383554521726188140.html">bat 如何将两个字符串变量联合在一起?</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">bat实现字符串拼接</summary>
    
    
    
    <category term="小插件类" scheme="https://zml3589110.github.io/categories/%E5%B0%8F%E6%8F%92%E4%BB%B6%E7%B1%BB/"/>
    
    <category term="BAT" scheme="https://zml3589110.github.io/categories/BAT/"/>
    
    <category term="语法" scheme="https://zml3589110.github.io/categories/%E8%AF%AD%E6%B3%95/"/>
    
    
    <category term="字符串" scheme="https://zml3589110.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="计算机" scheme="https://zml3589110.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    <category term="bat" scheme="https://zml3589110.github.io/tags/bat/"/>
    
    <category term="脚本" scheme="https://zml3589110.github.io/tags/%E8%84%9A%E6%9C%AC/"/>
    
    <category term="cmd" scheme="https://zml3589110.github.io/tags/cmd/"/>
    
  </entry>
  
  <entry>
    <title>bat函数使用</title>
    <link href="https://zml3589110.github.io/posts/3963076605.html"/>
    <id>https://zml3589110.github.io/posts/3963076605.html</id>
    <published>2022-11-12T03:19:20.000Z</published>
    <updated>2022-11-12T03:30:43.309Z</updated>
    
    <content type="html"><![CDATA[<h1 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h1><p>Windows bat脚本是一种解释性的脚本语言，可以拿到做很多事情。对于稍简单的问题：比如通过注册表判断下档期机器的语言啊，国家啊，安装了那些软件啊等等还少诶简单。但是如果有可能使用bat脚本来处理较复杂的问题时，就需要用函数来将其模块化，方便bat脚本的阅读和编写。下面来介绍下bat 函数的用法</p><h1 id="bat函数写法"><a href="#bat函数写法" class="headerlink" title="bat函数写法"></a>bat函数写法</h1><p>如下是一个最简单的函数写法；以**:func开始以 goto:eof **结束。:func和goto:eof之间的为函数内容，例如这里的echo this is a bat func</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">:func</span><br><span class="line"><span class="built_in">echo</span> this is a bat func</span><br><span class="line"><span class="function">goto:<span class="title">eof</span></span></span><br></pre></td></tr></table></figure><h1 id="bat函数调用"><a href="#bat函数调用" class="headerlink" title="bat函数调用"></a>bat函数调用</h1><p>写好了bat函数之后，我们需要调用它。如下代码片段展示了如何在bat脚本中调用函数。其实很简单，就这一句<strong>call:func</strong>即可。</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">call:<span class="title">func</span></span></span><br><span class="line"><span class="function"><span class="title">pause</span></span></span><br><span class="line"><span class="function">:<span class="title">func</span></span></span><br><span class="line"><span class="function"><span class="title">echo</span> <span class="title">this</span> <span class="title">is</span> <span class="title">a</span> <span class="title">bat</span> <span class="title">func</span></span></span><br><span class="line"><span class="function"><span class="title">goto:eof</span></span></span><br></pre></td></tr></table></figure><h1 id="bat函数返回值"><a href="#bat函数返回值" class="headerlink" title="bat函数返回值"></a>bat函数返回值</h1><p><strong>目前我了解到的bat函数返回值的获取有如下两种方法：</strong></p><ul><li>使用参数带回</li><li>使用全局变量带回</li></ul><p>这里直接贴上关于bat函数的各种条件的验证代码：</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">color</span> <span class="number">0</span>d</span><br><span class="line"><span class="built_in">echo</span> bat Function example</span><br><span class="line"><span class="built_in">echo</span> =================================</span><br><span class="line"><span class="built_in">echo</span> ==========Func No paramter ======</span><br><span class="line"><span class="built_in">echo</span> =================================</span><br><span class="line"><span class="built_in">echo</span> before <span class="keyword">call</span> myFuncNoPara</span><br><span class="line"><span class="function">call:<span class="title">myFuncNoPara</span></span></span><br><span class="line"><span class="function"><span class="title">echo</span> <span class="title">after</span> <span class="title">call</span> <span class="title">myFuncNoPara</span></span></span><br><span class="line"><span class="function"><span class="title">echo</span> =================================</span></span><br><span class="line"><span class="function"><span class="title">echo</span> ===========<span class="title">Func</span> <span class="title">has</span> <span class="title">paramter</span>=====</span></span><br><span class="line"><span class="function"><span class="title">echo</span> =================================</span></span><br><span class="line"><span class="function"><span class="title">echo</span> <span class="title">before</span> <span class="title">call</span> <span class="title">myFuncHasPara</span></span></span><br><span class="line"><span class="function"><span class="title">call:myFuncHasPara</span> 123 <span class="title">abc</span></span></span><br><span class="line"><span class="function"><span class="title">echo</span> <span class="title">after</span> <span class="title">call</span> <span class="title">myFuncHasPara</span></span></span><br><span class="line"><span class="function"><span class="title">echo</span> =================================</span></span><br><span class="line"><span class="function"><span class="title">echo</span> =======<span class="title">Func</span> <span class="title">with</span> <span class="title">return</span> <span class="title">value</span>====</span></span><br><span class="line"><span class="function"><span class="title">echo</span> =================================</span></span><br><span class="line"><span class="function"><span class="title">set</span> <span class="title">return</span>=123</span></span><br><span class="line"><span class="function"><span class="title">set</span> <span class="title">returnPara</span>=321</span></span><br><span class="line"><span class="function"><span class="title">echo</span> <span class="title">return</span>:%<span class="title">return</span>%</span></span><br><span class="line"><span class="function"><span class="title">echo</span> <span class="title">returnPara</span>:%<span class="title">returnPara</span>%</span></span><br><span class="line"><span class="function"><span class="title">echo</span> <span class="title">befora</span> <span class="title">call</span> <span class="title">myFuncReturnValue</span></span></span><br><span class="line"><span class="function"><span class="title">call:myFuncReturnValue</span> <span class="title">returnPara</span> <span class="title">abc</span></span></span><br><span class="line"><span class="function"><span class="title">echo</span> <span class="title">after</span> <span class="title">call</span> <span class="title">myFuncReturnValue</span></span></span><br><span class="line"><span class="function"><span class="title">echo</span> <span class="title">return</span>:%<span class="title">return</span>%</span></span><br><span class="line"><span class="function"><span class="title">echo</span> <span class="title">returnPara</span>:%<span class="title">returnPara</span>%</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">pause</span></span></span><br><span class="line"><span class="function">:<span class="title">myFuncNoPara</span></span></span><br><span class="line"><span class="function"><span class="title">echo</span> <span class="title">myFuncNoPara</span> <span class="title">enter</span></span></span><br><span class="line"><span class="function"><span class="title">echo</span> <span class="title">myFuncNoPara</span> <span class="title">First</span> <span class="title">para</span>:%1</span></span><br><span class="line"><span class="function"><span class="title">echo</span> <span class="title">myFuncNoPara</span> <span class="title">Second</span> <span class="title">para</span>:%2</span></span><br><span class="line"><span class="function"><span class="title">echo</span> <span class="title">myFuncNoPara</span> <span class="title">Third</span> <span class="title">para</span>:%3</span></span><br><span class="line"><span class="function"><span class="title">echo</span> <span class="title">myFuncNoPara</span> <span class="title">exit</span></span></span><br><span class="line"><span class="function"><span class="title">goto:eof</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">:<span class="title">myFuncHasPara</span></span></span><br><span class="line"><span class="function"><span class="title">echo</span> <span class="title">myFuncHasPara</span> <span class="title">enter</span></span></span><br><span class="line"><span class="function"><span class="title">echo</span> <span class="title">myFuncHasPara</span> <span class="title">First</span> <span class="title">para</span>:%1</span></span><br><span class="line"><span class="function"><span class="title">echo</span> <span class="title">myFuncHasPara</span> <span class="title">Second</span> <span class="title">para</span>:%2</span></span><br><span class="line"><span class="function"><span class="title">echo</span> <span class="title">myFuncHasPara</span> <span class="title">Third</span> <span class="title">para</span>:%3</span></span><br><span class="line"><span class="function"><span class="title">echo</span> <span class="title">myFuncHasPara</span> <span class="title">exit</span></span></span><br><span class="line"><span class="function"><span class="title">goto:eof</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">:<span class="title">myFuncReturnValue</span></span></span><br><span class="line"><span class="function"><span class="title">echo</span> <span class="title">myFuncReturnValue</span></span></span><br><span class="line"><span class="function"><span class="title">echo</span> <span class="title">myFuncReturnValue</span> <span class="title">First</span> <span class="title">para</span>:%1</span></span><br><span class="line"><span class="function"><span class="title">echo</span> <span class="title">myFuncReturnValue</span> <span class="title">Second</span> <span class="title">para</span>:%2</span></span><br><span class="line"><span class="function"><span class="title">set</span> &quot;%~1=%2%&quot;</span></span><br><span class="line"><span class="function"><span class="title">set</span> <span class="title">return</span>=%2</span></span><br><span class="line"><span class="function"><span class="title">goto:eof</span></span></span><br></pre></td></tr></table></figure><p><strong>运行效果图：</strong></p><img src="https://img-blog.csdn.net/20170630145539023?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcGVuZ19jYW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"><hr><blockquote><p><strong>说明：本文是收集参考文档，以方便查看（侵删）</strong></p></blockquote><hr><h1 id="信息链接"><a href="#信息链接" class="headerlink" title="信息链接:"></a>信息链接:</h1><ol><li><a href="https://blog.csdn.net/peng_cao/article/details/73999076">bat 脚本之 使用函数</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">bat实现类似C/C++中call函数调用，实际上是没有函数方法</summary>
    
    
    
    <category term="小插件类" scheme="https://zml3589110.github.io/categories/%E5%B0%8F%E6%8F%92%E4%BB%B6%E7%B1%BB/"/>
    
    <category term="BAT" scheme="https://zml3589110.github.io/categories/BAT/"/>
    
    <category term="语法" scheme="https://zml3589110.github.io/categories/%E8%AF%AD%E6%B3%95/"/>
    
    
    <category term="计算机" scheme="https://zml3589110.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    <category term="bat" scheme="https://zml3589110.github.io/tags/bat/"/>
    
    <category term="脚本" scheme="https://zml3589110.github.io/tags/%E8%84%9A%E6%9C%AC/"/>
    
    <category term="cmd" scheme="https://zml3589110.github.io/tags/cmd/"/>
    
    <category term="函数使用" scheme="https://zml3589110.github.io/tags/%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>bat路径字符串处理</title>
    <link href="https://zml3589110.github.io/posts/4108996742.html"/>
    <id>https://zml3589110.github.io/posts/4108996742.html</id>
    <published>2022-11-12T03:04:20.000Z</published>
    <updated>2022-11-12T03:30:43.305Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>又是实际开发中的问题，想要截取一个文件路径中的盘符、文件名等信息，第一反应是正则表达式？或者是 split 函数？这些往往都是“高级”语言中才会有的实现方法，对于批处理来说有点“带不动”啊，那么在bat批处理中要怎样处理类似的请求呢？最近找到了两种方法，接下来会逐一展示一下，不过在展示具体的写法前，我们先来看一下 %~dp0的含义。</p><h2 id="dp0的含义"><a href="#dp0的含义" class="headerlink" title="%~dp0的含义"></a>%~dp0的含义</h2><p>关于 %<del>dp0 的作用在之前的总结中[ 《.bat批处理（四）：路径相关%cd%和%</del>dp0的区别》 ](<a href="https://blog.csdn.net/albertsh/article/details/52807345">https://blog.csdn.net/albertsh/article/details/52807345</a>) 有提到过，它表示当前运行的批处理文件所在的目录，那么它是一个特殊的变量吗？</p><p>可以说算是吧，这个变量特殊在它是从参数变量 %0 扩展而来的，提到 %0 很多人都会想到它是批处理脚本的第一个参数，表示当前运行的脚本全路径，可以写个脚本试一下：</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># Albert <span class="built_in">at</span> home-pc <span class="keyword">in</span> D:\data\bat [<span class="number">0</span>:<span class="number">03</span>:<span class="number">25</span>]</span><br><span class="line">% Get-Content showparams.bat</span><br><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> %<span class="number">0</span></span><br><span class="line"><span class="built_in">echo</span> %<span class="number">1</span></span><br><span class="line"></span><br><span class="line"># Albert <span class="built_in">at</span> home-pc <span class="keyword">in</span> D:\data\bat [<span class="number">0</span>:<span class="number">03</span>:<span class="number">31</span>]</span><br><span class="line">% ./showparams.bat good</span><br><span class="line">&quot;D:\data\bat\showparams.bat&quot;</span><br><span class="line">good</span><br></pre></td></tr></table></figure><blockquote><p>类似的变量还有 1%、2%、3%… 一直到9%，都依次表示运行批处理脚本时传入的参数，这些变量还有一个本领，那就是支持扩展，写起来花里胡哨的。</p></blockquote><h1 id="扩展字符串"><a href="#扩展字符串" class="headerlink" title="扩展字符串"></a>扩展字符串</h1><p><strong>扩展字符串是批处理自带的功能，可以实现对表示文件路径的字符串进行特殊的处理，以%0 参数为例，具体功能列举如下：</strong></p><ul><li>%~0 - 删除路径中的引号</li><li>%~f0 - 将 %0 扩展到一个完全合格的路径名</li><li>%~d0 - 将 %0 扩展到一个驱动器号</li><li>%~p0 - 将 %0 扩展到一个路径</li><li>%~n0 - 将 %0 扩展到一个文件名</li><li>%~x0 - 将 %0 扩展到一个文件扩展名</li><li>%~s0 - 将 %0 扩展的路径只含有短名</li><li>%~a0 - 将 %0 扩展到文件的文件属性</li><li>%~t0 - 将 %0 扩展到文件的日期&#x2F;时间</li><li>%~z0 - 将 %0 扩展到文件的大小</li><li>%~$PATH:0 查找变量0%在环境变量$PATH的目录，并将 %0 扩展到找到的第一个完全合格的名称，$PATH未被定义或没找到文件，则结果为空字符串</li></ul><blockquote><p>当然这个写法也可以进行组合，比如 %<del>d0 和 %</del>p0 组合后变成 %<del>dp0 也就是我们常见的那个变量啦</del></p></blockquote><p><strong>可以将这些变量打印出来看一下具体的值：</strong></p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"># Albert <span class="built_in">at</span> home-pc <span class="keyword">in</span> D:\data\bat [<span class="number">0</span>:<span class="number">26</span>:<span class="number">17</span>]</span><br><span class="line">% Get-Content showparams.bat</span><br><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> %<span class="number">0</span></span><br><span class="line"><span class="built_in">echo</span> %~<span class="number">0</span></span><br><span class="line"><span class="built_in">echo</span> %~f0</span><br><span class="line"><span class="built_in">echo</span> %~d0</span><br><span class="line"><span class="built_in">echo</span> %~p0</span><br><span class="line"><span class="built_in">echo</span> %~n0</span><br><span class="line"><span class="built_in">echo</span> %~x0</span><br><span class="line"><span class="built_in">echo</span> %~s0</span><br><span class="line"><span class="built_in">echo</span> %~a0</span><br><span class="line"><span class="built_in">echo</span> %~t0</span><br><span class="line"><span class="built_in">echo</span> %~z0</span><br><span class="line"><span class="built_in">echo</span> %~dp0</span><br><span class="line"><span class="built_in">echo</span> %~nx0</span><br><span class="line"># Albert <span class="built_in">at</span> home-pc <span class="keyword">in</span> D:\data\bat [<span class="number">0</span>:<span class="number">26</span>:<span class="number">28</span>]</span><br><span class="line">% .\showparams.bat</span><br><span class="line">&quot;D:\data\bat\showparams.bat&quot;</span><br><span class="line"><span class="function">D:\<span class="title">data</span>\<span class="title">bat</span>\<span class="title">showparams.bat</span></span></span><br><span class="line"><span class="function"><span class="title">D</span>:\<span class="title">data</span>\<span class="title">bat</span>\<span class="title">showparams.bat</span></span></span><br><span class="line"><span class="function"><span class="title">D</span>:</span></span><br><span class="line"><span class="function">\<span class="title">data</span>\<span class="title">bat</span>\</span></span><br><span class="line"><span class="function"><span class="title">showparams</span></span></span><br><span class="line"><span class="function">.<span class="title">bat</span></span></span><br><span class="line"><span class="function"><span class="title">D</span>:\<span class="title">data</span>\<span class="title">bat</span>\<span class="title">showparams.bat</span></span></span><br><span class="line"><span class="function">--<span class="title">a</span>--------</span></span><br><span class="line"><span class="function">2021/10/17 00:26</span></span><br><span class="line"><span class="function">156</span></span><br><span class="line"><span class="function"><span class="title">D</span>:\<span class="title">data</span>\<span class="title">bat</span>\</span></span><br><span class="line"><span class="function"><span class="title">showparams.bat</span></span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure><h1 id="从字符串中截取路径、文件名（重点）"><a href="#从字符串中截取路径、文件名（重点）" class="headerlink" title="从字符串中截取路径、文件名（重点）"></a>从字符串中截取路径、文件名（重点）</h1><p>上面的部分解释了%~dp0，同时也知道了这些脚本参数指出扩展语法，如果是普通变量的话就不能使用扩展语法了，那么对于一个普通的包含字符串怎么才能使用扩展语法，截取到想要的部分呢？目前我知道的有两种方法：一种是传参使其变成脚本参数，也就是 %n的形式，另一种方法就是使用 for 语句，接下来分别看一下。</p><h2 id="脚本传参（这个方法很好-使用call方式调用传参）"><a href="#脚本传参（这个方法很好-使用call方式调用传参）" class="headerlink" title="脚本传参（这个方法很好-使用call方式调用传参）"></a>脚本传参（这个方法很好-使用call方式调用传参）</h2><p>普通的字符串无法进行扩展，如果想把这种变量就需要把它们变成脚本参数，这就需要将参数传递给另一个脚本，这样实现起来会将脚本调用变得复杂一些，实际上可以在一个脚本中完成截取工作，类似于C&#x2F;C++中的函数调用，可以在批处理中使用 call 命令搭配标签实现，具体代码如下：</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"># Albert <span class="built_in">at</span> home-pc <span class="keyword">in</span> D:\data\bat [<span class="number">17</span>:<span class="number">37</span>:<span class="number">54</span>]</span><br><span class="line">% Get-Content extract1.bat</span><br><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> OriginStr=&quot;C:/Demo/myproject/example.txt&quot;</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">%OriginStr%</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">call</span> :extract <span class="variable">%OriginStr%</span></span><br><span class="line"><span class="keyword">goto</span> :eof</span><br><span class="line"></span><br><span class="line">:extract</span><br><span class="line"><span class="comment">rem 获取到文件路径</span></span><br><span class="line"><span class="built_in">echo</span> %~dp1</span><br><span class="line"><span class="comment">rem 获取到文件盘符</span></span><br><span class="line"><span class="built_in">echo</span> %~d1</span><br><span class="line"><span class="comment">rem 获取到文件名称</span></span><br><span class="line"><span class="built_in">echo</span> %~n1</span><br><span class="line"><span class="comment">rem 获取到文件后缀</span></span><br><span class="line"><span class="built_in">echo</span> %~x1</span><br><span class="line"></span><br><span class="line"># Albert <span class="built_in">at</span> home-pc <span class="keyword">in</span> D:\data\bat [<span class="number">17</span>:<span class="number">41</span>:<span class="number">25</span>]</span><br><span class="line">% .\extract1.bat</span><br><span class="line">&quot;C:/Demo/myproject/example.txt&quot;</span><br><span class="line"><span class="function">C:\<span class="title">Demo</span>\<span class="title">myproject</span>\</span></span><br><span class="line"><span class="function"><span class="title">C</span>:</span></span><br><span class="line"><span class="function"><span class="title">example</span></span></span><br><span class="line"><span class="function">.<span class="title">txt</span></span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure><p><strong>在这段代码中 :eof 标签是一个默认的标签，表示文件结尾，实际需求中需根据具体要求进行调整。</strong></p><h2 id="for语法扩展"><a href="#for语法扩展" class="headerlink" title="for语法扩展"></a>for语法扩展</h2><p><strong>使用 for 循环是另一种实现方式，因为循环变量也可以支持扩展，可以将需要截取的字符串路径放在循环范围中，然后先循环输出测试下：</strong></p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># Albert <span class="built_in">at</span> home-pc <span class="keyword">in</span> D:\data\bat [<span class="number">17</span>:<span class="number">46</span>:<span class="number">29</span>]</span><br><span class="line">% Get-Content extract2.bat</span><br><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> OriginStr=&quot;C:/Demo/myproject/example.txt&quot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="variable">%%I</span> <span class="keyword">in</span> (<span class="variable">%OriginStr%</span>) <span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">%%I</span></span><br><span class="line"></span><br><span class="line"># Albert <span class="built_in">at</span> home-pc <span class="keyword">in</span> D:\data\bat [<span class="number">17</span>:<span class="number">46</span>:<span class="number">57</span>]</span><br><span class="line">% .\extract2.bat</span><br><span class="line">&quot;C:/Demo/myproject/example.txt&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>在批处理中的循环变量是 %%I的形式，需要两个 % 才可以，后面的变量名可以换成26个字母中的任意一个，并且字母会区分大小写，然后利用这些循环变量就可以进行扩展，然后完成最开始的需求，实现代码如下：</strong></p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># Albert <span class="built_in">at</span> home-pc <span class="keyword">in</span> D:\data\bat [<span class="number">17</span>:<span class="number">53</span>:<span class="number">53</span>]</span><br><span class="line">% Get-Content extract2.bat</span><br><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> OriginStr=&quot;C:/Demo/myproject/example.txt&quot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="variable">%%I</span> <span class="keyword">in</span> (<span class="variable">%OriginStr%</span>) <span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">%%I</span></span><br><span class="line"></span><br><span class="line"><span class="comment">rem 获取到文件路径</span></span><br><span class="line"><span class="keyword">for</span> <span class="variable">%%I</span> <span class="keyword">in</span> (<span class="variable">%OriginStr%</span>) <span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">%%~</span>dpI</span><br><span class="line"><span class="comment">rem 获取到文件盘符</span></span><br><span class="line"><span class="keyword">for</span> <span class="variable">%%I</span> <span class="keyword">in</span> (<span class="variable">%OriginStr%</span>) <span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">%%~</span>dI</span><br><span class="line"><span class="comment">rem 获取到文件名称</span></span><br><span class="line"><span class="keyword">for</span> <span class="variable">%%I</span> <span class="keyword">in</span> (<span class="variable">%OriginStr%</span>) <span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">%%~</span>nI</span><br><span class="line"><span class="comment">rem 获取到文件后缀</span></span><br><span class="line"><span class="keyword">for</span> <span class="variable">%%I</span> <span class="keyword">in</span> (<span class="variable">%OriginStr%</span>) <span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">%%~</span>xI</span><br><span class="line"></span><br><span class="line"># Albert <span class="built_in">at</span> home-pc <span class="keyword">in</span> D:\data\bat [<span class="number">17</span>:<span class="number">54</span>:<span class="number">01</span>]</span><br><span class="line">% .\extract2.bat</span><br><span class="line">&quot;C:/Demo/myproject/example.txt&quot;</span><br><span class="line"><span class="function">C:\<span class="title">Demo</span>\<span class="title">myproject</span>\</span></span><br><span class="line"><span class="function"><span class="title">C</span>:</span></span><br><span class="line"><span class="function"><span class="title">example</span></span></span><br><span class="line"><span class="function">.<span class="title">txt</span></span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure><blockquote><p>这种写法的好处就是无需控制标签跳转流程，通过循环命令 for 就可以获取想要的参数，使用起来会方便很多。</p></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>在批处理文件中 %~dp0 表示批处理文件所在的目录，而 %cd% 表示执行命令时所在的目录</li><li>在批处理文件中想要截取目录操作可以使用变量扩展来实现，而变量必须是 %i 的形式，其中的 i 是可以是 a<del>zA</del>Z0~9</li><li>for 表达式中的循环变量在cmd命令行中是 %i 的形式，而在批处理文件中需要协程 %%i 的形式</li><li>常用的变量扩展有：获取到文件盘符使用 %<del>d0，获取到文件名称使用 %</del>n0，获取到文件后缀使用 %~x0</li></ul><p><strong>注：使用在 【设置工程名称.bat】 文件中处理</strong></p><hr><blockquote><p><strong>说明：本文是收集参考文档，以方便查看（侵删）</strong></p></blockquote><hr><h1 id="信息链接"><a href="#信息链接" class="headerlink" title="信息链接:"></a>信息链接:</h1><ol><li><a href="https://blog.csdn.net/albertsh/article/details/120818017">.bat批处理（十）：从路径字符串中截取盘符、文件名、后缀名等信息</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">对路径字符串进行处理</summary>
    
    
    
    <category term="小插件类" scheme="https://zml3589110.github.io/categories/%E5%B0%8F%E6%8F%92%E4%BB%B6%E7%B1%BB/"/>
    
    <category term="文件管理" scheme="https://zml3589110.github.io/categories/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/"/>
    
    <category term="BAT" scheme="https://zml3589110.github.io/categories/BAT/"/>
    
    
    <category term="文件管理" scheme="https://zml3589110.github.io/tags/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/"/>
    
    <category term="计算机" scheme="https://zml3589110.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    <category term="bat" scheme="https://zml3589110.github.io/tags/bat/"/>
    
    <category term="脚本" scheme="https://zml3589110.github.io/tags/%E8%84%9A%E6%9C%AC/"/>
    
    <category term="cmd" scheme="https://zml3589110.github.io/tags/cmd/"/>
    
    <category term="路径" scheme="https://zml3589110.github.io/tags/%E8%B7%AF%E5%BE%84/"/>
    
  </entry>
  
  <entry>
    <title>C# 在复制大量文件期间不响应UI</title>
    <link href="https://zml3589110.github.io/posts/958244878.html"/>
    <id>https://zml3589110.github.io/posts/958244878.html</id>
    <published>2022-11-11T09:03:20.000Z</published>
    <updated>2022-11-11T09:07:34.341Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>我已经编写了一个备份管理器项目，该项目提供了一个文件夹，它将每个文件和文件夹都复制到另一个位置，依此类推。</p><p>它可以工作(很好地完成了复制作业)，但是在复制过程中(大约需要1分钟)，应用程序UI不会响应。我听说过线程，并且看到过并行编程一词(仅此而已)，现在我需要一些解释，比较和示例，以能够切换我的代码。</p><p>我之前对线程做过非常简单的操作，但是很久以前，我对线程还没有足够的信心。这是我的代码:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">CopyFiles</span>(<span class="params"><span class="built_in">string</span> path, <span class="built_in">string</span> dest</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    System.IO.Directory.CreateDirectory(dest + <span class="string">&quot;\\&quot;</span> + path.Split(<span class="string">&#x27;\\&#x27;</span>)[path.Split(<span class="string">&#x27;\\&#x27;</span>).Count()<span class="number">-1</span>]);</span><br><span class="line">    dest = dest + <span class="string">&quot;\\&quot;</span> + path.Split(<span class="string">&#x27;\\&#x27;</span>)[path.Split(<span class="string">&#x27;\\&#x27;</span>).Count() - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="built_in">string</span> file <span class="keyword">in</span> System.IO.Directory.GetFiles(path))</span><br><span class="line">    &#123;</span><br><span class="line">        System.IO.File.Copy(file, dest + <span class="string">&quot;\\&quot;</span> + file.Split(<span class="string">&#x27;\\&#x27;</span>)[file.Split(<span class="string">&#x27;\\&#x27;</span>).Count() - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="built_in">string</span> folder <span class="keyword">in</span> System.IO.Directory.GetDirectories(path))</span><br><span class="line">    &#123;</span><br><span class="line">        CopyFiles(folder, dest);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>我会根据特定的时间间隔在计时器中运行此程序，如果我使用线程，是否应该省略计时器？带领我，我很困惑。</p></blockquote><h1 id="最佳答案"><a href="#最佳答案" class="headerlink" title="最佳答案"></a>最佳答案</h1><p>由于您没有足够的线程信心，因此我强烈建议您阅读<a href="https://www.albahari.com/threading/">Joe Albahari’s Threading in C# Tutorial</a>。并行编程是指您以“并行”方式或同时进行多项操作(主要是将大量计算分散在多个CPU或GPU内核上)。在这种情况下，您希望线程在复制所有文件时使您的UI响应。从本质上讲，您将具有如下所示的内容:(在阅读了C#教程中的线程之后)</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Thread copyFilesThread = <span class="keyword">new</span> Thread(() =&gt; </span><br><span class="line">&#123;</span><br><span class="line">    CopyFiles(path, dest);</span><br><span class="line">&#125;);</span><br><span class="line">copyFilesThread.Start();</span><br></pre></td></tr></table></figure><p>UI在其自己的线程上运行。放入您的应用程序中的所有代码都将在UI线程上运行(除非您显式使用线程)。由于您的CopyFiles方法需要很长时间，因此它将停止UI，直到复制作业完成。使用线程将在UI线程的单独线程上运行CopyFiles，因此使UI线程响应。</p><p>编辑:至于您的计时器，它多久运行一次？<br>关于c# - 用户界面在复制大量文件期间不响应，我们在Stack Overflow上找到一个类似的问题： <a href="https://stackoverflow.com/questions/14018567/">https://stackoverflow.com/questions/14018567/</a></p><hr><h1 id="相关链接（侵删）"><a href="#相关链接（侵删）" class="headerlink" title="相关链接（侵删）"></a>相关链接（侵删）</h1><ol><li><a href="https://www.coder.work/article/7527149">c# - 用户界面在复制大量文件期间不响应</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">C#在复制大量文件期间不响应UI，导致卡顿</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="C#" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/C/"/>
    
    <category term="前端" scheme="https://zml3589110.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="文件管理" scheme="https://zml3589110.github.io/categories/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/"/>
    
    
    <category term="C#" scheme="https://zml3589110.github.io/tags/C/"/>
    
    <category term="文件管理" scheme="https://zml3589110.github.io/tags/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/"/>
    
    <category term="复制文件" scheme="https://zml3589110.github.io/tags/%E5%A4%8D%E5%88%B6%E6%96%87%E4%BB%B6/"/>
    
    <category term="UI" scheme="https://zml3589110.github.io/tags/UI/"/>
    
  </entry>
  
  <entry>
    <title>C# 文件及文件夹复制并显示进度条</title>
    <link href="https://zml3589110.github.io/posts/3190408972.html"/>
    <id>https://zml3589110.github.io/posts/3190408972.html</id>
    <published>2022-11-11T09:03:20.000Z</published>
    <updated>2022-11-11T09:29:05.819Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考给出的方案"><a href="#参考给出的方案" class="headerlink" title="参考给出的方案"></a>参考给出的方案</h1><p><strong>先求出文件和目录的数目：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="built_in">int</span> <span class="title">Count</span>(<span class="params">String src</span>)</span> &#123;</span><br><span class="line"><span class="built_in">int</span> count = <span class="number">1</span>;</span><br><span class="line">String[] sub = Directory.GetDirectories(src);</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; sub.Length; i++) &#123;</span><br><span class="line">count += Count(sub[i]);</span><br><span class="line">&#125;</span><br><span class="line">String[] files = Directory.GetFiles(src);</span><br><span class="line">count += files.Length;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>设置ProgressBar属性Maximum为上面求出的数目，然后复制：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Copy</span>(<span class="params">String src, String dest</span>)</span> &#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">Directory.CreateDirectory(dest);</span><br><span class="line">String[] sub = Directory.GetDirectories(src);</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; sub.Length; i++) &#123;</span><br><span class="line">String name = Path.GetFileName(sub[i]);</span><br><span class="line">Copy(sub[i], dest + <span class="string">&quot;\\&quot;</span> + name);</span><br><span class="line">&#125;</span><br><span class="line">String[] files = Directory.GetFiles(src);</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; files.Length; i++) &#123;</span><br><span class="line">String name = Path.GetFileName(files[i]);</span><br><span class="line">File.Copy(files[i], dest + <span class="string">&quot;\\&quot;</span> + name);</span><br><span class="line">&#125;</span><br><span class="line">progressBar1.Increment(files.Length + <span class="number">1</span>);<span class="comment">//progressBar1是进度条。</span></span><br><span class="line">&#125;catch(Exception e)&#123;</span><br><span class="line">Console.WriteLine(e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>拷贝文件夹：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CopyDirectory</span>(<span class="params"><span class="built_in">string</span> SourceDirectory, <span class="built_in">string</span> TargetDirectory</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">DirectoryInfo source = <span class="keyword">new</span> DirectoryInfo(SourceDirectory);</span><br><span class="line">DirectoryInfo target = <span class="keyword">new</span> DirectoryInfo(TargetDirectory);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Check If we have valid source</span></span><br><span class="line"><span class="keyword">if</span>(!source.Exists)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!target.Exists)</span><br><span class="line">target.Create();</span><br><span class="line"></span><br><span class="line"><span class="comment">//Copy Files</span></span><br><span class="line">FileInfo[] sourceFiles = source.GetFiles();</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; sourceFiles.Length; ++i)</span><br><span class="line">File.Copy(sourceFiles[i].FullName, target.FullName + <span class="string">&quot;\\&quot;</span> + sourceFiles[i].Name,<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Copy directories</span></span><br><span class="line">DirectoryInfo[] sourceDirectories = source.GetDirectories();</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; sourceDirectories.Length; ++j)</span><br><span class="line">CopyDirectory(sourceDirectories[j].FullName,target.FullName +<span class="string">&quot;\\&quot;</span> + sourceDirectories</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="自己最后实现的进度条显示方法的部分代码"><a href="#自己最后实现的进度条显示方法的部分代码" class="headerlink" title="自己最后实现的进度条显示方法的部分代码"></a>自己最后实现的进度条显示方法的部分代码</h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先求出文件和目录的数目：</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="built_in">int</span> <span class="title">Count</span>(<span class="params">String src</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">int</span> count = <span class="number">1</span>;</span><br><span class="line">    String[] sub = Directory.GetDirectories(src);</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; sub.Length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        count += Count(sub[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    String[] files = Directory.GetFiles(src);</span><br><span class="line">    count += files.Length;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 复制文件及文件夹</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;srcPath&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;destPath&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">copyDir</span>(<span class="params"><span class="built_in">string</span> srcPath, <span class="built_in">string</span> destPath</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DirectoryInfo dir = <span class="keyword">new</span> DirectoryInfo(srcPath);</span><br><span class="line">    <span class="comment">//获取目录下的文件和子目录</span></span><br><span class="line">    FileSystemInfo[] fileinfo = dir.GetFileSystemInfos();</span><br><span class="line">    <span class="keyword">foreach</span> (FileSystemInfo i <span class="keyword">in</span> fileinfo)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i <span class="keyword">is</span> DirectoryInfo)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//判断是否文件夹</span></span><br><span class="line">            <span class="keyword">if</span> (!Directory.Exists(destPath + <span class="string">&quot;\\&quot;</span> + i.Name))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//目标目录下不存在此文件夹即创建子文件夹</span></span><br><span class="line">                Directory.CreateDirectory(destPath + <span class="string">&quot;\\&quot;</span> + i.Name);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//递归调用复制子文件夹</span></span><br><span class="line">            copyDir(i.FullName, destPath + <span class="string">&quot;\\&quot;</span> + i.Name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//不是文件夹即复制文件，true表示可以覆盖同名文件</span></span><br><span class="line">            <span class="comment">//File.Copy(i.FullName, destPath + &quot;\\&quot; + i.Name, true);</span></span><br><span class="line">            CopyFile_1(i.FullName, destPath + <span class="string">&quot;\\&quot;</span> + i.Name, <span class="number">1024</span>);<span class="comment">//复制文件</span></span><br><span class="line">        &#125;</span><br><span class="line">        FileCnt++;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//跨线程访问UI控件，更新主线程中dataGridView表格内容</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.InvokeRequired)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.Invoke(<span class="keyword">new</span> MethodInvoker(<span class="built_in">delegate</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//此处可用于更新UI控件内容</span></span><br><span class="line">                <span class="keyword">this</span>.progressBar2.Maximum = FileMax;</span><br><span class="line">                <span class="keyword">this</span>.progressBar2.Value = FileCnt;</span><br><span class="line">                <span class="comment">//this.progressBar2.Increment(FileCnt);//progressBar1是进度条。</span></span><br><span class="line">                <span class="keyword">this</span>.label2.Text = (FileCnt*<span class="number">100</span> / FileMax).ToString() + <span class="string">&quot;%&quot;</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">this</span>.richTextBox1.AppendText(FileCnt.ToString() + <span class="string">&quot;:&quot;</span> + destPath + <span class="string">&quot;\\&quot;</span> + i.Name + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                <span class="keyword">this</span>.richTextBox1.SelectionStart = <span class="keyword">this</span>.richTextBox1.Text.Length; <span class="comment">// 光标 移动到 最后一行</span></span><br><span class="line">                <span class="keyword">this</span>.richTextBox1.ScrollToCaret();</span><br><span class="line">                </span><br><span class="line"></span><br><span class="line">                <span class="comment">//this.richTextBox1.AppendText(destPath + &quot;\\&quot; + i.Name+&quot;\n&quot;);</span></span><br><span class="line">            &#125;</span><br><span class="line">            ));</span><br><span class="line">        &#125;<span class="comment">//跨线程访问UI控件，更新主线程中dataGridView表格内容</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 文件的复制</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param FormerFile=&quot;string&quot;&gt;</span>源文件路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param toFile=&quot;string&quot;&gt;</span>目的文件路径<span class="doctag">&lt;/param&gt;</span> </span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param SectSize=&quot;int&quot;&gt;</span>传输大小<span class="doctag">&lt;/param&gt;</span> </span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param progressBar=&quot;ProgressBar&quot;&gt;</span>ProgressBar控件<span class="doctag">&lt;/param&gt;</span> </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CopyFile_1</span>(<span class="params"><span class="built_in">string</span> FormerFile, <span class="built_in">string</span> toFile, <span class="built_in">int</span> SectSize</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//progressBar1.Value = 0;//设置进度栏的当前位置为0</span></span><br><span class="line">    <span class="comment">//progressBar1.Minimum = 0;//设置进度栏的最小值为0</span></span><br><span class="line">    </span><br><span class="line">    FileStream fileToCreate = <span class="keyword">new</span> FileStream(toFile, FileMode.Create);<span class="comment">//创建目的文件，如果已存在将被覆盖</span></span><br><span class="line">    fileToCreate.Close();<span class="comment">//关闭所有资源</span></span><br><span class="line">    fileToCreate.Dispose();<span class="comment">//释放所有资源</span></span><br><span class="line">    FormerOpen = <span class="keyword">new</span> FileStream(FormerFile, FileMode.Open, FileAccess.Read);<span class="comment">//以只读方式打开源文件</span></span><br><span class="line">    ToFileOpen = <span class="keyword">new</span> FileStream(toFile, FileMode.Append, FileAccess.Write);<span class="comment">//以写方式打开目的文件</span></span><br><span class="line">    <span class="built_in">int</span> max = Convert.ToInt32(Math.Ceiling((<span class="built_in">double</span>)FormerOpen.Length / (<span class="built_in">double</span>)SectSize));<span class="comment">//根据一次传输的大小，计算传输的个数</span></span><br><span class="line">    <span class="comment">//progressBar1.Maximum = max;//设置进度栏的最大值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.InvokeRequired)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.Invoke(<span class="keyword">new</span> MethodInvoker(<span class="built_in">delegate</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//此处可用于更新UI控件内容</span></span><br><span class="line">            <span class="keyword">this</span>.progressBar1.Value = <span class="number">0</span>;<span class="comment">//增加进度栏的进度块</span></span><br><span class="line">            <span class="keyword">this</span>.progressBar1.Minimum = <span class="number">0</span>;<span class="comment">//设置进度栏的最小值为0</span></span><br><span class="line">            <span class="keyword">this</span>.progressBar1.Maximum = max;<span class="comment">//设置进度栏的最大值</span></span><br><span class="line">        &#125;</span><br><span class="line">        ));</span><br><span class="line">    &#125;<span class="comment">//跨线程访问UI控件，更新主线程中dataGridView表格内容</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> FileSize;<span class="comment">//要拷贝的文件的大小</span></span><br><span class="line">    <span class="keyword">if</span> (SectSize &lt; FormerOpen.Length)<span class="comment">//如果分段拷贝，即每次拷贝内容小于文件总长度</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">byte</span>[] buffer = <span class="keyword">new</span> <span class="built_in">byte</span>[SectSize];<span class="comment">//根据传输的大小，定义一个字节数组</span></span><br><span class="line">        <span class="built_in">int</span> copied = <span class="number">0</span>;<span class="comment">//记录传输的大小</span></span><br><span class="line">        <span class="built_in">int</span> tem_n = <span class="number">1</span>;<span class="comment">//设置进度栏中进度块的增加个数</span></span><br><span class="line">        <span class="keyword">while</span> (copied &lt;= ((<span class="built_in">int</span>)FormerOpen.Length - SectSize))<span class="comment">//拷贝主体部分</span></span><br><span class="line">        &#123;</span><br><span class="line">            FileSize = FormerOpen.Read(buffer, <span class="number">0</span>, SectSize);<span class="comment">//从0开始读，每次最大读SectSize</span></span><br><span class="line">            FormerOpen.Flush();<span class="comment">//清空缓存</span></span><br><span class="line">            ToFileOpen.Write(buffer, <span class="number">0</span>, SectSize);<span class="comment">//向目的文件写入字节</span></span><br><span class="line">            ToFileOpen.Flush();<span class="comment">//清空缓存</span></span><br><span class="line">            ToFileOpen.Position = FormerOpen.Position;<span class="comment">//使源文件和目的文件流的位置相同</span></span><br><span class="line">            copied += FileSize;<span class="comment">//记录已拷贝的大小</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//progressBar1.Value = progressBar1.Value + tem_n;//增加进度栏的进度块</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//跨线程访问UI控件，更新主线程中dataGridView表格内容</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.InvokeRequired)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>.Invoke(<span class="keyword">new</span> MethodInvoker(<span class="built_in">delegate</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//此处可用于更新UI控件内容</span></span><br><span class="line">                    <span class="keyword">this</span>.progressBar1.Value = <span class="keyword">this</span>.progressBar1.Value + tem_n;<span class="comment">//增加进度栏的进度块</span></span><br><span class="line">                    <span class="comment">//label1.Text = this.progressBar1.Value.ToString();</span></span><br><span class="line">                    <span class="comment">//label2.Text = FormerOpen.Length.ToString();</span></span><br><span class="line">                    <span class="comment">//label1.Text = ((this.progressBar1.Value / max) * 100).ToString() + &quot;%&quot;;</span></span><br><span class="line">                    <span class="comment">//label2.Text = ((1-(FormerOpen.Length / FileMax)) * 100).ToString() + &quot;%&quot;;</span></span><br><span class="line">                    <span class="comment">//label1.Text = (copied).ToString();  //当前复制大小</span></span><br><span class="line">                    <span class="comment">//label2.Text = (FormerOpen.Length).ToString();   //文件大小</span></span><br><span class="line"></span><br><span class="line">                    label1.Text = (copied / (FormerOpen.Length / <span class="number">100</span>)).ToString() + <span class="string">&quot;%&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                ));</span><br><span class="line">            &#125;<span class="comment">//跨线程访问UI控件，更新主线程中dataGridView表格内容</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">int</span> left = (<span class="built_in">int</span>)FormerOpen.Length - copied;<span class="comment">//获取剩余大小</span></span><br><span class="line">        FileSize = FormerOpen.Read(buffer, <span class="number">0</span>, left);<span class="comment">//读取剩余的字节</span></span><br><span class="line">        FormerOpen.Flush();<span class="comment">//清空缓存</span></span><br><span class="line">        ToFileOpen.Write(buffer, <span class="number">0</span>, left);<span class="comment">//写入剩余的部分</span></span><br><span class="line">        ToFileOpen.Flush();<span class="comment">//清空缓存</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span><span class="comment">//如果整体拷贝，即每次拷贝内容大于文件总长度</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">byte</span>[] buffer = <span class="keyword">new</span> <span class="built_in">byte</span>[FormerOpen.Length];<span class="comment">//获取文件的大小</span></span><br><span class="line">        FormerOpen.Read(buffer, <span class="number">0</span>, (<span class="built_in">int</span>)FormerOpen.Length);<span class="comment">//读取源文件的字节</span></span><br><span class="line">        FormerOpen.Flush();<span class="comment">//清空缓存</span></span><br><span class="line">        ToFileOpen.Write(buffer, <span class="number">0</span>, (<span class="built_in">int</span>)FormerOpen.Length);<span class="comment">//写放字节</span></span><br><span class="line">        ToFileOpen.Flush();<span class="comment">//清空缓存</span></span><br><span class="line">    &#125;</span><br><span class="line">    FormerOpen.Close();<span class="comment">//释放所有资源</span></span><br><span class="line">    ToFileOpen.Close();<span class="comment">//释放所有资源</span></span><br><span class="line">    <span class="comment">//if (MessageBox.Show(&quot;复制完成&quot;) == DialogResult.OK)//显示&quot;复制完成&quot;提示对话框</span></span><br><span class="line">    <span class="comment">//&#123;</span></span><br><span class="line">    <span class="comment">//    progressBar1.Value = 0;//设置进度栏的当有位置为0</span></span><br><span class="line">    <span class="comment">//    textBox1.Clear();//清空文本</span></span><br><span class="line">    <span class="comment">//    textBox2.Clear();</span></span><br><span class="line">    <span class="comment">//    str = &quot;&quot;;</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//单文件拷贝j结束</span></span><br><span class="line">    <span class="comment">//跨线程访问UI控件，更新主线程中dataGridView表格内容</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.InvokeRequired)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.Invoke(<span class="keyword">new</span> MethodInvoker(<span class="built_in">delegate</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//此处可用于更新UI控件内容</span></span><br><span class="line">            <span class="keyword">this</span>.progressBar1.Value = max;<span class="comment">//增加进度栏的进度块</span></span><br><span class="line">            label1.Text = <span class="string">&quot;100%&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ));</span><br><span class="line">    &#125;<span class="comment">//跨线程访问UI控件，更新主线程中dataGridView表格内容</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button5_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//Console.WriteLine(&quot;文件数：&quot; + Count(textBox1.Text));</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">string</span> path = textBox1.Text;</span><br><span class="line">    <span class="built_in">string</span> dest = textBox2.Text;</span><br><span class="line"></span><br><span class="line">    timer1.Start(); <span class="comment">//开始记录复制时间</span></span><br><span class="line">    <span class="comment">//dt1</span></span><br><span class="line">    dt1 = DateTime.Parse(<span class="string">&quot;00:00:00&quot;</span>);</span><br><span class="line">    Lab_Time.Text = <span class="string">&quot;0:00:00&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//progressBar2.Maximum = Count(path);//设置进度栏的最大值</span></span><br><span class="line">    <span class="comment">//创建线程</span></span><br><span class="line">    Thread copyFilesThread = <span class="keyword">new</span> Thread(() =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//sw.Start();</span></span><br><span class="line">        <span class="comment">//CopyFiles(path, dest);</span></span><br><span class="line">        FileCnt = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//FileMax = Count(path);</span></span><br><span class="line">        <span class="comment">//copyDir(path, dest);</span></span><br><span class="line">        <span class="comment">//Console.WriteLine(&quot;FileCnt:&quot; + FileCnt);</span></span><br><span class="line">        <span class="comment">//Console.WriteLine(&quot;FileMax:&quot; + FileMax);</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//判断选择的路径是文件还是文件夹</span></span><br><span class="line">        <span class="keyword">if</span> (File.Exists(path))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> name = System.IO.Path.GetFileName(path);<span class="comment">//名称</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;是文件&#123;0&#125;&quot;</span>, path);</span><br><span class="line">            CopyFile_1(path, dest+<span class="string">&quot;\\&quot;</span>+ name, <span class="number">1024</span>);</span><br><span class="line">            <span class="comment">//timer1.Stop(); //开始记录复制时间</span></span><br><span class="line">            <span class="comment">//Copy(path, dest);</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (Directory.Exists(path))</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;是文件夹&quot;</span>);</span><br><span class="line">            FileMax = Count(path);</span><br><span class="line">            copyDir(path, dest);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;都不是&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        timer1.Stop(); <span class="comment">//开始记录复制时间</span></span><br><span class="line">        MessageBox.Show(<span class="string">&quot;复制完成！&quot;</span>);</span><br><span class="line">        <span class="comment">//Console.WriteLine(&quot;复制时间为:&quot; + sw.Elapsed);</span></span><br><span class="line">        <span class="comment">//sw.Stop();</span></span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">    copyFilesThread.Start();    <span class="comment">//启动线程</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="相关链接（侵删）"><a href="#相关链接（侵删）" class="headerlink" title="相关链接（侵删）"></a>相关链接（侵删）</h1><ol><li><a href="https://bbs.csdn.net/topics/40147989">如何用C#实现文件及文件夹复制,且显示复制的进度条</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">C#文件及文件夹复制，并且显示进度条</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="C#" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/C/"/>
    
    <category term="前端" scheme="https://zml3589110.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="文件管理" scheme="https://zml3589110.github.io/categories/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/"/>
    
    
    <category term="C#" scheme="https://zml3589110.github.io/tags/C/"/>
    
    <category term="文件管理" scheme="https://zml3589110.github.io/tags/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/"/>
    
    <category term="复制文件" scheme="https://zml3589110.github.io/tags/%E5%A4%8D%E5%88%B6%E6%96%87%E4%BB%B6/"/>
    
    <category term="UI" scheme="https://zml3589110.github.io/tags/UI/"/>
    
    <category term="进度条" scheme="https://zml3589110.github.io/tags/%E8%BF%9B%E5%BA%A6%E6%9D%A1/"/>
    
  </entry>
  
  <entry>
    <title>C# 线程之一（理解Thread.Sleep()方法）</title>
    <link href="https://zml3589110.github.io/posts/4167242940.html"/>
    <id>https://zml3589110.github.io/posts/4167242940.html</id>
    <published>2022-11-11T08:46:20.000Z</published>
    <updated>2022-11-11T09:07:34.268Z</updated>
    
    <content type="html"><![CDATA[<h1 id="疑问？"><a href="#疑问？" class="headerlink" title="疑问？"></a>疑问？</h1><p>我们可能经常会用到 Thread.Sleep 函数来使线程挂起一段时间。那么你有没有正确的理解这个函数的用法呢？<br><strong>思考下面这两个问题：</strong></p><ol><li>假设现在是 2008-4-7 12:00:00.000，如果我调用一下 Thread.Sleep(1000) ，在 2008-4-7 12:00:01.000 的时候，这个线程会不会被唤醒？</li><li>某人的代码中用了一句看似莫明其妙的话：Thread.Sleep(0) 。既然是 Sleep 0 毫秒，那么他跟去掉这句代码相比，有啥区别么？</li></ol><blockquote><p><strong>个人补充：</strong>在B站学习C#线程时听过 Thread.Sleep(0) 说明，那是回收CPU的线程时间片！</p></blockquote><h1 id="我们先回顾一下操作系统原理"><a href="#我们先回顾一下操作系统原理" class="headerlink" title="我们先回顾一下操作系统原理"></a>我们先回顾一下操作系统原理</h1><p>操作系统中，CPU竞争有很多种策略。Unix系统使用的是时间片算法，而Windows则属于抢占式的。</p><h2 id="时间片算法"><a href="#时间片算法" class="headerlink" title="时间片算法"></a>时间片算法</h2><p>在时间片算法中，所有的进程排成一个队列。操作系统按照他们的顺序，给每个进程分配一段时间，即该进程允许运行的时间。如果在 时间片结束时进程还在运行，则CPU将被剥夺并分配给另一个进程。如果进程在时间片结束前阻塞或结束，则CPU当即进行切换。调度程 序所要做的就是维护一张就绪进程列表，，当进程用完它的时间片后，它被移到队列的末尾。</p><h2 id="抢占式操作系统"><a href="#抢占式操作系统" class="headerlink" title="抢占式操作系统"></a>抢占式操作系统</h2><p>所谓抢占式操作系统，就是说如果一个进程得到了 CPU 时间，除非它自己放弃使用 CPU ，否则将完全霸占 CPU 。因此可以看出，在抢占式操作系统中，操作系统假设所有的进程都是“人品很好”的，会主动退出 CPU 。在抢占式操作系统中，假设有若干进程，操作系统会根据他们的优先级、饥饿时间（已经多长时间没有使用过 CPU 了），给他们算出一 个总的优先级来。操作系统就会把 CPU 交给总优先级最高的这个进程。当进程执行完毕或者自己主动挂起后，操作系统就会重新计算一次所有进程的总优先级，然后再挑一个优先级最高的把 CPU 控制权交给他。</p><h2 id="两种算法举例"><a href="#两种算法举例" class="headerlink" title="两种算法举例"></a>两种算法举例</h2><p>我们用分蛋糕的场景来描述这两种算法。假设有源源不断的蛋糕（源源不断的时间），一副刀叉（一个CPU），10个等待吃蛋糕的人（10 个进程）。<br><strong>Unix 分蛋糕方式：</strong><br>如果是 Unix 操作系统来负责分蛋糕，那么他会这样定规矩：每个人上来吃 1 分钟，时间到了换下一个。最后一个人吃完了就再从头开始。于是，不管这10个人是不是优先级不同、饥饿程度不同、饭量不同，每个人上来的时候都可以吃 1 分钟。当然，如果有人本来不太饿，或者饭量小，吃了30秒钟之后就吃饱了，那么他可以跟操作系统说：我已经吃饱了（挂起）。于是操作系统就会让下一个人接着来。</p><p><strong>Windows 分蛋糕方式：</strong><br>如果是 Windows 操作系统来负责分蛋糕的，那么场面就很有意思了。他会这样定规矩：我会根据你们的优先级、饥饿程度去给你们每个人计算一个优先级。优先级最高的那个人，可以上来吃蛋糕——吃到你不想吃为止。等这个人吃完了，我再重新根据优先级、饥饿程度来计算每个人的优先级，然后再分给优先级最高的那个人。<br>这样看来，这个场面就有意思了——可能有些人是PPMM，因此具有高优先级，于是她就可以经常来吃蛋糕。可能另外一个人是个丑男，而且很ws，所以优先级特别低，于是好半天了才轮到他一次（因为随着时间的推移，他会越来越饥饿，因此算出来的总优先级就会越来越高，因此总有一天会轮到他的）。而且，如果一不小心让一个大胖子得到了刀叉，因为他饭量大，可能他会霸占着蛋糕连续吃很久很久，导致旁边的人在那里咽口水。。。<br>而且，还可能会有这种情况出现：操作系统现在计算出来的结果，5号PPMM总优先级最高，而且高出别人一大截。因此就叫5号来吃蛋糕。5号吃了一小会儿，觉得没那么饿了，于是说“我不吃了”（挂起）。因此操作系统就会重新计算所有人的优先级。因为5号刚刚吃过，因此她的饥饿程度变小了，于是总优先级变小了；而其他人因为多等了一会儿，饥饿程度都变大了，所以总优先级也变大了。不过这时候仍然有可能5号的优先级比别的都高，只不过现在只比其他的高一点点——但她仍然是总优先级最高的啊。因此操作系统就会说：5号mm上来吃蛋糕……（5号mm心里郁闷，这不刚吃过嘛……人家要减肥……谁叫你长那么漂亮，获得了那么高的优先级）。</p><p><strong>Thread.Sleep 函数意义：</strong><br>那么，Thread.Sleep 函数是干吗的呢？还用刚才的分蛋糕的场景来描述。上面的场景里面，5号MM在吃了一次蛋糕之后，觉得已经有8分饱了，她觉得在未来的半个小时之内都不想再来吃蛋糕了，那么她就会跟操作系统说：在未来的半个小时之内不要再叫我上来吃蛋糕了。这样，操作系统在随后的半个小时里面重新计算所有人总优先级的时候，就会忽略5号mm。Sleep函数就是干这事的，他告诉操作系统“在未来的多少毫秒内我不参与CPU竞争”。</p><h1 id="解答开头的问题"><a href="#解答开头的问题" class="headerlink" title="解答开头的问题"></a>解答开头的问题</h1><p>看完了 Thread.Sleep 的作用，我们再来想想文章开头的两个问题。</p><h2 id="对于第一个问题，答案是："><a href="#对于第一个问题，答案是：" class="headerlink" title="对于第一个问题，答案是："></a>对于第一个问题，答案是：</h2><p>不一定。因为你只是告诉操作系统：在未来的1000毫秒内我不想再参与到CPU竞争。那么1000毫秒过去之后，这时候也许另外一个线程正在使用CPU，那么这时候操作系统是不会重新分配CPU的，直到那个线程挂起或结束；况且，即使这个时候恰巧轮到操作系统进行CPU 分配，那么当前线程也不一定就是总优先级最高的那个，CPU还是可能被其他线程抢占去。</p><p>与此相似的，Thread有个Resume函数，是用来唤醒挂起的线程的。好像上面所说的一样，这个函数只是“告诉操作系统我从现在起开始参与CPU竞争了”，这个函数的调用并不能马上使得这个线程获得CPU控制权。（注意这个函数在net2.0以后标注为“过时”并在后续版本不提供支持了）</p><h2 id="对于第二个问题，答案是："><a href="#对于第二个问题，答案是：" class="headerlink" title="对于第二个问题，答案是："></a>对于第二个问题，答案是：</h2><p>有，而且区别很明显。假设我们刚才的分蛋糕场景里面，有另外一个PPMM 7号，她的优先级也非常非常高（因为非常非常漂亮），所以操作系统总是会叫道她来吃蛋糕。而且，7号也非常喜欢吃蛋糕，而且饭量也很大。不过，7号人品很好，她很善良，她没吃几口就会想：如果现在有别人比我更需要吃蛋糕，那么我就让给他。因此，她可以每吃几口就跟操作系统说：我们来重新计算一下所有人的总优先级吧。不过，操作系统不接受这个建议——因为操作系统不提供这个接口。于是7号mm就换了个说法：“在未来的0毫秒之内不要再叫我上来吃蛋糕了”。这个指令操作系统是接受的，于是此时操作系统就会重新计算大家的总优先级——注意这个时候是连7号一起计算的，因为“0毫秒已经过去了”嘛。因此如果没有比7号更需要吃蛋糕的人出现，那么下一次7号还是会被叫上来吃蛋糕。</p><p>因此，Thread.Sleep(0)的作用，就是“触发操作系统立刻重新进行一次CPU竞争”。竞争的结果也许是当前线程仍然获得CPU控制权，也许会换成别的线程获得CPU控制权。这也是我们在大循环里面经常会写一句Thread.Sleep(0) ，因为这样就给了其他线程比如Paint线程获得CPU控制权的权力，这样界面就不会假死在那里。</p><h1 id="其他说明"><a href="#其他说明" class="headerlink" title="其他说明"></a>其他说明</h1><p> 末了说明一下，虽然上面提到说“除非它自己放弃使用 CPU ，否则将完全霸占 CPU”，但这个行为仍然是受到制约的——操作系统会监控你霸占CPU的情况，如果发现某个线程长时间霸占CPU，会强制使这个线程挂起，因此在实际上不会出现“一个线程一直霸占着 CPU 不放”的情况。至于我们的大循环造成程序假死，并不是因为这个线程一直在霸占着CPU。实际上在这段时间操作系统已经进行过多次CPU竞争了，只不过其他线程在获得CPU控制权之后很短时间内马上就退出了，于是就又轮到了这个线程继续执行循环，于是就又用了很久才被操作系统强制挂起。。。因此反应到界面上，看起来就好像这个线程一直在霸占着CPU一样。</p><p>末了再说明一下，文中线程、进程有点混乱，其实在Windows原理层面，CPU竞争都是线程级的，本文中把这里的进程、线程看成同一个东西就好了。</p><hr><h1 id="相关链接（侵删）"><a href="#相关链接（侵删）" class="headerlink" title="相关链接（侵删）"></a>相关链接（侵删）</h1><ol><li><a href="http://www.dui580.com/Html/?901.html">C# 理解Thread.Sleep()方法</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">C# 理解Thread.Sleep()方法</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="C#" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/C/"/>
    
    <category term="前端" scheme="https://zml3589110.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="线程管理" scheme="https://zml3589110.github.io/categories/%E7%BA%BF%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
    
    
    <category term="C#" scheme="https://zml3589110.github.io/tags/C/"/>
    
    <category term="线程管理" scheme="https://zml3589110.github.io/tags/%E7%BA%BF%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
    
    <category term="Thread" scheme="https://zml3589110.github.io/tags/Thread/"/>
    
    <category term="Sleep" scheme="https://zml3589110.github.io/tags/Sleep/"/>
    
    <category term="方法" scheme="https://zml3589110.github.io/tags/%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>C# 跨线程访问UI控件</title>
    <link href="https://zml3589110.github.io/posts/2710851357.html"/>
    <id>https://zml3589110.github.io/posts/2710851357.html</id>
    <published>2022-11-11T08:22:20.000Z</published>
    <updated>2022-11-11T09:07:34.264Z</updated>
    
    <content type="html"><![CDATA[<h1 id="跨线程访问UI控件的方法（实验使用的就是这个）"><a href="#跨线程访问UI控件的方法（实验使用的就是这个）" class="headerlink" title="跨线程访问UI控件的方法（实验使用的就是这个）"></a>跨线程访问UI控件的方法（实验使用的就是这个）</h1><blockquote><p>其实往后收集的方法都大同小异</p></blockquote><h2 id="禁止对跨线程访问做检查（不使用）"><a href="#禁止对跨线程访问做检查（不使用）" class="headerlink" title="禁止对跨线程访问做检查（不使用）"></a>禁止对跨线程访问做检查（不使用）</h2><p>&#x2F;&#x2F;在Form1_Load中插入<br> &#x2F;&#x2F;允许操作其它线程创建的控件<br> Control.CheckForIllegalCrossThreadCalls &#x3D; false;</p><h2 id="使用委托方法（验证这个方法可行-UI也不卡）"><a href="#使用委托方法（验证这个方法可行-UI也不卡）" class="headerlink" title="使用委托方法（验证这个方法可行-UI也不卡）"></a>使用委托方法（验证这个方法可行-UI也不卡）</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//跨线程访问UI控件，更新主线程中dataGridView表格内容</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.InvokeRequired)</span><br><span class="line">  &#123;</span><br><span class="line">     <span class="keyword">this</span>.Invoke(<span class="keyword">new</span> MethodInvoker(<span class="built_in">delegate</span></span><br><span class="line">     &#123;</span><br><span class="line">       <span class="comment">//此处可用于更新UI控件内容</span></span><br><span class="line">     &#125;</span><br><span class="line">     ));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   &#125;<span class="comment">//跨线程访问UI控件，更新主线程中dataGridView表格内容</span></span><br></pre></td></tr></table></figure><h1 id="C-优雅的解决-多线程中访问-UI-的问题"><a href="#C-优雅的解决-多线程中访问-UI-的问题" class="headerlink" title="C# 优雅的解决 多线程中访问 UI 的问题"></a>C# 优雅的解决 多线程中访问 UI 的问题</h1><p>优雅的解决 多线程中访问 UI 的问题</p><ol><li>在WinForm 程序中可以在Form的构造函数中. 将 “是否检察跨线程的控件访问” 设为 False. 就解决了. 就可以正常的使用控件了.<br>　　Control.CheckForIllegalCrossThreadCalls &#x3D; false;</li><li>就是使用控件的Invoke 方法<br>比如:<br>　　label1.Invoke(new MethodInvoker(delegate () {this.label1.text &#x3D; “靠…!”;}));<br>使用Lambda 表达示会更优雅一点:<br>　　label1.Inovke(new MethodInvoker( () &#x3D;&gt; this.lable1.text &#x3D; “哈哈..”));<br>这是我常用的. 觉得算得上优雅的方法. 如果还有朋友知道列优雅的方法,请留言告知~~!</li></ol><h2 id="2012-11-17-日补充"><a href="#2012-11-17-日补充" class="headerlink" title="2012.11.17 日补充"></a>2012.11.17 日补充</h2><p>在使用 线程或是使用异步的方法去改变 DataGridView 控件时.. 如果直接使用第一种方法.直接允许控制跨线程访问的话.  会有这样的问题(很是恼人) :</p><p><strong>用delegate的BeginInvoke去更新DataGridView时,当异步调用完成后有这样现象:</strong></p><ol><li>如果更新后DataGridView没有出现滚动条,程序会正常运行</li><li>如果更新后DataVridView出现了滚动条,程序会卡死</li></ol><p><strong>解决的方法是 不要使用 第一种方法: 这种方法 虽然方便.. 但会带来一些意料不到的问题. 还是这样来更新控件:</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">label1.Inovke(<span class="keyword">new</span> MethodInvoker( () =&gt; <span class="keyword">this</span>.lable1.text = <span class="string">&quot;哈哈..&quot;</span>));</span><br></pre></td></tr></table></figure><p>这个MethodInvoker只是一个 返回值,无参数的代理而已. 所以你也可能 自己定义一个 比如: public delegate void MyInvoker(); 然后使用</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">label1.Inovke(<span class="keyword">new</span> MyInvoker( () =&gt; <span class="keyword">this</span>.lable1.text = <span class="string">&quot;哈哈..&quot;</span>));  是一样的.</span><br></pre></td></tr></table></figure><p><strong>同样你也可以 使用 Action</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">label1.Inovke(<span class="keyword">new</span> Action( () =&gt; <span class="keyword">this</span>.lable1.text = <span class="string">&quot;哈哈..&quot;</span>));</span><br></pre></td></tr></table></figure><p><strong>而且. 可以通过  Control.InvokeRequired 方法 ,来判断,当前访问这个控件的线程 是否是UI线程.是否需要使用 Invoke方法.</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.dgv.InvokeRequired) &#123;</span><br><span class="line">　　<span class="keyword">this</span>.dgv.Invoke(<span class="keyword">new</span> MethodInvoker(()=&gt;dgv.DataSource = ds.Tables[<span class="number">0</span>]));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果是 UI 主线程更新的话</span></span><br><span class="line">　　<span class="keyword">this</span>.dgv.DataSource = ds.Tables[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>关于Invoke的拥有者：Control</strong></p><blockquote><p>因为Control.Invoke含义是将方法委托给 <em>拥有该Control</em> 的线程去执行。因些.我们不需要使用 this.label1.Invoke 或是 this.DataGridView,Invoke 可以直接使用 : this.Invoke.  this 指针也就是当前的 UI 主线程.</p></blockquote><p>就好似 A 跟 B 说, 我不方便去你家, 你帮我用你家的电脑下点电影什么的. A 不允许直接使用 B的电脑. 但他可以让B帮他完成一些事情. B得到了 A的一些求助. 自己去使用属于自己的电脑.   这个比喻就充分的表达了.. 两个线程间的交流. </p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Method_A_Thread</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">　　<span class="comment">// Do something</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">// 让UI线程帮忙完成些 ,属于 UI线程里的内容</span></span><br><span class="line">    </span><br><span class="line">     <span class="comment">// this.Invoke(new Action(() =&gt; this.label.Text = &quot;xxx&quot;));</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Winform中如何跨线程访问UI元素"><a href="#Winform中如何跨线程访问UI元素" class="headerlink" title="Winform中如何跨线程访问UI元素"></a>Winform中如何跨线程访问UI元素</h1><blockquote><p>在C# 的应用程序开发中， 我们经常要把UI线程和工作线程分开，防止界面停止响应， 同时我们又需要在工作线程中更新UI界面上的控件。但直接访问会出现“线程间操作无效”的情况，因为.NET禁止了跨线程调用控件， 否则谁都可以操作控件，最后可能造成错误。 下面介绍几种跨线程访问的方法：</p></blockquote><h2 id="1、禁止对跨线程访问做检查-不推荐使用这种方法"><a href="#1、禁止对跨线程访问做检查-不推荐使用这种方法" class="headerlink" title="1、禁止对跨线程访问做检查 (不推荐使用这种方法)"></a>1、禁止对跨线程访问做检查 (不推荐使用这种方法)</h2><p><strong>这种方法不检查跨线程访问，允许各个线程操作UI元素，容易出现错误。</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Form2</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  InitializeComponent();</span><br><span class="line">  <span class="comment">//禁止对跨线程访问做检查 (不推荐使用这种方法)</span></span><br><span class="line">  Control.CheckForIllegalCrossThreadCalls = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、使用委托方法-将其委托给UI控件更新"><a href="#2、使用委托方法-将其委托给UI控件更新" class="headerlink" title="2、使用委托方法  将其委托给UI控件更新"></a>2、使用委托方法  将其委托给UI控件更新</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用委托方法 将其委托给UI控件更新</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button1_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Thread thread1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> ParameterizedThreadStart(UpdateLabel2));</span><br><span class="line">  thread1.Start(<span class="string">&quot;更新Label&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">UpdateLabel2</span>(<span class="params"><span class="built_in">object</span> str</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (label2.InvokeRequired)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 当一个控件的InvokeRequired属性值为真时，说明有一个创建它以外的线程想访问它</span></span><br><span class="line">    Action&lt;<span class="built_in">string</span>&gt; actionDelegate = (x) =&gt; &#123; <span class="keyword">this</span>.label2.Text = x.ToString(); &#125;;</span><br><span class="line">    <span class="comment">// 或者</span></span><br><span class="line">    <span class="comment">// Action&lt;string&gt; actionDelegate = delegate(string txt) &#123; this.label2.Text = txt; &#125;;</span></span><br><span class="line">    <span class="keyword">this</span>.label2.Invoke(actionDelegate, str);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">this</span>.label2.Text = str.ToString();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、使用delegate和BeginInvoke来从其他线程中控制控件"><a href="#3、使用delegate和BeginInvoke来从其他线程中控制控件" class="headerlink" title="3、使用delegate和BeginInvoke来从其他线程中控制控件"></a>3、使用delegate和BeginInvoke来从其他线程中控制控件</h2><p>只要把上面的 this.label2.Invoke(actionDelegate, str); 中的 Invoke 改为BeginInvoke方法就可以了。</p><p><strong>Invoke方法和BeginInvoke方法的区别是：</strong><br>Invoke方法是同步的， 它会等待工作线程完成，BeginInvoke方法是异步的， 它会另起一个线程去完成工作线。</p><h2 id="4、使用同步上下文：SynchronizationContext方法"><a href="#4、使用同步上下文：SynchronizationContext方法" class="headerlink" title="4、使用同步上下文：SynchronizationContext方法"></a>4、使用同步上下文：SynchronizationContext方法</h2><blockquote><p>该方法是取得主线程的上下文信息，然后在子线程将访问UI控件方法推送到UI上下文的消息队列里，使用POST或者Send；</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> SynchronizationContext synchronizationContext;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button2_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  synchronizationContext = SynchronizationContext.Current;</span><br><span class="line">  <span class="keyword">new</span> Thread(() =&gt; &#123; UpdateText(<span class="string">&quot;跨线程访问&quot;</span>); &#125;).Start();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UpdateText</span>(<span class="params"><span class="built_in">string</span> msg</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  synchronizationContext.Post(_ =&gt; <span class="keyword">this</span>.label2.Text = msg, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、使用BackgroundWorker组件-推荐使用这个方法"><a href="#5、使用BackgroundWorker组件-推荐使用这个方法" class="headerlink" title="5、使用BackgroundWorker组件(推荐使用这个方法)"></a>5、使用BackgroundWorker组件(推荐使用这个方法)</h2><p><strong>个人感觉没有自己开线程方便，因为还得在窗体上拉控件</strong></p><blockquote><p>BackgroundWorker是.NET里面用来执行多线程任务的控件，它允许编程者在一个单独的线程上执行一些操作。耗时的操作（如下载和数据库事务）。</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">FileManagerForm</span> : <span class="title">Form</span></span><br><span class="line">&#123;</span><br><span class="line">  FileInfo file ;</span><br><span class="line">  BackgroundWorker bw;</span><br><span class="line">  ServerFile server;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">FileManagerForm</span>(<span class="params"><span class="built_in">string</span> filePath</span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    InitializeComponent();</span><br><span class="line"></span><br><span class="line">    file = <span class="keyword">new</span> FileInfo(filePath);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">long</span> size = file.Length / <span class="number">1024</span> / <span class="number">1024</span>;</span><br><span class="line">    lblOrgSize.Text = (<span class="built_in">int</span>)size+ <span class="string">&quot;MB&quot;</span>;</span><br><span class="line">    bw = <span class="keyword">new</span> BackgroundWorker();</span><br><span class="line">    server = <span class="keyword">new</span> ServerFile(file.Name);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">FileManagerForm_Load</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    proUpFile.Minimum = <span class="number">0</span>;</span><br><span class="line">    proUpFile.Maximum = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    bw.WorkerReportsProgress = <span class="literal">true</span>;</span><br><span class="line">    bw.WorkerSupportsCancellation = <span class="literal">true</span>;</span><br><span class="line">    bw.DoWork += Bw_DoWork;</span><br><span class="line">    bw.ProgressChanged += Bw_ProgressChanged;</span><br><span class="line">    bw.RunWorkerCompleted += Bw_RunWorkerCompleted;</span><br><span class="line">    bw.RunWorkerAsync();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Bw_DoWork</span>(<span class="params"><span class="built_in">object</span> sender, DoWorkEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    <span class="keyword">using</span>(FileStream fileRead= file.OpenRead())</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">long</span> setp = file.Length / <span class="number">100</span>;</span><br><span class="line">      <span class="keyword">while</span> (file.Length &gt; fileRead.Position)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> (bw.CancellationPending)</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">byte</span>[] bytes = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="built_in">int</span> count = fileRead.Read(bytes, <span class="number">0</span>, bytes.Length);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">long</span> writeLength= server.UpFile(bytes, count);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(writeLength &gt;proUpFile.Value* setp)</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">int</span> size = (<span class="built_in">int</span>)(writeLength / <span class="number">1024</span> / <span class="number">1024</span>);</span><br><span class="line">          bw.ReportProgress(proUpFile.Value + <span class="number">1</span>, size);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">      server.Close();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Bw_ProgressChanged</span>(<span class="params"><span class="built_in">object</span> sender, ProgressChangedEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    proUpFile.Value= e.ProgressPercentage&gt; proUpFile.Maximum?proUpFile.Maximum:e.ProgressPercentage;</span><br><span class="line">    lblUpLoadSize.Text = e.UserState.ToString() + <span class="string">&quot;MB&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Bw_RunWorkerCompleted</span>(<span class="params"><span class="built_in">object</span> sender, RunWorkerCompletedEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.proUpFile.Value == <span class="keyword">this</span>.proUpFile.Maximum)</span><br><span class="line">    &#123;</span><br><span class="line">      MessageBox.Show(<span class="string">&quot;文件发送成功！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      MessageBox.Show(<span class="string">&quot;文件发送失败！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.Close();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btnCancel_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">     bw.CancelAsync();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="相关链接（侵删）"><a href="#相关链接（侵删）" class="headerlink" title="相关链接（侵删）"></a>相关链接（侵删）</h1><ol><li><a href="http://www.dui580.com/Html/?955.html">C#跨线程访问UI控件的方法</a></li><li><a href="http://t.zoukankan.com/easyfrog-p-2343075.html">C# 优雅的解决 多线程中访问 UI 的问题</a></li><li><a href="https://www.jb51.net/article/198476.htm">Winform中如何跨线程访问UI元素</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">C#跨线程访问UI控件的方法</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="C#" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/C/"/>
    
    <category term="前端" scheme="https://zml3589110.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="线程管理" scheme="https://zml3589110.github.io/categories/%E7%BA%BF%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
    
    
    <category term="C#" scheme="https://zml3589110.github.io/tags/C/"/>
    
    <category term="线程管理" scheme="https://zml3589110.github.io/tags/%E7%BA%BF%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
    
    <category term="UI访问" scheme="https://zml3589110.github.io/tags/UI%E8%AE%BF%E9%97%AE/"/>
    
  </entry>
  
</feed>
