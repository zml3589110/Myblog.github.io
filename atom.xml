<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>赵逸尘个人博客</title>
  
  <subtitle>记录工作生活</subtitle>
  <link href="https://zml3589110.github.io/atom.xml" rel="self"/>
  
  <link href="https://zml3589110.github.io/"/>
  <updated>2022-08-01T12:54:01.599Z</updated>
  <id>https://zml3589110.github.io/</id>
  
  <author>
    <name>ZhaoYichen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C#绘图之五（Chart 创建多个ChartArea）</title>
    <link href="https://zml3589110.github.io/posts/123814450.html"/>
    <id>https://zml3589110.github.io/posts/123814450.html</id>
    <published>2022-08-01T12:43:20.000Z</published>
    <updated>2022-08-01T12:54:01.599Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在窗口上添加Chart控件"><a href="#在窗口上添加Chart控件" class="headerlink" title="在窗口上添加Chart控件"></a>在窗口上添加Chart控件</h1><p><strong>chart控件属性设置：【图表】–【ChartAreas集合】。此处设置了2个ChartArea。</strong></p><p><img src="https://www.freesion.com/images/666/11f937002736420bcd0f754f039c3caa.png"></p><h1 id="设置曲线：如果曲线较少的话，可以在【属性】-【图表】-【Series集合】中添加曲线，"><a href="#设置曲线：如果曲线较少的话，可以在【属性】-【图表】-【Series集合】中添加曲线，" class="headerlink" title="设置曲线：如果曲线较少的话，可以在【属性】-【图表】-【Series集合】中添加曲线，"></a>设置曲线：如果曲线较少的话，可以在【属性】-【图表】-【Series集合】中添加曲线，</h1><p><img src="https://www.freesion.com/images/901/e7d0d1e5c5d4e31a124a9c9d3c1d9b85.png"></p><h1 id="曲线较多，可以自己写代码设置"><a href="#曲线较多，可以自己写代码设置" class="headerlink" title="曲线较多，可以自己写代码设置"></a>曲线较多，可以自己写代码设置</h1><blockquote><p>这个例子中我用代码设置了3条曲线。</p></blockquote><p><strong>全部代码如下：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Form1_Load</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span> &#123;</span><br><span class="line">     <span class="keyword">init</span>();<span class="comment">//曲线初始化</span></span><br><span class="line">     timer1.Start();<span class="comment">//开启计时器</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"> <span class="comment"><span class="doctag">///</span> 曲线初始化</span></span><br><span class="line"> <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span> &#123;</span><br><span class="line">     <span class="comment">//清除默认的series</span></span><br><span class="line">     chart1.Series.Clear();</span><br><span class="line">     <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>;i&lt; <span class="number">3</span>;i++)</span><br><span class="line">     &#123;</span><br><span class="line">         Series series = <span class="keyword">new</span> Series(SERIES[i]);</span><br><span class="line">         series.ChartType = SeriesChartType.Spline;</span><br><span class="line">         series.MarkerBorderWidth = <span class="number">2</span>;</span><br><span class="line">         series.MarkerSize = <span class="number">4</span>;</span><br><span class="line">         series.MarkerStyle = MarkerStyle.Circle;</span><br><span class="line">         series.ToolTip = SERIES[i] + <span class="string">&quot; #VAL \r\n #AXISLABEL&quot;</span>;</span><br><span class="line">         chart1.Series.Add(series);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"> <span class="comment"><span class="doctag">///</span> 曲线</span></span><br><span class="line"> <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">string</span>[] SERIES =</span><br><span class="line"> &#123;</span><br><span class="line">     <span class="string">&quot;曲线一&quot;</span>,<span class="string">&quot;曲线二&quot;</span>,<span class="string">&quot;曲线三&quot;</span></span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"> <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"> <span class="comment"><span class="doctag">///</span> 计时器</span></span><br><span class="line"> <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"> <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;sender&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"> <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;e&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">timer1_Tick</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span> &#123;</span><br><span class="line">     Random r1 = <span class="keyword">new</span> Random();</span><br><span class="line">     <span class="built_in">int</span> val1 = r1.Next(<span class="number">0</span>, <span class="number">100</span>);</span><br><span class="line">     Random r2 = <span class="keyword">new</span> Random();</span><br><span class="line">     <span class="built_in">int</span> val2 = r1.Next(<span class="number">0</span>, <span class="number">100</span>);</span><br><span class="line">     Random r3 = <span class="keyword">new</span> Random();</span><br><span class="line">     <span class="built_in">int</span> val3 = r1.Next(<span class="number">0</span>, <span class="number">100</span>);</span><br><span class="line">     <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">     &#123;</span><br><span class="line">         <span class="keyword">this</span>.chart1.Series[<span class="number">0</span>].ChartArea = <span class="string">&quot;ChartArea1&quot;</span>;</span><br><span class="line">         <span class="keyword">this</span>.chart1.Series[<span class="number">1</span>].ChartArea = <span class="string">&quot;ChartArea1&quot;</span>;</span><br><span class="line">         <span class="keyword">this</span>.chart1.Series[<span class="number">2</span>].ChartArea = <span class="string">&quot;ChartArea2&quot;</span>;</span><br><span class="line">         chart1.Series[<span class="number">0</span>].Points.AddY(val1);</span><br><span class="line">         chart1.Series[<span class="number">1</span>].Points.AddY(val2);</span><br><span class="line">         chart1.Series[<span class="number">2</span>].Points.AddY(val3);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong>结果如图所示：</strong></p><p><img src="https://www.freesion.com/images/818/3bdc9fa7ad793b900c225760e51ac122.png"></p><hr><h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><ol><li><a href="https://www.freesion.com/article/2399683528/">C# CHART控件多个CHARTAREA</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">Chart创建多个ChartArea图表</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="C#" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/C/"/>
    
    <category term="前端" scheme="https://zml3589110.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="C#" scheme="https://zml3589110.github.io/tags/C/"/>
    
    <category term="控件" scheme="https://zml3589110.github.io/tags/%E6%8E%A7%E4%BB%B6/"/>
    
    <category term="绘图" scheme="https://zml3589110.github.io/tags/%E7%BB%98%E5%9B%BE/"/>
    
    <category term="Chart" scheme="https://zml3589110.github.io/tags/Chart/"/>
    
  </entry>
  
  <entry>
    <title>C#绘图之四（Chart 简单绘图）</title>
    <link href="https://zml3589110.github.io/posts/4010725329.html"/>
    <id>https://zml3589110.github.io/posts/4010725329.html</id>
    <published>2022-08-01T12:11:20.000Z</published>
    <updated>2022-08-01T12:29:27.339Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Chart控件可以用来绘制波形图、柱状图、饼图、折线图等，用来进行数据表现是很不错的，现在简单说一下这个控件的使用方法</p></blockquote><h1 id="一、效果图"><a href="#一、效果图" class="headerlink" title="一、效果图"></a>一、效果图</h1><p><img src="https://img-blog.csdnimg.cn/2021012817414331.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3psbGxn,size_16,color_FFFFFF,t_70"></p><h1 id="二、设置步骤"><a href="#二、设置步骤" class="headerlink" title="二、设置步骤"></a>二、设置步骤</h1><p><strong>首先要加载Chart控件：</strong></p><p><img src="https://img-blog.csdnimg.cn/20210128174254241.png"></p><p><strong>打开控件的属性窗口</strong></p><p><img src="https://img-blog.csdnimg.cn/20210128174442185.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3psbGxn,size_16,color_FFFFFF,t_70"></p><p><strong>在这个窗口里面我们可以修改曲线的名称，名称在【数据》Name】里面修改</strong></p><p><img src="https://img-blog.csdnimg.cn/20210128174511238.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3psbGxn,size_16,color_FFFFFF,t_70"></p><h1 id="三、常用几个选项的作用"><a href="#三、常用几个选项的作用" class="headerlink" title="三、常用几个选项的作用"></a>三、常用几个选项的作用</h1><blockquote><p><strong>数据：XValueType是X轴的数据类型，Y同理，这里我们选Time，可以随时间改变</strong><br><strong>图表：ChartType是图表的类型，我们可以选出我们想要用的类型，这里选曲线</strong></p></blockquote><p><img src="https://img-blog.csdnimg.cn/20210128175000769.png"></p><blockquote><p><strong>外观：Color可以选择曲线的颜色，这里我选了红色</strong><br><strong>其他：左边的成员框，是我们要显示的曲线，可以添加多个</strong></p></blockquote><blockquote><p>其他属性如果有需要自行修改，修改好之后确定，回到窗口设计界面</p></blockquote><p><strong>在工具箱添加Timer</strong></p><p><img src="https://img-blog.csdnimg.cn/20210128175311218.png"></p><p><strong>在Timer的事件窗口双击时钟事件</strong></p><p><img src="https://img-blog.csdnimg.cn/20210128175423217.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3psbGxn,size_16,color_FFFFFF,t_70"></p><h1 id="四、代码实现"><a href="#四、代码实现" class="headerlink" title="四、代码实现"></a>四、代码实现</h1><blockquote><p>代码如下，请自行对照填到对应的事件里面去</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Form1</span> : <span class="title">Form</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Form1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Form1_Load</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            timer1.Enabled = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">timer1_Tick</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            chart1.Series[<span class="number">0</span>].Points.AddY(cnt*cnt);</span><br><span class="line">            label1.Text = cnt.ToString();</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">chart1_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>注：cnt是个自变量，曲线显示的是cnt为底的2次指数曲线</strong></p><hr><h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><ol><li><a href="https://blog.csdn.net/zlllg/article/details/113353399">C#中如何使用Chart图表</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">Chart制作简单绘图</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="C#" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/C/"/>
    
    <category term="前端" scheme="https://zml3589110.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="C#" scheme="https://zml3589110.github.io/tags/C/"/>
    
    <category term="控件" scheme="https://zml3589110.github.io/tags/%E6%8E%A7%E4%BB%B6/"/>
    
    <category term="绘图" scheme="https://zml3589110.github.io/tags/%E7%BB%98%E5%9B%BE/"/>
    
    <category term="Chart" scheme="https://zml3589110.github.io/tags/Chart/"/>
    
  </entry>
  
  <entry>
    <title>C#语法之二（try-catch用法）</title>
    <link href="https://zml3589110.github.io/posts/2758512064.html"/>
    <id>https://zml3589110.github.io/posts/2758512064.html</id>
    <published>2022-08-01T09:51:20.000Z</published>
    <updated>2022-08-01T09:56:36.795Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Try-Catch-说明和使用"><a href="#Try-Catch-说明和使用" class="headerlink" title="Try-Catch 说明和使用"></a>Try-Catch 说明和使用</h1><blockquote><p>在C#程序运行中，不可避免的会出现很多异常事件，这些异常事件会阻止程序继续运行，给用户体验增加困难。所以我们要尽量避免异常的同时，也要对异常进行处理。这时就需要使用到try-catch语句。</p></blockquote><p><strong>例如，写一段异常程序，不用try-catch，效果如下：</strong></p><p><img src="https://img-blog.csdnimg.cn/430345e553ae44dbb45b4e3710238fb0.png"></p><p>这时系统会弹出如下错误，直接将错误弹出来，使用户体验不好。</p><p><img src="https://img-blog.csdnimg.cn/a85bf5ad88f9451b9dc4e861b19a69ca.png"></p><p><strong>使用Try-catch用法之后，代码和效果如下所示：</strong></p><p><img src="https://img-blog.csdnimg.cn/60db0f9c1684467f94018622a9a79e90.png"></p><p>则若产生异常，会根据程序输出相应的错误提示，提高用户体验，如下所示：</p><p><img src="https://img-blog.csdnimg.cn/370edc3ef7484492b7c2351fb9b275bc.png"></p><hr><h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><ol><li><a href="https://blog.csdn.net/weixin_41883890/article/details/124725452">C#语法中try-catch的用法</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">C#中 try-catch 的用法</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="C#" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/C/"/>
    
    <category term="前端" scheme="https://zml3589110.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="C#" scheme="https://zml3589110.github.io/tags/C/"/>
    
    <category term="语法" scheme="https://zml3589110.github.io/tags/%E8%AF%AD%E6%B3%95/"/>
    
    <category term="try-catch" scheme="https://zml3589110.github.io/tags/try-catch/"/>
    
  </entry>
  
  <entry>
    <title>C#数学函数之一（正弦sin、反正弦arcsin，正切tan、反正切arctan）</title>
    <link href="https://zml3589110.github.io/posts/1660897681.html"/>
    <id>https://zml3589110.github.io/posts/1660897681.html</id>
    <published>2022-08-01T09:11:20.000Z</published>
    <updated>2022-08-01T09:12:58.974Z</updated>
    
    <content type="html"><![CDATA[<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">region</span> 三角函数和反三角函数</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Messaging;</span><br><span class="line"><span class="keyword">using</span> System.Net.Sockets;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Xml.Linq;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">test</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="meta">#<span class="meta-keyword">region</span> 正弦、反正弦</span></span><br><span class="line">            <span class="comment">//正弦</span></span><br><span class="line">            <span class="built_in">double</span> sinAngleValue1 = <span class="number">30</span>;<span class="comment">//角度值：30度。</span></span><br><span class="line">            <span class="built_in">double</span> sinRadianValue1 = Math.PI * sinAngleValue1 / <span class="number">180</span>;<span class="comment">//求弧度值</span></span><br><span class="line">            <span class="built_in">double</span> sinValue1 = Math.Sin(sinRadianValue1);<span class="comment">//求sin30度，其实sin30度 = sin(PI/6)，但是，数学上或代码上，常常用弧度PI/6,来计算sin(PI/6)，其他函数同理。</span></span><br><span class="line">            Console.WriteLine(sinValue1);</span><br><span class="line">            <span class="comment">//反正弦</span></span><br><span class="line">            <span class="built_in">double</span> sinValue2 = <span class="number">0.5</span>;<span class="comment">//正弦值 = 0.5。</span></span><br><span class="line">            <span class="built_in">double</span> sinRadianValue2 = Math.Asin(sinValue2);<span class="comment">//求弧度值</span></span><br><span class="line">            <span class="built_in">double</span> sinAngleValue2 = sinRadianValue2 / Math.PI * <span class="number">180</span>;<span class="comment">//根据弧度值，来求角度值。</span></span><br><span class="line">            Console.WriteLine(sinAngleValue2);</span><br><span class="line">            Console.WriteLine();</span><br><span class="line">            <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"> </span><br><span class="line">            <span class="meta">#<span class="meta-keyword">region</span> 正切、反正切</span></span><br><span class="line">            Console.WriteLine();</span><br><span class="line">            Console.WriteLine();</span><br><span class="line">            <span class="comment">//正切</span></span><br><span class="line">            <span class="built_in">double</span> tanAngleValue1 = <span class="number">15</span>;<span class="comment">//角度值</span></span><br><span class="line">            <span class="built_in">double</span> tanRadianValue1 = Math.PI * tanAngleValue1 / <span class="number">180</span>;<span class="comment">//求弧度值</span></span><br><span class="line">            <span class="built_in">double</span> tanValue1 = Math.Tan(tanRadianValue1);<span class="comment">//tan值</span></span><br><span class="line">            Console.WriteLine(tanValue1);<span class="comment">//tan值</span></span><br><span class="line"> </span><br><span class="line">            <span class="built_in">double</span> tanValue2 = <span class="number">1</span>;<span class="comment">//正切值</span></span><br><span class="line">            <span class="built_in">double</span> tanRadianValue2 = Math.Atan(tanValue2);<span class="comment">//求弧度值</span></span><br><span class="line">            <span class="built_in">double</span> tanAngleValue2 = tanRadianValue2 / Math.PI *<span class="number">180</span>;<span class="comment">//求角度</span></span><br><span class="line">            Console.WriteLine(tanAngleValue2);</span><br><span class="line">            <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line">            Console.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endregion</span></span></span><br></pre></td></tr></table></figure><hr><h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><ol><li><a href="https://blog.51cto.com/u_15241978/2850238">c#实现 正弦sin、反正弦arcsin，正切tan、反正切arctan：求角度值</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">正弦sin、反正弦arcsin，正切tan、反正切arctan：求角度值</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="C#" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/C/"/>
    
    <category term="前端" scheme="https://zml3589110.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="C#" scheme="https://zml3589110.github.io/tags/C/"/>
    
    <category term="数学函数" scheme="https://zml3589110.github.io/tags/%E6%95%B0%E5%AD%A6%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>C#编辑器之一（#region 大纲功能）</title>
    <link href="https://zml3589110.github.io/posts/3856603375.html"/>
    <id>https://zml3589110.github.io/posts/3856603375.html</id>
    <published>2022-08-01T08:54:20.000Z</published>
    <updated>2022-08-01T09:01:04.485Z</updated>
    
    <content type="html"><![CDATA[<h1 id="region说明"><a href="#region说明" class="headerlink" title="region说明"></a>region说明</h1><p>利用 #region，可以指定在使用 Visual Studio Code 编辑器的大纲功能时可展开或折叠的代码块。<br>在较长的代码文件中，能够折叠或隐藏一个或多个区域会十分便利，这样，可将精力集中于当前处理的文件部分。</p><h1 id="添加方式和效果"><a href="#添加方式和效果" class="headerlink" title="添加方式和效果"></a>添加方式和效果</h1><p><strong>添加步骤：</strong><br>方法一、选中需要添加的代码段——右键——片段——外侧代码。<br>方法二、手动输入 #region</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">region</span> 分页列表展示</span></span><br><span class="line">         <span class="function"><span class="keyword">public</span> ActionResult <span class="title">Index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>       &#123;</span><br><span class="line">           <span class="built_in">int</span> pageIndex = Request[<span class="string">&quot;pageIndex&quot;</span>] != <span class="literal">null</span> ? Convert.ToInt32(Request[<span class="string">&quot;pageIndex&quot;</span>]) : <span class="number">1</span>;</span><br><span class="line">           <span class="built_in">int</span> pageSize = <span class="number">5</span>;</span><br><span class="line">           <span class="built_in">int</span> pageCount = NewInfoService.GetPageCount(pageSize);</span><br><span class="line">           pageIndex = pageIndex &lt; <span class="number">1</span> ? <span class="number">1</span> : pageIndex;</span><br><span class="line">           pageIndex = pageIndex &gt; pageCount ? pageCount : pageIndex;</span><br><span class="line">           List&lt;T_New&gt;list=NewInfoService.GetPageEntityList(pageIndex, pageSize);</span><br><span class="line">           ViewData[<span class="string">&quot;newInfoList&quot;</span>] = list;</span><br><span class="line">           ViewData[<span class="string">&quot;pageIndex&quot;</span>] = pageIndex;</span><br><span class="line">           ViewData[<span class="string">&quot;pageCount&quot;</span>] = pageCount;</span><br><span class="line">           <span class="keyword">return</span> View();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdn.net/2018051410513243?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zODQ2NTYyMw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p><code>#region</code> 块必须通过 <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/preprocessor-directives/preprocessor-endregion">#endregion</a> 指令终止。</p><p><code>#region</code> 块不能与 <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/preprocessor-directives/preprocessor-if">#if</a> 块重叠。 但是，可以将 <code>#region</code> 块嵌套在 <code>#if</code> 块内，或将 <code>#if</code> 块嵌套在 <code>#region</code> 块内。</p><hr><h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><ol><li><a href="https://blog.csdn.net/weixin_38465623/article/details/80306743">#region</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">大纲功能折叠分页功能</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="C#" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/C/"/>
    
    <category term="前端" scheme="https://zml3589110.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="C#" scheme="https://zml3589110.github.io/tags/C/"/>
    
    <category term="编辑器" scheme="https://zml3589110.github.io/tags/%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
    <category term="大纲功能" scheme="https://zml3589110.github.io/tags/%E5%A4%A7%E7%BA%B2%E5%8A%9F%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>C#绘图之三（Chart 设置Y轴自适应）</title>
    <link href="https://zml3589110.github.io/posts/1486382218.html"/>
    <id>https://zml3589110.github.io/posts/1486382218.html</id>
    <published>2022-08-01T07:30:20.000Z</published>
    <updated>2022-08-01T08:21:01.753Z</updated>
    
    <content type="html"><![CDATA[<p>既然用到了chart控件，那么这个图像就有各种不确定的数据以及多条曲线</p><h1 id="一、Y轴的自适应"><a href="#一、Y轴的自适应" class="headerlink" title="一、Y轴的自适应"></a>一、Y轴的自适应</h1><blockquote><p><strong>关于Y轴的自适应只需要在设置图表时将最大值和最小值改为一下代码即可</strong></p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.chart1.ChartAreas[<span class="number">0</span>].AxisY.IsStartedFromZero = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><h1 id="二、多条线的展示（核心代码如下）"><a href="#二、多条线的展示（核心代码如下）" class="headerlink" title="二、多条线的展示（核心代码如下）"></a>二、多条线的展示（核心代码如下）</h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置图表显示样式</span></span><br><span class="line">            <span class="keyword">this</span>.chart1.Series[<span class="number">0</span>].Color = Color.Blue;</span><br><span class="line">            <span class="keyword">this</span>.chart1.Titles[<span class="number">0</span>].Text = <span class="built_in">string</span>.Format(<span class="string">&quot;这是一个测试表&quot;</span>);</span><br><span class="line">            <span class="keyword">this</span>.chart1.Series[<span class="number">0</span>].ChartType = SeriesChartType.Line;</span><br><span class="line">            <span class="keyword">this</span>.chart1.Series[<span class="number">0</span>].ChartType = SeriesChartType.FastLine;</span><br><span class="line">            <span class="keyword">this</span>.chart1.Series[<span class="number">0</span>].Points.Clear();</span><br><span class="line">            <span class="comment">//第二条图像</span></span><br><span class="line">            Series series2 = <span class="keyword">new</span> Series(<span class="string">&quot;S2&quot;</span>);</span><br><span class="line">            <span class="keyword">this</span>.chart1.Series.Add(series2);</span><br><span class="line">            <span class="keyword">this</span>.chart1.Series[<span class="number">1</span>].Color = Color.Red;</span><br><span class="line">            <span class="keyword">this</span>.chart1.Series[<span class="number">1</span>].ChartType = SeriesChartType.Spline;</span><br><span class="line">            <span class="keyword">this</span>.chart1.Series[<span class="number">1</span>].ChartType = SeriesChartType.FastLine;</span><br><span class="line">            <span class="keyword">this</span>.chart1.Series[<span class="number">1</span>].Points.Clear();</span><br></pre></td></tr></table></figure><p>这是对差chart产生两个数据的设定，除此之外，还需要对数据更新时设置，将二者分开设置（在这里不进行详细的说明了，可以直接复制对只有一个线的数据更新）</p><hr><h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><ol><li><a href="https://blog.csdn.net/Caiabcd/article/details/108910488">C#的chart控件生成的波形图Y轴自适应</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">Chart设置Y轴范围为自适应</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="C#" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/C/"/>
    
    <category term="前端" scheme="https://zml3589110.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="C#" scheme="https://zml3589110.github.io/tags/C/"/>
    
    <category term="控件" scheme="https://zml3589110.github.io/tags/%E6%8E%A7%E4%BB%B6/"/>
    
    <category term="绘图" scheme="https://zml3589110.github.io/tags/%E7%BB%98%E5%9B%BE/"/>
    
    <category term="Chart" scheme="https://zml3589110.github.io/tags/Chart/"/>
    
  </entry>
  
  <entry>
    <title>C#绘图之二（Chart 样式说明）</title>
    <link href="https://zml3589110.github.io/posts/2957355685.html"/>
    <id>https://zml3589110.github.io/posts/2957355685.html</id>
    <published>2022-08-01T07:30:20.000Z</published>
    <updated>2022-08-01T07:36:54.057Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、Chart属性熟悉"><a href="#一、Chart属性熟悉" class="headerlink" title="一、Chart属性熟悉"></a>一、Chart属性熟悉</h1><blockquote><p>能够对C# chart控件属性熟悉起帮助的code, 现在分享给大家，<a href="https://files.cnblogs.com/files/arxive/WinChart_Operate_Demo.rar">Chart Operate Demo Code Download</a>，如有帮助，别忘点个赞.</p></blockquote><p><img src="https://images2015.cnblogs.com/blog/527375/201609/527375-20160912142644711-1711793675.png" alt="img"></p><p>有关MS_Chart的Control范围、ChartArea范围、InnerPlotArea范围，及Lengend、刻度与标签的位置关系如下图所示。以便让大家有个清晰的认识。</p><p><img src="https://images2015.cnblogs.com/blog/527375/201703/527375-20170316151631057-660893516.jpg" alt="img"></p><p>Chart<br>    ChartBorder            图表区域的边框设置<br>    ChartFill             图表区域的背景填充<br>    Legend              图表的注释标签显示设置项目，一组数据对应一种颜色的注释<br>      IsHStack           当有多个显示项的时候设置Y轴数据是叠加的还是分开的<br>    Xaxis               图表区域的X轴相关信息设置<br>      AxisColor          坐标轴颜色<br>      Cross            坐标的原点，可以设置坐标的偏移程度<br>      CrossAuto          原点自动设置：True的话Cross的设置就无效了。<br>      FontSpec           X轴标题字体相关信息<br>         Angle         X轴标题字体显示时候的角度，0为水平 90为垂直<br>         Fill          X轴标题字体填充信息<br>            ColorOpacity   透明度<br>            IsScaled     设置X轴标题字体显示大小是否根据图的比例放大缩小<br>            RangeMax     填充时候的最大倾斜度（有过渡色，没试过）<br>            RangeMin     填充时候的最小倾斜度（有过渡色，没试过）<br>         StringAlignment    X轴标题字体排列（不清楚，没试过）<br>      IsOmitMag          是否显示指数幂（10次方，没试过，似乎与IsUseTenPower有关系）<br>      IsPreventLabelOverlap    坐标值显示是否允许重叠，如果False的话，控件会根据坐标值长度自动消除部分坐标值的显示状态<br>      IsShowTitle         X轴标题是否显示<br>      IsTicsBetweenLabels     两个坐标值之间是否自动显示分隔标志<br>      IsUseTenPower        是否使用10次幂指数<br>      IsVisible          是否显示X轴<br>      IsZeroLine          当数据为0时候是否显示（在饼状图显示的时候有用）<br>      MajorGrid          大跨度的X轴表格虚线线显示信息<br>         DashOff        虚线中孔间距<br>         DashOn         虚线单位长度<br>      MajorTic           大跨度的X轴刻度信息<br>         IsInside        在Chart内部是否显示<br>         IsOutSide       在Chart外部是否显示<br>         IsOpposite       在对面的轴上是否显示<br>      MinorGrid          小跨度的X轴表格虚线显示信息<br>      MinorTic           小跨度的x轴刻度信息<br>      MinSpace           刻度和轴之间的距离（没试过）<br>      Scale            刻度值的一些设定<br>         IsReverse       X轴的刻度值从高到低还是从低到高<br>         MajorStep       大刻度步长<br>         MajorStepAuto     是否自动设置大刻度步长<br>         MajorUnit       大刻度步长单位<br>         Max          刻度最大值<br>         MaxAuto        根据输入数据自动设置刻度最大值<br>         Min          刻度最小值<br>         MinAuto        根据输入数据自动设置刻度最小值<br>         MinGrace        不清楚，没试过<br>         MinorStep       小刻度步长<br>         MinorStepAuto     是否自动设置小刻度步长<br>         MinorUnit       小刻度单位<br>      Type             数据显示方式<br>                      Liner直接现实（自动）<br>                      Date按日期方式显示<br>                      Log 按指数幂方式显示<br>                      Ordinal顺序显示<br>    Y2Axis              第二个Y轴坐标信息显示（具体设置看X轴）<br>    Yaxis               第一个Y轴坐标信息显示（具体设置看X轴）</p><p>GraphPane<br>    BarBase              在生成柱状图的时候设置柱状是基于X轴还是其他轴<br>    BarType              柱状的类型叠加或其他。<br>    IsFontsScaled           图比例变化时候图表上的文字是否跟着自动缩放<br>    IsIgnoreInitial          是否忽略初始值<br>    IsIgnoreMissing          是否忽略缺省值<br>    IsPenWidthScaled         图比例变化时候图表上的画笔的粗细是否跟着自动缩放<br>    IsShowTitle            图表标题是否显示<br>    PaneFill             Pane的一些填充信息</p><p>MasterPane<br>    BaseDimension           缩放比例基数（可以试试效果）</p><p>数据                   未测试过。不知道如何和数据库绑定</p><p>外观<br>    IsImageMap            不清楚干吗用的</p><p>行为<br>    AxisChaneged           是否允许自动绘图（没试过，一般都true，动态绘图）<br>    CacheDuration           Cache保存时间0<br>    OutputFormat           输出格式<br>    RenderedImagePath         输出路径<br>    RenderMode            输出模式，不太清楚一般都是ImageTag，另一个输出的是乱码不是图片</p><p>对于图表而言，一般是三种表现形式：柱状图、饼状图和点线图。</p><p>ChartBorder<br>图表区域的边框设置</p><p>ChartFill<br>图表区域的背景填充</p><p>Legend<br>图表的注释标签显示设置项目，一组数据对应一种颜色的注释</p><p>IsHStack<br>当有多个显示项的时候设置 Y 轴数据是叠加的还是分开的</p><p>Xaxis<br>图表区域的 X 轴相关信息设置</p><p>AxisColor<br>坐标轴颜色</p><p>Cross<br>坐标的原点，可以设置坐标的偏移程度</p><p>CrossAuto<br>原点自动设置：True 的话 Cross 的设置就无效了。</p><p>FontSpec<br>X 轴标题字体相关信息</p><p>Angle<br>X 轴标题字体显示时候的角度，0为水平 90为垂直</p><p>Fill<br>X 轴标题字体填充信息</p><p>ColorOpacity<br>透明度</p><p>IsScaled<br>设置 X 轴标题字体显示大小是否根据图的比例放大缩小</p><p>RangeMax<br>填充时候的最大倾斜度（有过渡色，没试过）</p><p>RangeMin<br>填充时候的最小倾斜度（有过渡色，没试过）</p><p>StringAlignment<br>X 轴标题字体排列（不清楚，没试过）</p><p>IsOmitMag<br>是否显示指数幂（10次方，没试过，似乎与 IsUseTenPower 有关系）</p><p>IsPreventLabelOverlap<br>坐标值显示是否允许重叠，如果False的话，控件会根据坐标值长度自动消除部分坐标值的显示状态</p><p>IsShowTitle<br>X 轴标题是否显示</p><p>IsTicsBetweenLabels<br>两个坐标值之间是否自动显示分隔标志</p><p>IsUseTenPower<br>是否使用10次幂指数</p><p>IsZeroLine<br>当数据为0时候是否显示（在饼状图显示的时候有用）</p><p>IsVisible<br>是否显示 X 轴</p><p>MajorGrid<br>大跨度的 X 轴表格虚线线显示信息</p><p>DashOff<br>虚线中孔间距</p><p>DashOn<br>虚线单位长度</p><p>MajorTic<br>大跨度的 X 轴刻度信息</p><p>IsInside<br>在 Chart 内部是否显示</p><p>IsOutSide<br>在 Chart 外部是否显示</p><p>IsOpposite<br>在对面的轴上是否显示</p><p>MinorGrid<br>小跨度的 X 轴表格虚线显示信息</p><p>MinorTic<br>小跨度的 x 轴刻度信息</p><p>MinSpace<br>刻度和轴之间的距离（没试过）</p><p>Scale<br>刻度值的一些设定</p><p>IsReverse<br>X 轴的刻度值从高到低还是从低到高</p><p>MajorStep<br>大刻度步长</p><p>MajorStepAuto<br>是否自动设置大刻度步长</p><p>MajorUnit<br>大刻度步长单位</p><p>Max<br>刻度最大值</p><p>MaxAuto<br>根据输入数据自动设置刻度最大值</p><p>Min<br>刻度最小值</p><p>MinAuto<br>根据输入数据自动设置刻度最小值</p><p>MinGrace<br>不清楚，没试过</p><p>MinorStep<br>小刻度步长</p><p>MinorStepAuto<br>是否自动设置小刻度步长</p><p>MinorUnit<br>小刻度单位</p><p>Type<br>数据显示方式</p><p>Liner<br>直接现实（自动）</p><p>Date<br>按日期方式显示</p><p>Log<br>按指数幂方式显示</p><p>Ordinal<br>顺序显示</p><p>Y2Axis<br>第二个 Y 轴坐标信息显示（具体设置看 X 轴）</p><p>Yaxis<br>第一个 Y 轴坐标信息显示（具体设置看 X 轴）</p><p>BarBase<br>在生成柱状图的时候设置柱状是基于 X 轴还是其他轴</p><p>BarType<br>柱状的类型叠加或其他。</p><p>IsFontsScaled<br>图比例变化时候图表上的文字是否跟着自动缩放</p><p>IsIgnoreInitial<br>是否忽略初始值</p><p>IsIgnoreMissing<br>是否忽略缺省值</p><p>IsPenWidthScaled<br>图比例变化时候图表上的画笔的粗细是否跟着自动缩放</p><p>IsShowTitle<br>图表标题是否显示</p><p>PaneFill<br>Pane 的一些填充信息</p><p>BaseDimension<br>缩放比例基数（可以试试效果）</p><p>IsImageMap<br>不清楚干吗用的</p><p>AxisChaneged<br>是否允许自动绘图（没试过，一般都 true，动态绘图）</p><p>CacheDuration<br>Cache 保存时间0</p><p>OutputFormat<br>输出格式</p><p>RenderedImagePath<br>输出路径</p><p>RenderMode<br>输出模式，不太清楚一般都是 ImageTag，另一个输出的是乱码不是图片。对于图表而言，一般是三种表现形式：柱状图、饼状图和点线图。</p><h1 id="二、问题"><a href="#二、问题" class="headerlink" title="二、问题"></a>二、问题</h1><h2 id="2-1-控制X轴的标签间隔显示"><a href="#2-1-控制X轴的标签间隔显示" class="headerlink" title="2.1 控制X轴的标签间隔显示"></a>2.1 控制X轴的标签间隔显示</h2><p>下面这部分参考自： <a href="http://bbs.csdn.net/topics/390421777">救急！！！Dev的chartControl画曲线图，怎么控制X轴的标签间隔显示</a>？  <a href="http://my.csdn.net/huangama2011">huangama2011</a></p><p>X轴是时间，Y轴是金额；<br>现在记录有100多个，标签在X轴都显示出来了，数字密密麻麻；<br>麻烦问下，怎么控制X轴的标签间隔显示？</p><p>**要设置下 series1.ArgumentScaleType &#x3D; ScaleType.DateTime;&#x2F;&#x2F;x轴类型 这个 **</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Series series1 = <span class="keyword">new</span> Series(<span class="keyword">this</span>.Text, ViewType.Spline);</span><br><span class="line">            series1.ArgumentScaleType = ScaleType.DateTime;<span class="comment">//x轴类型</span></span><br><span class="line">            series1.ValueScaleType = ScaleType.Numerical;<span class="comment">//y轴类型</span></span><br><span class="line">            <span class="comment">//X轴的数据字段</span></span><br><span class="line">            series1.ArgumentDataMember = <span class="string">&quot;StatisticsTime&quot;</span>;</span><br><span class="line">            <span class="comment">//Y轴的数据字段</span></span><br><span class="line">            series1.ValueDataMembers[<span class="number">0</span>] = <span class="string">&quot;StatisticsSum&quot;</span>;</span><br><span class="line">            <span class="comment">//定义线条上点的标识形状是否需要</span></span><br><span class="line">            ((LineSeriesView)series1.View).LineMarkerOptions.Visible = <span class="literal">false</span>;</span><br><span class="line">            <span class="comment">//定义线条上点的标识形状</span></span><br><span class="line">            ((LineSeriesView)series1.View).LineMarkerOptions.Kind = MarkerKind.Circle;         </span><br><span class="line">            <span class="comment">//不显示X、Y轴上面的交点的值</span></span><br><span class="line">            ((PointSeriesLabel)series1.Label).Visible = <span class="literal">false</span>;</span><br><span class="line">            <span class="comment">//线条的类型，虚线，实线</span></span><br><span class="line">            ((LineSeriesView)series1.View).LineStyle.DashStyle = DashStyle.Solid;</span><br></pre></td></tr></table></figure><p>**完整代码： **</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">BindChart</span>(<span class="params">DataTable datatable, ChartControl myChartControl</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            myChartControl.Name = <span class="string">&quot;chartResult&quot;</span>;</span><br><span class="line">            myChartControl.Dock = DockStyle.Fill;</span><br><span class="line">            myChartControl.Size = <span class="keyword">new</span> System.Drawing.Size(<span class="number">400</span>, <span class="number">250</span>);</span><br><span class="line">            <span class="comment">// 显示标签.            </span></span><br><span class="line">            myChartControl.Legend.Visible = <span class="literal">true</span>;</span><br><span class="line">            myChartControl.Series.Clear();</span><br><span class="line"></span><br><span class="line">            <span class="meta">#<span class="meta-keyword">region</span> 仅供参考（不需要）</span></span><br><span class="line">            <span class="comment">//控制X、Y轴显示</span></span><br><span class="line">            <span class="comment">//XYDiagram diagram = (XYDiagram)chartControl.Diagram;</span></span><br><span class="line">            <span class="comment">//diagram.AxisX.Label.Staggered = true;</span></span><br><span class="line">            <span class="comment">//diagram.AxisY.Label.BeginText = &quot;Axis value = &quot;;</span></span><br><span class="line">            <span class="comment">//diagram.AxisY.Label.Angle = -30;</span></span><br><span class="line">            <span class="comment">//diagram.AxisY.Label.Antialiasing = true;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//XYDiagram diagram = (XYDiagram)chartControl.Diagram; </span></span><br><span class="line">            <span class="comment">//diagram.AxisX.DateTimeMeasureUnit = DateTimeMeasurementUnit.Second; </span></span><br><span class="line">            <span class="comment">//diagram.AxisX.DateTimeOptions.Format = DateTimeFormat.Custom; diagram.AxisX.DateTimeOptions.FormatString = &quot;HH:mm:ss&quot;;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//((XYDiagram)myChartControl.Diagram).AxisX.Interlaced = true;</span></span><br><span class="line">            <span class="comment">//((XYDiagram)myChartControl.Diagram).AxisX.GridSpacing = 10;</span></span><br><span class="line">            <span class="comment">//((XYDiagram)myChartControl.Diagram).AxisX.Label.Angle = -30;</span></span><br><span class="line">            <span class="comment">//((XYDiagram)myChartControl.Diagram).AxisX.Label.Antialiasing = true;</span></span><br><span class="line">            <span class="comment">//((XYDiagram)myChartControl.Diagram).AxisX.DateTimeOptions.Format = DateTimeFormat.MonthAndDay;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"><span class="doctag">///</span>/XYDiagram xyDiagram1 = new XYDiagram();</span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span>/xyDiagram1.AxisX.Range.Auto = false; //要开启滚动条必须将其设置为false</span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span><span class="doctag">///</span>xyDiagram1.AxisX.Range.MaxValueInternal = 30.5D &gt; (cnt + 1) ? (cnt + 1) : 30.5D;//在不拉到滚动条的时候，X轴显示多个值，既固定的X轴长度。</span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span><span class="doctag">///</span>xyDiagram1.AxisX.Range.MinValueInternal = -0.5D;</span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span>/xyDiagram1.AxisX.Range.ScrollingRange.Auto = false;</span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span>/xyDiagram1.AxisX.MinorCount = 9; //显示X轴间隔数量</span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span>/xyDiagram1.AxisX.Tickmarks.MinorVisible = true;//是否显示X轴间隔</span></span><br><span class="line">            <span class="comment">//xyDiagram1.AxisY.MinorCount = 1;//显示Y轴间隔数量</span></span><br><span class="line">            <span class="comment">//xyDiagram1.AxisY.Tickmarks.MinorVisible = true;//是否显示Y轴间隔</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//xyDiagram1.AxisX.Range.ScrollingRange.MaxValueSerializable = (cnt + 1).ToString();//整个X轴最多显示多多少个值</span></span><br><span class="line">            <span class="comment">// xyDiagram1.AxisX.Range.ScrollingRange.MinValueSerializable = &quot;0&quot;;</span></span><br><span class="line">            <span class="comment">//xyDiagram1.AxisX.DateTimeMeasureUnit = DateTimeMeasurementUnit.Second;</span></span><br><span class="line">            <span class="comment">//xyDiagram1.AxisX.DateTimeOptions.Format = DateTimeFormat.Custom;</span></span><br><span class="line">            <span class="comment">//xyDiagram1.AxisX.DateTimeOptions.FormatString = &quot;yyyy:MM:HH&quot;;</span></span><br><span class="line">            <span class="comment">//xyDiagram1.AxisX.Range.ScrollingRange.SideMarginsEnabled = true;//是否从X轴原点开始显示</span></span><br><span class="line">            <span class="comment">//xyDiagram1.AxisX.Range.SideMarginsEnabled = false;</span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span>/xyDiagram1.AxisX.VisibleInPanesSerializable = &quot;-1&quot;;</span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span>/xyDiagram1.AxisY.NumericOptions.Format = DevExpress.XtraCharts.NumericFormat.Percent;//显示为百分数</span></span><br><span class="line">            <span class="comment">//xyDiagram1.AxisY.Range.Auto = false;</span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span>/xyDiagram1.AxisY.Range.MaxValueSerializable = &quot;1.02&quot;;</span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span>/xyDiagram1.AxisY.Range.MinValueSerializable = &quot;0.5&quot;;</span></span><br><span class="line">            <span class="comment">//xyDiagram1.AxisY.Range.ScrollingRange.SideMarginsEnabled = true;</span></span><br><span class="line">            <span class="comment">//xyDiagram1.AxisY.Range.SideMarginsEnabled = true;</span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span>/xyDiagram1.AxisY.VisibleInPanesSerializable = &quot;-1&quot;;</span></span><br><span class="line">            <span class="comment">//xyDiagram1.EnableScrolling = true;//启用滚动条</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取Diagram必须在ChartControl中已经加入了Series之后</span></span><br><span class="line">            <span class="comment">//((XYDiagram)chartControl.Diagram).Rotated = false;</span></span><br><span class="line">            <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//图标位置</span></span><br><span class="line">            myChartControl.Legend.AlignmentHorizontal = LegendAlignmentHorizontal.Right;</span><br><span class="line">            myChartControl.Legend.AlignmentVertical = LegendAlignmentVertical.Top;</span><br><span class="line"></span><br><span class="line">            ChartTitle chartTitle = <span class="keyword">new</span> ChartTitle();</span><br><span class="line">            chartTitle.Text = <span class="keyword">this</span>.Text;<span class="comment">//标题内容</span></span><br><span class="line">            chartTitle.TextColor = System.Drawing.Color.Black;<span class="comment">//字体颜色</span></span><br><span class="line">            chartTitle.Font = <span class="keyword">new</span> Font(<span class="string">&quot;Tahoma&quot;</span>, <span class="number">8</span>);<span class="comment">//字体类型字号</span></span><br><span class="line">            chartTitle.Dock = ChartTitleDockStyle.Bottom;<span class="comment">//标题对齐方式</span></span><br><span class="line">            chartTitle.Alignment = StringAlignment.Far;</span><br><span class="line">            myChartControl.Titles.Clear();<span class="comment">//清理标题</span></span><br><span class="line">            myChartControl.Titles.Add(chartTitle);<span class="comment">//加载标题</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            Series series1 = <span class="keyword">new</span> Series(<span class="keyword">this</span>.Text, ViewType.Spline);</span><br><span class="line">            series1.ArgumentScaleType = ScaleType.DateTime;<span class="comment">//x轴类型</span></span><br><span class="line">            series1.ValueScaleType = ScaleType.Numerical;<span class="comment">//y轴类型</span></span><br><span class="line">            <span class="comment">//X轴的数据字段</span></span><br><span class="line">            series1.ArgumentDataMember = <span class="string">&quot;StatisticsTime&quot;</span>;</span><br><span class="line">            <span class="comment">//Y轴的数据字段</span></span><br><span class="line">            series1.ValueDataMembers[<span class="number">0</span>] = <span class="string">&quot;StatisticsSum&quot;</span>;</span><br><span class="line">            <span class="comment">//定义线条上点的标识形状是否需要</span></span><br><span class="line">            ((LineSeriesView)series1.View).LineMarkerOptions.Visible = <span class="literal">false</span>;</span><br><span class="line">            <span class="comment">//定义线条上点的标识形状</span></span><br><span class="line">            ((LineSeriesView)series1.View).LineMarkerOptions.Kind = MarkerKind.Circle;          </span><br><span class="line">            <span class="comment">//不显示X、Y轴上面的交点的值</span></span><br><span class="line">            ((PointSeriesLabel)series1.Label).Visible = <span class="literal">false</span>;</span><br><span class="line">            <span class="comment">//线条的类型，虚线，实线</span></span><br><span class="line">            ((LineSeriesView)series1.View).LineStyle.DashStyle = DashStyle.Solid;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//绑定数据源</span></span><br><span class="line">            series1.DataSource = datatable;</span><br><span class="line"></span><br><span class="line">            myChartControl.Series.Add(series1);        </span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-x轴的间距过大的问题"><a href="#2-2-x轴的间距过大的问题" class="headerlink" title="2.2 x轴的间距过大的问题"></a>2.2 x轴的间距过大的问题</h2><ul><li>关于X轴数据间距过大的问题，可以通过设置scale来解决。在Format Chart页，选中Chart Area-&gt;Axes-&gt;X-Axis, 设置间隔。</li><li>关于点重合的问题，你可以通过改变marker的形状和大小来解决。在Format Chart页，选中Series-&gt;Value series,找到marker就可以进行设置了。</li><li>X轴和Y轴的最大值设置 也是在Chart Area-&gt;Axes-&gt;X-Axis的刻度中设置。</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Series&gt; listSer = ``<span class="keyword">new</span>` `List&lt;Series&gt;();</span><br></pre></td></tr></table></figure><p><strong>引发动态生成图表的按钮事件完整如下：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> sqlString = <span class="string">&quot;select count(*) from dotrelation where dotdesc like &#x27;温度%&#x27;&quot;</span>;</span><br><span class="line">num = Mycon.countORL(conn, sqlString);<span class="comment">//获得数据库中满足条件的记录数</span></span><br><span class="line"><span class="comment">//MessageBox.Show(&quot;满足条件的数据记录为&quot; + num);</span></span><br><span class="line"><span class="built_in">int</span> heightPer = <span class="number">100</span> / num;<span class="comment">//计算每个绘图区高度</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">string</span> serName = <span class="string">&quot;test&quot;</span> + i.ToString();</span><br><span class="line">  listSer.Add(<span class="keyword">new</span> Series(serName));<span class="comment">//对象数组</span></span><br><span class="line">  fillData(date);<span class="comment">//初始化数组此方法自己定义的</span></span><br><span class="line">  initialSeries((Series)listSer[i], Color.Red, date);</span><br><span class="line">  chart1.ChartAreas.Add(<span class="string">&quot;ANOTHER&quot;</span> + i);</span><br><span class="line"><span class="comment">//这里是关键！！！！！</span></span><br><span class="line">    chart1.ChartAreas[i].Position.Width = <span class="number">100</span>;<span class="comment">//绘图区域在控件中的宽度 100是百分比</span></span><br><span class="line">    chart1.ChartAreas[i].Position.Height = heightPer;</span><br><span class="line">    chart1.ChartAreas[i].Position.X = <span class="number">5</span>;<span class="comment">//绘图区域在控件中的绝对位置 横坐标</span></span><br><span class="line">    chart1.ChartAreas[i].Position.Y = <span class="number">3</span> + heightPer * i;<span class="comment">//绘图区域在控件中的绝对位置纵坐标</span></span><br><span class="line">    chart1.ChartAreas[i].AxisX.LineColor = Color.Blue;</span><br><span class="line">    chart1.ChartAreas[i].AxisY.LineColor = Color.Blue;</span><br><span class="line">    chart1.ChartAreas[i].AxisX.LineWidth = <span class="number">2</span>;</span><br><span class="line">    chart1.ChartAreas[i].AxisY.LineWidth = <span class="number">2</span>;</span><br><span class="line">    chart1.ChartAreas[i].AxisY.Title = <span class="string">&quot;监测值&quot;</span>;</span><br><span class="line">    <span class="comment">//设置网格线  </span></span><br><span class="line">    chart1.ChartAreas[i].AxisX.MajorGrid.LineColor = Color.Blue;</span><br><span class="line">    chart1.ChartAreas[i].AxisX.MajorGrid.Interval = <span class="number">2</span>;<span class="comment">//网格间隔</span></span><br><span class="line">    chart1.ChartAreas[i].AxisX.MinorGrid.Interval = <span class="number">2</span>;</span><br><span class="line">    chart1.ChartAreas[i].AxisY.MajorGrid.LineColor = Color.Blue;</span><br><span class="line">    chart1.ChartAreas[i].AxisY.MajorGrid.Interval = <span class="number">2</span>;</span><br><span class="line">    chart1.ChartAreas[i].AxisY.MinorGrid.Interval = <span class="number">2</span>;</span><br><span class="line">     </span><br><span class="line">  </span><br><span class="line">    chart1.Series[i].IsValueShownAsLabel = <span class="literal">false</span>; <span class="comment">//是否显示数据      </span></span><br><span class="line">    chart1.Series[i].IsVisibleInLegend = <span class="literal">false</span>;  <span class="comment">//是否显示数据说明  </span></span><br><span class="line">    chart1.Series[i].MarkerStyle = MarkerStyle.Circle;   <span class="comment">//线条上的数据点标志类型  </span></span><br><span class="line">    chart1.Series[i].MarkerSize = <span class="number">3</span>;  <span class="comment">//标志大小  </span></span><br><span class="line">    chart1.Series[i].ChartType = SeriesChartType.Line;      <span class="comment">//图表类型为曲线</span></span><br><span class="line">    <span class="built_in">string</span> name = <span class="string">&quot;ANOTHER&quot;</span> + i.ToString();</span><br><span class="line">    chart1.Series[i].ChartArea = name;<span class="comment">//指定绘图区域</span></span><br><span class="line">   </span><br><span class="line">  </span><br><span class="line">    chart1.ChartAreas[i].AxisX.LineColor = Color.Blue;<span class="comment">//X轴颜色  </span></span><br><span class="line">    chart1.ChartAreas[i].AxisY.LineColor = Color.Blue;<span class="comment">//Y轴颜色  </span></span><br><span class="line">    chart1.ChartAreas[i].AxisX.LineWidth = <span class="number">2</span>;         <span class="comment">//X轴宽度  </span></span><br><span class="line">    chart1.ChartAreas[i].AxisY.LineWidth = <span class="number">2</span>;          <span class="comment">//Y轴宽度  </span></span><br><span class="line">    chart1.ChartAreas[i].AxisY.Title = <span class="string">&quot;人数&quot;</span>; <span class="comment">//Y轴标题</span></span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//fillData(date);//初始化数组</span></span><br><span class="line"><span class="comment">//initialSeries(series1, Color.Red, date);</span></span><br><span class="line">initalChart();<span class="comment">//图表初始化</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考文章：</p><ol><li><a href="http://home.cnblogs.com/u/liuxinls/">louiskoo</a> ， <a href="http://www.cnblogs.com/liuxinls/archive/2013/04/26/3044219.html">c# Chart设置样式</a>。</li><li>IT-CollectionPlatForm， <a href="http://blog.sina.com.cn/s/blog_45ef2e490101begn.html">C# 2010 Chart的使用</a>。</li></ol><hr><h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><ol><li><a href="hhttps://www.cnblogs.com/arxive/p/5861960.html">c# Chart设置样式</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">Chart控件说明</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="C#" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/C/"/>
    
    <category term="前端" scheme="https://zml3589110.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="C#" scheme="https://zml3589110.github.io/tags/C/"/>
    
    <category term="控件" scheme="https://zml3589110.github.io/tags/%E6%8E%A7%E4%BB%B6/"/>
    
    <category term="绘图" scheme="https://zml3589110.github.io/tags/%E7%BB%98%E5%9B%BE/"/>
    
    <category term="Chart" scheme="https://zml3589110.github.io/tags/Chart/"/>
    
  </entry>
  
  <entry>
    <title>C#绘图之一（绘制实时折线图，波形图）</title>
    <link href="https://zml3589110.github.io/posts/93616624.html"/>
    <id>https://zml3589110.github.io/posts/93616624.html</id>
    <published>2022-08-01T06:54:20.000Z</published>
    <updated>2022-08-01T07:08:26.091Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Chart绘图相关知识"><a href="#Chart绘图相关知识" class="headerlink" title="Chart绘图相关知识"></a>Chart绘图相关知识</h1><blockquote><p>Chart控件，功能强大：可以绘制柱状图、折线图、波形图、饼状图，大大简化了对图的开发与定制。</p></blockquote><p><strong>Chart控件的相关概念：</strong></p><ul><li><strong>ChartArea：</strong>表示图表区域，一个Chart可以绘制多个ChartArea，重叠在一起。</li><li><strong>Series：</strong>表示数据序列，每个ChartArea可以有多个数据线。即，Series属于ChartArea.</li><li><strong>AxisX,AxisY：</strong>表示主坐标轴，每一个ChartArea都有对应的坐标轴，包括主坐标轴，辅坐标轴</li><li><strong>Queue集合：</strong>表示先进先出的集合。</li></ul><p>Queue主要有两个方法：<br>    1. Dequeue() 表示移除并返回位于 System.Collections.Generic.Queue<T> 开始处的对象。<br>    2. Enqueue() 表示将对象添加到 System.Collections.Generic.Queue<T> 的结尾处。</T></T></p><blockquote><p>其他用到知识：</p></blockquote><p><strong>Timer 定时器：</strong>定时执行相应的功能，更新数据，刷新图表。</p><h1 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h1><p>如下【先点击初始化按钮，再点击开始按钮】：</p><p><strong>一、折线图【折线图，是取[0,100]之间的随即数进行填充】：</strong></p><img src="https://img.jbzj.com/file_images/article/202007/2020710160915797.png?202061016923"><p><strong>二、波形图【波形图，是取正玄值，并放大50倍，然后上移50】</strong></p><img src="https://img.jbzj.com/file_images/article/202007/2020710160949041.png?202061016957"><h1 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h1><blockquote><p>实验错误经验：在窗体代码前要增加以下声明代码才能使用 ChartArea 这些类，ChartArea 完整名字为：<br> System.Windows.Forms.DataVisualization.Charting.ChartArea</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Windows.Forms.DataVisualization.Charting;</span><br></pre></td></tr></table></figure><p><strong>完整源码：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.ComponentModel;</span><br><span class="line"><span class="keyword">using</span> System.Data;</span><br><span class="line"><span class="keyword">using</span> System.Drawing;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms.DataVisualization.Charting;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">WindowsFormsApplication1</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">RealChart</span> : <span class="title">Form</span></span><br><span class="line"> &#123;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Queue</span>&lt;<span class="title">double</span>&gt; dataQueue</span> = <span class="keyword">new</span> Queue&lt;<span class="built_in">double</span>&gt;(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="built_in">int</span> curValue = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="built_in">int</span> num = <span class="number">5</span>;<span class="comment">//每次删除增加几个点</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">RealChart</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">   InitializeComponent();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">  <span class="comment"><span class="doctag">///</span> 初始化事件</span></span><br><span class="line">  <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">  <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;sender&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">  <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;e&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btnInit_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">   InitChart();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">  <span class="comment"><span class="doctag">///</span> 开始事件</span></span><br><span class="line">  <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">  <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;sender&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">  <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;e&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btnStart_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">   <span class="keyword">this</span>.timer1.Start();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">  <span class="comment"><span class="doctag">///</span> 停止事件</span></span><br><span class="line">  <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">  <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;sender&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">  <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;e&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btnStop_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">   <span class="keyword">this</span>.timer1.Stop();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">  <span class="comment"><span class="doctag">///</span> 定时器事件</span></span><br><span class="line">  <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">  <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;sender&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">  <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;e&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">timer1_Tick</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">   UpdateQueueValue();</span><br><span class="line">   <span class="keyword">this</span>.chart1.Series[<span class="number">0</span>].Points.Clear();</span><br><span class="line">   <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;dataQueue.Count;i++)&#123;</span><br><span class="line">    <span class="keyword">this</span>.chart1.Series[<span class="number">0</span>].Points.AddXY((i+<span class="number">1</span>), dataQueue.ElementAt(i));</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">  <span class="comment"><span class="doctag">///</span> 初始化图表</span></span><br><span class="line">  <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">InitChart</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">   <span class="comment">//定义图表区域</span></span><br><span class="line">   <span class="keyword">this</span>.chart1.ChartAreas.Clear();</span><br><span class="line">   ChartArea chartArea1 = <span class="keyword">new</span> ChartArea(<span class="string">&quot;C1&quot;</span>);</span><br><span class="line">   <span class="keyword">this</span>.chart1.ChartAreas.Add(chartArea1);</span><br><span class="line">   <span class="comment">//定义存储和显示点的容器</span></span><br><span class="line">   <span class="keyword">this</span>.chart1.Series.Clear();</span><br><span class="line">   Series series1 = <span class="keyword">new</span> Series(<span class="string">&quot;S1&quot;</span>);</span><br><span class="line">   series1.ChartArea = <span class="string">&quot;C1&quot;</span>;</span><br><span class="line">   <span class="keyword">this</span>.chart1.Series.Add(series1);</span><br><span class="line">   <span class="comment">//设置图表显示样式</span></span><br><span class="line">   <span class="keyword">this</span>.chart1.ChartAreas[<span class="number">0</span>].AxisY.Minimum = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">this</span>.chart1.ChartAreas[<span class="number">0</span>].AxisY.Maximum =<span class="number">100</span>;</span><br><span class="line">   <span class="keyword">this</span>.chart1.ChartAreas[<span class="number">0</span>].AxisX.Interval = <span class="number">5</span>;</span><br><span class="line">   <span class="keyword">this</span>.chart1.ChartAreas[<span class="number">0</span>].AxisX.MajorGrid.LineColor = System.Drawing.Color.Silver;</span><br><span class="line">   <span class="keyword">this</span>.chart1.ChartAreas[<span class="number">0</span>].AxisY.MajorGrid.LineColor = System.Drawing.Color.Silver;</span><br><span class="line">   <span class="comment">//设置标题</span></span><br><span class="line">   <span class="keyword">this</span>.chart1.Titles.Clear();</span><br><span class="line">   <span class="keyword">this</span>.chart1.Titles.Add(<span class="string">&quot;S01&quot;</span>);</span><br><span class="line">   <span class="keyword">this</span>.chart1.Titles[<span class="number">0</span>].Text = <span class="string">&quot;XXX显示&quot;</span>;</span><br><span class="line">   <span class="keyword">this</span>.chart1.Titles[<span class="number">0</span>].ForeColor = Color.RoyalBlue;</span><br><span class="line">   <span class="keyword">this</span>.chart1.Titles[<span class="number">0</span>].Font = <span class="keyword">new</span> System.Drawing.Font(<span class="string">&quot;Microsoft Sans Serif&quot;</span>, <span class="number">12F</span>);</span><br><span class="line">   <span class="comment">//设置图表显示样式</span></span><br><span class="line">   <span class="keyword">this</span>.chart1.Series[<span class="number">0</span>].Color = Color.Red;</span><br><span class="line">   <span class="keyword">if</span> (rb1.Checked)</span><br><span class="line">   &#123;</span><br><span class="line">    <span class="keyword">this</span>.chart1.Titles[<span class="number">0</span>].Text =<span class="built_in">string</span>.Format( <span class="string">&quot;XXX &#123;0&#125; 显示&quot;</span>,rb1.Text);</span><br><span class="line">    <span class="keyword">this</span>.chart1.Series[<span class="number">0</span>].ChartType = SeriesChartType.Line;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (rb2.Checked) &#123;</span><br><span class="line">    <span class="keyword">this</span>.chart1.Titles[<span class="number">0</span>].Text = <span class="built_in">string</span>.Format(<span class="string">&quot;XXX &#123;0&#125; 显示&quot;</span>, rb2.Text);</span><br><span class="line">    <span class="keyword">this</span>.chart1.Series[<span class="number">0</span>].ChartType = SeriesChartType.Spline;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">this</span>.chart1.Series[<span class="number">0</span>].Points.Clear();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//更新队列中的值</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">UpdateQueueValue</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (dataQueue.Count &gt; <span class="number">100</span>) &#123;</span><br><span class="line">    <span class="comment">//先出列</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">    &#123;</span><br><span class="line">     dataQueue.Dequeue();</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (rb1.Checked)</span><br><span class="line">   &#123;</span><br><span class="line">    Random r = <span class="keyword">new</span> Random();</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">    &#123;</span><br><span class="line">     dataQueue.Enqueue(r.Next(<span class="number">0</span>, <span class="number">100</span>));</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (rb2.Checked) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">    &#123;</span><br><span class="line">     <span class="comment">//对curValue只取[0,360]之间的值</span></span><br><span class="line">     curValue = curValue % <span class="number">360</span>;</span><br><span class="line">     <span class="comment">//对得到的正玄值，放大50倍，并上移50</span></span><br><span class="line">     dataQueue.Enqueue((<span class="number">50</span>*Math.Sin(curValue*Math.PI / <span class="number">180</span>))+<span class="number">50</span>);</span><br><span class="line">     curValue=curValue+<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h1><p>关于定时器Timer【微软自带的控件】:</p><p>说明：表示在相同的时间间隔，引发用户自定义的事情 。实现用户需要的功能。本例中是用来定时更新队列中的数据，并刷新图表。</p><p><strong>常用说明：</strong></p><ol><li>Interval 时间间隔，以毫秒为单位，本例是300毫秒。</li><li>Tick 定时触发的事件，本例对应timer1_Tick事件方法。</li><li>Start()，Stop() 表示定时器的启动和停止。Enabled 表示定时器是否启用，默认值为 false，需要手动设置为true。</li></ol><img src="https://img.jbzj.com/file_images/article/202007/2020710161057940.png?202061016114">-------# 相关链接1. [C# 绘制实时折线图，波形图](https://www.jb51.net/article/190509.htm) --->[**原文出处**](https://blog.51cto.com/u_11990719/3107363)<hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">C#通过Chart控件来制作实时动态显示的折线图，和波形图。</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="C#" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/C/"/>
    
    <category term="前端" scheme="https://zml3589110.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="C#" scheme="https://zml3589110.github.io/tags/C/"/>
    
    <category term="控件" scheme="https://zml3589110.github.io/tags/%E6%8E%A7%E4%BB%B6/"/>
    
    <category term="绘图" scheme="https://zml3589110.github.io/tags/%E7%BB%98%E5%9B%BE/"/>
    
    <category term="Chart" scheme="https://zml3589110.github.io/tags/Chart/"/>
    
  </entry>
  
  <entry>
    <title>bat输出日志信息</title>
    <link href="https://zml3589110.github.io/posts/952081412.html"/>
    <id>https://zml3589110.github.io/posts/952081412.html</id>
    <published>2022-07-29T00:29:20.000Z</published>
    <updated>2022-07-29T00:42:41.257Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、echo输出内容"><a href="#一、echo输出内容" class="headerlink" title="一、echo输出内容"></a>一、echo输出内容</h1><blockquote><p>bat脚本常用的的输出命令是“echo 输出内容”，可以利用echo将文本输出到cmd窗口或文件。bat脚本是不区分大小写的脚本语言，因此大小写都可以。</p></blockquote><p><strong>例如：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">REM 在命令行窗口输出</span><br><span class="line"><span class="built_in">echo</span> Hello World！</span><br><span class="line"></span><br><span class="line">pause</span><br></pre></td></tr></table></figure><p>会在命令行窗口输出Hello World！</p><p>通过bat打开命令行窗口运行上面的命令还会输出CMD运行相关的提示信息。如果想关闭多余的输出可以用 @ECHO OFF，示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@ECHO OFF</span><br><span class="line">REM 在命令行窗口纯净的输出</span><br><span class="line"><span class="built_in">echo</span> Hello World！</span><br><span class="line"></span><br><span class="line">pause</span><br></pre></td></tr></table></figure><h1 id="二、输出内容到文件"><a href="#二、输出内容到文件" class="headerlink" title="二、输出内容到文件"></a>二、输出内容到文件</h1><p>效果：可以使用重定向将输出结果保存到文件中。 </p><p>符号&gt;和&gt;&gt;符号为两个常用的重定向符号。&gt;会将原始文件的内容清空，&gt;&gt;会在文件后面追加内容，如果文件不存在则创建文件。</p><p><strong>具体使用方法如下：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> Hello World &gt;file.txt</span><br><span class="line"><span class="built_in">echo</span> Hello World 1&gt;file.txt</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> Hello World 2&gt;file.txt</span><br></pre></td></tr></table></figure><p>运行后，会将Hello World输出到file.txt中。两行代码等价。<br>其中1的意思是代表将标准输出重定向，标准输出即正常的输出内容。<br>而2&gt;file.txt则代表将错误信息输出到file.txt中，这样Hello World会显示在屏幕上，只有报错的信息会保存在file.txt中。</p><h1 id="三、输出内容追加到文件"><a href="#三、输出内容追加到文件" class="headerlink" title="三、输出内容追加到文件"></a>三、输出内容追加到文件</h1><p><strong>示例：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> Hello World &gt;&gt;file.txt</span><br></pre></td></tr></table></figure><blockquote><p>上面的语句使用了2个&gt;，表示追加内容，如果file.txt内容不是空，则Hello World会在最后一行的后面另起一行保存。</p></blockquote><h1 id="四、将bat文件的输出结果放到txt文件中"><a href="#四、将bat文件的输出结果放到txt文件中" class="headerlink" title="四、将bat文件的输出结果放到txt文件中"></a>四、将bat文件的输出结果放到txt文件中</h1><blockquote><p>有时候我们会写批处理执行过程，会集中输出很多内容，又不想在bat里面频繁的试用输出到文件命令，怎么办呢？</p></blockquote><p><strong>我们可以尝试下面的办法：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">call <span class="string">&quot;批处理路径&quot;</span>&gt;D:\结果.txt</span><br><span class="line">start notepad D:\结果.txt</span><br><span class="line"></span><br><span class="line">REM 再例如下面这样</span><br><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">call <span class="string">&quot;D:\procedure.bat&quot;</span>&gt;D:\结果.txt</span><br><span class="line">start notepad D:\结果.txt</span><br></pre></td></tr></table></figure><p><strong>【实例】：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@ECHO OFF</span><br><span class="line"><span class="built_in">echo</span> 检查并停止相关服务....</span><br><span class="line"><span class="built_in">echo</span> ------------------------------</span><br><span class="line"><span class="keyword">for</span> %%i <span class="keyword">in</span> (wuauserv,yun-wps) <span class="keyword">do</span> (</span><br><span class="line">    sc query <span class="string">&quot;%%i&quot;</span> &gt;nul &amp;&amp; (</span><br><span class="line">        <span class="built_in">echo</span> %date:~0,4%-%date:~5,2%-%date:~8,2% %time:~0,8%开始停止服务：%%i &gt;&gt;<span class="string">&quot;%date:~0,4%-%date:~5,2%-%date:~8,2%_%time:~0,2%.txt&quot;</span></span><br><span class="line">        net stop <span class="string">&quot;%%i&quot;</span></span><br><span class="line">        </span><br><span class="line">        ::@ECHO 开始卸载服务：%var%</span><br><span class="line">        ::SC DELETE %var%</span><br><span class="line">        </span><br><span class="line">        REM net start <span class="string">&quot;%%i&quot;</span></span><br><span class="line">        REM wmic SERVICE <span class="built_in">where</span> name=<span class="string">&quot;%%i&quot;</span> get State|findstr /i <span class="string">&quot;RUNNING&quot;</span> &amp;&amp; ( <span class="built_in">echo</span> %%i已启动。 )||( <span class="built_in">echo</span> %%i未启动！请查看日志信息。 )</span><br><span class="line">    )||(</span><br><span class="line">        <span class="built_in">echo</span> %date:~0,4%-%date:~5,2%-%date:~8,2% %time:~0,8%服务不存在：%%i 自动跳过&gt;&gt;<span class="string">&quot;%date:~0,4%-%date:~5,2%-%date:~8,2%_%time:~0,2%.txt&quot;</span></span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line"><span class="built_in">echo</span> 执行完成</span><br><span class="line"></span><br><span class="line">REM pause</span><br><span class="line"><span class="built_in">exit</span> /B</span><br></pre></td></tr></table></figure><p>将上面的脚本复制到txt里面，并另存为ANSI格式，重命名为：WinService-Stop.bat，然后在相同目录下新建一个txt，复制下面这段：</p><figure class="highlight vbs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> ws=WScript.<span class="built_in">CreateObject</span>(<span class="string">&quot;WScript.Shell&quot;</span>)</span><br><span class="line">ws.Run <span class="string">&quot;WinService-Stop.bat&quot;</span>,<span class="number">0</span></span><br></pre></td></tr></table></figure><p>将上面的脚本复制到txt里面，并另存为ANSI格式，重命名为：启动bat文件.vbs，它的作用是用了静默启动bat脚本而隐藏CMD窗口，隐藏命令行窗口使用户无感知。注意两个文件在同一目录。</p><p>然后我们在“计算机-管理-任务计划程序”里面新增一个任务计划，定时执行“启动bat文件.vbs”就可以自动关闭Windows系统的自动更新啦。</p><hr><blockquote><p><strong>说明：本文是收集参考文档，以方便查看</strong></p></blockquote><hr><h1 id="信息链接"><a href="#信息链接" class="headerlink" title="信息链接:"></a>信息链接:</h1><ol><li><a href="https://www.cnblogs.com/xiongzaiqiren/p/11392768.html">bat脚本输出日志</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">通过文件方式进行日志输出</summary>
    
    
    
    <category term="小插件类" scheme="https://zml3589110.github.io/categories/%E5%B0%8F%E6%8F%92%E4%BB%B6%E7%B1%BB/"/>
    
    <category term="BAT" scheme="https://zml3589110.github.io/categories/BAT/"/>
    
    
    <category term="计算机" scheme="https://zml3589110.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    <category term="bat" scheme="https://zml3589110.github.io/tags/bat/"/>
    
    <category term="脚本" scheme="https://zml3589110.github.io/tags/%E8%84%9A%E6%9C%AC/"/>
    
    <category term="cmd" scheme="https://zml3589110.github.io/tags/cmd/"/>
    
  </entry>
  
  <entry>
    <title>bat弹出确认取消选择框</title>
    <link href="https://zml3589110.github.io/posts/3977731493.html"/>
    <id>https://zml3589110.github.io/posts/3977731493.html</id>
    <published>2022-07-29T00:25:20.000Z</published>
    <updated>2022-07-29T00:28:04.192Z</updated>
    
    <content type="html"><![CDATA[<h1 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h1><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">setlocal</span> enabledelayedexpansion</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> Vbscript=Msgbox(&quot;你的系统即将崩溃，是否立即更新？&quot;,<span class="number">1</span>,&quot;系统管理员提醒&quot;)</span><br><span class="line"><span class="keyword">for</span> /f &quot;Delims=&quot; <span class="variable">%%a</span> <span class="keyword">in</span> (&#x27;MsHta VBScript:Execute(&quot;CreateObject(&quot;&quot;Scripting.Filesystemobject&quot;&quot;).GetStandardStream(<span class="number">1</span>).Write(<span class="variable">%Vbscript:&quot;=&quot;&quot;%</span>)&quot;^)(Close^)&#x27;) <span class="keyword">do</span> <span class="built_in">Set</span> &quot;MsHtaReturnValue=<span class="variable">%%a</span>&quot;</span><br><span class="line"><span class="built_in">set</span> ReturnValue1=确定</span><br><span class="line"><span class="built_in">set</span> ReturnValue2=取消或关闭窗口</span><br><span class="line"><span class="built_in">echo</span> 你点击了<span class="variable">!ReturnValue%MsHtaReturnValue%!</span></span><br><span class="line"><span class="keyword">if</span> <span class="variable">%MsHtaReturnValue%</span> == <span class="number">1</span> (</span><br><span class="line">    <span class="built_in">echo</span> 你好世界！终于等到你。</span><br><span class="line">) <span class="keyword">else</span> (</span><br><span class="line">    <span class="built_in">echo</span> 再见。</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">pause</span></span><br></pre></td></tr></table></figure><blockquote><p>bat本身不具备弹框提示能力，上面的脚本是借助VB脚本的弹框来实现取消和确认的。同理还可以弹出其他形式的框框（可以参考<a href="https://www.w3school.com.cn/vbscript/func_msgbox.asp">Msgbox函数说明</a>）。</p></blockquote><hr><blockquote><p><strong>说明：本文是收集参考文档，以方便查看</strong></p></blockquote><hr><h1 id="信息链接"><a href="#信息链接" class="headerlink" title="信息链接:"></a>信息链接:</h1><ol><li><a href="https://www.cnblogs.com/xiongzaiqiren/p/11392842.html">bat弹出确认或取消窗口</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">弹出确认取消选择进行下一步动作</summary>
    
    
    
    <category term="小插件类" scheme="https://zml3589110.github.io/categories/%E5%B0%8F%E6%8F%92%E4%BB%B6%E7%B1%BB/"/>
    
    <category term="BAT" scheme="https://zml3589110.github.io/categories/BAT/"/>
    
    
    <category term="计算机" scheme="https://zml3589110.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    <category term="bat" scheme="https://zml3589110.github.io/tags/bat/"/>
    
    <category term="脚本" scheme="https://zml3589110.github.io/tags/%E8%84%9A%E6%9C%AC/"/>
    
    <category term="cmd" scheme="https://zml3589110.github.io/tags/cmd/"/>
    
  </entry>
  
  <entry>
    <title>C#窗体之三（窗口跳转 后关闭上一个窗口）</title>
    <link href="https://zml3589110.github.io/posts/3802822928.html"/>
    <id>https://zml3589110.github.io/posts/3802822928.html</id>
    <published>2022-07-28T13:18:20.000Z</published>
    <updated>2022-07-28T13:23:05.268Z</updated>
    
    <content type="html"><![CDATA[<h1 id="方法一：（这个方法未测试通过）"><a href="#方法一：（这个方法未测试通过）" class="headerlink" title="方法一：（这个方法未测试通过）"></a>方法一：（这个方法未测试通过）</h1><p>关闭子窗体后</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">form2.Closed += (ss,ee)=&gt; &#123; <span class="keyword">this</span>.Close(); &#125;;</span><br><span class="line"><span class="comment">//或Application.OpenForms集合找到要关闭的窗口，再Close：</span></span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> Application.OpenForms)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (item <span class="keyword">is</span> Form1) item.Close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="方法二：（可行）"><a href="#方法二：（可行）" class="headerlink" title="方法二：（可行）"></a>方法二：（可行）</h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">B new_form = <span class="keyword">new</span> B();</span><br><span class="line">new_form.owner = <span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">this</span>.hide();</span><br><span class="line">new_form.showdialog();</span><br><span class="line">Application.ExitThread();</span><br></pre></td></tr></table></figure><blockquote><p>Application.ExitThread();是退出当前线程。<br>首先默认情况下我们的程序是单线程的，<br>this.hide();后把当前窗体隐藏起来了，然后new_form.showdialog();模态弹出新窗口。<br>这个时候线程不会继续执行（被阻塞了），<br>直到我们关闭了新弹出来的模态窗口后，程序才会继续执行Application.ExitThread();此时线程关闭，所有一切都关闭了，隐藏的窗口也关闭了。</p></blockquote><hr><h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><ol><li><a href="http://t.zoukankan.com/huanhuan86-p-2920303.html">C# winForm 窗口跳转 后关闭上一个窗口的方法</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">C#在切换到其他窗体的同时关闭当前窗体</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="C#" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/C/"/>
    
    <category term="前端" scheme="https://zml3589110.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="C#" scheme="https://zml3589110.github.io/tags/C/"/>
    
    <category term="窗体" scheme="https://zml3589110.github.io/tags/%E7%AA%97%E4%BD%93/"/>
    
    <category term="控件" scheme="https://zml3589110.github.io/tags/%E6%8E%A7%E4%BB%B6/"/>
    
    <category term="跳转" scheme="https://zml3589110.github.io/tags/%E8%B7%B3%E8%BD%AC/"/>
    
  </entry>
  
  <entry>
    <title>窗体之二（进行多窗口切换：使用Panel）</title>
    <link href="https://zml3589110.github.io/posts/4052716721.html"/>
    <id>https://zml3589110.github.io/posts/4052716721.html</id>
    <published>2022-07-28T13:03:20.000Z</published>
    <updated>2022-07-28T13:23:05.273Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-添加相应功能"><a href="#一-添加相应功能" class="headerlink" title="一.添加相应功能"></a>一.添加相应功能</h1><ol><li><strong>先在解决方案资源器中右键添加“用户控件”</strong></li></ol><img src="https://img-blog.csdnimg.cn/dd2e5d2b3ec04910b33d211464c8cb60.png"><ol start="2"><li>或者在项目中选择添加窗体控件或者窗体功能</li></ol><h1 id="二、在添加的控件中添加自己想要的UI"><a href="#二、在添加的控件中添加自己想要的UI" class="headerlink" title="二、在添加的控件中添加自己想要的UI"></a>二、在添加的控件中添加自己想要的UI</h1><img src="https://img-blog.csdnimg.cn/62886d235d204ac98cc1df5353747437.png"><h1 id="三、在主窗体中添加Panel并且设置相应调用关系"><a href="#三、在主窗体中添加Panel并且设置相应调用关系" class="headerlink" title="三、在主窗体中添加Panel并且设置相应调用关系"></a>三、在主窗体中添加Panel并且设置相应调用关系</h1><img src="https://img-blog.csdnimg.cn/9d737593fc264bc4924b6525f2140832.png"><p><strong>1. 在左侧的学生用户2双击跳转到代码，添加如下:</strong></p><img src="https://img-blog.csdnimg.cn/90087727998d49e78d51e6fbefe6fefd.png"><p><strong>2. 声明变量：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> UserControl1 f1; <span class="comment">//创建用户控件一变量</span></span><br><span class="line"><span class="keyword">public</span> UserControl2 f2; <span class="comment">//创建用户控件一变量</span></span><br></pre></td></tr></table></figure><p><strong>3. 定义相应变量：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f1 = <span class="keyword">new</span> UserControl1();    <span class="comment">//实例化f1</span></span><br><span class="line">f2 = <span class="keyword">new</span> UserControl2();    <span class="comment">//实例化f1</span></span><br></pre></td></tr></table></figure><p><strong>4. 在按键事件中调用窗体的实现代码：</strong></p><img src="https://img-blog.csdnimg.cn/235b70edf18a4b5b870e3a2777c2f8ee.png"><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f1.Show();   <span class="comment">//将窗体一进行显示</span></span><br><span class="line">panel2.Controls.Clear();    <span class="comment">//清空原容器上的控件</span></span><br><span class="line">panel2.Controls.Add(f1);    <span class="comment">//将窗体一加入容器panel2</span></span><br></pre></td></tr></table></figure><hr><h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><ol><li><a href="https://blog.csdn.net/qq_35230125/article/details/125268494">C#实现多窗口切换：Panel详细教程（亲测）</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">C#通过Panel来实现多窗口切换功能</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="C#" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/C/"/>
    
    <category term="前端" scheme="https://zml3589110.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="C#" scheme="https://zml3589110.github.io/tags/C/"/>
    
    <category term="窗体" scheme="https://zml3589110.github.io/tags/%E7%AA%97%E4%BD%93/"/>
    
    <category term="控件" scheme="https://zml3589110.github.io/tags/%E6%8E%A7%E4%BB%B6/"/>
    
    <category term="Panel" scheme="https://zml3589110.github.io/tags/Panel/"/>
    
  </entry>
  
  <entry>
    <title>C#语法之一（基础语法）</title>
    <link href="https://zml3589110.github.io/posts/1833294516.html"/>
    <id>https://zml3589110.github.io/posts/1833294516.html</id>
    <published>2022-07-27T08:46:20.000Z</published>
    <updated>2022-07-28T13:23:05.283Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-C-程序结构"><a href="#一-C-程序结构" class="headerlink" title="一.C# 程序结构"></a>一.C# 程序结构</h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">netBasic_learning</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//类的定义</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Rectangle</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//（1）属性</span></span><br><span class="line">        <span class="built_in">double</span> length;</span><br><span class="line">        <span class="built_in">double</span> width;</span><br><span class="line">        <span class="comment">//（2）方法</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Acceptdetails</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">this</span>.length = <span class="number">4.5</span>;</span><br><span class="line">            <span class="keyword">this</span>.width = <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">getArea</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.length * <span class="keyword">this</span>.width;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Display</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Length: &#123;0&#125;&quot;</span>, length);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Width: &#123;0&#125;&quot;</span>, width);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Area: &#123;0&#125;&quot;</span>, getArea());</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//Main函数是程序的主入口</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Rectangle rectangle = <span class="keyword">new</span> Rectangle();</span><br><span class="line">            rectangle.Acceptdetails();</span><br><span class="line">            rectangle.Display();</span><br><span class="line">            <span class="comment">//阻塞窗口</span></span><br><span class="line">            Console.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>1.using的使用：</strong><br>  （1）含义：使用命名空间，类似于Java的Import<br>  （2）注意：using 关键字用于在程序中包含命名空间。一个程序可以包含多个 using 语句。<br><strong>2.namespace的使用：</strong><br>  （1）namespace声明本类的命名空间为netBasic_learning，其他地方可以通过using netBasic_learning来使用此处的类和方法<br>  （2）一个namespace内可以包含多个类<br><strong>3.Main函数的阻塞：</strong><br>  （1）Console.ReadLine() : 最后一行 Console.ReadLine(); 是针对 VS.NET 用户的。这使得程序会等待一个回车的动作，防止程序从 Visual Studio .NET 启动时屏幕会快速运行并关闭。即防止黑窗口一闪而过，阻塞一下。同时ReadLine()方法还可以用于读取程序输入。       （2）Console.ReadKey() : 其作用同上。<br><strong>4.总结：</strong><br>     1.C#语法基本与Java差不多，都是面向对象的语言。只不过C#主要面向桌面应用开发，Java主要面向Web应用开发<br>     2.C#与 Java 不同的是，文件名可以不同于类的名称。</p></blockquote><h1 id="二-C-数据类型与变量"><a href="#二-C-数据类型与变量" class="headerlink" title="二.C# 数据类型与变量"></a>二.C# 数据类型与变量</h1><h2 id="1-基本数据类型"><a href="#1-基本数据类型" class="headerlink" title="1.基本数据类型"></a>1.基本数据类型</h2><img src="https://img-blog.csdnimg.cn/b8fc58f805c149df8ffe75202099732a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Zi_6Zi_6Zi_5a6J,size_20,color_FFFFFF,t_70,g_se,x_16"><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">netBasic_learning</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Basic_dataType</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params">String[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//1.基本数据类型：分配存储空间，存放数据</span></span><br><span class="line">            <span class="built_in">int</span> Int_number = <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">double</span> Double_number = <span class="number">3.14</span>;</span><br><span class="line">            <span class="built_in">bool</span> Bool_number = <span class="literal">true</span>;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Int: &#123;0&#125;,Double: &#123;1&#125;,Bool: &#123;2&#125;&quot;</span>, Int_number,Double_number,Bool_number);<span class="comment">//自动换行</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-引用类型"><a href="#2-引用类型" class="headerlink" title="2.引用类型"></a>2.引用类型</h2><blockquote><p>引用类型不包含存储在变量中的实际数据，但它们包含对变量的引用。换句话说，它们指的是一个内存位置。使用多个变量时，引用类型可以指向一个内存位置。如果内存位置的数据是由一个变量改变的，其他变量会自动反映这种值的变化。内置的 引用类型有：object、string和我们自定义的类Class。</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">netBasic_learning</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Basic_dataType</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params">String[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//引用数据类型：存放数据的引用地址，即别名(Object、String、class)</span></span><br><span class="line">            String str = <span class="string">&quot;Hello World！&quot;</span>;</span><br><span class="line">            String str_origin = <span class="string">&quot;Hello\nWorld!&quot;</span>;<span class="comment">//转义字符</span></span><br><span class="line">            String str_change = <span class="string">@&quot;Hello\nWorld!&quot;</span>;<span class="comment">//原样输出 @ = &quot;\\&quot;</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;String str: &#123;0&#125;&quot;</span>, str);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;String str_origin: &#123;0&#125;&quot;</span>, str_origin);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;String str_change: &#123;0&#125;&quot;</span>, str_change);</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-数据类型转换"><a href="#3-数据类型转换" class="headerlink" title="3.数据类型转换"></a>3.数据类型转换</h2><blockquote><p><strong>一.数据类型转换</strong><br><strong>(1)隐式类型转换：</strong>安全转换，不会造成数据丢失。比如从派生类转换为基类，小范围类型-&gt;大范围类型int-&gt;long，float-&gt;double，在一些计算中会自动转换发生<br><strong>(2)显式类型转换：</strong>不安全转换，可能会造成数据丢失。比如double-&gt;int<br><strong>(3)内置的类型转换方法：</strong>int.Parse()、ToString()等</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">netBasic_learning</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Basic_dataType</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params">String[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//数据类型转换</span></span><br><span class="line">            <span class="comment">//  (1)隐式类型转换：安全转换，不会造成数据丢失。比如从派生类转换为基类，小范围类型-&gt;大范围类型int-&gt;long，float-&gt;double，在一些计算中会自动转换发生</span></span><br><span class="line">            <span class="comment">//  (2)显式类型转换：不安全转换，可能会造成数据丢失。比如double-&gt;int</span></span><br><span class="line">            <span class="built_in">double</span> a = <span class="number">3.1415</span>;</span><br><span class="line">            <span class="built_in">int</span> b = (<span class="built_in">int</span>)a;<span class="comment">//向下取整，丢失精度</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Double-&gt;Int: &#123;0&#125;&quot;</span>, b);</span><br><span class="line">            <span class="comment">//  (3)内置的类型转换方法</span></span><br><span class="line">            <span class="built_in">string</span> num = <span class="string">&quot;66&quot;</span>;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Int -&gt; String: &#123;0&#125;&quot;</span>,a.ToString());</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;String -&gt; Int: &#123;0&#125;&quot;</span>, <span class="built_in">int</span>.Parse(num));</span><br><span class="line">            <span class="comment">//4.常量：const ，运行期间不能被修改</span></span><br><span class="line">            Console.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-字符串string类型"><a href="#4-字符串string类型" class="headerlink" title="4.字符串string类型"></a>4.字符串string类型</h2><blockquote><p><strong>一.字符串：使用 string 关键字来声明一个字符串变量。string 关键字是 System.String 类的别名。</strong><br>        <strong>1.字符串构建：</strong><br>                - “”：string str &#x3D; “hello world!”;<br>                - +：string str &#x3D; a + b;(字符串拼接)<br>        <strong>2.字符串常用方法：</strong><br>             - public static int Compare( string strA, string strB ):比较两个指定的 string 对象(按ASCII)，并返回一个表示它们在排列顺序中相对位置的整数。<br>             - public static string Concat( string str0, string str1 )：连接两个 string 对象。相当于+<br>             - public bool Contains( string value )：判断字符串是否包含字串value<br>             - public bool EndsWith( string value )：判断 string 对象是否以value结尾。<br>             - public bool StartsWith( string value )：判断字符串实例的开头是否匹配指定的字符串。<br>             - public bool Equals( string value )：判断当前的 string 对象是否与指定的 string 对象具有相同的值。<br>             - public static string Format( string format, Object arg0 )：把指定字符串中一个或多个格式项替换为指定对象的字符串表示形式。<br>             - public int IndexOf( string value&#x2F;char ch )：返回指定字符串在该实例中第一次出现的索引，索引从 0 开始。<br>             - public int LastIndexOf( string value&#x2F;char value ):返回指定字符串在该实例中最后一次出现的索引，索引从 0 开始。<br>             - public string Insert( int startIndex, string value )：返回一个新的字符串，其中，指定的字符串被插入在当前 string 对象的指定索引位置。<br>             - public static string Join( string separator, string[] value )：连接一个字符串数组中的所有元素，使用指定的分隔符分隔每个元素。<br>             - public string Remove( int startIndex )：移除当前实例中的所有字符，从指定位置开始，一直到最后一个位置为止，并返回字符串。<br>             - public string Replace( string oldValue, string newValue )：把当前 string 对象中，所有指定的字符串替换为另一个指定的字符串，并返回新的字符串。<br>             - public string[] Split( params char[] separator )：返回一个字符串数组，包含当前的 string 对象中的子字符串，子字符串是使用指定的 Unicode 字符数组中的元素进行分隔的。<br>             - public char[] ToCharArray()：返回一个带有当前 string 对象中所有字符的 Unicode 字符数组。<br>             - public string ToLower()&#x2F;ToUpper()&#x2F;Trim()</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">netBasic_learning</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Basic_string</span></span><br><span class="line">    &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mains</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//  （1）字符串构建：</span></span><br><span class="line">            <span class="built_in">string</span> a_str = <span class="string">&quot;Hello,&quot;</span>;</span><br><span class="line">            <span class="built_in">string</span> b_str = <span class="string">&quot;World!,Write the code,change the world.&quot;</span>;</span><br><span class="line">            <span class="built_in">string</span> strs = a_str + b_str;</span><br><span class="line">            Console.WriteLine(strs);</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             *（2）字符串方法、操作（重点）：</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="comment">//2.字符串比较</span></span><br><span class="line">            <span class="built_in">string</span> c_str = <span class="string">&quot;Hello,&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span>(a_str == c_str)<span class="comment">//==在引用数据里，比较的是地址。因此两个数据相同的变量可能是“不相等的”。</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//但是此处是相等的，原因是string是常量，地址也相同。</span></span><br><span class="line">                Console.WriteLine(<span class="string">&quot;== 比较符号：a_str 与 c_str 相同&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (a_str.Equals(c_str))<span class="comment">//Equals比较的是数值大小是否相同，推荐！</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Equals 比较函数：a_str 与 c_str 相同&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">int</span> res = String.Compare(a_str, b_str);<span class="comment">//a_str&lt;b_str是比较&lt;0；a_str=b_str是=0；a_str&gt;b_str是&gt;0</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;排序结果： &#123;0&#125;&quot;</span>,res);</span><br><span class="line">            <span class="comment">//2.字符串包含</span></span><br><span class="line">            <span class="keyword">if</span> (strs.Contains(<span class="string">&quot;World&quot;</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;&#123;0&#125;包含&#123;1&#125;&quot;</span>, strs,<span class="string">&quot;World&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//3.字串获取</span></span><br><span class="line">            <span class="built_in">string</span> child_str = strs.Substring(<span class="number">15</span>);</span><br><span class="line">            Console.WriteLine(child_str);</span><br><span class="line">            <span class="comment">//4.字符串合并</span></span><br><span class="line">            <span class="built_in">string</span>[] str_arrays = &#123; <span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>, <span class="string">&quot;i&#x27;m&quot;</span>, <span class="string">&quot;OK&quot;</span> &#125;;</span><br><span class="line">            <span class="built_in">string</span> join_str = String.Join(<span class="string">&quot;-&quot;</span>, str_arrays);</span><br><span class="line">            Console.WriteLine(join_str);</span><br><span class="line">            <span class="comment">//5.字符串分割</span></span><br><span class="line">            <span class="built_in">string</span>[] str_list = join_str.Split(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">            <span class="keyword">foreach</span>(<span class="built_in">string</span> factor <span class="keyword">in</span> str_list)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(factor);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//6.字符串格式化</span></span><br><span class="line"> </span><br><span class="line">            Console.ReadKey();</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三-C-计算与条件、循环"><a href="#三-C-计算与条件、循环" class="headerlink" title="三.C#计算与条件、循环"></a>三.C#计算与条件、循环</h1><h2 id="1-计算语句"><a href="#1-计算语句" class="headerlink" title="1.计算语句"></a>1.计算语句</h2><blockquote><p>1.算术运算符：+、-、<em>、&#x2F;、%、++、–<br>2.关系运算符：&#x3D;&#x3D;、!&#x3D;、&gt;、&lt;、&gt;&#x3D;、&lt;&#x3D;<br>3.逻辑运算符：&amp;&amp;、||、!<br>4.位运算：&amp;(与，全1才1)、|(或，一1即1)、^(异或，相异即1)、&lt;&lt;(左移，右补0)、&gt;&gt;(右移，左补0)<br>5.赋值运算符：+&#x3D;、-&#x3D;、&#x2F;&#x3D;、%&#x3D;、&amp;&#x3D;、&lt;&lt;&#x3D;<br>6.其他运算符：<br>        （1）?: 三元表达式 a&#x3D;&#x3D;1?xxx:yyy<br>        （2）&amp; 取地址<br>        （3）</em> 指针<br>        （4）sizeof、typeof、is</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">netBasic_learning</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Basic_calculate</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//算术运算</span></span><br><span class="line">            <span class="built_in">double</span> y = <span class="number">5</span> / <span class="number">2</span>; <span class="comment">//如果/法都为整数，则运算结果也为整数（向下取整）</span></span><br><span class="line">            <span class="built_in">double</span> y_2 = <span class="number">5.0</span>/<span class="number">2</span>;<span class="comment">//如果/法有一个为浮点数，则运算结果自动向大类型转换</span></span><br><span class="line">            Console.WriteLine(y);</span><br><span class="line">            Console.WriteLine(y_2);</span><br><span class="line">            <span class="comment">//总结：运算与Java差不多-。-</span></span><br><span class="line">            Console.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-条件选择"><a href="#2-条件选择" class="headerlink" title="2.条件选择"></a>2.条件选择</h2><blockquote><p><strong>一.条件判断：</strong><br>      （1）if…else if…else<br>      （2）switch(Expression){<br>                     case condition1:<br>                          break;<br>                      case condition2:<br>                        break;<br>                      default:<br>               }</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">netBasic_learning</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Basic_calculate</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="built_in">double</span> y = <span class="number">5</span> / <span class="number">2</span>; <span class="comment">//如果/法都为整数，则运算结果也为整数（向下取整）</span></span><br><span class="line">            <span class="comment">//条件判断：</span></span><br><span class="line">            <span class="keyword">if</span> (y&gt;<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;y &gt; 0&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (y == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;y = 0&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;y &lt; 0&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-循环分支"><a href="#3-循环分支" class="headerlink" title="3.循环分支"></a>3.循环分支</h2><blockquote><p><strong>一.循环语句</strong><br>       (1)  for：for(初始化，判断，循环操作){循环语句}、foreach()<br>       (2)  while：只要给定的条件为真，会重复执行一个目标语句。先判断再执行<br>       (3) do..while：在循环的尾部检查它的条件。会确保至少执行一次循环。<br>       (4) 循环控制语句：break跳出循环，continue直接继续循环</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">netBasic_learning</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Basic_calculate</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//循环语句</span></span><br><span class="line">            <span class="comment">//  (1)for：for(初始化，判断，循环操作)&#123;循环语句&#125;</span></span><br><span class="line">            <span class="comment">//  (2)while：只要给定的条件为真，会重复执行一个目标语句。先判断再执行</span></span><br><span class="line">            <span class="comment">// （3）do..while：在循环的尾部检查它的条件。会确保至少执行一次循环。</span></span><br><span class="line">            <span class="comment">//  (4)循环控制语句：break跳出循环，continue直接继续循环</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(i);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四-C-数组"><a href="#四-C-数组" class="headerlink" title="四.C# 数组"></a>四.C# 数组</h1><h2 id="1-可空类型"><a href="#1-可空类型" class="headerlink" title="1.可空类型"></a>1.可空类型</h2><blockquote><p>1.可空类型（null）:可空类型可以表示其基础值类型正常范围内的值，再加上一个 null 值。<br>        (1)声明可空类型：<br>            - 基本数据：? 单问号用于对 int、double、bool 等无法直接赋值为 null 的数据类型进行 null 的赋值。比如：int? num1 &#x3D; null;<br>            - 类与对象：直接声明<br>        (2)null合并运算符(??)：判断如果第一个操作数的值为 null，则运算符返回第二个操作数的值，否则返回第一个操作数的值。<br>            - 使用：a &#x3D; b ?? c<br>            - 本质：a &#x3D; (b&#x3D;&#x3D;null)?c:b</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">netBasic_learning</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Basic_Arrays</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//1.可空类型（null）:可空类型可以表示其基础值类型正常范围内的值，再加上一个 null 值。</span></span><br><span class="line">            <span class="comment">//  (1)声明可空类型：</span></span><br><span class="line">            <span class="built_in">int</span>? num1 = <span class="literal">null</span>;<span class="comment">//可空int类型取空值</span></span><br><span class="line">            <span class="built_in">int</span>? num2 = <span class="number">66</span>;<span class="comment">//可空int类型不取空值</span></span><br><span class="line">            <span class="built_in">double</span>? num3 = <span class="literal">null</span>;</span><br><span class="line">            <span class="built_in">double</span>? num4 = <span class="number">3.1415</span>;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;显示可空类型的值： &#123;0&#125;, &#123;1&#125;, &#123;2&#125;, &#123;3&#125;&quot;</span>,num1, num2, num3, num4);</span><br><span class="line">            <span class="keyword">if</span>(num1 == <span class="literal">null</span>)<span class="comment">//空值判断</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Int数据num1为空值&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            Rectangle rect = <span class="literal">null</span>;<span class="comment">//类&amp;对象空值声明 </span></span><br><span class="line">            <span class="keyword">if</span>(rect == <span class="literal">null</span>)<span class="comment">//类&amp;对象空值判断</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Rectangle类对象rect为空&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//  (2)null合并运算符(??)：判断如果第一个操作数的值为 null，则运算符返回第二个操作数的值，否则返回第一个操作数的值。</span></span><br><span class="line">            <span class="built_in">double</span>? b = <span class="literal">null</span>;</span><br><span class="line">            <span class="built_in">double</span>? c = <span class="number">3.1415</span>;</span><br><span class="line">            <span class="built_in">double</span>? a = b ?? c;<span class="comment">//b如果为空则返回c</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;a 的值： &#123;0&#125;&quot;</span>, a);</span><br><span class="line"></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-数组"><a href="#2-数组" class="headerlink" title="2.数组"></a>2.数组</h2><blockquote><p>1.数组：数组是一个存储【相同类型元素】的固定大小的顺序集合<br>       （1）声明数组：double[] arrays; 声明一个数组不会在内存中初始化数组。<br>       （2）初始化数组：double[] balance &#x3D; new double[10];数组是一个引用类型，所以您需要使用 new 关键字来创建数组的实例。<br>       （3）数组赋值：<br>            - 索引赋值： balance[0] &#x3D; 3.14;<br>            - 声明数组的同时给数组赋值： double[] balance &#x3D; { 2340.0, 4523.69, 3421.0};<br>            - 创建并初始化一个数组： int [] marks &#x3D; new int[5]  { 99,  98, 92, 97, 95};<br>            - 省略数组的大小：int [] marks &#x3D; new int[]  { 99,  98, 92, 97, 95};<br>            - 赋值一个数组变量到另一个目标数组变量中。在这种情况下，目标和源会指向相同的内存位置(引用)：int[] score  &#x3D; marks;<br>       （4）数据访问、遍历：[]下标访问+for、foreach循环<br>       （5）多维数组：int[,] a;声明二维数组，int[, ,] a;声明三维数组<br>       （6）交错数组：交错数组是数组的数组。交错数组是一维数组，每个元素是一个数组<br>            - 声明：int [][] scores;int数组的一维数组，声明一个数组不会在内存中创建数组<br>            - 初始化：int[][] scores &#x3D; new int[5][];含有五个元素<br>            - 初始化赋值：int[][] scores &#x3D; new int[2][]{new int[]{92,93,94},new int[]{85,66,87,88}};<br>            - 访问：scores[i][j] 取第i个子数组的第j个元素（类似于二维数组）</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">netBasic_learning</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Basic_Arrays</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//1.数组：数组是一个存储【相同类型元素】的固定大小的顺序集合</span></span><br><span class="line">            <span class="comment">//  （1）声明数组：double[] arrays; 声明一个数组不会在内存中初始化数组。</span></span><br><span class="line">            <span class="comment">//  （2）初始化数组：double[] balance = new double[10];数组是一个引用类型，所以您需要使用 new 关键字来创建数组的实例。</span></span><br><span class="line">            <span class="comment">//  （3）数组赋值：</span></span><br><span class="line">            <span class="comment">//      - 索引赋值： balance[0] = 3.14;</span></span><br><span class="line">            <span class="comment">//      - 声明数组的同时给数组赋值： double[] balance = &#123; 2340.0, 4523.69, 3421.0&#125;;</span></span><br><span class="line">            <span class="comment">//      - 创建并初始化一个数组： int [] marks = new int[5]  &#123; 99,  98, 92, 97, 95&#125;;</span></span><br><span class="line">            <span class="comment">//      - 省略数组的大小：int [] marks = new int[]  &#123; 99,  98, 92, 97, 95&#125;;</span></span><br><span class="line">            <span class="comment">//      - 赋值一个数组变量到另一个目标数组变量中。在这种情况下，目标和源会指向相同的内存位置(引用)：int[] score  = marks;</span></span><br><span class="line">            <span class="comment">//  （4）数据访问、遍历：[]下标访问+for、foreach循环</span></span><br><span class="line">            <span class="built_in">int</span>[] List = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">10</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; List.Length; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                List[i] = i*<span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">           <span class="keyword">foreach</span>(<span class="built_in">int</span> j <span class="keyword">in</span> List)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Element = &#123;0&#125;&quot;</span>,j);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//   （4）多维数组：int[,] a;声明二维数组，int[, ,] a;声明三维数组</span></span><br><span class="line">            <span class="built_in">int</span>[,] matrix = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">3</span>, <span class="number">4</span>];<span class="comment">//初始化3x4的二维数组</span></span><br><span class="line">            <span class="built_in">int</span>[,] matrix_2 = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">3</span>, <span class="number">4</span>]&#123;<span class="comment">//初始化并赋值</span></span><br><span class="line">                &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> &#125;, <span class="comment">//初始化第0行</span></span><br><span class="line">                &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;, <span class="comment">//初始化第1行</span></span><br><span class="line">                &#123;<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>&#125; <span class="comment">//初始化第2行</span></span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; matrix_2.GetLength(<span class="number">0</span>); i++)<span class="comment">//循环遍历多维数组</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; matrix_2.GetLength(<span class="number">1</span>); j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">&quot;矩阵(&#123;0&#125;,&#123;1&#125;)的值为&#123;2&#125;&quot;</span>, i,j, matrix_2[i,j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//  （5）交错数组：交错数组是数组的数组。交错数组是一维数组，每个元素是一个数组</span></span><br><span class="line">            <span class="comment">//      - 声明：int [][] scores;int数组的一维数组，声明一个数组不会在内存中创建数组</span></span><br><span class="line">            <span class="comment">//      - 初始化：int[][] scores = new int[5][];含有五个元素</span></span><br><span class="line">            <span class="comment">//      - 初始化赋值：int[][] scores = new int[2][]&#123;new int[]&#123;92,93,94&#125;,new int[]&#123;85,66,87,88&#125;&#125;;</span></span><br><span class="line">            <span class="comment">//      - 访问：scores[i][j] 取第i个子数组的第j个元素（类似于二维数组）</span></span><br><span class="line">            <span class="built_in">int</span>[][] scores = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">5</span>][];</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; scores.Length; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (i &lt;= <span class="number">2</span>) scores[i] = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">3</span>];</span><br><span class="line">                <span class="keyword">else</span> scores[i] = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">5</span>];</span><br><span class="line">                <span class="keyword">for</span>(<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; scores[i].Length; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    scores[i][j] = i * j + <span class="number">6</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; scores.Length; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; scores[i].Length; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">&quot;子数组&#123;0&#125;下标&#123;1&#125;的值为&#123;2&#125;&quot;</span>, i, j, scores[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">           </span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>（7）Array 类：Array 类是 C# 中所有数组的基类，提供了很多属性和方法</strong><br>            - Array.Clear:根据元素的类型，设置数组中某个范围的元素为零、为 false 或者为 null。<br>            - Array.IndexOf(Array, Object):搜索指定的对象，返回整个[一维数组]中第一次出现的索引。<br>            - Array.Reverse(Array):逆转整个一维数组中元素的顺序。<br>            - Array.Sort(Array):使用数组的每个元素的 IComparable 实现来排序整个一维数组中的元素。</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">netBasic_learning</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Basic_Arrays</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//  （6）Array 类：Array 类是 C# 中所有数组的基类，提供了很多属性和方法</span></span><br><span class="line">            <span class="comment">//      - Array.Clear:根据元素的类型，设置数组中某个范围的元素为零、为 false 或者为 null。</span></span><br><span class="line">            <span class="comment">//      - Array.IndexOf(Array, Object):搜索指定的对象，返回整个[一维数组]中第一次出现的索引。</span></span><br><span class="line">            <span class="comment">//      - Array.Reverse(Array):逆转整个一维数组中元素的顺序。</span></span><br><span class="line">            <span class="comment">//      - Array.Sort(Array):使用数组的每个元素的 IComparable 实现来排序整个一维数组中的元素。</span></span><br><span class="line">            <span class="built_in">int</span>[] list = &#123; <span class="number">34</span>, <span class="number">72</span>, <span class="number">13</span>, <span class="number">44</span>, <span class="number">25</span>, <span class="number">30</span>, <span class="number">10</span> &#125;;</span><br><span class="line">            Console.Write(<span class="string">&quot;原始数组： &quot;</span>);</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="built_in">int</span> i <span class="keyword">in</span> list)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.Write(i + <span class="string">&quot; &quot;</span>);<span class="comment">//不换行输出</span></span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine();<span class="comment">//输出换行</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 逆转数组</span></span><br><span class="line">            Array.Reverse(list);<span class="comment">//改变原数组</span></span><br><span class="line">            Console.Write(<span class="string">&quot;逆转数组： &quot;</span>);</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="built_in">int</span> i <span class="keyword">in</span> list)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.Write(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine();</span><br><span class="line">     </span><br><span class="line">            <span class="comment">// 排序数组</span></span><br><span class="line">            Array.Sort(list);<span class="comment">//改变原数组，默认由小到大</span></span><br><span class="line">            Console.Write(<span class="string">&quot;排序数组： &quot;</span>);</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="built_in">int</span> i <span class="keyword">in</span> list)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.Write(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="五-列表与字典"><a href="#五-列表与字典" class="headerlink" title="五.列表与字典"></a>五.列表与字典</h1><h2 id="1-列表ArrayList"><a href="#1-列表ArrayList" class="headerlink" title="1.列表ArrayList"></a>1.列表ArrayList</h2><blockquote><p><strong>1.ArrayList：动态数组列表集合，类似于Java的List<Object></Object></strong><br>    （1）初始化：ArrayList是一个类&#x2F;对象，需要使用new关键字初始化，且不需要指定大小（动态扩展） ArrayList array &#x3D; new ArrayList();<br>    （2）特点：<br>          - 长度动态扩展，无需人为指定；<br>          - 存储数据时使用Object类型，故可以同时存储多种不同的数据（int、double、class、string）<br>          - 不是类型安全的，可能出现类型匹配错误；存在频繁的装箱拆箱操作，性能低下<br>    （3）使用：<br>          - Item[Int32]    获取或设置指定索引处的元素。<br>          - Count    获取 ArrayList 中实际包含的元素个数。<br>          - public virtual int Add( object value ); 在 ArrayList 的末尾添加一个对象。<br>          - public virtual void Clear(); 从 ArrayList 中移除所有的元素。<br>          - public virtual void Insert( int index, object value ); 在 ArrayList 的指定索引处，插入一个元素。<br>          - public virtual void Remove( object obj ); 从 ArrayList 中移除第一次出现的指定对象。</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">netBasic_learning</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//1.ArrayList：动态数组列表集合，类似于Java的List&lt;Object&gt;</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title">ArrayList_Use</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mains</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            ArrayList arrayList = <span class="keyword">new</span> ArrayList();</span><br><span class="line">            arrayList.Add(<span class="number">2</span>);</span><br><span class="line">            arrayList.Add(<span class="number">3.1415</span>);</span><br><span class="line">            arrayList.Add(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;ArrayList 长度： &quot;</span> + arrayList.Count);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;ArrayList[0]： &quot;</span> + arrayList[<span class="number">0</span>]);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;ArrayList[1]： &quot;</span> + arrayList[<span class="number">1</span>]);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;ArrayList[2]： &quot;</span> + arrayList[<span class="number">2</span>]);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-列表List"><a href="#2-列表List" class="headerlink" title="2.列表List"></a>2.列表List</h2><blockquote><p><strong>2.List：List也是一种动态列表集合，类似于ArrayList，但必须提供泛型</strong><br>    （1）定义：为了解决ArrayList的类型不安全，C#提供了List列表，List列表声明时必须提供泛型，即List内存放的数据必须都是该泛型的数据。<br>    （2）初始化：List<int> list &#x3D; new List<int>();<br>    （3）本质：List其实就是在ArrayList基础上，添加了类型限制，以后都推荐使用List<br>    （4）使用：与ArrayList类似，注意泛型也可以是自定义的类，List也可以存放对象！</int></int></p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">netBasic_learning</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.List：List也是一种动态列表集合，类似于ArrayList，但必须提供泛型</span></span><br><span class="line">    <span class="comment">//  （1）定义：为了解决ArrayList的类型不安全，C#提供了List列表，List列表声明时必须提供泛型，即List内存放的数据必须都是该泛型的数据。</span></span><br><span class="line">    <span class="comment">//  （2）初始化：List&lt;int&gt; list = new List&lt;int&gt;();</span></span><br><span class="line">    <span class="comment">//  （3）本质：List其实就是在ArrayList基础上，添加了类型限制，以后都推荐使用List</span></span><br><span class="line">    <span class="comment">//  （4）使用：与ArrayList类似，注意泛型也可以是自定义的类，List也可以存放对象！</span></span><br><span class="line">   <span class="keyword">class</span> <span class="title">List_Use</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mains</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            List&lt;<span class="built_in">int</span>&gt; list = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line">            <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                list.Add(i + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; list.Count; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (list[i] % <span class="number">2</span>!=<span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    list[i] *= <span class="number">2</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">foreach</span>(<span class="built_in">int</span> val <span class="keyword">in</span> list)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.Write(val + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine();</span><br><span class="line">            list.Clear();</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;清空后长度 ： &quot;</span> + list.Count);</span><br><span class="line">            Console.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-字典Dictionary"><a href="#3-字典Dictionary" class="headerlink" title="3.字典Dictionary"></a>3.字典Dictionary</h2><blockquote><p><strong>3.Dictionary：Dictionary是由键值对组成的字典类型，类似于Java的Map</strong><br>    （1）初始化：Dictionary也是对象，需要使用new关键字。同时在初始化时需要指定键值对的泛型 Dictionary&lt;string,int&gt; dir &#x3D; new Dictionary&lt;string,int&gt;();<br>    （2）特点：<br>          - Dictionary里面的每一个元素都是一个键值对(由二个元素组成：键和值)，可以通过 Dictionary[key]来取值<br>          - Dictionary里面键必须是唯一的,而值不需要唯一的<br>    （3）使用：<br>          - Count        获取包含在 Dictionary&lt;TKey, TValue&gt; 中的键&#x2F;值对的数目。<br>          - Keys         获取包含 Dictionary&lt;TKey, TValue&gt; 中的键的集合。<br>          - Values 获取包含 Dictionary&lt;TKey, TValue&gt; 中的值的集合。<br>          - Add                 将指定的键和值添加到字典中。<br>          - Clear 从 Dictionary&lt;TKey, TValue&gt; 中移除所有的键和值。<br>          - ContainsKey 确定 Dictionary&lt;TKey, TValue&gt; 是否包含指定的键。<br>          - GetEnumerator       返回循环访问 Dictionary&lt;TKey, TValue&gt; 的枚举器<br>          - Remove              从 Dictionary&lt;TKey, TValue&gt; 中移除所指定的键的值。</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">netBasic_learning</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//3.Dictionary：Dictionary是由键值对组成的字典类型，类似于Java的Map</span></span><br><span class="line">    <span class="comment">//  （1）初始化：Dictionary也是对象，需要使用new关键字。同时在初始化时需要指定键值对的泛型 Dictionary&lt;string,int&gt; dir = new Dictionary&lt;string,int&gt;();</span></span><br><span class="line">    <span class="comment">//  （2）特点：</span></span><br><span class="line">    <span class="comment">//      - Dictionary里面的每一个元素都是一个键值对(由二个元素组成：键和值)，可以通过 Dictionary[key]来取值</span></span><br><span class="line">    <span class="comment">//      - Dictionary里面键必须是唯一的,而值不需要唯一的</span></span><br><span class="line">    <span class="comment">//  （3）使用：</span></span><br><span class="line">    <span class="comment">//      - Count        获取包含在 Dictionary&lt;TKey, TValue&gt; 中的键/值对的数目。</span></span><br><span class="line">    <span class="comment">//      - Keys         获取包含 Dictionary&lt;TKey, TValue&gt; 中的键的集合。</span></span><br><span class="line">    <span class="comment">//      - Values 获取包含 Dictionary&lt;TKey, TValue&gt; 中的值的集合。</span></span><br><span class="line">    <span class="comment">//      - Add                 将指定的键和值添加到字典中。</span></span><br><span class="line">    <span class="comment">//      - Clear 从 Dictionary&lt;TKey, TValue&gt; 中移除所有的键和值。</span></span><br><span class="line">    <span class="comment">//      - ContainsKey 确定 Dictionary&lt;TKey, TValue&gt; 是否包含指定的键。</span></span><br><span class="line">    <span class="comment">//      - GetEnumerator       返回循环访问 Dictionary&lt;TKey, TValue&gt; 的枚举器</span></span><br><span class="line">    <span class="comment">//      - Remove              从 Dictionary&lt;TKey, TValue&gt; 中移除所指定的键的值。</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Dictionary</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt; dictionary = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt;();</span><br><span class="line">            dictionary.Add(<span class="string">&quot;wangxin&quot;</span>, <span class="number">99</span>);<span class="comment">//Add赋值，Add赋值不能添加key重复的项</span></span><br><span class="line">            dictionary[<span class="string">&quot;shayuan&quot;</span>] = <span class="number">100</span>;<span class="comment">//=赋值，=赋值可以添加key重复项，会覆盖原始数据</span></span><br><span class="line">            <span class="keyword">if</span> (dictionary.ContainsKey(<span class="string">&quot;wangxin&quot;</span>))<span class="comment">//是否包含key</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Dictionary 长度： &quot;</span> + dictionary.Count);</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;wangxin is &#123;0&#125;&quot;</span>, dictionary[<span class="string">&quot;wangxin&quot;</span>]);</span><br><span class="line">                dictionary.Remove(<span class="string">&quot;wangxin&quot;</span>);<span class="comment">//删除key</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (dictionary.ContainsKey(<span class="string">&quot;shayuan&quot;</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Dictionary 长度： &quot;</span> + dictionary.Count);</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;shayuan is &#123;0&#125;&quot;</span>, dictionary[<span class="string">&quot;shayuan&quot;</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//Console.WriteLine(&quot;wangxin is &#123;0&#125;&quot;, dictionary[&quot;wangxin&quot;]);//访问不存在的数据会报异常</span></span><br><span class="line">            <span class="keyword">if</span> (!dictionary.ContainsKey(<span class="string">&quot;wangxin&quot;</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;wangxin is removed!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//遍历Dictionary</span></span><br><span class="line">            <span class="comment">//遍历key</span></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="built_in">string</span> key <span class="keyword">in</span> dictionary.Keys)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Key = &#123;0&#125;&quot;</span>, key);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//遍历value</span></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="built_in">int</span> <span class="keyword">value</span> <span class="keyword">in</span> dictionary.Values)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;value = &#123;0&#125;&quot;</span>, <span class="keyword">value</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//遍历字典</span></span><br><span class="line">            <span class="keyword">foreach</span> (KeyValuePair&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt; kvp <span class="keyword">in</span> dictionary)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Key = &#123;0&#125;, Value = &#123;1&#125;&quot;</span>, kvp.Key, kvp.Value);</span><br><span class="line">            &#125;</span><br><span class="line">     </span><br><span class="line">            <span class="comment">//添加存在的元素 try...catch..处理异常</span></span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                dictionary.Add(<span class="string">&quot;txt&quot;</span>, <span class="number">99</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            catch (ArgumentException)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;An element with Key = \&quot;txt\&quot; already exists.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="六-类与继承"><a href="#六-类与继承" class="headerlink" title="六.类与继承"></a>六.类与继承</h1><h2 id="1-类的基本概念"><a href="#1-类的基本概念" class="headerlink" title="1.类的基本概念"></a>1.类的基本概念</h2><blockquote><p><strong>1.类的封装</strong><br>    （1）访问修饰符：类的默认访问标识符是 internal，成员的默认访问标识符是 private。<br>          - public：所有对象都可以访问；<br>          - private：对象本身在对象内部可以访问；<br>          - protected：只有该类对象及其子类对象可以访问<br>          - internal：同一个程序集的对象可以访问；可以被定义在该成员所定义的【应用程序内】的任何类或方法访问。<br>          - protected internal：访问限于当前程序集或派生自包含类的类型。（protected和internal的并集）<br>    （2）方法：类的行为，主要是方法参数的传递方式<br>          - 值传递：这种方式复制参数的实际值给函数的形式参数，实参和形参使用的是两个不同内存中的值。在这种情况下，当形参的值发生改变时，不会影响实参的值<br>          - 引用传递(ref)：这种方式复制参数的内存位置的引用给形式参数。这意味着，当形参的值发生改变时，同时也改变实参的值。<br>          - 输出参数(out)：这种方式可以返回多个值。传 out 定义的参数进去的时候这个参数在函数内部必须初始化。否则是不能进行编译的。<br>          - 数组传值：可以通过指定不带索引的数组名称来给函数传递一个指向数组的指针。<br><strong>注意：</strong>ref 和 out 都是传递数据的地址，正因为传了地址，才能对源数据进行修改。</p></blockquote><blockquote><p><strong>2.类的基本参数</strong><br>    （1）构造函数：初始化对象时自动执行，默认提供一个无参构造 Object(){}<br>    （2）析构函数：销毁对象时自动执行 ~Object(){}<br>    （3）静态成员变量： static 关键字把类成员定义为静态的，静态成员变量属于类，可以在任意地方初始化和使用<br>    （4）静态成员函数：static 关键字把类成员定义为静态的，静态成员变量属于类，静态成员函数只能访问静态变量</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">netBasic_learning</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//1.类的封装</span></span><br><span class="line">    <span class="comment">//  （1）访问修饰符：类的默认访问标识符是 internal，成员的默认访问标识符是 private。</span></span><br><span class="line">    <span class="comment">//      - public：所有对象都可以访问；</span></span><br><span class="line">    <span class="comment">//      - private：对象本身在对象内部可以访问；</span></span><br><span class="line">    <span class="comment">//      - protected：只有该类对象及其子类对象可以访问</span></span><br><span class="line">    <span class="comment">//      - internal：同一个程序集的对象可以访问；可以被定义在该成员所定义的【应用程序内】的任何类或方法访问。</span></span><br><span class="line">    <span class="comment">//      - protected internal：访问限于当前程序集或派生自包含类的类型。（protected和internal的并集）</span></span><br><span class="line">    <span class="comment">//  （2）方法：类的行为，主要是方法参数的传递方式</span></span><br><span class="line">    <span class="comment">//      - 值传递：这种方式复制参数的实际值给函数的形式参数，实参和形参使用的是两个不同内存中的值。在这种情况下，当形参的值发生改变时，不会影响实参的值</span></span><br><span class="line">    <span class="comment">//      - 引用传递(ref)：这种方式复制参数的内存位置的引用给形式参数。这意味着，当形参的值发生改变时，同时也改变实参的值。</span></span><br><span class="line">    <span class="comment">//      - 输出参数(out)：这种方式可以返回多个值。传 out 定义的参数进去的时候这个参数在函数内部必须初始化。否则是不能进行编译的。</span></span><br><span class="line">    <span class="comment">//      - 数组传值：可以通过指定不带索引的数组名称来给函数传递一个指向数组的指针。</span></span><br><span class="line">    <span class="comment">//  注意：ref 和 out 都是传递数据的地址，正因为传了地址，才能对源数据进行修改。</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title">A</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> _a;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> _b;</span><br><span class="line">        <span class="comment">//值传递</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sum</span>(<span class="params"><span class="built_in">int</span> a,<span class="built_in">int</span> b</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            a += b;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;值传递函数内求和 a = &#123;0&#125;&quot;</span>, a);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//引用传递</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sum</span>(<span class="params"><span class="keyword">ref</span> <span class="built_in">int</span> a,<span class="keyword">ref</span> <span class="built_in">int</span> b</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            a += b;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;引用传递函数内求和 a = &#123;0&#125;&quot;</span>, a);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//输出参数</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sum</span>(<span class="params"><span class="built_in">int</span> a,<span class="built_in">int</span> b,<span class="keyword">out</span> <span class="built_in">int</span> c</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            c = a + b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//类/对象传递(对象传值 = 引用传值)</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swap</span>(<span class="params">A obj</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="built_in">int</span> temp = obj._a;</span><br><span class="line">            obj._a = obj._b;</span><br><span class="line">            obj._b = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//数组传值</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sumAndClear</span>(<span class="params"><span class="built_in">int</span>[] arrays</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="built_in">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; arrays.Length; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                sum += arrays[i];</span><br><span class="line">                arrays[i] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;数组求和sum = &#123;0&#125;&quot;</span>, sum);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            A a_obj = <span class="keyword">new</span> A();</span><br><span class="line">            <span class="comment">//值传递</span></span><br><span class="line">            <span class="built_in">int</span> a = <span class="number">3</span>, b = <span class="number">4</span>;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;值传递求和前初始数据a = &#123;0&#125;,b = &#123;1&#125;&quot;</span>, a,b);</span><br><span class="line">            a_obj.sum(a, b);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;值传递求和后初始数据a = &#123;0&#125;,b = &#123;1&#125;&quot;</span>, a, b);</span><br><span class="line">            <span class="comment">//引用传递</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;引用传递求和前初始数据a = &#123;0&#125;,b = &#123;1&#125;&quot;</span>, a, b);</span><br><span class="line">            a_obj.sum(<span class="keyword">ref</span> a, <span class="keyword">ref</span> b);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;引用传递求和后初始数据a = &#123;0&#125;,b = &#123;1&#125;&quot;</span>, a, b);</span><br><span class="line">            <span class="comment">//输出参数</span></span><br><span class="line">            <span class="built_in">int</span> res;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;输出参数求和前初始数据a = &#123;0&#125;,b = &#123;1&#125;&quot;</span>, a, b);</span><br><span class="line">            a_obj.sum( a, b,<span class="keyword">out</span> res);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;引用传递求和后初始数据a = &#123;0&#125;,b = &#123;1&#125;,res = &#123;2&#125;&quot;</span>, a, b,res);</span><br><span class="line">            <span class="comment">//对象传递</span></span><br><span class="line">            a_obj._a = <span class="number">3</span>;</span><br><span class="line">            a_obj._b = <span class="number">4</span>;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;对象传递交换前初始数据a = &#123;0&#125;,b = &#123;1&#125;&quot;</span>, a_obj._a, a_obj._b);</span><br><span class="line">            a_obj.swap(a_obj);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;对象传递交换后初始数据a = &#123;0&#125;,b = &#123;1&#125;&quot;</span>, a_obj._a, a_obj._b);</span><br><span class="line">            <span class="comment">//数组传递</span></span><br><span class="line">            <span class="built_in">int</span>[] arr = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span> &#125;;</span><br><span class="line">            Console.Write(<span class="string">&quot;数组传值前： &quot;</span>);</span><br><span class="line">            <span class="keyword">foreach</span>(<span class="built_in">int</span> fac <span class="keyword">in</span> arr) Console.Write(fac + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            Console.WriteLine();</span><br><span class="line">            a_obj.sumAndClear(arr);</span><br><span class="line">            Console.Write(<span class="string">&quot;数组传值后： &quot;</span>);</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="built_in">int</span> fac <span class="keyword">in</span> arr) Console.Write(fac + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            Console.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.类的基本参数</span></span><br><span class="line">    <span class="comment">//  （1）构造函数：初始化对象时自动执行，默认提供一个无参构造 Object()&#123;&#125;</span></span><br><span class="line">    <span class="comment">//  （2）析构函数：销毁对象时自动执行 ~Object()&#123;&#125;</span></span><br><span class="line">    <span class="comment">//  （3）静态成员变量： static 关键字把类成员定义为静态的，静态成员变量属于类，可以在任意地方初始化和使用</span></span><br><span class="line">    <span class="comment">//  （4）静态成员函数：static 关键字把类成员定义为静态的，静态成员变量属于类，静态成员函数只能访问静态变量</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title">B</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">double</span> val;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">B</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            val = <span class="number">0</span>;</span><br><span class="line">            cnt++;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;第&#123;0&#125;个B，无参构造函数Val = &#123;1&#125;&quot;</span>,cnt,val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">B</span>(<span class="params"><span class="built_in">double</span> _val = <span class="number">0</span></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            val = _val;</span><br><span class="line">            cnt++;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;第&#123;0&#125;个B，有参构造函数Val = &#123;1&#125;&quot;</span>, cnt,val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">getVal</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">getCntOfB</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> cnt;</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">        ~B()</span><br><span class="line">        &#123;</span><br><span class="line">            cnt--;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;析构函数执行&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            B b_1 = <span class="keyword">new</span> B();</span><br><span class="line">            Console.WriteLine(b_1.getVal());</span><br><span class="line">            B b_2 = <span class="keyword">new</span> B(<span class="number">3.14</span>);</span><br><span class="line">            Console.WriteLine(b_2.getVal());</span><br><span class="line">            Console.WriteLine(B.getCntOfB());</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-类的继承"><a href="#2-类的继承" class="headerlink" title="2.类的继承"></a>2.类的继承</h2><blockquote><p><strong>3.类的继承 Child:Parent</strong><br>    （1）C#只支持单继承，但可以通过接口来实现多继承<br>    （2）派生类继承了基类的public、protected、internal成员变量和成员方法。<br>    （3）若不指明，创建子类对象调用子类的构造函数时，会默认首先调用父类的无参构造函数</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">netBasic_learning</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//3.类的继承 Child:Parent</span></span><br><span class="line">    <span class="comment">//  （1）C#只支持单继承，但可以通过接口来实现多继承</span></span><br><span class="line">    <span class="comment">//  （2）派生类继承了基类的public、protected、internal成员变量和成员方法。</span></span><br><span class="line">    <span class="comment">//  （3）若不指明，创建子类对象调用子类的构造函数时，会默认首先调用父类的无参构造函数</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Shape</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="built_in">double</span> length;</span><br><span class="line">        <span class="keyword">protected</span> <span class="built_in">double</span> width;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Shape</span>(<span class="params"><span class="built_in">double</span> len,<span class="built_in">double</span> wid</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            length = len;</span><br><span class="line">            width = wid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">GetArea</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> length * width;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Display</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;长度： &#123;0&#125;&quot;</span>, length);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;宽度： &#123;0&#125;&quot;</span>, width);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;面积： &#123;0&#125;&quot;</span>, GetArea());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Cube</span>:<span class="title">Shape</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">double</span> height;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Cube</span>(<span class="params"><span class="built_in">double</span> len,<span class="built_in">double</span> wid,<span class="built_in">double</span> hei</span>): <span class="title">base</span>(<span class="params">len, wid</span>)<span class="comment">//base(x,y)初始化父类参数，先于子类执行</span></span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            height = hei;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">GetVolume</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> height * GetArea();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Display</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">base</span>.Display();<span class="comment">//通过base来指代当前对象的父类</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;体积： &#123;0&#125;&quot;</span>, GetVolume());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Cube cube = <span class="keyword">new</span> Cube(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">            cube.Display();<span class="comment">//调用子类的覆盖方法</span></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="七-多-态"><a href="#七-多-态" class="headerlink" title="七.多 态"></a>七.多 态</h1><blockquote><p><strong>1.多态：多态是根据不同的场景同一个行为具有多个不同表现形式或形态的能力。</strong><br>    （1）静态多态：函数的响应是在编译时发生的。<br>          - 函数重载：对相同的函数名有多个定义。可以是参数列表中的参数类型不同，也可以是参数个数不同。不能重载只有返回类型不同的函数声明。<br>          - 运算符重载：可以重定义或重载 C# 中内置的运算符。通过关键字 operator 后跟运算符的符号来定义的，同时包含 public 和 static 修饰符。</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">netBasic_learning</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//1.多态：多态是根据不同的场景同一个行为具有多个不同表现形式或形态的能力。</span></span><br><span class="line">    <span class="comment">//  （1）静态多态：函数的响应是在编译时发生的。</span></span><br><span class="line">    <span class="comment">//      - 函数重载：对相同的函数名有多个定义。可以是参数列表中的参数类型不同，也可以是参数个数不同。不能重载只有返回类型不同的函数声明。</span></span><br><span class="line">    <span class="comment">//      - 运算符重载：可以重定义或重载 C# 中内置的运算符。通过关键字 operator 后跟运算符的符号来定义的，同时包含 public 和 static 修饰符。</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Vector</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">int</span> x;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">int</span> y;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Vector</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            x = <span class="number">0</span>;</span><br><span class="line">            y = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Vector</span>(<span class="params"><span class="built_in">int</span> _x,<span class="built_in">int</span> _y</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            x = _x;</span><br><span class="line">            y = _y;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">getX</span>(<span class="params"></span>)</span> &#123; <span class="keyword">return</span> x; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">getY</span>(<span class="params"></span>)</span> &#123; <span class="keyword">return</span> y;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setX</span>(<span class="params"><span class="built_in">int</span> x</span>)</span> &#123; <span class="keyword">this</span>.x = x; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setY</span>(<span class="params"><span class="built_in">int</span> y</span>)</span> &#123; <span class="keyword">this</span>.y = y; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Display</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Vector(&#123;0&#125;,&#123;1&#125;)&quot;</span>, x, y);</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">        <span class="comment">// 重载 + 运算符来把两个 Vector 对象相加(可以直接访问private)</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> Vector <span class="keyword">operator</span> +(Vector a, Vector b)</span><br><span class="line">        &#123;</span><br><span class="line">            Vector C = <span class="keyword">new</span> Vector();</span><br><span class="line">            C.x = a.x + b.x;</span><br><span class="line">            C.y = a.y + b.y;</span><br><span class="line">            <span class="keyword">return</span> C;</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">        <span class="comment">// 重载 - 运算符来把两个 Vector 对象相减(可以直接访问private)</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> Vector <span class="keyword">operator</span> -(Vector a, Vector b)</span><br><span class="line">        &#123;</span><br><span class="line">            Vector C = <span class="keyword">new</span> Vector();</span><br><span class="line">            C.x = a.x - b.x;</span><br><span class="line">            C.y = a.y - b.y;</span><br><span class="line">            <span class="keyword">return</span> C;</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">        <span class="comment">// 重载 * 运算符来把两个 Vector 对象相乘(可以直接访问private)</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="keyword">operator</span> *(Vector a, Vector b)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> a.x * b.x + a.y * b.y;</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Vector a = <span class="keyword">new</span> Vector(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">            Vector b = <span class="keyword">new</span> Vector(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">            <span class="comment">//+法</span></span><br><span class="line">            Vector c = a + b;</span><br><span class="line">            c.Display();</span><br><span class="line">            <span class="comment">//-法</span></span><br><span class="line">            c = a - b;</span><br><span class="line">            c.Display();</span><br><span class="line">            <span class="comment">//*法</span></span><br><span class="line">            <span class="built_in">int</span> res = a * b;</span><br><span class="line">            Console.WriteLine(res);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>（2）动态多态：函数的响应是在运行时发生的。</strong><br>        - 虚方法（virtual ）：定义子类可以重写覆盖父类的方法，对虚方法的调用是在运行时发生的。子类需要使用override声明<br>              + 父类定义虚方法，子类可以实现重写父类虚方法，也可以不实现重写。如果重写了，那么创建子类对象后，不管是父类指针还是子类，调用虚方法都会执行子类的覆盖。<br>              + 父类定义虚方法，必须要有父类的实现，在父类中是一个普通函数。<br>        - 抽象（abstract ）：抽象abstract关键字可以作用在方法上，也可以作用在类上。子类需要使用override声明<br>              + 父类抽象方法没有实现，只有声明。子类必须实现父类的抽象方法<br>              + 类内任何一个方法是抽象的，则该类必须被声明为抽象类。即抽象方法只能在抽象类中定义<br>              + 抽象类不能被实例化，但可以指向子类实例。子类若不实现抽象方法则也会变成抽象类。<br>        - 总结：简单说，抽象方法是需要子类去实现的。虚方法是已经实现了的，可以被子类覆盖，也可以不覆盖，取决于需求。抽象方法和虚方法都可以供派生类重写。</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">netBasic_learning</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//动态多态：函数的响应是在运行时发生的。</span></span><br><span class="line">    <span class="comment">//      - 虚方法（virtual ）：定义子类可以重写覆盖父类的方法，对虚方法的调用是在运行时发生的。子类需要使用override声明</span></span><br><span class="line">    <span class="comment">//          + 父类定义虚方法，子类可以实现重写父类虚方法，也可以不实现重写。如果重写了，那么创建子类对象后，不管是父类指针还是子类，调用虚方法都会执行子类的覆盖。</span></span><br><span class="line">    <span class="comment">//          + 父类定义虚方法，必须要有父类的实现，在父类中是一个普通函数。</span></span><br><span class="line">    <span class="comment">//      - 抽象（abstract ）：抽象abstract关键字可以作用在方法上，也可以作用在类上。子类需要使用override声明</span></span><br><span class="line">    <span class="comment">//          + 父类抽象方法没有实现，只有声明。子类必须实现父类的抽象方法</span></span><br><span class="line">    <span class="comment">//          + 类内任何一个方法是抽象的，则该类必须被声明为抽象类。即抽象方法只能在抽象类中定义</span></span><br><span class="line">    <span class="comment">//          + 抽象类不能被实例化，但可以指向子类实例。子类若不实现抽象方法则也会变成抽象类。</span></span><br><span class="line">    <span class="comment">//      - 总结：简单说，抽象方法是需要子类去实现的。虚方法是已经实现了的，可以被子类覆盖，也可以不覆盖，取决于需求。抽象方法和虚方法都可以供派生类重写。</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Animal</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//抽象类：包含至少一个抽象方法，但是不仅仅包含抽象方法</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="built_in">string</span> name;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Animal</span>(<span class="params"><span class="built_in">string</span> _name</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            name = _name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//抽象方法：叫</span></span><br><span class="line">        <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span>(<span class="params"></span>)</span>;</span><br><span class="line">     </span><br><span class="line">        <span class="comment">//虚方法</span></span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;&#123;0&#125; is eating&quot;</span>,name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">class</span> <span class="title">Dog</span> : <span class="title">Animal</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Dog</span>(<span class="params"><span class="built_in">string</span> name</span>):<span class="title">base</span>(<span class="params">name</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">     </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//实现抽象类</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">shout</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;A Dog &#123;0&#125; is wangwang&quot;</span>,name);</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">        <span class="comment">//覆盖重写虚函数</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">eat</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">base</span>.eat();</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;A Dog &#123;0&#125; is eat bone&quot;</span>, name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">class</span> <span class="title">Cat</span> : <span class="title">Animal</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Cat</span>(<span class="params"><span class="built_in">string</span> name</span>) : <span class="title">base</span>(<span class="params">name</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">     </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//实现抽象类</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">shout</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;A Cat &#123;0&#125; is miaomiao&quot;</span>, name);</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">        <span class="comment">//覆盖重写虚函数</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">eat</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">base</span>.eat();</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;A Cat &#123;0&#125; is eat fish&quot;</span>, name);</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Animal[] animals = <span class="keyword">new</span> Animal[<span class="number">2</span>] &#123; <span class="keyword">new</span> Dog(<span class="string">&quot;tom&quot;</span>), <span class="keyword">new</span> Cat(<span class="string">&quot;marry&quot;</span>) &#125;;</span><br><span class="line">            <span class="keyword">foreach</span>(Animal animal <span class="keyword">in</span> animals)</span><br><span class="line">            &#123;</span><br><span class="line">                animal.shout();</span><br><span class="line">                animal.eat();</span><br><span class="line">            &#125;</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>2.接口（interface）：接口类似于抽象类，但接口内所有方法都是抽象的</strong><br>      （1）接口不能实例化，继承接口必须实现所有抽象方法（不用声明override），接口可以指向子类（多态）<br>      （2）接口默认声明为public<br>      （3）接口可以多继承，解决 C# 里面类可以同时继承多个基类的问题。<br>      （4）接口可以继承接口</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">netBasic_learning</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//2.接口（interface）：接口类似于抽象类，但接口内所有方法都是抽象的</span></span><br><span class="line">    <span class="comment">//  （1）接口不能实例化，继承接口必须实现所有抽象方法（不用声明override），接口可以指向子类（多态）</span></span><br><span class="line">    <span class="comment">//  （2）接口默认声明为public</span></span><br><span class="line">    <span class="comment">//  （3）接口可以多继承，解决 C# 里面类可以同时继承多个基类的问题。</span></span><br><span class="line">    <span class="comment">//  （4）接口可以继承接口</span></span><br><span class="line">    <span class="keyword">interface</span> <span class="title">Parent</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">disPlay</span>(<span class="params"></span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Child</span> : <span class="title">Parent</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">disPlay</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;child is display!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><ol><li><a href="https://blog.csdn.net/qq_40772692/article/details/121818727">C#（一） C# 基础语法一文通</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">C#语言基础语法</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="C#" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/C/"/>
    
    <category term="前端" scheme="https://zml3589110.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="C#" scheme="https://zml3589110.github.io/tags/C/"/>
    
    <category term="语法" scheme="https://zml3589110.github.io/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>C#开发WinForm之二(进阶与复杂控件使用)</title>
    <link href="https://zml3589110.github.io/posts/126044072.html"/>
    <id>https://zml3589110.github.io/posts/126044072.html</id>
    <published>2022-07-27T07:39:20.000Z</published>
    <updated>2022-07-28T13:23:05.287Z</updated>
    
    <content type="html"><![CDATA[<h1 id="复合控件"><a href="#复合控件" class="headerlink" title="复合控件"></a>复合控件</h1><blockquote><p><strong>1.控件的使用综述：在WinForm中使用控件主要包括以下几种情况:</strong><br>（1）标准控件：直接使用winform自带的控件，比如button、textBox等。我们只需要修改属性，添加事件即可。<br>（2）复合控件：将一些标准控件组合起来，实现复杂功能。需要定义 class YourControl:UserControl{ }<br>（3）扩展控件：拓展或者改变一些标准控件的功能。需要继承于标准控件，class YourButton:Button { }<br>（4）自定义控件：完全自定义一个控件，定义属性、方法、样式等。需要继承于Control（Control是所有控件的基类），class YourControl:Control { }<br> <strong>注意：</strong>我们之前学习了标准控件的使用，所以这节课我们就学习一下复合控件如何定义和使用，循序渐进。</p></blockquote><blockquote><p><strong>2.复合控件：实现一个搜索框控件（组合文本框与图片框）:</strong><br>（1）定义：复合控件又称为用户控件，专门用来将标准控件进行组合，其继承自 UserControl<br>（2）定义复合控件：<br>    - 右键解决方案-&gt;添加 用户控件窗体(UserControl)，命名为SearchBox。会自动生成一个SearchBox类，继承自 UserControl<br>    - 双击 SearchBox.cs文件，可以打开设计界面，像窗口一样设计符合组件的样式<br>            a. 拖上去一个textBox文本框作为搜索框<br>            b. 拖上去一个图片框，设置图片为搜索图标<br>            c. 使用表格布局，将二者组合到一起，并调整大小和位置（Anchor、Dock、表格比例等）<br>            d.保存后，重新生成解决方案，再点击界面中的工具箱即可看到我们自己的复合控件<br>（3）复合控件的摆放和原理<br>     - 在界面中可以直接拖拽符合控件，并且复合控件作为一个整体也具有Size、Location、事件等等常规属性。<br>     - 复合控件本质上就是一个窗体！复合控件中的组件和窗体中的组件一样，在初始化时放置到窗体上。     </p></blockquote><h2 id="复合控件SearchBox可视化设计"><a href="#复合控件SearchBox可视化设计" class="headerlink" title="复合控件SearchBox可视化设计"></a>复合控件SearchBox可视化设计</h2><blockquote><p>在SearchBox.cs窗体设计界面中，对复合控件进行可视化样式设计，其步骤如下：<br>添加一个TableLayoutPanel表格布局容器，保留一行两列。并设置其Dock为Fill填满整个父窗口，然后设置两列表格大小比例为7:3。（用来放置文本框和图片框按钮）<br>添加一个TextBox到第一个单元格，并设置其Anchor为左右边距固定（可以随父窗口拉伸而拉伸）<br>添加一个pictureBox到第二个单元格，并设置其Dock为Fill填满单元格，添加图片资源-搜索图标<br><strong>注意：</strong>现在只是设计好了SearchBox的样式，但是还没有设计其属性访问和事件处理，比如复合控件如何获取文本框的值？如何获取&#x2F;设置图片框的点击事件？复合控件如何当作一个整体来用？</p></blockquote><img src="https://img-blog.csdnimg.cn/599cb97399b948b1a8c722e5a889cf18.png"><h2 id="复合控件的属性访问和事件处理"><a href="#复合控件的属性访问和事件处理" class="headerlink" title="复合控件的属性访问和事件处理"></a>复合控件的属性访问和事件处理</h2><p>**复合控件的访问和事件处理：我们有时需要获取复合控件内子控件的数据、或者给复合控件的某个位置（图片、按钮）设置事件 **</p><h3 id="（1）设置public直接访问（最简单，最直接，最不常用）：将复合控件内的子控件成员全部设置为public，直接访问即可"><a href="#（1）设置public直接访问（最简单，最直接，最不常用）：将复合控件内的子控件成员全部设置为public，直接访问即可" class="headerlink" title="（1）设置public直接访问（最简单，最直接，最不常用）：将复合控件内的子控件成员全部设置为public，直接访问即可"></a>（1）设置public直接访问（最简单，最直接，最不常用）：将复合控件内的子控件成员全部设置为public，直接访问即可</h3><ul><li>在复合控件设计界面内选择每个子控件，设置其 Modifiers 属性为 public （默认为private）</li><li>然后在复合控件源码中，相关的子控件就会自动变为 public 访问修饰的，我们可以直接使用 [复合控件.子控件.属性] 来访问</li><li>给SearchBox的搜索图片设置点击事件：searchBox1.pictureBox1.Click +&#x3D; new EventHandler(searchEvent);</li><li>获取文本框搜索内容：MessageBox.Show(“开始搜索…” + searchBox1.textBox1.Text);</li></ul><h3 id="（2）在复合控件内设置事件和获取数据，就可以像窗口一样直接使用子组件了（没试过）"><a href="#（2）在复合控件内设置事件和获取数据，就可以像窗口一样直接使用子组件了（没试过）" class="headerlink" title="（2）在复合控件内设置事件和获取数据，就可以像窗口一样直接使用子组件了（没试过）"></a>（2）在复合控件内设置事件和获取数据，就可以像窗口一样直接使用子组件了（没试过）</h3><h3 id="（3）复合控件自定义属性"><a href="#（3）复合控件自定义属性" class="headerlink" title="（3）复合控件自定义属性"></a>（3）复合控件自定义属性</h3><ul><li><strong>添加属性：</strong></li></ul><ol><li>在SearchBox逻辑代码中，添加属性访问器<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">string</span> SearchText</span><br><span class="line">&#123;</span><br><span class="line">     <span class="keyword">get</span></span><br><span class="line">     &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">this</span>.textBox1.Text;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">set</span></span><br><span class="line">     &#123;</span><br><span class="line">          <span class="keyword">this</span>.textBox1.Text = <span class="keyword">value</span>;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>重新生成解决方案，打开Form3界面设计，在杂项中就可以看到我们自定义的属性SearchText。通过修改值可以直接修改内部的TextBox。其本质都是调用了set、get方法。</li></ol><ul><li><strong>重写属性：</strong></li></ul><ol><li>在SearchBox逻辑代码中，重写UserControl已有的属性，比如Text等<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> Text &#123;</span><br><span class="line">     <span class="keyword">get</span></span><br><span class="line">     &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">this</span>.textBox1.Text;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">set</span></span><br><span class="line">     &#123;</span><br><span class="line">         <span class="keyword">this</span>.textBox1.Text = <span class="keyword">value</span>;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>重新生成解决方案，打开Form3界面设计，原本的属性就成为了我们重写的属性。</li></ol><ul><li>C# Attribute 特性：特性是一种可以被编译器识别的声明性标签，类似于Java的注解<br>a. 语法：[attribute(positional_parameters, name_parameter &#x3D; value, …)]<br>b. 常用特性：<br>  [Browsable(true)]: 控件属性是否在设计器内可见（一般默认为false）<br>  [Category(“Appearance”)]：控件属性显示在哪个类别中。Action(与可用操作相关)、Appearance(与实体的外观相关)、Behavior（与实体的行为相关）、Data（与数据和数据源管理相关）<br>  [DesignerSerializationVisibility()]: 将我们在控件属性上设定的值持久化到代码中，这样我们下次再查看控件的值依然是我们最后一次设定的值。指示一个属性是否串行化和如何串行化，它的值是一个枚举，一共有三种类型Content，Hidden，Visible。</li></ul><h3 id="（4）复合控件自定义事件"><a href="#（4）复合控件自定义事件" class="headerlink" title="（4）复合控件自定义事件"></a>（4）复合控件自定义事件</h3><ul><li>在SearchBox逻辑代码中，添加声明自定义事件。 public event EventHandler SearchEvent;</li><li>重新生成解决方案后，可以在事件-杂项中看到我们自定义的事件 SearchEvent </li><li>在设计界面可以给事件添加&#x2F;实现处理回调方法 onSearch（），配合自定义属性食用</li><li>在复合组件中，将图片的点击事件 链接到 自定义事件上，即点击图片时触发自定义事件。编写图片的Click事件</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//PictureBox的点击事件 -&gt; 触发自定义事件SearchEvent的回调方法</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">onClick</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">      <span class="comment">//调用事件，固定写法</span></span><br><span class="line">      <span class="keyword">if</span>(SearchEvent != <span class="literal">null</span>)</span><br><span class="line">      &#123;</span><br><span class="line">           SearchEvent.Invoke(<span class="keyword">this</span>, e);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//简化写法 SearchEvent?.Invoke(this,e);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>一个控件还可以添加多个事件，顺序触发</p><blockquote><p>（1）界面设计</p></blockquote><img src="https://img-blog.csdnimg.cn/4ff3e0f317a443af87bd04026f529b2d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Zi_6Zi_6Zi_5a6J,size_20,color_FFFFFF,t_70,g_se,x_16"><blockquote><p>（2）SearchBox.cs 逻辑代码</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">WindowsFormsApp_learning</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">SearchBox</span> : <span class="title">UserControl</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//添加自定义事件</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">event</span> EventHandler SearchEvent;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">SearchBox</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//初始化控件（TextBox+PictureBox）</span></span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 添加新的自定义属性 SearchText</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> SearchText</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.textBox1.Text;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">set</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>.textBox1.Text = <span class="keyword">value</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 重写属性 Text</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        [<span class="meta">Browsable(true)</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> Text &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.textBox1.Text;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">set</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>.textBox1.Text = <span class="keyword">value</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">        <span class="comment">//图片点击事件onClick -&gt; 链接自定义事件SearchEvent</span></span><br><span class="line">        <span class="comment">//注意：SearchEvent的事件处理方法，需要在Form.cs中像基本控件的事件处理一样进行添加才行</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">onClick</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//调用事件，固定写法</span></span><br><span class="line">            <span class="keyword">if</span>(SearchEvent != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                SearchEvent.Invoke(<span class="keyword">this</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//简化写法 SearchEvent?.Invoke(this,e);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>（3）Form3.cs 主窗体逻辑代码</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">WindowsFormsApp_learning</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Form3</span> : <span class="title">Form</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Form3</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">     </span><br><span class="line">            <span class="comment">//设置复合控件 图片的点击事件（public方式）</span></span><br><span class="line">            <span class="comment">//searchBox1.pictureBox1.Click += new EventHandler(searchEvent);</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//public方式设置复合控件-子控件点击事件</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">searchEvent</span>(<span class="params"><span class="built_in">object</span> sender,EventArgs args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//获取并展示 文本框的内容</span></span><br><span class="line">            MessageBox.Show(<span class="string">&quot;开始搜索...&quot;</span> + searchBox1.textBox1.Text);</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">        <span class="comment">//SearchBox的自定义事件实现 SearchEvent -&gt; onSearch</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">onSearch</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//获取并展示 文本框的内容（通过自定义属性/重写属性）</span></span><br><span class="line">            MessageBox.Show(<span class="string">&quot;开始搜索...&quot;</span> + searchBox1.SearchText);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/916c99fb500a48079e51515cc0a2c8aa.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Zi_6Zi_6Zi_5a6J,size_17,color_FFFFFF,t_70,g_se,x_16"><h1 id="二-控件包装"><a href="#二-控件包装" class="headerlink" title="二.控件包装"></a>二.控件包装</h1><h2 id="1-控件包装基本设计"><a href="#1-控件包装基本设计" class="headerlink" title="1.控件包装基本设计"></a>1.控件包装基本设计</h2><blockquote><p><strong>1.控件包装：</strong><br>（1）定义：控件包装是复合控件的一种特殊形式，其内部只有一个控件<br>（2）目的：对一些基础控件的功能进行拓展和自定义修改，比如TextBox包装后可以修改高度和内边距padding等<br>（3）步骤：<br>        - 新建包装控件类AfTextBox，继承自UserControl，其内部只放置一个TextBox组件，作为对TextBox的包装拓展<br>        - 为了实现可修改TextBox高度宽度的效果，需要设置TextBox的Size随着外部Form的变化而变化 -&gt; onLayout()<br>        - 为了实现可修改TextBox内边距padding的效果，需要设置Form与TextBox的边距来代替文字内边距 -&gt; onLayout()<br>        - 为了无缝实现上述效果，看着是一个TextBox整体，需要设置TextBox和Form背景色相同，并且取消TextBox边框。</p></blockquote><blockquote><p><strong>2.Location属性解释：控件左上角相对于其容器左上角的坐标，单位是像素。</strong><br>（1）对于窗体来说，就是窗口左上角相对于屏幕左上角的坐标；<br>（2）对于一般控件来说，就是控件左上角相对于其容器左上角的坐标，比如说相对于窗体，图片框等。<br>（3）父容器左上角默认(0,0)</p></blockquote><blockquote><p><strong>3.窗口位置调节：</strong><br>        - this.StartPosition &#x3D; FormStartPosition.Manual; &#x2F;&#x2F;窗体的位置由Location属性决定<br>        - this.StartPosition &#x3D; FormStartPosition.CenterParent; &#x2F;&#x2F;窗体在其父窗体中居中<br>        - this.StartPosition &#x3D; FormStartPosition.CenterScreen; &#x2F;&#x2F;窗体在当前显示窗口中居中，尺寸在窗体大小中指定<br>        - this.StartPosition &#x3D; FormStartPosition.WindowsDefaultBounds; &#x2F;&#x2F;窗体定位在windows默认位置，边界也由windows默认决定（默认）<br>        - this.StartPosition &#x3D; FormStartPosition.WindowsDefaultLocation; &#x2F;&#x2F;窗体定位在windows默认位置，尺寸在窗体大小中指定</p></blockquote><p><strong>（1）TextBox包装控件AfTextBox 逻辑代码</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">WindowsFormsApp_learning</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">AfTextBox</span> : <span class="title">UserControl</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">AfTextBox</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//初始化内部控件</span></span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//重写布局实现</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnLayout</span>(<span class="params">LayoutEventArgs levent</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">base</span>.OnLayout(levent);</span><br><span class="line">            <span class="comment">//1.获取子控件</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.Controls.Count == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">            Control C = <span class="keyword">this</span>.Controls[<span class="number">0</span>];</span><br><span class="line">     </span><br><span class="line">            <span class="comment">//2.获取父窗口参数</span></span><br><span class="line">            Padding p = <span class="keyword">this</span>.Padding;<span class="comment">//父窗口的边距Padding</span></span><br><span class="line">            <span class="built_in">int</span> x = <span class="number">0</span>, y = <span class="number">0</span>;<span class="comment">//子控件相对于容器的初始坐标（左上角） </span></span><br><span class="line">            <span class="built_in">int</span> w = <span class="keyword">this</span>.Width, h = <span class="keyword">this</span>.Height;</span><br><span class="line">            w -= (p.Left + p.Right);<span class="comment">//TextBox的宽度 = 容器宽度 - 左右边距</span></span><br><span class="line">            x += p.Left;<span class="comment">//TextBox的相对x = p.Left</span></span><br><span class="line">     </span><br><span class="line">            <span class="comment">//3.计算文本框的高度，使其显示在中间</span></span><br><span class="line">            <span class="comment">//  （1）PreferredSize：获取可以容纳控件的矩形区域的大小。</span></span><br><span class="line">            <span class="comment">//  （2）Size：获取控件的大小</span></span><br><span class="line">            <span class="built_in">int</span> h2 = C.PreferredSize.Height;</span><br><span class="line">            <span class="keyword">if</span> (h2 &gt; h) h2 = h;</span><br><span class="line">            y = (h - h2) / <span class="number">2</span>;<span class="comment">//TextBox的相对y = (h-h2)/2 高度居中</span></span><br><span class="line">     </span><br><span class="line">            <span class="comment">//4.设置子控件的位置和尺寸</span></span><br><span class="line">            C.Location = <span class="keyword">new</span> Point(x, y);</span><br><span class="line">            C.Size = <span class="keyword">new</span> Size(w, h2);</span><br><span class="line">            <span class="comment">//5.为什么不调整高度大小：文本框为单行，高度调节无效。只会随着文字格式的大小变化！</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-控件包装单文件开发"><a href="#2-控件包装单文件开发" class="headerlink" title="2.控件包装单文件开发"></a>2.控件包装单文件开发</h2><blockquote><p><strong>2.包装、复合控件单文件开发</strong><br>（1）定义：每次创建UserControl都会自动给我们创建一个相应的designer.cs布局设计文件，将界面和逻辑分开开发。如何将二者合并到一个文件开发呢？<br>（2）步骤：<br>        - 【手动】创建AfTextBox2普通类 class文件，并手动继承UserControl<br>        - 双击打开AfTextBox2.cs可以进入设计界面，拖放控件。会直接给AfTextBox2.cs内自动添加控件布局（不会分开添加了）<br>        - 手动实现构造函数，初始化调用布局 InitializeComponent()<br>        - 添加逻辑代码和事件、属性<br>（3）好处：以后可以直接将单个控件cs文件复制到别的项目里直接使用，而不用分多个了</p></blockquote><blockquote><p><strong>3.包装控件的自定义属性和事件：和复合控件一样（AfTextBox2为例）</strong><br>（1）添加&#x2F;重写自定义属性 Text、BackColor、Front<br>（2）添加自定义事件 ReturnPressed（回车事件）</p></blockquote><p><strong>（1）AfTextBox2包装控件cs逻辑代码</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">WindowsFormsApp_learning</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">AfTextBox2</span> : <span class="title">UserControl</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 自动生成布局代码，直接添加到本文件</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> TextBox edit;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">InitializeComponent</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">this</span>.edit = <span class="keyword">new</span> System.Windows.Forms.TextBox();</span><br><span class="line">            <span class="keyword">this</span>.SuspendLayout();</span><br><span class="line">            <span class="comment">// </span></span><br><span class="line">            <span class="comment">// edit</span></span><br><span class="line">            <span class="comment">// </span></span><br><span class="line">            <span class="keyword">this</span>.edit.BorderStyle = System.Windows.Forms.BorderStyle.None;</span><br><span class="line">            <span class="comment">//this.edit.Font = new System.Drawing.Font(&quot;宋体&quot;, 16F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(134)));</span></span><br><span class="line">            <span class="keyword">this</span>.edit.Location = <span class="keyword">new</span> System.Drawing.Point(<span class="number">106</span>, <span class="number">79</span>);</span><br><span class="line">            <span class="keyword">this</span>.edit.Name = <span class="string">&quot;edit&quot;</span>;</span><br><span class="line">            <span class="keyword">this</span>.edit.Size = <span class="keyword">new</span> System.Drawing.Size(<span class="number">263</span>, <span class="number">37</span>);</span><br><span class="line">            <span class="keyword">this</span>.edit.TabIndex = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">this</span>.edit.KeyPress += <span class="keyword">new</span> System.Windows.Forms.KeyPressEventHandler(<span class="keyword">this</span>.OnPress);</span><br><span class="line">            <span class="comment">// </span></span><br><span class="line">            <span class="comment">// AfTextBox2</span></span><br><span class="line">            <span class="comment">// </span></span><br><span class="line">            <span class="keyword">this</span>.BackColor = System.Drawing.Color.White;</span><br><span class="line">            <span class="keyword">this</span>.BorderStyle = System.Windows.Forms.BorderStyle.Fixed3D;</span><br><span class="line">            <span class="keyword">this</span>.Controls.Add(<span class="keyword">this</span>.edit);</span><br><span class="line">            <span class="keyword">this</span>.Name = <span class="string">&quot;AfTextBox2&quot;</span>;</span><br><span class="line">            <span class="keyword">this</span>.Size = <span class="keyword">new</span> System.Drawing.Size(<span class="number">524</span>, <span class="number">246</span>);</span><br><span class="line">            <span class="keyword">this</span>.ResumeLayout(<span class="literal">false</span>);</span><br><span class="line">            <span class="keyword">this</span>.PerformLayout();</span><br><span class="line">     </span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 手动添加构造函数，初始化布局</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">AfTextBox2</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 添加逻辑代码，实现组件自适应</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnLayout</span>(<span class="params">LayoutEventArgs levent</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">base</span>.OnLayout(levent);</span><br><span class="line">            <span class="comment">//1.获取子控件</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.Controls.Count == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">            Control C = <span class="keyword">this</span>.Controls[<span class="number">0</span>];</span><br><span class="line">     </span><br><span class="line">            <span class="comment">//2.获取父窗口参数</span></span><br><span class="line">            Padding p = <span class="keyword">this</span>.Padding;<span class="comment">//父窗口的边距Padding</span></span><br><span class="line">            <span class="built_in">int</span> x = <span class="number">0</span>, y = <span class="number">0</span>;<span class="comment">//子控件相对于容器的初始坐标（左上角） </span></span><br><span class="line">            <span class="built_in">int</span> w = <span class="keyword">this</span>.Width, h = <span class="keyword">this</span>.Height;</span><br><span class="line">            w -= (p.Left + p.Right);<span class="comment">//TextBox的宽度 = 容器宽度 - 左右边距</span></span><br><span class="line">            x += p.Left;<span class="comment">//TextBox的相对x = p.Left</span></span><br><span class="line">     </span><br><span class="line">            <span class="comment">//3.计算文本框的高度，使其显示在中间</span></span><br><span class="line">            <span class="comment">//  （1）PreferredSize：获取可以容纳控件的矩形区域的大小。</span></span><br><span class="line">            <span class="comment">//  （2）Size：获取控件的大小</span></span><br><span class="line">            <span class="built_in">int</span> h2 = C.PreferredSize.Height;</span><br><span class="line">            <span class="keyword">if</span> (h2 &gt; h) h2 = h;</span><br><span class="line">            y = (h - h2) / <span class="number">2</span>;<span class="comment">//TextBox的相对y = (h-h2)/2 高度居中</span></span><br><span class="line">     </span><br><span class="line">            <span class="comment">//4.设置子控件的位置和尺寸</span></span><br><span class="line">            C.Location = <span class="keyword">new</span> Point(x, y);</span><br><span class="line">            C.Size = <span class="keyword">new</span> Size(w, h2);</span><br><span class="line">            <span class="comment">//5.为什么不调整高度大小：文本框为单行，高度调节无效。只会随着文字格式的大小变化！</span></span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 重写自定义属性 Text</span></span><br><span class="line"><span class="comment">         *  Browsable：True则属性在设计界面显示可修改，False则属性在设计界面不显示。默认为True</span></span><br><span class="line"><span class="comment">         *  DesignerSerializationVisibility：设置属性的序列化方式，默认为Visible</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        [<span class="meta">Browsable(true)</span>]</span><br><span class="line">        [<span class="meta">DesignerSerializationVisibility(DesignerSerializationVisibility.Visible)</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> Text &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> edit.Text;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">set</span></span><br><span class="line">            &#123;</span><br><span class="line">                edit.Text = <span class="keyword">value</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//重写自定义属性 Color</span></span><br><span class="line">        [<span class="meta">Browsable(true)</span>]</span><br><span class="line">        [<span class="meta">DesignerSerializationVisibility(DesignerSerializationVisibility.Visible)</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">override</span> Color BackColor</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> edit.BackColor;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">set</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//容器和TextBox的颜色一起整体变化</span></span><br><span class="line">                <span class="keyword">base</span>.BackColor = <span class="keyword">value</span>;</span><br><span class="line">                edit.BackColor = <span class="keyword">value</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 注意：Font的设置有些特殊，需要提供初始的默认值</span></span><br><span class="line"><span class="comment">         * **此处仍未解决，无法修改Font字体**</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> Font initFont = <span class="keyword">new</span> Font(<span class="string">&quot;宋体&quot;</span>, <span class="number">10f</span>);</span><br><span class="line">        [<span class="meta">Browsable(true)</span>]</span><br><span class="line">        [<span class="meta">DesignerSerializationVisibility(DesignerSerializationVisibility.Content)</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">override</span> Font Font</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> initFont;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">set</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>.initFont = <span class="keyword">value</span>;</span><br><span class="line">                <span class="keyword">this</span>.edit.Font = <span class="keyword">value</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 添加自定义事件</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">event</span> EventHandler ReturnPressed;</span><br><span class="line">        <span class="comment">//TextBox的keyPress -&gt; 触发 ReturnPressed事件</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnPress</span>(<span class="params"><span class="built_in">object</span> sender, KeyPressEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="built_in">char</span> ch = e.KeyChar;</span><br><span class="line">            <span class="keyword">if</span> (ch == <span class="string">&#x27;\r&#x27;</span>)<span class="comment">//如果是回车符号</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//回调ReturnPressed事件</span></span><br><span class="line">                ReturnPressed?.Invoke(<span class="keyword">this</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>（2）Form窗体应用</strong></p><img src="https://img-blog.csdnimg.cn/e1d18980478348a2bc9eccc2e60a94b7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Zi_6Zi_6Zi_5a6J,size_20,color_FFFFFF,t_70,g_se,x_16"><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">WindowsFormsApp_learning</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Form4</span> : <span class="title">Form</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Form4</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">     </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//包装控件的 ReturnPressed 回车触发事件</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnEnterPress</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            MessageBox.Show(<span class="string">&quot;正在检索...&quot;</span> + afTextBox21.Font);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三-对话框"><a href="#三-对话框" class="headerlink" title="三.对话框"></a>三.对话框</h1><h2 id="1-对话框基本概念"><a href="#1-对话框基本概念" class="headerlink" title="1.对话框基本概念"></a>1.对话框基本概念</h2><blockquote><p><strong>1.对话框</strong><br>（1）构建：对话框本质还是一个Form窗体，只不过以对话框的形式显示。所以对话框的构建参照窗体的设计即可<br>（2）使用：新建一个对话框 MyDiglog ，在点击事件中显示对话框 ShowDialog()<br>        MyDialog dialog &#x3D; new MyDialog(); &#x2F;&#x2F;新建窗体<br>        dialog.ShowDialog(); &#x2F;&#x2F;作为对话框弹出在当前界面。注意如果是Show()则是显示窗体，非对话框<br>        dialog.Dispose(); &#x2F;&#x2F;销毁窗体，释放资源<br>（3）运行流程：<br>        - 在调用ShowDialog方法后，会[阻塞]父窗口进程，不再往下执行。表现为子窗口可以活动，而父窗口不行<br>        - 对话框阻塞直到用户关闭对话框，父窗口进程才继续向下执行<br>        - 执行Dispose方法释放对话框资源<br>（4）对话框属性（和窗体Form属性一样）：<br>        - Text：窗体左上角显示文字<br>        - MaximizeBox：最大化按钮（True显示，Flase不显示）<br>        - MinimizeBox：最小化按钮（True显示，Flase不显示）、<br>        - ShowInTaskBar：是否在任务栏显示<br>        - StartPosition：窗体显示位置 WindowsDefaultLocation窗口默认位置、CenterSceen窗口中央、CenterParent父窗口中央等<br>        - FormBorderStyle：边界样式 Sizable可修改、FixedDialog固定对话框大小、FixedSignle固定窗体<br>（5）对话框返回值与数据传递<br>        - 对话框含有属性 DialogResult<br>                DialogResult.OK ：设置DialogResult为OK，窗体会立即关闭，并返回DialogResult.OK值<br>                DialogResult.Cancel：设置DialogResult为Cancel，窗体会立即关闭，并返回DialogResult.Cancel值<br>        - 数据传递：可以将传递数据组件设置为public，在关闭窗口后Dispose之前调用dialog.xxx来获取属性值</p></blockquote><p><strong>（1）对话框界面设计</strong></p><img src="https://img-blog.csdnimg.cn/93cca8454a854ea0a84520ff27d00e9b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Zi_6Zi_6Zi_5a6J,size_20,color_FFFFFF,t_70,g_se,x_16"><p>**（2）对话框逻辑代码（MyDialog.cs） **</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">WindowsFormsApp_learning</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">MyDialog</span> : <span class="title">Form</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyDialog</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//对话框确认按钮</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnClickOk</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//关闭当前对话框，并返回OK</span></span><br><span class="line">            <span class="keyword">this</span>.DialogResult = DialogResult.OK;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//对话框取消按钮</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnClickCancel</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//关闭当前对话框，并返回Cancel</span></span><br><span class="line">            <span class="keyword">this</span>.DialogResult = DialogResult.Cancel;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>（3）Form窗体逻辑代码</strong></p><blockquote><p><strong>1.两大功能：</strong></p><ul><li>通过点击按钮，创建并展示对话框</li><li>获取对话框返回值，并显示在主窗体界面上</li></ul></blockquote><img src="https://img-blog.csdnimg.cn/ebcb55bcb4184fcab924cc79893a0fd5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Zi_6Zi_6Zi_5a6J,size_20,color_FFFFFF,t_70,g_se,x_16"><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">WindowsFormsApp_learning</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Form5</span> : <span class="title">Form</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Form5</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//点击按钮，触发对话框展示事件</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">show_Dialog</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            MyDialog dialog = <span class="keyword">new</span> MyDialog(); <span class="comment">//新建窗体</span></span><br><span class="line">            DialogResult res =  dialog.ShowDialog(); <span class="comment">//作为对话框弹出在当前界面</span></span><br><span class="line">            <span class="comment">//阻塞当前进程，直到用户关闭对话框</span></span><br><span class="line">            <span class="keyword">if</span>(res == DialogResult.OK)<span class="comment">//表示点击了确定按钮关闭的窗口</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//获取数据，显示在父界面</span></span><br><span class="line">                <span class="keyword">this</span>.textPanel.Text += (dialog.dlg_text.Text + <span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            dialog.Dispose(); <span class="comment">//销毁窗体，释放资源</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>2.快捷操作+默认行为：</strong><br>        - 对话框按钮快捷关闭：按钮上带有一个 DialogResult属性：OK、Cancel等都可以设置。其效果和手写代码是一样的，关闭对话框并返回值<br>        - 对话框的AcceptButton属性：当在对话框点击 回车 时会触发的按钮，默认为None<br>        - 对话框的CancelButton属性：当在对话框点击 ESC 时会触发的按钮，默认为None</p></blockquote><h2 id="2-对话框小练习：字体设置器"><a href="#2-对话框小练习：字体设置器" class="headerlink" title="2.对话框小练习：字体设置器"></a>2.对话框小练习：字体设置器</h2><blockquote><p>要求实现一个文本输入器，可以通过点击按钮弹出字体设置对话框，来选择相应的字体和字号。确认后将主窗口的文本输入变为相应的字体样式。</p></blockquote><p>**（1）主窗口界面设计 **</p><img src="https://img-blog.csdnimg.cn/6c63c4ca67af43438a21ad5331ad991d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Zi_6Zi_6Zi_5a6J,size_20,color_FFFFFF,t_70,g_se,x_16"><p><strong>（2）对话框界面设计</strong></p><img src="https://img-blog.csdnimg.cn/cf8b676ec38d47689deca1c66e398243.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Zi_6Zi_6Zi_5a6J,size_19,color_FFFFFF,t_70,g_se,x_16"><p><strong>（3）对话框逻辑代码StyleDialog.cs</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">WindowsFormsApp_Demo2</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">StyleDialog</span> : <span class="title">Form</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">StyleDialog</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取选择字体类型 public</span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> FontType</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> (<span class="built_in">string</span>)<span class="keyword">this</span>.dlg_wordType.SelectedItem;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">set</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>.dlg_wordType.SelectedItem = <span class="keyword">value</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取选择字体大小 public</span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> FontSize</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> (<span class="built_in">int</span>)<span class="keyword">this</span>.dlg_wordSize.Value;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">set</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>.dlg_wordSize.Value = <span class="keyword">value</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//按钮点击事件：返回值</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">onClickOk</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">this</span>.DialogResult = DialogResult.OK;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">onClickCancel</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">this</span>.DialogResult = DialogResult.Cancel;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>（4）主窗体逻辑代码Form1.cs</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">WindowsFormsApp_Demo2</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Form1</span> : <span class="title">Form</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Form1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//设置按钮点击事件：弹出对话框，并获取返回值</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">onClickStyle</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            StyleDialog dlg = <span class="keyword">new</span> StyleDialog();</span><br><span class="line">            DialogResult res =  dlg.ShowDialog();</span><br><span class="line">            <span class="keyword">if</span>(res == DialogResult.OK)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//获取返回值,设置当前字体样式</span></span><br><span class="line">                <span class="built_in">string</span> fontType = dlg.FontType;</span><br><span class="line">                <span class="built_in">int</span> fontSize = dlg.FontSize;</span><br><span class="line">                <span class="keyword">this</span>.text_panel.Font = <span class="keyword">new</span> Font(fontType, fontSize);</span><br><span class="line">            &#125;</span><br><span class="line">            dlg.Dispose();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四-系统对话框"><a href="#四-系统对话框" class="headerlink" title="四.系统对话框"></a>四.系统对话框</h1><blockquote><p><strong>1.系统对话框：WinForm提供了很多内置的系统对话框，比如文件浏览、保存，颜色、字体选择等。</strong><br>（1）OpenFileDialog : 文件打开对话框<br>        - new OpenFileDialog()：新建对话框<br>        - InitialDirectory：设置打开的初始展示路径<br>        - DefaultExt：获取或设置默认显示的文件扩展名。<br>        - Filter：获取或设置当前文件名筛选器字符串。其格式为 “自定义字符串标签|类型列表”<br>                a.单个文件类型：图片|<em>.jpg,</em>.png,<em>.gif<br>                b.多个文件类型：图片|</em>.jpg,<em>.png,</em>.gif|文本|<em>.txt,</em>.doc|所有|<em>.</em><br>        - FileName：获取或设置对话框中选定的文件名称字符串<br>        - FileNames：获取或设置对话框中所有选定的文件名称字符串列表<br>（2）SaveFileDialog : 文件保存对话框（跟OpenFileDialog差不多）<br>（3）FolderBrowserDialog：文件夹选择对话框<br>        - new FolderBrowserDialog()：新建对话框<br>        - InitialDirectory:    获取或设置打开的初始路径<br>        - SelectedPath：获取或设置选择的文件夹路径<br>（4）ColorDialog：颜色选择对话框<br>（5）FontDialog：字体选择对话框</p></blockquote><h2 id="1-系统对话框功能使用"><a href="#1-系统对话框功能使用" class="headerlink" title="1.系统对话框功能使用"></a>1.系统对话框功能使用</h2><blockquote><p>为了展示系统对话框的功能，此处设计一个文件浏览窗口，能够选择、保存文件或文件夹，并将所选定的文件&#x2F;目录路径名称展示到主界面文本框。</p></blockquote><p><strong>（1）界面设计</strong></p><img src="https://img-blog.csdnimg.cn/ddf714a3ba6644c0a5057e75d828a75d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Zi_6Zi_6Zi_5a6J,size_20,color_FFFFFF,t_70,g_se,x_16"><p><strong>（2）Form.cs逻辑代码</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">WindowsFormsApp_learning</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Form6</span> : <span class="title">Form</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Form6</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//选择文件按钮 点击事件</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button1_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            OpenFileDialog fileDialog = <span class="keyword">new</span> OpenFileDialog(); <span class="comment">//新建文件对话框</span></span><br><span class="line">            fileDialog.InitialDirectory = <span class="string">&quot;D:\\日常材料\\学习资料\\WinForm\\第十二章 系统对话框\\12.1 系统对话框\\项目源码\\FormApp1201\\FormApp1201&quot;</span>; <span class="comment">//设置初始路径</span></span><br><span class="line">            <span class="comment">//fileDialog.SelectedPath = Path.GetFullPath(&quot;.&quot;); </span></span><br><span class="line">            fileDialog.DefaultExt = <span class="string">&quot;.cs&quot;</span>; <span class="comment">//筛选展示 .cs后缀文件</span></span><br><span class="line">            fileDialog.Filter = <span class="string">&quot;代码|*.cs;*.config&quot;</span>; <span class="comment">//设置文件选择器</span></span><br><span class="line">            <span class="keyword">if</span> (fileDialog.ShowDialog() == DialogResult.OK)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//获取并设置文件路径名称到主窗体</span></span><br><span class="line">                <span class="built_in">string</span> fileName = fileDialog.FileName;</span><br><span class="line">                <span class="keyword">this</span>.textBox1.Text = fileName;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//保存文件按钮 点击事件</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button2_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            SaveFileDialog dlg = <span class="keyword">new</span> SaveFileDialog();</span><br><span class="line">            dlg.FileName = <span class="string">&quot;新的文本文件&quot;</span>;</span><br><span class="line">            dlg.DefaultExt = <span class="string">&quot;.txt&quot;</span>;</span><br><span class="line">            dlg.Filter = <span class="string">&quot;文本|*.txt;*.doc&quot;</span>;</span><br><span class="line">     </span><br><span class="line">            <span class="keyword">if</span> (dlg.ShowDialog() == DialogResult.OK)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">string</span> fileName = dlg.FileName;</span><br><span class="line">                <span class="keyword">this</span>.textBox1.Text = fileName;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//选择文件夹按钮 点击事件</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button3_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            FolderBrowserDialog dlg = <span class="keyword">new</span> FolderBrowserDialog();</span><br><span class="line">            dlg.SelectedPath = Path.GetFullPath(<span class="string">&quot;.&quot;</span>);<span class="comment">//返回当前文件夹的绝对路径字符串</span></span><br><span class="line">            <span class="keyword">if</span> (dlg.ShowDialog() == DialogResult.OK)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">string</span> path = dlg.SelectedPath;</span><br><span class="line">                <span class="keyword">this</span>.textBox1.Text = path;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/cca83964afdc48ab97332326c7749a58.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Zi_6Zi_6Zi_5a6J,size_20,color_FFFFFF,t_70,g_se,x_16"><h2 id="2-系统对话框练习-图片查看器"><a href="#2-系统对话框练习-图片查看器" class="headerlink" title="2.系统对话框练习-图片查看器"></a>2.系统对话框练习-图片查看器</h2><blockquote><p>设计一个图片查看器窗口，可以在主窗体中选择浏览目录路径，选择后将该目录下的所有图片名称加载到主窗口左侧的列表栏，用户通过点击列表栏的图片名称可以切换显示相应的图片在主窗口右侧的图片展示区。</p></blockquote><p><strong>（1）界面设计</strong></p><blockquote><p>主窗体中用到了一个自定义文本框AfTextBox，可以自由拉伸。同时有一个浏览按钮放置在其右侧，可以打开文件目录浏览窗口。主窗体还包括一个列表框，用于显示图片名称列表；除此之外还有一个图片框，用于展示指定路径图片。</p></blockquote><img src="https://img-blog.csdnimg.cn/1039edaa9f9441208c566fb1528d3c4b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Zi_6Zi_6Zi_5a6J,size_17,color_FFFFFF,t_70,g_se,x_16"><p><strong>（2） 自定义对话框AfTextBox单文件开发</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">WindowsFormsApp_Demo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">AfTextBox</span>:<span class="title">UserControl</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> TextBox edit;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">InitializeComponent</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">this</span>.edit = <span class="keyword">new</span> System.Windows.Forms.TextBox();</span><br><span class="line">            <span class="keyword">this</span>.SuspendLayout();</span><br><span class="line">            <span class="comment">// </span></span><br><span class="line">            <span class="comment">// edit</span></span><br><span class="line">            <span class="comment">// </span></span><br><span class="line">            <span class="keyword">this</span>.edit.BorderStyle = System.Windows.Forms.BorderStyle.None;</span><br><span class="line">            <span class="keyword">this</span>.edit.Font = <span class="keyword">new</span> System.Drawing.Font(<span class="string">&quot;宋体&quot;</span>, <span class="number">12F</span>, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((<span class="built_in">byte</span>)(<span class="number">134</span>)));</span><br><span class="line">            <span class="keyword">this</span>.edit.Location = <span class="keyword">new</span> System.Drawing.Point(<span class="number">52</span>, <span class="number">52</span>);</span><br><span class="line">            <span class="keyword">this</span>.edit.Name = <span class="string">&quot;edit&quot;</span>;</span><br><span class="line">            <span class="keyword">this</span>.edit.Size = <span class="keyword">new</span> System.Drawing.Size(<span class="number">89</span>, <span class="number">19</span>);</span><br><span class="line">            <span class="keyword">this</span>.edit.TabIndex = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">this</span>.edit.KeyPress += <span class="keyword">new</span> System.Windows.Forms.KeyPressEventHandler(<span class="keyword">this</span>.onTextPressed);</span><br><span class="line">            <span class="comment">// </span></span><br><span class="line">            <span class="comment">// AfTextBox</span></span><br><span class="line">            <span class="comment">// </span></span><br><span class="line">            <span class="keyword">this</span>.BackColor = System.Drawing.Color.White;</span><br><span class="line">            <span class="keyword">this</span>.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;</span><br><span class="line">            <span class="keyword">this</span>.Controls.Add(<span class="keyword">this</span>.edit);</span><br><span class="line">            <span class="keyword">this</span>.Name = <span class="string">&quot;AfTextBox&quot;</span>;</span><br><span class="line">            <span class="keyword">this</span>.Size = <span class="keyword">new</span> System.Drawing.Size(<span class="number">199</span>, <span class="number">105</span>);</span><br><span class="line">            <span class="keyword">this</span>.ResumeLayout(<span class="literal">false</span>);</span><br><span class="line">            <span class="keyword">this</span>.PerformLayout();</span><br><span class="line">     </span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">AfTextBox</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnLayout</span>(<span class="params">LayoutEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">base</span>.OnLayout(e);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.Controls.Count == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">            Control c = <span class="keyword">this</span>.Controls[<span class="number">0</span>];</span><br><span class="line">     </span><br><span class="line">            <span class="built_in">int</span> w = <span class="keyword">this</span>.Width, h = <span class="keyword">this</span>.Height;</span><br><span class="line">            <span class="built_in">int</span> x = <span class="number">0</span>, y = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">int</span> left = <span class="keyword">this</span>.Padding.Left, right = <span class="keyword">this</span>.Padding.Right;</span><br><span class="line">            w -= (left + right);</span><br><span class="line">            x += left;</span><br><span class="line">            <span class="comment">//PreferredSize获取控件矩形容器框的大小</span></span><br><span class="line">            <span class="comment">//原因是文本框为单行输入，没法调节高度！但是外部矩形容器可以</span></span><br><span class="line">            <span class="built_in">int</span> h2 = c.PreferredSize.Height;</span><br><span class="line">            <span class="keyword">if</span> (h2 &gt; h) h2 = h;</span><br><span class="line">            y  += (h - h2) / <span class="number">2</span>;</span><br><span class="line">     </span><br><span class="line">            c.Location = <span class="keyword">new</span> Point(x, y);</span><br><span class="line">            c.Size = <span class="keyword">new</span> Size(w, h2);</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">        [<span class="meta">Browsable(true)</span>]</span><br><span class="line">        [<span class="meta">DesignerSerializationVisibility(DesignerSerializationVisibility.Visible)</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> Text &#123;</span><br><span class="line">            <span class="keyword">set</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>.edit.Text = <span class="keyword">value</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.edit.Text;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">        [<span class="meta">Browsable(true)</span>]</span><br><span class="line">        [<span class="meta">DesignerSerializationVisibility(DesignerSerializationVisibility.Visible)</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">override</span> Color BackColor</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.edit.BackColor;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">set</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>.edit.BackColor = <span class="keyword">value</span>;</span><br><span class="line">                <span class="comment">//此处是base!!!!不是this!!!</span></span><br><span class="line">                <span class="keyword">base</span>.BackColor = <span class="keyword">value</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">        [<span class="meta">Browsable(true)</span>]</span><br><span class="line">        [<span class="meta">DesignerSerializationVisibility(DesignerSerializationVisibility.Visible)</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">override</span> Color ForeColor</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> edit.ForeColor;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">set</span></span><br><span class="line">            &#123;</span><br><span class="line">                edit.ForeColor = <span class="keyword">value</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">        [<span class="meta">Browsable(true)</span>]</span><br><span class="line">        [<span class="meta">DesignerSerializationVisibility(DesignerSerializationVisibility.Visible)</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">bool</span> ReadOnly</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.edit.ReadOnly;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">set</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>.edit.ReadOnly = <span class="keyword">value</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">event</span> EventHandler ReturnPressed;</span><br><span class="line">     </span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">onTextPressed</span>(<span class="params"><span class="built_in">object</span> sender, KeyPressEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="built_in">char</span> ch = e.KeyChar;</span><br><span class="line">            <span class="keyword">if</span> (ch == <span class="string">&#x27;\r&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ReturnPressed?.Invoke(<span class="keyword">this</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>（3）主窗体Form.cs逻辑代码</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">WindowsFormsApp_Demo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Form1</span> : <span class="title">Form</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Form1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//浏览按钮 点击事件</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">onScanClick</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            FolderBrowserDialog dlg = <span class="keyword">new</span> FolderBrowserDialog();</span><br><span class="line">            <span class="keyword">if</span>(dlg.ShowDialog() == DialogResult.OK)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">string</span> path = dlg.SelectedPath;</span><br><span class="line">                <span class="keyword">this</span>.afTextbox.Text = path;</span><br><span class="line">                <span class="comment">// 加载图片列表</span></span><br><span class="line">                ShowPictureList(path);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ShowPictureList</span>(<span class="params"><span class="built_in">string</span> dir</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">// 清空显示</span></span><br><span class="line">            listFile.Items.Clear();</span><br><span class="line">            <span class="comment">// 遍历所有的文件，检查文件名后缀</span></span><br><span class="line">            <span class="built_in">string</span>[] files = Directory.GetFiles(dir);</span><br><span class="line">            <span class="keyword">foreach</span>(<span class="built_in">string</span> f <span class="keyword">in</span> files)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (f.EndsWith(<span class="string">&quot;.jpg&quot;</span>) || f.EndsWith(<span class="string">&quot;.png&quot;</span>) || f.EndsWith(<span class="string">&quot;.jpeg&quot;</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 取得文件名</span></span><br><span class="line">                    PictureListItem item = <span class="keyword">new</span> PictureListItem();</span><br><span class="line">                    item.name = Path.GetFileName(f);</span><br><span class="line">                    item.filePath = f;</span><br><span class="line">                    <span class="comment">//Console.WriteLine(&quot;name:&quot; + f + &quot;,path:&quot; + item.filePath);</span></span><br><span class="line">                    <span class="comment">// 加到列表框显示</span></span><br><span class="line">                    <span class="keyword">this</span>.listFile.Items.Add(item);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 默认打开第一个文件显示（手动SetSelect也会触发IndexChanged事件）</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (listFile.Items.Count &gt; <span class="number">0</span>)</span><br><span class="line">                listFile.SetSelected(<span class="number">0</span>, <span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">listFile_SelectedIndexChanged</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            PictureListItem item = (PictureListItem)listFile.SelectedItem;</span><br><span class="line">            <span class="keyword">if</span> (item == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">            <span class="comment">//加载图片</span></span><br><span class="line">            pathPic.Load(item.filePath);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">// 文件项</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title">PictureListItem</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> filePath;</span><br><span class="line">     </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="五-菜单栏和工具栏"><a href="#五-菜单栏和工具栏" class="headerlink" title="五.菜单栏和工具栏"></a>五.菜单栏和工具栏</h1><blockquote><p>1.菜单栏 MenuStrip：窗口顶部停靠菜单栏<br>（1）使用：设计界面可视化设计，可以添加菜单项、下拉框、分割线、文本<br>（2）属性：每个Item都可以设置ID、Text、Image（图标）、点击事件Click<br>2.工具栏 ToolStrip：窗口顶部停靠工具栏，一般位于菜单栏下方（图标栏）<br>（1）使用：设计界面可视化设计，可以添加工具按钮、分割线等。一般窗口上方第一排为菜单栏，第二排为工具栏，二者对应<br>（2）属性：每个Item都可以设置ID、Image（图标）、点击事件Click等<br>（3）开发技巧：工具栏与菜单栏一般具有对应关系，每个菜单都有对应的工具图标按钮，二者的点击回调事件可以共用。在事件中点击下拉箭头-&gt;选择菜单栏设置的事件即可<br>3.右键菜单（上下文菜单）： ContextMenuStrip<br>（1）定义：在窗口不同部位右键显示的菜单栏应该具有不同的选项，一般项目中菜单栏和工具栏可能没有，但是右键菜单是一定具有的！<br>（2）使用：<br>        - 在设计界面添加 ContextMenuStrip上下文菜单，并添加菜单项。但此时仅是对上下文菜单进行了定义和声明，右键还不能显示<br>        - 设置界面或者控件的鼠标点击事件MouseUp&#x2F;MouseDown，在事件中展示菜单ContextMenuStrip.show(展示控件,展示位置)<br>        - 进一步，我们希望在listBox中，右键item的时候显示编辑和删除，而右键空白位置只显示添加，才符合我们的逻辑（不同的逻辑展示不同的右键菜单内容）<br>        - 设置菜单项点击事件</p></blockquote><p><strong>（1）界面设计</strong></p><img src="https://img-blog.csdnimg.cn/a7f515adc47e4248bb68407c98c2f04a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Zi_6Zi_6Zi_5a6J,size_20,color_FFFFFF,t_70,g_se,x_16"><p><strong>（2）Form.cs逻辑代码</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">WindowsFormsApp_learning</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Form5</span> : <span class="title">Form</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Form5</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//工具栏Item 点击事件</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">void</span> 打开ToolStripMenuItem_Click(<span class="built_in">object</span> sender, EventArgs e)</span><br><span class="line">        &#123;</span><br><span class="line">            MessageBox.Show(<span class="string">&quot;点击了打开...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//listBox 列表控件 点击事件</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">listBox1_MouseDown</span>(<span class="params"><span class="built_in">object</span> sender, MouseEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//如果是鼠标右键点击了，才触发右键菜单</span></span><br><span class="line">            <span class="keyword">if</span>(e.Button == MouseButtons.Right)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//IndexFromPoint:返回从指定位置处开始的第一个Item索引</span></span><br><span class="line">                <span class="comment">//e.Location:鼠标点击的位置Point</span></span><br><span class="line">                <span class="built_in">int</span> index = listBox1.IndexFromPoint(e.Location);</span><br><span class="line">                <span class="comment">//如果index&gt;=0，则说明右键了某个Item项而不是空白位置</span></span><br><span class="line">                <span class="keyword">if</span> (index &gt;= <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//要显示/允许选择 编辑/删除项</span></span><br><span class="line">                    listBox1.SetSelected(index, <span class="literal">true</span>);<span class="comment">//选中该项</span></span><br><span class="line">                    Item_Edit.Enabled = <span class="literal">true</span>;<span class="comment">//右键菜单项设置允许点击</span></span><br><span class="line">                    Item_Del.Enabled = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//清空选择，不显示/禁用编辑/删除</span></span><br><span class="line">                    listBox1.ClearSelected();<span class="comment">//清空</span></span><br><span class="line">                    Item_Edit.Enabled = <span class="literal">false</span>;<span class="comment">//禁用</span></span><br><span class="line">                    Item_Del.Enabled = <span class="literal">false</span>;</span><br><span class="line">     </span><br><span class="line">                    <span class="comment">//Item_Edit.Visible = false;//直接不显示该项</span></span><br><span class="line">                    <span class="comment">//Item_Del.Visible = false;</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">this</span>.contextMenu.Show(listBox1, e.Location);<span class="comment">//显示右键菜单</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//右键菜单项[添加] 点击事件</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Item_Add_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            MessageBox.Show(<span class="string">&quot;上下文菜单:选择了添加...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="六-列表视图控件-ListView"><a href="#六-列表视图控件-ListView" class="headerlink" title="六.列表视图控件 ListView"></a>六.列表视图控件 ListView</h1><h2 id="1-ListView基本使用"><a href="#1-ListView基本使用" class="headerlink" title="1.ListView基本使用"></a>1.ListView基本使用</h2><blockquote><p>1.列表控件ListView：升级版的ListBox，其显示类似于windows的文件夹视图<br>（1）特点：列表显示模式可以切换（详情、大图标、小图标），可以多字段显示，可以设置图标、标签可以编辑，每列可以排序，可以自定义设计<br>（2）控件基本属性：View（显示模式）、Columns（集合，列头名称）、Items（集合，列表中的项）、Items.SubTetms（集合，列表中每项的子项-其他列显示的数据）、LabelEdit（是否允许用户就地编辑标签）、LargeImageList（大图标列表）、SmallImageList（小图标列表）、Sorting（排序方式）等<br>（3）简单使用步骤：<br>        - 在设计界面将ListView拖入，并设置Dock为占满（接下来可以在设计界面进行可视化设计，也可以通过代码来添加设计数据项）<br>        - 代码方式设计ListView（推荐）:<br>                a.设置显示方式<br>                b.设置列名<br>                c.添加数据项<br>                d.设置每个数据项的子项数据<br>        - 推荐使用代码方式添加数据的原因：很多时候我们并不知道要遍历的项有多少，所以不能提前设计好。只能通过代码方式动态添加</p></blockquote><p><strong>（1）ListView基本用法展示</strong> </p><blockquote><p>界面设计非常简单，就是拖入一个ListView控件，并设置Dock为Fill填充满父容器，无其他控件，这里就不再展示设计界面了。基本用法主要展示如何在ListView中使用代码方式添加列名、数据项等。</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">WindowsFormsApp_learning2</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Form1</span> : <span class="title">Form</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Form1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">            <span class="comment">//初始化ListView控件</span></span><br><span class="line">            InitializeListView();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">InitializeListView</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//1.设置显示模式为详情模式：显示图标+主项+所有子项</span></span><br><span class="line">            listView1.View = View.Details;</span><br><span class="line">            <span class="comment">// 设置整行选中（选中某一项的时候选中整行，而不只是主项）</span></span><br><span class="line">            listView1.FullRowSelect = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">//2.设置列名Add(列名,宽度[像素值],对齐方式)</span></span><br><span class="line">            <span class="comment">// 宽度值-2表示自动调整宽度</span></span><br><span class="line">            listView1.Columns.Add(<span class="string">&quot;文件名&quot;</span>,<span class="number">-2</span>,HorizontalAlignment.Left);</span><br><span class="line">            listView1.Columns.Add(<span class="string">&quot;修改时期&quot;</span>, <span class="number">150</span>, HorizontalAlignment.Left);</span><br><span class="line">            listView1.Columns.Add(<span class="string">&quot;类型&quot;</span>, <span class="number">100</span>, HorizontalAlignment.Left);</span><br><span class="line">            listView1.Columns.Add(<span class="string">&quot;大小&quot;</span>, <span class="number">-2</span>, HorizontalAlignment.Left);</span><br><span class="line">            <span class="comment">//3.添加数据项 ListViewItem(数据名称,图标下标)</span></span><br><span class="line">            ListViewItem item1 = <span class="keyword">new</span> ListViewItem(<span class="string">&quot;Java学习指南.pdf&quot;</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="comment">//4.设置子项数据(对应每列的数据)</span></span><br><span class="line">            item1.SubItems.Add(<span class="string">&quot;2020-2-20 12:10&quot;</span>);</span><br><span class="line">            item1.SubItems.Add(<span class="string">&quot;PDF&quot;</span>);</span><br><span class="line">            item1.SubItems.Add(<span class="string">&quot;192 KB&quot;</span>);</span><br><span class="line">            listView1.Items.Add(item1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/ce9968f28aac4cb4af489bbb7fd4b635.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Zi_6Zi_6Zi_5a6J,size_20,color_FFFFFF,t_70,g_se,x_16"><p><strong>（2）ListView基本使用小练习：本地文件目录列表展示</strong></p><blockquote><p><strong>2.ListView控件高级使用：本地文件可视化</strong><br>（1）在设计界面，将ListView控件拖入，并设置Dock为填充Fill<br>（2）添加数据项图标的图片资源到Resources<br>（3）在代码中初始化ListView基本配置，包括列名、显示模式、图标列表等。 InitListView()</p></blockquote><img src="https://img-blog.csdnimg.cn/9cfa5f7676af467cae628c8a9339967a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Zi_6Zi_6Zi_5a6J,size_20,color_FFFFFF,t_70,g_se,x_16"><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">WindowsFormsApp_learning2</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Form2</span> : <span class="title">Form</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Form2</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">            <span class="comment">//初始化ListView控件</span></span><br><span class="line">            InitListView();</span><br><span class="line">            <span class="comment">//加载添加文件数据项</span></span><br><span class="line">            LoadDir(<span class="keyword">new</span> DirectoryInfo(<span class="string">&quot;D:\\&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">        <span class="comment">//1.初始化ListView控件</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">InitListView</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//设置显示模式为详情模式</span></span><br><span class="line">            listView1.View = View.Details;</span><br><span class="line">            <span class="comment">//设置整行选中</span></span><br><span class="line">            listView1.FullRowSelect = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">//设置列名</span></span><br><span class="line">            listView1.Columns.Add(<span class="string">&quot;名称&quot;</span>, <span class="number">-2</span>, HorizontalAlignment.Left);</span><br><span class="line">            listView1.Columns.Add(<span class="string">&quot;修改时间&quot;</span>, <span class="number">150</span>, HorizontalAlignment.Left);</span><br><span class="line">            listView1.Columns.Add(<span class="string">&quot;类型&quot;</span>, <span class="number">100</span>, HorizontalAlignment.Left);</span><br><span class="line">            listView1.Columns.Add(<span class="string">&quot;大小&quot;</span>, <span class="number">-2</span>, HorizontalAlignment.Left);</span><br><span class="line">            <span class="comment">//创建ImageList（提供一些方法，来管理一些列图片资源的列表类），并添加2个小图标</span></span><br><span class="line">            ImageList imgList = <span class="keyword">new</span> ImageList();</span><br><span class="line">            imgList.ImageSize = <span class="keyword">new</span> Size(<span class="number">16</span>, <span class="number">16</span>);<span class="comment">//设置列表中图片的大小</span></span><br><span class="line">            imgList.Images.Add(Properties.Resources.Icon_file);<span class="comment">//事先添加到Resources的图标</span></span><br><span class="line">            imgList.Images.Add(Properties.Resources.Icon_folder);</span><br><span class="line">            <span class="comment">// 设置 SmallImageList 用于显示小图标（适用于小图标、详情、列表模式显示图标）</span></span><br><span class="line">            <span class="comment">// 设置 LargeImageList 用于显示大图标（适用于大图标模式显示图标）</span></span><br><span class="line">            listView1.SmallImageList = imgList;</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">        <span class="comment">//2.遍历本地资源，获取文件或目录</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">LoadDir</span>(<span class="params">DirectoryInfo dir</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">// 加载优化：BeginUpdate()+EndUpdate()，该方法指明内部的程序全部执行完后才进行一次总更新，而不是每Add一项就更新一次。（避免频繁刷新）</span></span><br><span class="line">            <span class="comment">// listView1.BeginUpdate();</span></span><br><span class="line">     </span><br><span class="line">            <span class="comment">// 获取[子目录]列表</span></span><br><span class="line">            DirectoryInfo[] subDirs = dir.GetDirectories();</span><br><span class="line">            <span class="keyword">foreach</span> (DirectoryInfo d <span class="keyword">in</span> subDirs)</span><br><span class="line">            &#123;           </span><br><span class="line">                <span class="comment">//如果该目录是隐藏文件，则跳过</span></span><br><span class="line">                <span class="keyword">if</span> ((d.Attributes &amp; FileAttributes.Hidden) &gt; <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="comment">//否则就添加到ListVie中显示（目录名称，最新修改时间，数据项类型，文件大小）</span></span><br><span class="line">                AddListItem(d.Name, d.LastWriteTime, <span class="string">&quot;文件夹&quot;</span>, <span class="number">-1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 获取[子文件]列表</span></span><br><span class="line">            FileInfo[] subFiles = dir.GetFiles();</span><br><span class="line">            <span class="keyword">foreach</span> (FileInfo f <span class="keyword">in</span> subFiles)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//如果该文件是隐藏文件，则跳过</span></span><br><span class="line">                <span class="keyword">if</span> ((f.Attributes &amp; FileAttributes.Hidden) &gt; <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="built_in">string</span> ext = f.Extension.ToUpper(); <span class="comment">// 获取文件拓展名后缀（.zip、.png、.doc等）</span></span><br><span class="line">                <span class="comment">//否则就添加到ListVie中显示（文件名称，最新修改时间，文件后缀类型，文件大小）</span></span><br><span class="line">                AddListItem(f.Name, f.LastWriteTime, ext, f.Length);</span><br><span class="line">            &#125;</span><br><span class="line">     </span><br><span class="line">            <span class="comment">// listView1.EndUpdate();</span></span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">        <span class="comment">//3，将文件和目录按照不同类型添加到ListView数据项</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">AddListItem</span>(<span class="params"><span class="built_in">string</span> label, DateTime time, <span class="built_in">string</span> type, <span class="built_in">long</span> size</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">// 判断是文件还是文件夹，使用不同的图标</span></span><br><span class="line">            <span class="built_in">int</span> imageIndex = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (!type.Equals(<span class="string">&quot;文件夹&quot;</span>)) imageIndex = <span class="number">1</span>;</span><br><span class="line">     </span><br><span class="line">            ListViewItem item = <span class="keyword">new</span> ListViewItem(label, imageIndex);<span class="comment">//imageIndex会去listView下的SmallImageList找图标</span></span><br><span class="line">     </span><br><span class="line">            <span class="comment">// 添加子项 - 时间</span></span><br><span class="line">            item.SubItems.Add(time.ToString(<span class="string">&quot;yyyy-MM-dd HH:mm&quot;</span>));</span><br><span class="line">            <span class="comment">// 添加子项 - 类型</span></span><br><span class="line">            item.SubItems.Add(type);</span><br><span class="line">            <span class="comment">// 添加子项 - 文件大小</span></span><br><span class="line">            <span class="built_in">string</span> sizeStr = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span> (size &lt; <span class="number">0</span>)</span><br><span class="line">                sizeStr = <span class="string">&quot;&quot;</span>; <span class="comment">// 文件夹不显示大小</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (size &lt; <span class="number">1000</span>)</span><br><span class="line">                sizeStr = <span class="string">&quot;&quot;</span> + size;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (size &lt; <span class="number">1000000</span>)</span><br><span class="line">                sizeStr = size / <span class="number">1000</span> + <span class="string">&quot; KB&quot;</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (size &lt; <span class="number">1000000000</span>)</span><br><span class="line">                sizeStr = size / <span class="number">1000000</span> + <span class="string">&quot; MB&quot;</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                sizeStr = size / <span class="number">1000000000</span> + <span class="string">&quot; GB&quot;</span>;</span><br><span class="line">     </span><br><span class="line">            item.SubItems.Add(sizeStr);</span><br><span class="line">     </span><br><span class="line">            listView1.Items.Add(item);</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-ListView模式切换"><a href="#2-ListView模式切换" class="headerlink" title="2.ListView模式切换"></a>2.ListView模式切换</h2><blockquote><p>3.ListView控件：模式切换（切换详情、列表、大图标、小图标模式显示）<br>（1）设计要求：在上节内容文件目录展示案例的基础上，实现右键菜单切换显示模式<br>（2）开发流程：<br>        - 在设计界面，拖入ListView控件，并设置Dock为充满Fill<br>        - 在代码中初始化ListView控件列名、[大图标列表]、[小图标列表]等（因为大图标模式和小图标模式需要使用两套图标）<br>        - 加载遍历文件和目录，并添加数据项Item<br>        - 在设计界面拖入ContextMenu控件，并设置ListView的MouseUp点击事件，显示右键菜单<br>        - 右键菜单实现切换模式功能</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">WindowsFormsApp_learning2</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Form3</span> : <span class="title">Form</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Form3</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">            <span class="comment">//1.初始化ListView控件</span></span><br><span class="line">            InitListView();</span><br><span class="line">            <span class="comment">//2.载入文件和目录</span></span><br><span class="line">            LoadDir(<span class="keyword">new</span> DirectoryInfo(<span class="string">&quot;D:\\&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">        <span class="comment">//1.初始化ListView控件</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">InitListView</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            listView1.View = View.Details;</span><br><span class="line">            listView1.FullRowSelect = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">//设置列名</span></span><br><span class="line">            listView1.Columns.Add(<span class="string">&quot;名称&quot;</span>, <span class="number">-2</span>, HorizontalAlignment.Left);</span><br><span class="line">            listView1.Columns.Add(<span class="string">&quot;修改时间&quot;</span>, <span class="number">150</span>, HorizontalAlignment.Left);</span><br><span class="line">            listView1.Columns.Add(<span class="string">&quot;类型&quot;</span>, <span class="number">100</span>, HorizontalAlignment.Left);</span><br><span class="line">            listView1.Columns.Add(<span class="string">&quot;大小&quot;</span>, <span class="number">-2</span>, HorizontalAlignment.Left);</span><br><span class="line">            <span class="comment">//*创建SmallImageList 小图标列表（用于Detail、SmallIcon等模式里显示小图标）</span></span><br><span class="line">            ImageList smallImgList = <span class="keyword">new</span> ImageList();</span><br><span class="line">            smallImgList.ImageSize = <span class="keyword">new</span> Size(<span class="number">16</span>, <span class="number">16</span>);<span class="comment">//设置列表中图片的大小</span></span><br><span class="line">            smallImgList.Images.Add(Properties.Resources.Icon_file);</span><br><span class="line">            smallImgList.Images.Add(Properties.Resources.Icon_folder);</span><br><span class="line">            listView1.SmallImageList = smallImgList;</span><br><span class="line">            <span class="comment">//*创建LargeImageList 大图标列表（用于LargeIcon模式里显示大图标）</span></span><br><span class="line">            ImageList largeImgList = <span class="keyword">new</span> ImageList();</span><br><span class="line">            largeImgList.ImageSize = <span class="keyword">new</span> Size(<span class="number">64</span>, <span class="number">64</span>);<span class="comment">//设置列表中图片的大小</span></span><br><span class="line">            largeImgList.Images.Add(Properties.Resources.Icon_file2);</span><br><span class="line">            largeImgList.Images.Add(Properties.Resources.Icon_folder2);</span><br><span class="line">            listView1.LargeImageList = largeImgList;</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">        <span class="comment">//2.加载数据项：遍历文件和目录，按照不同类型添加数据项Item及其子项</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">LoadDir</span>(<span class="params">DirectoryInfo dir</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">           listView1.BeginUpdate();</span><br><span class="line">     </span><br><span class="line">            <span class="comment">// 获取[子目录]列表</span></span><br><span class="line">            DirectoryInfo[] subDirs = dir.GetDirectories();</span><br><span class="line">            <span class="keyword">foreach</span> (DirectoryInfo d <span class="keyword">in</span> subDirs)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> ((d.Attributes &amp; FileAttributes.Hidden) &gt; <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">                AddListItem(d.Name, d.LastWriteTime, <span class="string">&quot;文件夹&quot;</span>, <span class="number">-1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 获取[子文件]列表</span></span><br><span class="line">            FileInfo[] subFiles = dir.GetFiles();</span><br><span class="line">            <span class="keyword">foreach</span> (FileInfo f <span class="keyword">in</span> subFiles)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> ((f.Attributes &amp; FileAttributes.Hidden) &gt; <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="built_in">string</span> ext = f.Extension.ToUpper();<span class="comment">//文件后缀名</span></span><br><span class="line">                AddListItem(f.Name, f.LastWriteTime, ext, f.Length);</span><br><span class="line">            &#125;</span><br><span class="line">     </span><br><span class="line">           listView1.EndUpdate();</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">        <span class="comment">//3，将文件和目录按照不同类型添加到ListView数据项</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">AddListItem</span>(<span class="params"><span class="built_in">string</span> label, DateTime time, <span class="built_in">string</span> type, <span class="built_in">long</span> size</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">// 判断是文件还是文件夹，使用不同的图标</span></span><br><span class="line">            <span class="built_in">int</span> imageIndex = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (!type.Equals(<span class="string">&quot;文件夹&quot;</span>)) imageIndex = <span class="number">1</span>;</span><br><span class="line">            ListViewItem item = <span class="keyword">new</span> ListViewItem(label, imageIndex);</span><br><span class="line">            <span class="comment">// 添加子项 - 时间</span></span><br><span class="line">            item.SubItems.Add(time.ToString(<span class="string">&quot;yyyy-MM-dd HH:mm&quot;</span>));</span><br><span class="line">            <span class="comment">// 添加子项 - 类型</span></span><br><span class="line">            item.SubItems.Add(type);</span><br><span class="line">            <span class="comment">// 添加子项 - 文件大小</span></span><br><span class="line">            <span class="built_in">string</span> sizeStr = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span> (size &lt; <span class="number">0</span>)</span><br><span class="line">                sizeStr = <span class="string">&quot;&quot;</span>; <span class="comment">// 文件夹不显示大小</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (size &lt; <span class="number">1000</span>)</span><br><span class="line">                sizeStr = <span class="string">&quot;&quot;</span> + size;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (size &lt; <span class="number">1000000</span>)</span><br><span class="line">                sizeStr = size / <span class="number">1000</span> + <span class="string">&quot; KB&quot;</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (size &lt; <span class="number">1000000000</span>)</span><br><span class="line">                sizeStr = size / <span class="number">1000000</span> + <span class="string">&quot; MB&quot;</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                sizeStr = size / <span class="number">1000000000</span> + <span class="string">&quot; GB&quot;</span>;</span><br><span class="line">     </span><br><span class="line">            item.SubItems.Add(sizeStr);</span><br><span class="line">            listView1.Items.Add(item);</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">        <span class="comment">//4.ListView添加MouseUp点击事件：显示右键菜单（菜单中默认选中当前的显示模式）</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">listView1_MouseUp</span>(<span class="params"><span class="built_in">object</span> sender, MouseEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">if</span>(e.Button == MouseButtons.Right)</span><br><span class="line">            &#123;</span><br><span class="line">                View view = listView1.View;</span><br><span class="line">                <span class="comment">//根据显示模式，设置右键菜单的选中项</span></span><br><span class="line">                menuDetail_Item.Checked = (view == View.Details);</span><br><span class="line">                menuList_Item.Checked = (view == View.List);</span><br><span class="line">                menuLarge_Item.Checked = (view == View.LargeIcon);</span><br><span class="line">                menuSmall_Item.Checked = (view == View.SmallIcon);</span><br><span class="line">                <span class="comment">//显示右键菜单(在鼠标右键位置e.Location)</span></span><br><span class="line">                contextMenuStrip.Show(listView1, e.Location);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.设置右键菜单的点击事件：切换显示模式</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">menuDetail_Item_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            listView1.View = View.Details;</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">menuList_Item_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            listView1.View = View.List;</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">menuLarge_Item_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            listView1.View = View.LargeIcon;</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">menuSmall_Item_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            listView1.View = View.SmallIcon;</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/4edbc379dfb7438b85ddbbdf350d4740.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Zi_6Zi_6Zi_5a6J,size_20,color_FFFFFF,t_70,g_se,x_16"><img src="https://img-blog.csdnimg.cn/f7175d415dfb4b61a05844db3246cfdb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Zi_6Zi_6Zi_5a6J,size_20,color_FFFFFF,t_70,g_se,x_16"><h2 id="3-ListView数据项列排序"><a href="#3-ListView数据项列排序" class="headerlink" title="3.ListView数据项列排序"></a>3.ListView数据项列排序</h2><blockquote><p><strong>4.ListView的列排序实现：点击每一列可以实现升序&#x2F;降序排序(此处只以第0列为例)</strong><br>（1）编码步骤（在文件目录展示案例的基础上）：<br>        - 添加箭头图标资源，表示升序和降序标识<br>        - 将图标加入SmallImageList，其中Images.Add (key, image ) 表示添加一个图像image，并关联一个key值。后面可以根据key值获取此图片。<br>        - 添加数据项Tag：每个ListView可以关联一个Tag，一般为一个对象。用于排序的时候便于直接使用对象做比较<br>        - 定义比较器MyListItemSorter，实现绑定Tag对象的自定义排序<br>        - 添加列的点击事件：ColumnClick 切换升序&#x2F;降序</p></blockquote><p><strong>（1）自定义Tag对象，封装信息</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">WindowsFormsApp_learning2</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 每个列表项关联的Tag数据</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title">MyListItemTag</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> type = <span class="number">0</span>; <span class="comment">//类型：文件夹0, 文件1 </span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> path;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line">        <span class="keyword">public</span> DateTime time;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">long</span> size = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> ext; <span class="comment">// 显示文件后缀/文件夹</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyListItemTag</span>(<span class="params"><span class="built_in">int</span> type, <span class="built_in">string</span> path, <span class="built_in">string</span> name, DateTime time, <span class="built_in">long</span> size, <span class="built_in">string</span> ext</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">this</span>.type = type;</span><br><span class="line">            <span class="keyword">this</span>.path = path;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">this</span>.time = time;</span><br><span class="line">            <span class="keyword">this</span>.size = size;</span><br><span class="line">            <span class="keyword">this</span>.ext = ext;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>（2）自定义比较器，实现对象排序（传入两个Tag对象）</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">WindowsFormsApp_learning2</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//继承IComparer接口，实现对象比较方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyListItemSorter</span> : <span class="title">IComparer</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">bool</span> asc = <span class="literal">true</span>;<span class="comment">//是否升序排序</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyListItemSorter</span>(<span class="params"><span class="built_in">bool</span> asc</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">this</span>.asc = asc;</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">Compare</span>(<span class="params"><span class="built_in">object</span> x, <span class="built_in">object</span> y</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//按列排序时，传入的是两个ListViewItem对象</span></span><br><span class="line">            ListViewItem item1 = (ListViewItem)x;</span><br><span class="line">            ListViewItem item2 = (ListViewItem)y;</span><br><span class="line">     </span><br><span class="line">            <span class="comment">// Tag: 每一项关联的数据</span></span><br><span class="line">            MyListItemTag tag1 = (MyListItemTag)item1.Tag;</span><br><span class="line">            MyListItemTag tag2 = (MyListItemTag)item2.Tag;</span><br><span class="line">     </span><br><span class="line">            <span class="comment">// 目录在前, 文件在后</span></span><br><span class="line">            <span class="keyword">if</span> (tag1.type != tag2.type)</span><br><span class="line">                <span class="keyword">return</span> CompareInt(<span class="literal">true</span>, tag1.type, tag2.type);</span><br><span class="line">     </span><br><span class="line">            <span class="comment">// 按名字比较</span></span><br><span class="line">            <span class="keyword">return</span> CompareStringIgnoreCase(asc, tag1.name, tag2.name);</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">        <span class="comment">// 两个 Bool 值的比较</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">CompareBool</span>(<span class="params"><span class="built_in">bool</span> asc, <span class="built_in">bool</span> x, <span class="built_in">bool</span> y</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="built_in">int</span> xx = x ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">int</span> yy = y ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> CompareInt(asc, xx, yy);</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">        <span class="comment">// 两个 Int 值的比较</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">CompareInt</span>(<span class="params"><span class="built_in">bool</span> asc, <span class="built_in">int</span> x, <span class="built_in">int</span> y</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">if</span> (asc)</span><br><span class="line">                <span class="keyword">return</span> x - y;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> y - x;</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">        <span class="comment">// 两个String值的比较</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">CompareString</span>(<span class="params"><span class="built_in">bool</span> asc, <span class="built_in">string</span> x, <span class="built_in">string</span> y</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">if</span> (asc)</span><br><span class="line">                <span class="keyword">return</span> x.CompareTo(y);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> y.CompareTo(x);</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">        <span class="comment">// 两个String值的比较 （不区分大小写)</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">CompareStringIgnoreCase</span>(<span class="params"><span class="built_in">bool</span> asc, <span class="built_in">string</span> x, <span class="built_in">string</span> y</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> CompareString(asc, x.ToLower(), y.ToLower());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**（3）主窗体Form.cs逻辑代码 **</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">WindowsFormsApp_learning2</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Form4</span> : <span class="title">Form</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 当前默认排序：升序</span></span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">bool</span> asc = <span class="literal">true</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Form4</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line"></span><br><span class="line">            InitializeComponent();</span><br><span class="line">            InitListView();</span><br><span class="line">            LoadDir(<span class="keyword">new</span> DirectoryInfo(<span class="string">&quot;D:\\&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">        <span class="comment">//1.初始化ListView控件</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">InitListView</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            listView1.View = View.Details;</span><br><span class="line">            listView1.FullRowSelect = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">//设置列名</span></span><br><span class="line">            listView1.Columns.Add(<span class="string">&quot;名称&quot;</span>, <span class="number">-2</span>, HorizontalAlignment.Left);</span><br><span class="line">            listView1.Columns.Add(<span class="string">&quot;修改时间&quot;</span>, <span class="number">150</span>, HorizontalAlignment.Left);</span><br><span class="line">            listView1.Columns.Add(<span class="string">&quot;类型&quot;</span>, <span class="number">100</span>, HorizontalAlignment.Left);</span><br><span class="line">            listView1.Columns.Add(<span class="string">&quot;大小&quot;</span>, <span class="number">-2</span>, HorizontalAlignment.Left);</span><br><span class="line">            <span class="comment">//创建smallImageList，添加小图标资源</span></span><br><span class="line">            ImageList imgList = <span class="keyword">new</span> ImageList();</span><br><span class="line">            imgList.ImageSize = <span class="keyword">new</span> Size(<span class="number">16</span>, <span class="number">16</span>);<span class="comment">//设置列表中图片的大小</span></span><br><span class="line">            imgList.Images.Add(Properties.Resources.Icon_file);</span><br><span class="line">            imgList.Images.Add(Properties.Resources.Icon_folder);</span><br><span class="line">            listView1.SmallImageList = imgList;</span><br><span class="line">            <span class="comment">// 点击列标题时，指示排序的图标</span></span><br><span class="line">            <span class="comment">// 把图标资源加到 SmallImageList 里，供列标题头部显示</span></span><br><span class="line">            imgList.Images.Add(<span class="string">&quot;Sort_ASC&quot;</span>, Properties.Resources.up);</span><br><span class="line">            imgList.Images.Add(<span class="string">&quot;Sort_DESC&quot;</span>, Properties.Resources.down);</span><br><span class="line">            <span class="comment">//ListView首列图标显示为 key=&quot;&quot;Sort_ASC&quot;</span></span><br><span class="line">            listView1.Columns[<span class="number">0</span>].ImageKey = <span class="string">&quot;Sort_ASC&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">        <span class="comment">//2.遍历本地资源，获取文件或目录</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">LoadDir</span>(<span class="params">DirectoryInfo dir</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            listView1.BeginUpdate();</span><br><span class="line">     </span><br><span class="line">            <span class="comment">// 获取[子目录]列表</span></span><br><span class="line">            DirectoryInfo[] subDirs = dir.GetDirectories();</span><br><span class="line">            <span class="keyword">foreach</span> (DirectoryInfo d <span class="keyword">in</span> subDirs)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> ((d.Attributes &amp; FileAttributes.Hidden) &gt; <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="comment">//**将数据打包为Tag对象进行添加</span></span><br><span class="line">                MyListItemTag tag = <span class="keyword">new</span> MyListItemTag(<span class="number">0</span>,d.FullName,d.Name,d.LastWriteTime,<span class="number">-1</span>,<span class="string">&quot;文件夹&quot;</span>);</span><br><span class="line">                AddListItem(tag);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 获取[子文件]列表</span></span><br><span class="line">            FileInfo[] subFiles = dir.GetFiles();</span><br><span class="line">            <span class="keyword">foreach</span> (FileInfo f <span class="keyword">in</span> subFiles)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> ((f.Attributes &amp; FileAttributes.Hidden) &gt; <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="comment">//**将数据打包为Tag对象进行添加</span></span><br><span class="line">                MyListItemTag tag = <span class="keyword">new</span> MyListItemTag(<span class="number">1</span>, f.FullName, f.Name, f.LastWriteTime, f.Length, f.Extension.ToUpper());</span><br><span class="line">                AddListItem(tag);</span><br><span class="line">            &#125;</span><br><span class="line">     </span><br><span class="line">            listView1.EndUpdate();</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">        <span class="comment">//3，将文件和目录按照不同类型添加到ListView数据项</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">AddListItem</span>(<span class="params">MyListItemTag tag</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">// 判断是文件还是文件夹，使用不同的图标</span></span><br><span class="line">            <span class="built_in">int</span> imageIndex = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (!tag.type.Equals(<span class="string">&quot;文件夹&quot;</span>)) imageIndex = <span class="number">1</span>;</span><br><span class="line">            ListViewItem item = <span class="keyword">new</span> ListViewItem(tag.name, imageIndex);</span><br><span class="line">            <span class="comment">// **Item关联Tag数据对象（方便我们从Item中获取数据、进行排序等）</span></span><br><span class="line">            item.Tag = tag;</span><br><span class="line">            <span class="comment">// 事件子项</span></span><br><span class="line">            item.SubItems.Add(tag.time.ToString(<span class="string">&quot;yyyy-MM-dd HH:mm&quot;</span>));</span><br><span class="line">            <span class="comment">// 后缀名称子项</span></span><br><span class="line">            item.SubItems.Add(tag.ext);</span><br><span class="line">            <span class="comment">// 大小子项</span></span><br><span class="line">            <span class="built_in">long</span> size = tag.size;</span><br><span class="line">            <span class="built_in">string</span> sizeStr = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span> (size &lt; <span class="number">0</span>)</span><br><span class="line">                sizeStr = <span class="string">&quot;&quot;</span>; <span class="comment">// 文件夹不显示大小</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (size &lt; <span class="number">1000</span>)</span><br><span class="line">                sizeStr = <span class="string">&quot;&quot;</span> + size;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (size &lt; <span class="number">1000000</span>)</span><br><span class="line">                sizeStr = size / <span class="number">1000</span> + <span class="string">&quot; KB&quot;</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (size &lt; <span class="number">1000000000</span>)</span><br><span class="line">                sizeStr = size / <span class="number">1000000</span> + <span class="string">&quot; MB&quot;</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                sizeStr = size / <span class="number">1000000000</span> + <span class="string">&quot; GB&quot;</span>;</span><br><span class="line">     </span><br><span class="line">            item.SubItems.Add(sizeStr);</span><br><span class="line">            listView1.Items.Add(item);</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">        <span class="comment">//4.ListView的列点击事件：切换升序/降序（只针对第0列）</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">listView1_ColumnClick</span>(<span class="params"><span class="built_in">object</span> sender, ColumnClickEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">if</span> (e.Column == <span class="number">0</span>)<span class="comment">//如果点击的是第0列，才触发事件</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//切换当前排序</span></span><br><span class="line">                <span class="keyword">this</span>.asc = !asc;</span><br><span class="line">                <span class="keyword">if</span> (asc)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//设置排序器</span></span><br><span class="line">                    listView1.ListViewItemSorter = <span class="keyword">new</span> MyListItemSorter(<span class="literal">true</span>);</span><br><span class="line">                    listView1.Sort();<span class="comment">//排序</span></span><br><span class="line">                    listView1.Columns[<span class="number">0</span>].ImageKey = <span class="string">&quot;Sort_ASC&quot;</span>;<span class="comment">//切换图标</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    listView1.ListViewItemSorter = <span class="keyword">new</span> MyListItemSorter(<span class="literal">false</span>);</span><br><span class="line">                    listView1.Sort();</span><br><span class="line">                    listView1.Columns[<span class="number">0</span>].ImageKey = <span class="string">&quot;Sort_DESC&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/cadf3f5be4554314919bfe792aa9651b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Zi_6Zi_6Zi_5a6J,size_20,color_FFFFFF,t_70,g_se,x_16"><h2 id="4-ListView标签编辑"><a href="#4-ListView标签编辑" class="headerlink" title="4.ListView标签编辑"></a>4.ListView标签编辑</h2><blockquote><p><strong>5.ListView：编辑标签</strong><br>（1）设计ListView显示，并添加数据项<br>（2）在设计界面或代码中设置LabelEdit&#x3D;True，表示允许对数据项标签进行编辑<br>（3）标签编辑的启动方式：<br>        - 在窗口中双击标签，启动编辑<br>        - 使用代码方式，在事件中使用 ListViewItem.BeginEdit() 来启动编辑（比如右键菜单-重命名 事件）：<br>                a.添加右键菜单，新建菜单项-重命名<br>                b.ListView添加MouseUp鼠标点击事件，显示右键菜单，获取右键点中的项<br>                c.右键菜单项添加鼠标点击事件，点击右键菜单-重命名，开启该项的标签编辑<br>                d.编辑验证：在编辑之后&#x2F;之前，进行标签内容的验证（比如不能重复名称，不能包含某些字符等），在ListView中添加事件BeforeLabelEdit&#x2F;AfterLabelEdit，开启对每个数据项的编辑验证（自动在编辑前后触发）<br>（4）<strong>注意：</strong><br>        - 只能对主项进行编辑<br>        - 标签编辑默认不会修改源数据（比如文件显示不会修改真实文件名称），要想同步修改可以设置事件</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">WindowsFormsApp_learning2</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Form5</span> : <span class="title">Form</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 当前鼠标事件点中的项</span></span><br><span class="line">        <span class="keyword">private</span> ListViewItem mouseClickItem;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Form5</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">     </span><br><span class="line">            InitListView();</span><br><span class="line">     </span><br><span class="line">            <span class="comment">// 初始化添加几项数据</span></span><br><span class="line">            AddListItem(<span class="keyword">new</span> Student(<span class="number">20201001</span>, <span class="string">&quot;shao&quot;</span>, <span class="string">&quot;13810012xxx&quot;</span>));</span><br><span class="line">            AddListItem(<span class="keyword">new</span> Student(<span class="number">20201002</span>, <span class="string">&quot;wang&quot;</span>, <span class="string">&quot;18799122xxx&quot;</span>));</span><br><span class="line">            AddListItem(<span class="keyword">new</span> Student(<span class="number">20201003</span>, <span class="string">&quot;li&quot;</span>, <span class="string">&quot;13490912xxx&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">        <span class="comment">//1.设计ListView显示，并添加数据项</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">InitListView</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            listView1.View = View.Details;</span><br><span class="line">            listView1.FullRowSelect = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">//**设置LabelEdit，允许对数据项标签进行编辑</span></span><br><span class="line">            listView1.LabelEdit = <span class="literal">true</span>;</span><br><span class="line">     </span><br><span class="line">            <span class="comment">// 设置列名</span></span><br><span class="line">            <span class="comment">// 宽度值-2表示自动调整宽度</span></span><br><span class="line">            listView1.Columns.Add(<span class="string">&quot;姓名&quot;</span>, <span class="number">150</span>, HorizontalAlignment.Left);</span><br><span class="line">            listView1.Columns.Add(<span class="string">&quot;学号&quot;</span>, <span class="number">150</span>, HorizontalAlignment.Left);</span><br><span class="line">            listView1.Columns.Add(<span class="string">&quot;手机号&quot;</span>, <span class="number">-2</span>, HorizontalAlignment.Left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">AddListItem</span>(<span class="params">Student stu</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            ListViewItem item = <span class="keyword">new</span> ListViewItem(stu.Name, <span class="number">0</span>);</span><br><span class="line">            item.Tag = stu;</span><br><span class="line">     </span><br><span class="line">            item.SubItems.Add(stu.Id + <span class="string">&quot;&quot;</span>);</span><br><span class="line">            item.SubItems.Add(stu.Phone);</span><br><span class="line">            listView1.Items.Add(item);</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">        <span class="comment">//2.右键显示右键菜单</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">listView1_MouseUp</span>(<span class="params"><span class="built_in">object</span> sender, MouseEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">if</span>(e.Button == MouseButtons.Right)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//获取 右键点击的ListViewItem数据项</span></span><br><span class="line">                ListViewItem item = listView1.GetItemAt(e.X, e.Y);</span><br><span class="line">                <span class="keyword">this</span>.mouseClickItem = item;</span><br><span class="line">                <span class="comment">//判断是否可以重命名该项</span></span><br><span class="line">                renameMenu_Item.Enabled = (item != <span class="literal">null</span>);</span><br><span class="line">                <span class="comment">//展示该位置/该项 的 右键菜单</span></span><br><span class="line">                contextMenuStrip1.Show(listView1, e.Location);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">        <span class="comment">//3.右键菜单-重命名 点击事件，开启该项的标签编辑</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">renameMenu_Item_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">this</span>.mouseClickItem.BeginEdit();</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">        <span class="comment">//4.开启列表项的编辑 自动触发事件BeforeLabelEdit</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">listView1_BeforeLabelEdit</span>(<span class="params"><span class="built_in">object</span> sender, LabelEditEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">     </span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">        <span class="comment">//5.结束列表项的编辑 自动触发事件AfterLabelEdit（事件发送器 sender，事件处理对象 e）</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">listView1_AfterLabelEdit</span>(<span class="params"><span class="built_in">object</span> sender, LabelEditEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//获取ListView当前编辑项的下标Index</span></span><br><span class="line">            <span class="built_in">int</span> index = e.Item;</span><br><span class="line">            <span class="comment">//获取新编辑的文本</span></span><br><span class="line">            <span class="built_in">string</span> label = e.Label;</span><br><span class="line">            <span class="comment">// 检查名称是否冲突</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; listView1.Items.Count; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (index == i) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (label == listView1.Items[i].Text)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//CancelEdit=True 取消新编辑的内容，恢复原始内容</span></span><br><span class="line">                    e.CancelEdit = <span class="literal">true</span>;</span><br><span class="line">                    MessageBox.Show(<span class="string">&quot;名字重复&quot;</span>, <span class="string">&quot;提示&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 否则就没有重复名称，接受新的更改</span></span><br><span class="line">            e.CancelEdit = <span class="literal">false</span>; </span><br><span class="line">            <span class="comment">// 同步更新后台数据（对象为引用数据）</span></span><br><span class="line">            Student stu = (Student)listView1.Items[index].Tag;</span><br><span class="line">            stu.Name = label;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/68ab866061144e87b40f61735f4be94d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Zi_6Zi_6Zi_5a6J,size_20,color_FFFFFF,t_70,g_se,x_16"><h1 id="七-表格视图控件-DataGridView"><a href="#七-表格视图控件-DataGridView" class="headerlink" title="七.表格视图控件 DataGridView"></a>七.表格视图控件 DataGridView</h1><h2 id="1-表格视图基本用法"><a href="#1-表格视图基本用法" class="headerlink" title="1.表格视图基本用法"></a>1.表格视图基本用法</h2><blockquote><p><strong>1.表格视图 DataGridView 基础: 以单元格表格的形式展示数据和操作</strong><br>（1）在设计界面，拖入DataGridView控件，并设置Dock为填满Fill<br>（2）在设计界面或代码中，设置列名Columns<br>（3）在设计界面或代码中添加数据项，推荐代码添加（动态拓展）<br> <strong>注意：</strong>表格视图的每一单元格应都是可编辑的！</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">WindowsFormsApp_learning2</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Form6</span> : <span class="title">Form</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Form6</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">            <span class="comment">//初始化表格视图布局</span></span><br><span class="line">            InitGridView();</span><br><span class="line">            <span class="comment">//初始化添加数据</span></span><br><span class="line">            AddRows(<span class="keyword">new</span> Student(<span class="number">202101</span>, <span class="string">&quot;wx&quot;</span>, <span class="string">&quot;18264886xxx&quot;</span>));</span><br><span class="line">            AddRows(<span class="keyword">new</span> Student(<span class="number">202102</span>, <span class="string">&quot;my&quot;</span>, <span class="string">&quot;13012459xxx&quot;</span>));</span><br><span class="line">            AddRows(<span class="keyword">new</span> Student(<span class="number">202103</span>, <span class="string">&quot;tom&quot;</span>, <span class="string">&quot;19857138xxx&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.初始化列数、列名</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">InitGridView</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//设置表格显示列数</span></span><br><span class="line">            <span class="keyword">this</span>.dataGridView1.ColumnCount = <span class="number">4</span>;</span><br><span class="line">            <span class="comment">//设置每列的列头名称</span></span><br><span class="line">            dataGridView1.Columns[<span class="number">0</span>].Name = <span class="string">&quot;学号&quot;</span>;</span><br><span class="line">            dataGridView1.Columns[<span class="number">1</span>].Name = <span class="string">&quot;姓名&quot;</span>;</span><br><span class="line">            dataGridView1.Columns[<span class="number">2</span>].Name = <span class="string">&quot;性别&quot;</span>;</span><br><span class="line">            dataGridView1.Columns[<span class="number">3</span>].Name = <span class="string">&quot;手机号&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2.添加表格数据项</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">AddRows</span>(<span class="params">Student stu</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//设置Object数组！代表一行数据</span></span><br><span class="line">            Object[] row =</span><br><span class="line">            &#123;</span><br><span class="line">                stu.Id,stu.Name,<span class="string">&quot;男&quot;</span>,stu.Phone</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="comment">//添加数据行</span></span><br><span class="line">            dataGridView1.Rows.Add(row);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/aea645f491744dc9b926f59164b0548d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Zi_6Zi_6Zi_5a6J,size_20,color_FFFFFF,t_70,g_se,x_16"><h2 id="2-表格视图高级用法"><a href="#2-表格视图高级用法" class="headerlink" title="2.表格视图高级用法"></a>2.表格视图高级用法</h2><blockquote><p><strong>2.表格视图 DataGridView 基本操作：属性、增删改查</strong><br>（1）DataGridView 常用属性：<br>        - [杂项] Columns : 设置列相关的列数、列名等<br>        - [外观] ColumnHeadersVisible : 设置列头是否可见（默认为True）<br>        - [外观] RowHeadersVisible : 设置行的头是否可见（默认为True）<br>        - [行为] MultiSelect ： 是否允许多项选择（默认为True）<br>        - [行为] AllowUserToxxx:是否允许用户对单元格进行 增删改查等修改<br>        - [行为] 列还支持点击 升序&#x2F;降序 排序（自动已实现）<br>（2）DataGridView 常用操作：<br>        - 添加一行数据：grid.Rows.Add(Object[]) 或 界面手动添加（需要触发事件，持久化到数据库）<br>        - 获取行数据：<br>                a.索引方式：grid[col,row] 注意是列索引在前，行索引在后<br>                b.函数方式：grid.Rows[i].Cells[j]<br>        - 删除行数据：<br>                a.单行删除：grid.Rows.RemoveAt(int i):删除第i行数据<br>                b.多行删除（ctrl多选）：grid.Rows.Remove(DataGridViewRow row):删除指定的row对象<br><strong>3.表格视图 DataGridView 单元格编辑</strong><br>（1）实现方式：<br>        - 界面直接编辑：DataGridView默认每个单元格都是可以直接编辑的，编辑修改后按下回车即可将修改显示到界面中。<br>        - 添加事件触发编辑：也可以通过添加右键菜单或双击事件来进行编辑,或者弹出对话框编辑。<br>（2）相关属性：ReadOnly<br>        - 设计界面：Columns中，设置某列为ReadOnly&#x3D;True只读，不能被编辑修改；ReadOnly&#x3D;False可编辑<br>        - 代码中：grid.Columns[0].ReadOnly &#x3D; True;<br>（3）单元格编辑事件步骤：<br>        - 设置状态：设置ReadOnly &#x3D; False 可编辑状态（默认为False）<br>        - 启动编辑：界面中点击单元格选中，再点击一次，则启动进入编辑状态<br>        - 编辑后的验证事件：当编辑完成按下回车时，触发 [焦点] CellValidating 单元格验证时发生，CellValidating 执行完成后 触发CellValidated 单元格验证后发生</p></blockquote><p><strong>（1）案例界面设计</strong></p><blockquote><p>设计一个案例，实现对表格视图的基本操作（增删改查），以及编辑事件验证。</p></blockquote><img src="https://img-blog.csdnimg.cn/36157a14d1214736b4fd2d62f2dde7d2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Zi_6Zi_6Zi_5a6J,size_20,color_FFFFFF,t_70,g_se,x_16"><p><strong>（2）Form.cs主窗体逻辑代码</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">WindowsFormsApp_learning2</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Form7</span> : <span class="title">Form</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Form7</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">            InitGridView();</span><br><span class="line">            AddRows(<span class="keyword">new</span> Student(<span class="number">202101</span>, <span class="string">&quot;wx&quot;</span>, <span class="string">&quot;18264886xxx&quot;</span>));</span><br><span class="line">            AddRows(<span class="keyword">new</span> Student(<span class="number">202102</span>, <span class="string">&quot;my&quot;</span>, <span class="string">&quot;13012459xxx&quot;</span>));</span><br><span class="line">            AddRows(<span class="keyword">new</span> Student(<span class="number">202103</span>, <span class="string">&quot;tom&quot;</span>, <span class="string">&quot;19857138xxx&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.初始化列数、列名</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">InitGridView</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">this</span>.grid.ColumnCount = <span class="number">4</span>;</span><br><span class="line">            grid.Columns[<span class="number">0</span>].Name = <span class="string">&quot;学号&quot;</span>;</span><br><span class="line">            grid.Columns[<span class="number">1</span>].Name = <span class="string">&quot;姓名&quot;</span>;</span><br><span class="line">            grid.Columns[<span class="number">2</span>].Name = <span class="string">&quot;性别&quot;</span>;</span><br><span class="line">            grid.Columns[<span class="number">3</span>].Name = <span class="string">&quot;手机号&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2.添加表格数据项</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">AddRows</span>(<span class="params">Student stu</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Object[] row =</span><br><span class="line">            &#123;</span><br><span class="line">                stu.Id,stu.Name,<span class="string">&quot;男&quot;</span>,stu.Phone</span><br><span class="line">            &#125;;</span><br><span class="line">            grid.Rows.Add(row);</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">        <span class="comment">//3.添加按钮点击事件：添加一行数据</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btn_add_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Object[] row = <span class="keyword">new</span> <span class="built_in">object</span>[<span class="number">4</span>];</span><br><span class="line">            row[<span class="number">0</span>] = <span class="number">202104</span>;</span><br><span class="line">            row[<span class="number">1</span>] = <span class="string">&quot;testUser&quot;</span>;</span><br><span class="line">            row[<span class="number">2</span>] = <span class="string">&quot;女&quot;</span>;</span><br><span class="line">            row[<span class="number">3</span>] = <span class="string">&quot;1928373838&quot;</span>;</span><br><span class="line">            grid.Rows.Add(row);</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">        <span class="comment">//4.获取数据按钮点击事件：获取行数据</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btn_get_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//获取第0行数据</span></span><br><span class="line">            Object id = grid[<span class="number">0</span>, <span class="number">0</span>].Value;</span><br><span class="line">            Object name = grid[<span class="number">1</span>, <span class="number">0</span>].Value;</span><br><span class="line">            Object sex = grid.Rows[<span class="number">0</span>].Cells[<span class="number">2</span>].Value;</span><br><span class="line">            Object phone = grid.Rows[<span class="number">0</span>].Cells[<span class="number">3</span>].Value;</span><br><span class="line">            <span class="comment">//显示在MessageBox</span></span><br><span class="line">            MessageBox.Show(id + <span class="string">&quot;,&quot;</span> + name + <span class="string">&quot;,&quot;</span> + sex + <span class="string">&quot;,&quot;</span> + phone);</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">        <span class="comment">//5.删除按钮点击事件：删除选中行</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btn_del_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//单行删除 删除第0行</span></span><br><span class="line">            <span class="comment">//grid.Rows.RemoveAt(0);</span></span><br><span class="line">     </span><br><span class="line">            <span class="comment">//多行删除 删除[选中]的所有行</span></span><br><span class="line">            <span class="keyword">foreach</span>(DataGridViewRow row <span class="keyword">in</span> grid.SelectedRows)</span><br><span class="line">            &#123;</span><br><span class="line">                grid.Rows.Remove(row);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">        <span class="comment">//6.编辑验证：单元格验证事件</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grid_CellValidating</span>(<span class="params"><span class="built_in">object</span> sender, DataGridViewCellValidatingEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//e.ColumnIndex 表示 编辑单元格的列索引</span></span><br><span class="line">            <span class="keyword">if</span> (e.ColumnIndex == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//验证姓名的编辑</span></span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (e.ColumnIndex == <span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//验证性别的编辑</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(e.ColumnIndex == <span class="number">3</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//验证手机号的编辑（手机号必须是11位合法数字）</span></span><br><span class="line">                <span class="built_in">string</span> str = e.FormattedValue.ToString();</span><br><span class="line">                <span class="keyword">if</span>(str.Length != <span class="number">11</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    MessageBox.Show(<span class="string">&quot;手机号必须为11位&quot;</span>, <span class="string">&quot;Error&quot;</span>);</span><br><span class="line">                    e.Cancel = <span class="literal">true</span>;<span class="comment">//取消编辑事件</span></span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">foreach</span>(<span class="built_in">char</span> ch <span class="keyword">in</span> str)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(ch &lt; <span class="string">&#x27;0&#x27;</span> || ch &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        MessageBox.Show(<span class="string">&quot;手机号必须为数字&quot;</span>, <span class="string">&quot;Error&quot;</span>);</span><br><span class="line">                        e.Cancel = <span class="literal">true</span>;<span class="comment">//取消编辑事件</span></span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">        <span class="comment">//7.单元格验证完成后执行的事件</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grid_CellValidated</span>(<span class="params"><span class="built_in">object</span> sender, DataGridViewCellEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">     </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/bd9767091c07482fa95af82ecf486132.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Zi_6Zi_6Zi_5a6J,size_20,color_FFFFFF,t_70,g_se,x_16"><h1 id="八-综合练习：学生信息管理系统"><a href="#八-综合练习：学生信息管理系统" class="headerlink" title="八.综合练习：学生信息管理系统"></a>八.综合练习：学生信息管理系统</h1><hr><h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><ol><li><a href="https://blog.csdn.net/qq_40772692/article/details/121901587?spm=1001.2014.3001.5502">WinForm（二） WinForm进阶与复杂控件使用</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">C#对WinForm的复杂控件使用</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="C#" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/C/"/>
    
    <category term="前端" scheme="https://zml3589110.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="C#" scheme="https://zml3589110.github.io/tags/C/"/>
    
    <category term="WinForm" scheme="https://zml3589110.github.io/tags/WinForm/"/>
    
    <category term="控件" scheme="https://zml3589110.github.io/tags/%E6%8E%A7%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>C#开发WinForm之一(入门与基本控件使用)</title>
    <link href="https://zml3589110.github.io/posts/1279388026.html"/>
    <id>https://zml3589110.github.io/posts/1279388026.html</id>
    <published>2022-07-27T06:39:20.000Z</published>
    <updated>2022-07-28T13:23:05.277Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-Winform入门"><a href="#一-Winform入门" class="headerlink" title="一.Winform入门"></a>一.Winform入门</h1><p><strong>WinForm 是 Windows Form 的简称，是基于 .NET Framework 平台的客户端（PC软件）开发技术，一般使用 C# 编程。</strong></p><blockquote><p>在VS2019中，C# WinForm 编程需要创建「Windows窗体应用程序」项目。Windows 窗体应用程序是 C# 语言中的一个重要应用，也是 C# 语言最常见的应用。<br>使用 C# 语言编写的 Windows 应用程序与 Windows 操作系统的界面类似，每个界面都是由窗体构成的，并且能通过鼠标单击、键盘输入等操作完成相应的功能。<br>WinForm支持可视化设计，简单易上手，并可以接入大量的第三方UI库或自定义控件，给桌面应用开发带来了无限可能。</p></blockquote><h2 id="1-WinForm项目结构"><a href="#1-WinForm项目结构" class="headerlink" title="1.WinForm项目结构"></a>1.WinForm项目结构</h2><p>（1）引用：包括所有的系统库文件的引用依赖<br>（2）App.config：当前项目的配置文件<br>（3）Form1.cs：当前窗体的事件逻辑源码</p><ul><li>Form1.Designer.cs：当前窗体的控件布局源码</li><li>Form1.resx：当前窗体的资源文件（图片、图标、资源等）</li><li>注意：<br>a. Form1.cs和Form1.Designer.cs都定义了Form1类，该类使用了Partial关键词声明，其定义的类可以在多个地方被定义，最后编译的时候会被当作一个类来处理。因此两个文件各司其职，最后合并为一个类编译。<br>b. 要手动实现自定义窗体，可以添加自己的类，然后继承Form类即可</li></ul><p>（4）Program.cs：当前项目程序的主入口Main，启动项目，运行初始窗口</p><img src="https://img-blog.csdnimg.cn/1f6172cf966545a39ed0c66a87505dcb.png"><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">WindowsFormsApp_learning</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//Program.cs 入口程序解读</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 应用程序的主入口点。</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment">//1.[STAThread]  Attributes语法，修饰Main方法。示应用程序的默认线程模型是单线程单元 (STA)</span></span><br><span class="line">        [<span class="meta">STAThread</span>]</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Application.EnableVisualStyles();</span><br><span class="line">            Application.SetCompatibleTextRenderingDefault(<span class="literal">false</span>);</span><br><span class="line">            <span class="comment">//2.开启窗口的消息循环，初始化并启动Form1窗口</span></span><br><span class="line">            Application.Run(<span class="keyword">new</span> Form1());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-窗口设计与控件布局"><a href="#2-窗口设计与控件布局" class="headerlink" title="2.窗口设计与控件布局"></a>2.窗口设计与控件布局</h2><p><strong>一、窗体控件布局文件：</strong><br>（1）操作：在设计界面拖拽控件，可以完成界面布局（控件大小、名称、类型、样式等）<br>（2）原理：设计界面自动关联Form1.Designer.cs文件，在InitializeComponent()方法中会自动生成相关代码<br>（3）设计原则：</p><ul><li>Form1.Designer.cs文件：窗体控件布局文件，一般【不需要我们修改】，只要通过设计界面代码就会自动生成。</li><li>Form1.cs文件：窗体事件逻辑代码的实现，一般【需要我们手动书写】，包括触发事件、回调、数据交互、跳转等等</li></ul><p><strong>二、手动添加控件：不通过设计界面，有两种方式：</strong></p><blockquote><p>（1）在Form1.Designer.cs中添加：</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> System.Windows.Forms.Button btn_design;<span class="comment">//声明控件</span></span><br><span class="line"> <span class="comment">//默认的控件初始化方法</span></span><br><span class="line"> InitializeComponent():&#123;</span><br><span class="line">     <span class="keyword">this</span>.btn_design = <span class="keyword">new</span> System.Windows.Forms.Button();<span class="comment">//定义控件</span></span><br><span class="line">     <span class="keyword">this</span>.btn_design.Text = <span class="string">&quot;自定义控件&quot;</span>;<span class="comment">//设置Text属性</span></span><br><span class="line">     <span class="keyword">this</span>.btn_design.Location = <span class="keyword">new</span> Point(<span class="number">40</span>,<span class="number">40</span>);<span class="comment">//设置布局位置 Point(x,y)</span></span><br><span class="line">     <span class="keyword">this</span>.btn_design.Size = <span class="keyword">new</span> Size(<span class="number">100</span>,<span class="number">40</span>);<span class="comment">//设置尺寸大小 Size(width,height)</span></span><br><span class="line">     <span class="keyword">this</span>.Controls.Add(<span class="keyword">this</span>.btn_design);<span class="comment">//注册控件到窗体</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><blockquote><p>（2）在Form1.cs中添加：</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Button btn_design;<span class="comment">//声明控件</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Form1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//先调用Designer.cs中的控件初始化方法</span></span><br><span class="line">    InitializeComponent();</span><br><span class="line">    <span class="keyword">this</span>.btn_design = <span class="keyword">new</span> System.Windows.Forms.Button();<span class="comment">//定义控件</span></span><br><span class="line">    <span class="keyword">this</span>.btn_design.Text = <span class="string">&quot;自定义控件&quot;</span>;<span class="comment">//设置Text属性</span></span><br><span class="line">    <span class="keyword">this</span>.btn_design.Location = <span class="keyword">new</span> Point(<span class="number">40</span>,<span class="number">40</span>);<span class="comment">//设置布局位置 Point(x,y)</span></span><br><span class="line">    <span class="keyword">this</span>.btn_design.Size = <span class="keyword">new</span> Size(<span class="number">100</span>,<span class="number">40</span>);<span class="comment">//设置尺寸大小 Size(width,height)</span></span><br><span class="line">    <span class="keyword">this</span>.Controls.Add(<span class="keyword">this</span>.btn_design);<span class="comment">//注册控件到窗体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>（3）注意：</p></blockquote><ol><li>一般我们都使用拖拽添加控件，当然也有特殊情况需要我们手动添加（比如自定义控件）</li><li>窗体GUI中，左上角为原点(0,0)，竖直向下为y轴，水平向右为x轴（宽度表示x轴上长度，高度表示y轴上长度），单位为像素。</li></ol><h2 id="窗口事件"><a href="#窗口事件" class="headerlink" title="窗口事件"></a>窗口事件</h2><p><strong>一、WinForm 自动添加事件处理：</strong><br>（1）操作：在设计界面-控件属性-闪电符号（事件）-添加事件，就会在Form1.cs中自动生成该控件相应方法名称的事件触发函数<br>（2） MessageBox.Show()：显示弹出消息提示框<br>（3）GUI界面下Console.WriteLine不显示，需要使用调试模式</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">WindowsFormsApp_learning</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 4.WinForm事件处理</span></span><br><span class="line"><span class="comment">     *  （1）操作：在设计界面-控件属性-闪电符号（事件）-添加事件，就会自动生成相应方法名称的事件触发函数</span></span><br><span class="line"><span class="comment">     *  （2） MessageBox：显示消息提示框</span></span><br><span class="line"><span class="comment">     *  （3）GUI界面下Console.WriteLine不显示，需要使用调试模式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Form1</span> : <span class="title">Form</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Form1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">        <span class="comment">//Button的Click点击事件（自动添加）</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showMessage</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            MessageBox.Show(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/6e19fe7d8fff44ca9197dc8f349330c4.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Zi_6Zi_6Zi_5a6J,size_18,color_FFFFFF,t_70,g_se,x_16"><p><strong>二、手动添加事件处理（以Btn_design为例）：</strong></p><blockquote><p>（1）步骤：</p></blockquote><ul><li>添加按钮控件到布局</li><li>书写事件处理函数，必须符合 void function_name(object param1,EventArgs e){}的形式</li><li>添加注册事件，this.Btn_design.Click +&#x3D; new EventHandler(this.showTip);</li></ul><blockquote><p>（2）注意：事件处理机制用到了委托和事件的C#基础，有时间可以看一下</p></blockquote><p>下一步的学习请前往 WindowsFormApp_demo1（实现一个显示本地时间的APP）</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">WindowsFormsApp_learning</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 5.手动添加事件处理（以Btn_design为例）</span></span><br><span class="line"><span class="comment">     *  （1）步骤：</span></span><br><span class="line"><span class="comment">     *      - 添加按钮控件到布局</span></span><br><span class="line"><span class="comment">     *      - 书写事件处理函数，必须符合 void function_name(object param1,EventArgs e)&#123;&#125;的形式</span></span><br><span class="line"><span class="comment">     *      - 添加注册事件，this.Btn_design.Click += new EventHandler(this.showTip);</span></span><br><span class="line"><span class="comment">     *  （2）注意：事件处理机制用到了委托和事件的C#基础，有时间可以看一下</span></span><br><span class="line"><span class="comment">     *  下一步的学习请前往 WindowsFormApp_demo1（实现一个显示时间的APP）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Form1</span> : <span class="title">Form</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Form1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">            <span class="comment">//2.1 注册Click事件为手动添加的函数</span></span><br><span class="line">            <span class="keyword">this</span>.Btn_design.Click += <span class="keyword">new</span> EventHandler(<span class="keyword">this</span>.showTip);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.Button的Click点击事件（手动添加）</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showTip</span>(<span class="params">Object sender,EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            MessageBox.Show(<span class="string">&quot;手动添加!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/90094321f20041e98fa1f44c666dcb7e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Zi_6Zi_6Zi_5a6J,size_20,color_FFFFFF,t_70,g_se,x_16"><h2 id="时间显示器小练习"><a href="#时间显示器小练习" class="headerlink" title="时间显示器小练习"></a>时间显示器小练习</h2><p><strong>设计一个能获取本地时间并显示在文本框的时间查看器，设计思路就是：</strong></p><ul><li>1.在UI设计界面添加一个按钮Button和一个用来显示时间的文本框TextBox</li><li>2.给按钮Button添加点击事件，在事件中获取系统时间，并赋值给TextBox显示</li></ul><blockquote><p>（1）界面设计 </p></blockquote><img src="https://img-blog.csdnimg.cn/cbe1b914c604458a8e3e3ba5527682c9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Zi_6Zi_6Zi_5a6J,size_20,color_FFFFFF,t_70,g_se,x_16"><blockquote><p>（2）逻辑代码</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">WindowsFormsApp_Demo1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Form1</span> : <span class="title">Form</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Form1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//点击事件：获取当前时间赋值给TextBox</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ShowTime</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="built_in">string</span> time = DateTime.Now.ToString(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">            <span class="keyword">this</span>.Time_filed.Text = time;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二-WinForm布局开发"><a href="#二-WinForm布局开发" class="headerlink" title="二.WinForm布局开发"></a>二.WinForm布局开发</h1><p><strong>常见的WinForm 自动界面布局（设计界面拖拽布局）：</strong></p><blockquote><p><strong>（1）操作：</strong>拖拽控件，放置在UI设计界面上布局<br><strong>（2）技巧：</strong>通过ctrl+多个控件选定，可以在上方工具栏进行细节的对齐微调，比如居中对齐、左对齐等。<br><strong>（3）本质：</strong>每次拖拽添加一个布局控件，就会在窗口相应的Designer.cs设计布局代码文件中的InitializeComponent()方法中自动生成布局代码（比如Location、Size等），来实现布局。<br><strong>（4）存在的问题：</strong>自动布局虽然方便灵活，但是当窗口大小拉伸改变时，布局控件不能实现自动适应，仍会保持原大小，因此自动布局只适用于窗口大小不变的情况</p></blockquote><img src="https://img-blog.csdnimg.cn/3de1a7b7a7d6495da28b3f60518cd52a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Zi_6Zi_6Zi_5a6J,size_20,color_FFFFFF,t_70,g_se,x_16"><h2 id="1-手动布局解决自适应问题"><a href="#1-手动布局解决自适应问题" class="headerlink" title="1. 手动布局解决自适应问题"></a>1. 手动布局解决自适应问题</h2><p><strong>WinForm界面手动布局（并解决自适应问题）:</strong></p><blockquote><p>（1）步骤：</p></blockquote><ul><li>通过设计界面拖拽&#x2F;手动注册组件的方式，初始化初始界面布局（此时属于自动布局）</li><li>在Form.cs逻辑代码中重写Form父类的OnLayout方法，在方法内实现手动布局。OnLayout方法会在窗口大小变化时自动被回调调用，来重新设置组件的位置大小等属性实现自适应。<br>a. 调用父类的OnLayout()，不是必须的。<br>b. 获取当前窗口大小 CilentSize(仅客户区，不含标题栏)<br>c. 计算和设置每一个控件新的的大小和位置，实现动态布局</li></ul><blockquote><p>（2）注意：</p></blockquote><ul><li>Size属性指窗口大小（包括工具栏），ClientSize指客户区大小（不包含工具栏）</li><li>本质：OnLayout方法会在窗口大小变化时自动被调用，来设置组件的位置实现自适应<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">WindowsFormsApp_learning</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Form1</span> : <span class="title">Form</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Form1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//重写父类的OnLayout方法，实现手动布局自适应</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnLayout</span>(<span class="params">LayoutEventArgs levent</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//1.调用父类的OnLayout()，不是必须的</span></span><br><span class="line">            <span class="keyword">base</span>.OnLayout(levent);</span><br><span class="line">            <span class="comment">//2.获取当前客户窗口大小 ClientSize</span></span><br><span class="line">            <span class="built_in">int</span> w = <span class="keyword">this</span>.ClientSize.Width;</span><br><span class="line">            <span class="built_in">int</span> h = <span class="keyword">this</span>.ClientSize.Height;</span><br><span class="line">            <span class="comment">//3.计算并设置每一个控件的大小和位置</span></span><br><span class="line">            <span class="built_in">int</span> yoff = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">            yoff = <span class="number">4</span>;</span><br><span class="line">            <span class="keyword">this</span>.text_box.Location = <span class="keyword">new</span> Point(<span class="number">0</span>, yoff);<span class="comment">//坐标(0,4)</span></span><br><span class="line">            <span class="keyword">this</span>.text_box.Size = <span class="keyword">new</span> Size(w - <span class="number">80</span>, <span class="number">30</span>);<span class="comment">//尺寸(w-80,30)</span></span><br><span class="line">            <span class="keyword">this</span>.btn_click.Location = <span class="keyword">new</span> Point(w - <span class="number">80</span>, yoff);<span class="comment">//坐标(w-80,4)</span></span><br><span class="line">            <span class="keyword">this</span>.btn_click.Size = <span class="keyword">new</span> Size(<span class="number">80</span>, <span class="number">30</span>);<span class="comment">//尺寸(80,30)</span></span><br><span class="line"> </span><br><span class="line">            yoff += <span class="number">30</span>;<span class="comment">//第一行的高度</span></span><br><span class="line">            yoff += <span class="number">4</span>;<span class="comment">//间隔</span></span><br><span class="line">            <span class="keyword">this</span>.panel1.Location = <span class="keyword">new</span> Point(<span class="number">0</span>, yoff);</span><br><span class="line">            <span class="keyword">this</span>.panel1.Size = <span class="keyword">new</span> Size(w, h - yoff - <span class="number">4</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><img src="https://img-blog.csdnimg.cn/e27715d3bbbd40cfa4103fb9a05a8c98.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Zi_6Zi_6Zi_5a6J,size_20,color_FFFFFF,t_70,g_se,x_16"><h2 id="2-WinForm布局属性"><a href="#2-WinForm布局属性" class="headerlink" title="2.WinForm布局属性"></a>2.WinForm布局属性</h2><p><strong>WinForm布局属性（控件与布局相关的属性，设计界面可见）:</strong></p><blockquote><p>（1）Anchor：固定、锚定（无论窗口怎么变化，控件的相对位置都不变）</p></blockquote><ul><li>含义：固定控件与父窗口的【上下左右边距】不变，实现控件的锚定</li><li>左上角固定：选定 Top,Left（默认）</li><li>顶部固定，水平拉伸：选定 Top,Left,Right</li><li>居中固定：None（取消所有）</li><li><strong>注意：</strong>Anchor效果的好坏取决于控件的初始位置，因为控件的初始位置决定了控件的边距！所以要让控件固定右上角，就要初始设计时就放在右上角！</li></ul><blockquote><p>（2）Dock：停靠属性，将控件停靠在父窗口的一侧或者中央</p></blockquote><ul><li>Top：上，控件停靠在容器上侧，宽度填满容器，高度可以调节</li><li>Bottom：下，控件停靠在容器下侧，宽度填满容器，高度可以调节</li><li>Left：左，控件停靠在容器左侧，高度填满容器，宽度可以调节</li><li>Right：右，控件停靠在容器右侧，高度填满容器，宽度可以调节</li><li>Fill，中，控件填满容器中间剩余部分（所以说与控件添加顺序有关）</li><li>None，无，不使用Dock属性</li><li><strong>注意：</strong><br>  a. 容器之间可以嵌套，使用布局属性（容器就是存放组件的，比如Panel）<br>  b. Dock属性与Anchor属性不能同时使用<br>  c. Dock属性不是固定边距了，就是相对位置填充</li></ul><img src="https://img-blog.csdnimg.cn/ef3d7140e1af44c8b816179fa734e3f1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Zi_6Zi_6Zi_5a6J,size_17,color_FFFFFF,t_70,g_se,x_16"><img src="https://img-blog.csdnimg.cn/7bc6d1da4a8c488798b0cc97379ec311.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Zi_6Zi_6Zi_5a6J,size_17,color_FFFFFF,t_70,g_se,x_16"><h2 id="3-WinForm布局器"><a href="#3-WinForm布局器" class="headerlink" title="3.WinForm布局器"></a>3.WinForm布局器</h2><p><strong>布局器 LayoutEngine:</strong></p><blockquote><p>（1）含义：布局器就是容器内部组件的默认排列方式，所有的容器都带有一个默认的布局器</p></blockquote><blockquote><p>（2）自定义控件如何加入设计界面：</p></blockquote><ul><li>工具 -&gt; 选项 -&gt; Windows窗体设计器 -&gt; 常规 -&gt; 自动填充工具箱 -&gt; True</li><li>添加自定义的控件类源码到项目下</li><li>生成&#x2F;重新生成结局方案 F7</li><li>重新打开设计界面，在工具箱就可以看到自己的控件</li></ul><blockquote><p>（3）系统提供的布局器-FlowLayoutPanel（流式布局）：</p></blockquote><ul><li>含义：普通的Panel面板容器控件，使用了FlowLayout流式布局，即所有内部组件按照顺序从左到右从上到下依次排列</li><li>FlowLayoutPanel也可以使用Anchor、Dock等属性，因为他也是窗体容器内的一个组件</li><li>控件的选择技巧：多个控件叠加到一起时，可以右键最上层控件，来进行重叠控件的选择<blockquote><p>（4）系统提供的布局器-TableLayoutPanel（表格布局）：</p></blockquote></li><li>含义：普通的Panel面板容器，使用了TableLayout表格布局，即所有内部组件可以放置到不同的表格中（每个表格只能放置一个控件）</li><li>TableLayoutPanel也可以使用Anchor、Dock等属性，因为他也是窗体容器内的一个组件。搭配布局与布局属性，可以实现很多不同的布局效果。</li><li>删除&#x2F;添加行、列：右键表格Panel，可以添加、删除行&#x2F;列</li><li>调整表格大小：表格属性Columns可以通过绝对值、百分比、自动调整等方式来调整单元格的大小<br>  a. 绝对：固定像素值大小<br>  b. 百分比：除去绝对大小后，单元格占剩余大小的百分比<br>  c. 自动调整：根据内部控件的大小生成</li><li>跨行&#x2F;列控件：在控件的ColumnSpan&#x2F;RowSpan调整控件可以跨行&#x2F;跨列布局</li><li>**注意： **TableLayoutPanel 控件每个单元格只能包含一个子控件。<blockquote><p>（5）系统提供的布局工具-默认布局：默认布局可以通过控件拖拽放置，并可以使用Anchor、Dock来调整<br>（6）自定义布局器：用户可以自己设计实现布局器，这属于WinForm高级的内容，后面学习。</p></blockquote></li></ul><img src="https://img-blog.csdnimg.cn/f795c6a396de4214a0cb84f3349468b9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Zi_6Zi_6Zi_5a6J,size_19,color_FFFFFF,t_70,g_se,x_16"><h1 id="三-WinForm常用控件"><a href="#三-WinForm常用控件" class="headerlink" title="三.WinForm常用控件"></a>三.WinForm常用控件</h1><p><strong>Winform 组件的使用:</strong></p><blockquote><p>（1）TextBox：输入文本框</p></blockquote><ul><li>常用属性：尺寸Size、单行&#x2F;多行Multiline、密码输入PasswordChar、只读ReadOnly、显示&#x2F;获取文本Text等</li><li>常用事件：KeyPress按下按键（常用于输出完成点击回车，box.Text取输入值，事件e.keyChar取按下哪个键）</li></ul><blockquote><p>（2）CheckBox：复选框</p></blockquote><ul><li>常用属性：尺寸Size、显示文本Text、Checked是否勾选</li><li>常用事件：Click点击事件、CheckedChanged勾选状态改变事件</li></ul><blockquote><p>（3）ComboBox：下拉列表（只能单选）</p></blockquote><ul><li>常用属性：<br>  a. 添加数据项：设计器编辑添加（属性-&gt;数据-&gt;Items，一行表示一个数据项）、程序手工添加（comboBox.Items.Add(“some”);）<br>  b. 其他设置：Size尺寸、Text提示文本等</li><li>常用事件：<br>  a. 获取选中的项：SelectedItem（选中项的值）、SelectedIndex（选中项的索引，-1表示未选中）<br>  b. 选项改变事件：SelectedIndexChanged</li><li>注意：Item可以添加字符串，也可以添加任意object类型（比如自定义对象），对象会以object.toString显示<blockquote><p>（4）ListBox：列表框（展示数据、可单选&#x2F;多选）</p></blockquote></li><li>常用属性：SelectionMode（单选&#x2F;多选模式）<br>  a. 单选模式获取选项：SelectedItem&#x2F;SelectedIndex（选中项的值&#x2F;索引）<br>  b. 多选模式获取选项：SelectedIndices&#x2F;SelectedItems（选中项的索引集合&#x2F;值集合）<br>  c. 添加数据项：设计器编辑添加（属性-&gt;数据-&gt;Items）、程序手工添加（listBox.Items.Add(“some”);）</li><li>常用事件：SelectedIndexChanged（选项改变）</li><li>注意：Item可以添加字符串，也可以添加任意object类型（比如自定义对象），对象会以object.toString显示<blockquote><p>（5）练习：学生信息编辑器实例（本代码）</p></blockquote></li></ul><p><strong>界面展示:</strong></p><img src="https://img-blog.csdnimg.cn/da51f2f5322743398a11ba74a80438b0.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Zi_6Zi_6Zi_5a6J,size_18,color_FFFFFF,t_70,g_se,x_16"><p><strong>实体类 Student（封装信息）</strong></p><p><strong>C# 类的属性与字段:</strong></p><blockquote><p>（1）字段：字段是类的成员变量，用于类内特征的数据存储（静态） 比如private int Id;</p></blockquote><blockquote><p>（2）属性：属性是对字段特征的动态描述，用于向外界提供数据，本质上就是get、set方法。</p></blockquote><ul><li>完整属性用法：<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="built_in">string</span> sdu_name;<span class="comment">//声明字段</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">string</span> StudentName&#123;<span class="comment">//声明属性</span></span><br><span class="line">      <span class="keyword">get</span>&#123; <span class="keyword">return</span> sdu_name; &#125;</span><br><span class="line">      <span class="keyword">set</span>&#123;</span><br><span class="line">         <span class="keyword">if</span>(<span class="keyword">value</span>==<span class="literal">null</span>)sdu_name = <span class="string">&quot;admin&quot;</span>;</span><br><span class="line">         sdu_name = <span class="keyword">value</span>;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>get访问器：get访问器必须包含return语句，返回字段‘realValue’。用于获取数据，如果没有get则字段为只写的</li><li>set访问器：set访问器接受它的输入参数–value，并把它赋给字段，value是隐式参数。用于设置数据，如果没有set则字段为只读的<blockquote><p>（3）使用方式：直接使用Class.StudentName来获取和设置数据，就像是直接使用公开的属性一样</p></blockquote></li></ul><blockquote><p>（4）自动属性：简化字段和属性的关系</p></blockquote><ul><li>用法：public 数据类型 属性名{ get; set; }</li><li>*原理：c# 允许只声明属性而不声明后备字段，编译器会创建隐藏的后备字段。并且自动挂接到get,set访问器上。<blockquote><p>（5）<strong>注意：</strong></p></blockquote></li><li>属性也可以不与字段关联，可以当作函数进行复杂计算，比较自由灵活</li><li>属性也可不用显示声明相应的字段，直接用于存贮数据。（自动属性）</li><li>也可以通定义其他set、get函数来实现访问private字段的功能<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">WindowsFormsApp_learning</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//属性访问器</span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> SduId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> SduName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">bool</span> SduSex &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> SduPhone</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span>; <span class="keyword">set</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Student</span>(<span class="params"><span class="built_in">int</span> sduId, <span class="built_in">string</span> sduName, <span class="built_in">bool</span> sduSex, <span class="built_in">string</span> sduPhone</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            SduId = sduId;</span><br><span class="line">            SduName = sduName;</span><br><span class="line">            SduSex = sduSex;</span><br><span class="line">            SduPhone = sduPhone;</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Student</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><strong>逻辑事件代码Form.cs:</strong><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">WindowsFormsApp_learning</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Form4</span> : <span class="title">Form</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Form4</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">            <span class="comment">//初始化数据</span></span><br><span class="line">            LoadData();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 保存按钮触发事件-保存学生信息到本地文件</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">save_student</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Student student = <span class="keyword">new</span> Student();</span><br><span class="line">            student.SduId =Convert.ToInt32(sdu_Id.Text.Trim()); <span class="comment">//Convert格式转换</span></span><br><span class="line">            student.SduName = sdu_Name.Text.Trim();</span><br><span class="line">            student.SduSex = (sdu_sex.SelectedIndex == <span class="number">1</span>);</span><br><span class="line">            student.SduPhone = sdu_phone.Text.Trim();</span><br><span class="line">            <span class="comment">//以Json格式保存到本地文件</span></span><br><span class="line">            <span class="built_in">string</span> JsonStr = JsonConvert.SerializeObject(student, Formatting.Indented);</span><br><span class="line">            AfTextFile.Write(<span class="string">&quot;student.txt&quot;</span>, JsonStr,AfTextFile.UTF8);</span><br><span class="line">            MessageBox.Show(<span class="string">&quot;操作成功&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">        <span class="comment">//读取文件，加载数据</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">LoadData</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="built_in">string</span> JsonStr = AfTextFile.Read(<span class="string">&quot;student.txt&quot;</span>, AfTextFile.UTF8);</span><br><span class="line">            <span class="keyword">if</span> (JsonStr == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">            Student student = JsonConvert.DeserializeObject&lt;Student&gt;(JsonStr);</span><br><span class="line">            sdu_Id.Text = Convert.ToString(student.SduId);</span><br><span class="line">            sdu_Name.Text = student.SduName;</span><br><span class="line">            sdu_sex.SelectedIndex = student.SduSex?<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">            sdu_phone.Text = student.SduPhone;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="图片框与项目资源"><a href="#图片框与项目资源" class="headerlink" title="图片框与项目资源"></a>图片框与项目资源</h1><p><strong>图片框与资源:</strong></p><blockquote><p>（1）添加资源来源：</p></blockquote><ul><li>本地文件 ： 本地资源路径，比如”D\Resources\123.jpg”（注意使用Windows路径格式）</li><li>项目资源文件：Properties&#x2F;Resources.resx（项目资源文件夹下）<br>  a. 如何添加项目资源文件：双击Properties&#x2F;Resources.resx-&gt;添加资源-&gt;添加现有文件-&gt;选择本地图片-&gt;重命名（规范化，以后使用时直接调用名字使用资源）<br>  b. 能添加什么类型的资源：字符串、文本文档、图片、视频、音频等<br>  c. 原理：Resources.resx将添加的资源整合到了项目exe当中，因此就算删除源文件也不影响项目运行。在调用资源时，是通过自动生成的方法来获取资源。<br>  d. 优点：将资源统一到项目中来，并且可以通过规范化的命名直接调用资源。<br>  e. 使用：通过 Properties.Resources.资源名称; 来直接调用你的资源，方便快捷</li><li>网络资源：比如”<a href="http://baidu/image/meinv.jpg&quot;">http://baidu/image/meinv.jpg&quot;</a></li></ul><blockquote><p>（2）图片资源加载类：</p></blockquote><ul><li>C# 提供了Image抽象类，作为所有图片资源的总称</li><li>C# 提供了Image抽象类的具体实现类 Bitmap（位图、像素图），来具体加载读取图像。<br>  a. 比如Bitmap img &#x3D; new Bitmap(“D\Resources\123.jpg”);<br>  b. 比如Bitmap img &#x3D; Properties.Resources.img_Conv;</li></ul><blockquote><p>（3）图片框控件：PictureBox</p></blockquote><ul><li>Size、Location属性：尺寸、位置</li><li>Image属性：图片资源（可以通过本地&#x2F;项目资源文件导入）</li><li>SizeMode属性：图片的适应模式（StretchImage拉伸图片和图片框相同尺寸、Zoom缩放等）</li><li>ErrorImage、InitialImage属性：加载失败、加载图片显示之前所显示的图片</li></ul><blockquote><p>（4）图片框控件可视化配置：在设计里拖动PictureBox并配置属性即可。</p></blockquote><blockquote><p>（5）图片框代码手动配置：</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Bitmap img = Properties.Resources.img_Conv; <span class="comment">//读取图片资源</span></span><br><span class="line">pictureBox.Image = img;<span class="comment">//手动设置图片框控件 Image来源</span></span><br><span class="line">pictureBox.SizeMode = PictureBoxSizeMode.Zoom;<span class="comment">//手动设置图片格式</span></span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">**添加资源**</span><br><span class="line"></span><br><span class="line">&lt;img src=<span class="string">&quot;https://img-blog.csdnimg.cn/cac31a6a17684aa0b51d0a7dd0c04db1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Zi_6Zi_6Zi_5a6J,size_20,color_FFFFFF,t_70,g_se,x_16&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">**图片框控件展示**</span><br><span class="line">&gt;界面设计就是简单的放置了一个PictureBox控件，没有过多的设计。图片来源的设置使用代码方式，原因是在以后开发中图片往往不是固定的，需要动态变化，因此使用代码方式动态设置图片来源是比较推荐的。</span><br><span class="line">```c<span class="meta">#</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">WindowsFormsApp_learning</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Form2</span> : <span class="title">Form</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Form2</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//初始化所有组件</span></span><br><span class="line">            InitializeComponent();</span><br><span class="line">            <span class="comment">//初始化PictureBox控件-图片资源</span></span><br><span class="line">            Bitmap img = Properties.Resources.img_Conv;</span><br><span class="line">            pictureBox.Image = img;</span><br><span class="line">            pictureBox.SizeMode = PictureBoxSizeMode.Zoom;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/1b5a51b0d89c4c018b7ebe3cc20afe6d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Zi_6Zi_6Zi_5a6J,size_20,color_FFFFFF,t_70,g_se,x_16"><hr><h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><ol><li><a href="https://blog.csdn.net/qq_40772692/article/details/121865401">WinForm（一） WinForm入门与基本控件使用</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">C#对WinForm的基本开发控件使用</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="C#" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/C/"/>
    
    <category term="前端" scheme="https://zml3589110.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="C#" scheme="https://zml3589110.github.io/tags/C/"/>
    
    <category term="WinForm" scheme="https://zml3589110.github.io/tags/WinForm/"/>
    
    <category term="控件" scheme="https://zml3589110.github.io/tags/%E6%8E%A7%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>C#上位机系列之二（使用C#写第一个程序）</title>
    <link href="https://zml3589110.github.io/posts/1801299827.html"/>
    <id>https://zml3589110.github.io/posts/1801299827.html</id>
    <published>2022-07-27T03:27:20.000Z</published>
    <updated>2022-07-27T03:49:30.702Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、新建程序项目工程"><a href="#一、新建程序项目工程" class="headerlink" title="一、新建程序项目工程"></a>一、新建程序项目工程</h1><ol><li><p>首先选择新建Windows窗体应用(.NET Framework)，然后选择项目保存位置，填写项目名称，这里因为我们不需要用git进行版本管理，所以不用新建GIT存储库；</p></li><li><p>框架是指.net框架，4以及4以下的.NET框架可以在xp上运行，4以上可以在win7&#x2F;8&#x2F;10上运行，鉴于当前大多数操作系统都是win7或win10，选择4.5版本。</p></li></ol><img src="https://s2.51cto.com/images/blog/202106/28/a90862a0d4873dbbab622a2411143913.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_30,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk="><h1 id="二、相应窗体介绍和内部代码分析"><a href="#二、相应窗体介绍和内部代码分析" class="headerlink" title="二、相应窗体介绍和内部代码分析"></a>二、相应窗体介绍和内部代码分析</h1><img src="https://s2.51cto.com/images/blog/202106/28/fe3167f4742f22e0cc7e4e9c9cd3b1be.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_30,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk="><ul><li>这里我们双击窗体界面，这也是VS的特性，双击一个控件，就会进入对应代码文件部分，这些代码全由VS在生成项目时自动生成，下面进行详细的解释：</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*filename：Form1.cs*/</span></span><br><span class="line"><span class="comment">//使用命名空间</span></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.ComponentModel;</span><br><span class="line"><span class="keyword">using</span> System.Data;</span><br><span class="line"><span class="keyword">using</span> System.Drawing;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用户项目工程自定义命名空间HelloWorld</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">HelloWorld</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//定义了一个名称为Form1的公共类，并且在定义类的同时创建了一个这个类的对象，名为Form</span></span><br><span class="line">    <span class="comment">//partial关键字</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Form1</span> : <span class="title">Form</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//与类同名的构造方法</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Form1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line">　　　　　<span class="comment">//用户自定义方法，窗体加载时由Form对象调用</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Form1_Load</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p><strong>命名空间（namespace）：</strong>在C#中用命名空间将很多类的属性及其方法进行封装供调用，类似C语言中将变量和函数封装成一个个.h文件，调用的时候只需要#include “filepath + filename”就可以使用，比如刚开始时用关键字using声明了一些所需要的系统命名空间（line1-10）;然后采用关键字namespace来自定义一个用户工程所需的命名空间HelloWorld，在我们定义的这个命名空间里就可以定义一些类和方法来进行下一步的实现；</p></li><li><p><strong>类（class）：</strong>C#是一门面向对象的编程语言，所以最基本的就是类和对象，对象的特征是具有属性（C语言中称为变量）和方法（C语言中称为函数），然后我们定义一个类来描述这个对象的特征，注意：这个时候定义的类不是真实存在的，所以不会分配内存空间，当我们用所定义的这个类去创建一个类的对象，这个对象是真实存在的，它会占用内存空间，比如在这个工程中定义了一个名称为Form1的公共类，并且在定义类的同时创建了一个这个类的对象，名为Form；</p></li><li><p><strong>方法：</strong>前面已经说过，在面向对象编程中是没有变量和函数的，所有的函数都被封装在类中，属于对象的方法，最基本的是类的构造方法，该方法与类名同名，在用类创建一个具体对象时自动调用，不可缺少，比如Form1( )；另外一种是自己定义的用户方法，比如该类中的Form1_Load（）方法，就是在初始化窗口时，通过具体对象Form调用：Form.Form1_Load( )；</p></li><li><p><strong>访问修饰符：</strong>用来控制类、属性、方法的访问权限，常用有5个，默认私有，不能被外部访问；<br>私有的private，公共的public，受保护的protected，内部的internal，受保护内部的protect internal；</p></li></ol><blockquote><p>这里有一个重点，在定义Form1类的时候含有一个关键字partial，这里就不得不说C#语言设计一个重要的特性了，能作为大多数人开发上位机的首选，C#有一个特性就是设计的时候界面与后台分离，但是类名相同，首先看一下工程文件结构：</p></blockquote><img src="https://s2.51cto.com/images/blog/202106/28/919a3688cad1a40f65ceae24689bab55.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_30,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk="><p>可以看到，Form1.cs文件下面包含了另一个Form1.Designer.cs文件，再打开Form1.Designer.cs这个文件，是不是很惊奇，和前面一模一样，再次定义了一个命名空间HelloWorld和Form1类，这个部分类中定义了我们使用的控件、事件委托以及如Dispose方法等。<br>因为这里面的代码都是自动生成的，因此设计成了一个部分类。<br>最关键的一点，这里类也是用partial关键字修饰的，可以看到，Partial是局部类型的意思，允许我们将一个类、结构或接口分成几个部分，分别实现在几个不同的.cs文件中，用partial定义的类可以在多个地方被定义，最后C#编译器编译时会将这些类当作一个类来处理；</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*@filename：Form1.Designer.cs */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">HelloWorld</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Form1</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 必需的设计器变量。</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">private</span> System.ComponentModel.IContainer components = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 清理所有正在使用的资源。</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;disposing&quot;&gt;</span>如果应释放托管资源，为 true；否则为 false。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Dispose</span>(<span class="params"><span class="built_in">bool</span> disposing</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">if</span> (disposing &amp;&amp; (components != <span class="literal">null</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                components.Dispose();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">base</span>.Dispose(disposing);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">region</span> Windows 窗体设计器生成的代码</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 设计器支持所需的方法 - 不要修改</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 使用代码编辑器修改此方法的内容。</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">InitializeComponent</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">this</span>.SuspendLayout();</span><br><span class="line">            <span class="comment">// </span></span><br><span class="line">            <span class="comment">// Form1</span></span><br><span class="line">            <span class="comment">// </span></span><br><span class="line">            <span class="keyword">this</span>.AutoScaleDimensions = <span class="keyword">new</span> System.Drawing.SizeF(<span class="number">6F</span>, <span class="number">12F</span>);</span><br><span class="line">            <span class="keyword">this</span>.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;</span><br><span class="line">            <span class="keyword">this</span>.ClientSize = <span class="keyword">new</span> System.Drawing.Size(<span class="number">418</span>, <span class="number">331</span>);</span><br><span class="line">            <span class="keyword">this</span>.Name = <span class="string">&quot;Form1&quot;</span>;</span><br><span class="line">            <span class="keyword">this</span>.Text = <span class="string">&quot;Form1&quot;</span>;</span><br><span class="line">            <span class="keyword">this</span>.Load += <span class="keyword">new</span> System.EventHandler(<span class="keyword">this</span>.Form1_Load);</span><br><span class="line">            <span class="keyword">this</span>.ResumeLayout(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**Main: **一切程序都有入口主函数main，C#也是如此，在Program.cs文件中定义了Program类，该类中拥有主函数main( )， 在main函数中，第三行代码是一切的开始，调用Form1类的构造函数，创建一个Form对象，一切由此开始，代码如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* @filename： Program.cs */</span></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">HelloWorld</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 应用程序的主入口点。</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        [<span class="meta">STAThread</span>]</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Application.EnableVisualStyles();</span><br><span class="line">            Application.SetCompatibleTextRenderingDefault(<span class="literal">false</span>);</span><br><span class="line">            Application.Run(<span class="keyword">new</span> Form1());　　<span class="comment">//调用Form1类的构造函数，创建一个Form对象，一切由此开始</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>再来解释一下最后三个文件：第一个文件主要是应用程序发布时的一些属性设置，版本号，属性，版权之类的，其余两个文件是工具自动生成的一些设置文件，不再过多赘述；</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* @filename：Assemblylnfo.cs*/</span></span><br><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.CompilerServices;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.InteropServices;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有关程序集的一般信息由以下</span></span><br><span class="line"><span class="comment">// 控制。更改这些特性值可修改</span></span><br><span class="line"><span class="comment">// 与程序集关联的信息。</span></span><br><span class="line">[<span class="meta">assembly: AssemblyTitle(<span class="meta-string">&quot;HelloWorld&quot;</span>)</span>]</span><br><span class="line">[<span class="meta">assembly: AssemblyDescription(<span class="meta-string">&quot;&quot;</span>)</span>]</span><br><span class="line">[<span class="meta">assembly: AssemblyConfiguration(<span class="meta-string">&quot;&quot;</span>)</span>]</span><br><span class="line">[<span class="meta">assembly: AssemblyCompany(<span class="meta-string">&quot;&quot;</span>)</span>]</span><br><span class="line">[<span class="meta">assembly: AssemblyProduct(<span class="meta-string">&quot;HelloWorld&quot;</span>)</span>]</span><br><span class="line">[<span class="meta">assembly: AssemblyCopyright(<span class="meta-string">&quot;Copyright ©  2018&quot;</span>)</span>]</span><br><span class="line">[<span class="meta">assembly: AssemblyTrademark(<span class="meta-string">&quot;&quot;</span>)</span>]</span><br><span class="line">[<span class="meta">assembly: AssemblyCulture(<span class="meta-string">&quot;&quot;</span>)</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 ComVisible 设置为 false 会使此程序集中的类型</span></span><br><span class="line"><span class="comment">//对 COM 组件不可见。如果需要从 COM 访问此程序集中的类型</span></span><br><span class="line"><span class="comment">//请将此类型的 ComVisible 特性设置为 true。</span></span><br><span class="line">[<span class="meta">assembly: ComVisible(false)</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果此项目向 COM 公开，则下列 GUID 用于类型库的 ID</span></span><br><span class="line">[<span class="meta">assembly: Guid(<span class="meta-string">&quot;094ac56a-7a59-4f32-a2eb-857135be4d2c&quot;</span>)</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 程序集的版本信息由下列四个值组成: </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//      主版本</span></span><br><span class="line"><span class="comment">//      次版本</span></span><br><span class="line"><span class="comment">//      生成号</span></span><br><span class="line"><span class="comment">//      修订号</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 可以指定所有值，也可以使用以下所示的 &quot;*&quot; 预置版本号和修订号</span></span><br><span class="line"><span class="comment">// 方法是按如下所示使用“*”: :</span></span><br><span class="line"><span class="comment">// [assembly: AssemblyVersion(&quot;1.0.*&quot;)]</span></span><br><span class="line">[<span class="meta">assembly: AssemblyVersion(<span class="meta-string">&quot;1.0.0.0&quot;</span>)</span>]</span><br><span class="line">[<span class="meta">assembly: AssemblyFileVersion(<span class="meta-string">&quot;1.0.0.0&quot;</span>)</span>]</span><br></pre></td></tr></table></figure><h1 id="三、实现-Hello，World-窗体"><a href="#三、实现-Hello，World-窗体" class="headerlink" title="三、实现 Hello，World 窗体"></a>三、实现 Hello，World 窗体</h1><blockquote><p>下面就正式开始C#程序的设计，首先是界面的实现，可以随意从控件工具箱中拖放控件到窗体中，这里我拖动两个Button和一个TextBox，并在右边设置框中修改每个控价的属性，界面如图：</p></blockquote><img src="https://s2.51cto.com/images/blog/202106/28/b52e21d7a228e978f2fa6fc8f626864c.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_30,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk="><p>这个时候如果查看Form1.cs文件，会发现和之前一样，这里就需要介绍另外几个开发GUI界面的知识点了:</p><blockquote><p>首先，我们想要实现的功能是：<br>当按下Send按钮时，文本框显示^_^Hello，World^_^字样，当按下Clear按钮时，文本框清空；</p></blockquote><p>这属于人机交互，一般人机交互的处理方式有两种：</p><ul><li>第一种是查询处理方式，比如在DOS系统下、Linux系统等命令行下的程序设计。</li><li>第二种是事件处理机制，有了很多的优越性，由传统的查询法耗费CPU一直在检测，变成了事件处理机制下的主动提醒告知，大幅度减轻CPU资源浪费，在事件处理机制中有以下几个概念：<blockquote></blockquote><p><strong>事件源（EventSource）：</strong>描述人机交互中事件的来源，通常是一些控件；<br><strong>事件（ActionEvent）：</strong>事件源产生的交互内容，比如按下按钮；<br><strong>事件处理：</strong>这部分也在C++中被叫做回调函数，当事件发生时用来处理事件；</p></li></ul><p><strong>注：这部分在单片机中也是如此，中断源产生中断，然后进入中断服务函数进行响应；</strong></p><p>清楚了这几个概念后，就来实现我们想要的功能:<br>按下按钮是一个事件，那么，如何编写或者在哪编写这个事件的事件处理函数呢？在VS中很方便，只需要双击这个控件，VS就会自动将该控件的事件处理函数添加进Form1.cs文件，此处我先双击“Send”按钮，可以看到VS自动添加进了 private void button1_Click(object sender, EventArgs e) 这个方法，</p><p>然后在里面编写代码，让文本框显示：这里所有的控件都是一个具体的对象，我们要通过这些对象设置其属性或者调用其方法；<br>同样的道理，双击Clear按钮，添加文本框清空代码，完整代码如下:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用户项目工程自定义命名空间HelloWorld</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">HelloWorld</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//定义了一个名称为Form1的公共类，并且在定义类的同时创建了一个这个类的对象，名为Form</span></span><br><span class="line">    <span class="comment">//partial关键字</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Form1</span> : <span class="title">Form</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//与类同名的构造方法</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Form1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Form1_Load</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button1_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//按下Send按钮</span></span><br><span class="line">            textBox1.Text = <span class="string">&quot;^_^Hello,World^_^&quot;</span>;    <span class="comment">//文本框显示    </span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button2_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//按下Clear按钮</span></span><br><span class="line">            textBox1.Text = <span class="string">&quot;&quot;</span>;                      <span class="comment">//文本框清空</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>至此，大功告成，第一个应用程序创建成功，点击启动按钮看下效果：</p></blockquote><img src="https://s2.51cto.com/images/blog/202106/28/cc36772036eb28b6199c505afcadb933.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_30,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk="><hr><h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><ol><li><a href="https://blog.51cto.com/u_13640625/3021603">C#上位机开发（二）—— Hello，World</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">通过C#完成第一个程序编写运行 Hello World</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="C#" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/C/"/>
    
    <category term="前端" scheme="https://zml3589110.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="C#" scheme="https://zml3589110.github.io/tags/C/"/>
    
    <category term="上位机" scheme="https://zml3589110.github.io/tags/%E4%B8%8A%E4%BD%8D%E6%9C%BA/"/>
    
    <category term="第一个程序" scheme="https://zml3589110.github.io/tags/%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>C#上位机系列之一（了解上位机）</title>
    <link href="https://zml3589110.github.io/posts/3443688373.html"/>
    <id>https://zml3589110.github.io/posts/3443688373.html</id>
    <published>2022-07-27T03:09:20.000Z</published>
    <updated>2022-07-27T03:49:30.698Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为什么需要上位机"><a href="#为什么需要上位机" class="headerlink" title="为什么需要上位机"></a>为什么需要上位机</h1><blockquote><p> 在单片机项目开发中，上位机也是一个很重要的部分，主要用于数据显示（波形、温度等）、用户控制（LED，继电器等），下位机（单片机）与 上位机之间要进行数据通信的两种方式都是基于串口的：</p></blockquote><h1 id="上位机开发类型"><a href="#上位机开发类型" class="headerlink" title="上位机开发类型"></a>上位机开发类型</h1><ul><li><strong>USB转串口</strong> —— 上位机和下位机通过USB转串口连接线直接相连进行数据交互；</li><li><strong>串口转WIFI（ESP8266）</strong> ——  上位机和下位机基于TCP&#x2F;IP协议通过WIFI传输数据；</li><li><strong>串口转蓝牙（HC-06）</strong>—— 不多用，暂不介绍；</li></ul><p>　　</p><h2 id="上位机软软件开发主要包括以下两种："><a href="#上位机软软件开发主要包括以下两种：" class="headerlink" title="上位机软软件开发主要包括以下两种："></a>上位机软软件开发主要包括以下两种：</h2><ol><li><p>Windows上位机（EXE可执行程序）<br>在Windows上，最早用VB语言开发，后来由于C++的发展，采用MFC开发，近几年，微软发布了基于.NET框架的面向对象语言C#，更加稳定安全，再配合微软强大的VS进行开发，效率奇高；<br><strong>另外，如果想要在Linux上跨平台运行，可以选用Qt；如果想要更加丰富好看的数据显示界面，可以选用Labview开发；</strong></p></li><li><p>Android上位机（APP）<br>在Android操作系统上，主要采用Java语言，使用WIFI或者蓝牙基于TCP&#x2F;IP协议传输数据，利用Android Studio开发；</p></li></ol><p><strong>在此，我们主要介绍如何通过VS + C#开发电脑上位机，其它上位机的开发暂且不论。</strong></p><blockquote><p>注：VS下载与安装参考这篇较详细的<a href="https://blog.csdn.net/qq_36556893/article/details/79430133">博客</a></p></blockquote><hr><h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><ol><li><a href="https://blog.51cto.com/u_13640625/3021604">C#上位机开发（一）—— 了解上位机</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">什么是上位机？C#怎么做上位机？</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="C#" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/C/"/>
    
    <category term="前端" scheme="https://zml3589110.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="C#" scheme="https://zml3589110.github.io/tags/C/"/>
    
    <category term="上位机" scheme="https://zml3589110.github.io/tags/%E4%B8%8A%E4%BD%8D%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>C#退出应用程序方法</title>
    <link href="https://zml3589110.github.io/posts/1995699131.html"/>
    <id>https://zml3589110.github.io/posts/1995699131.html</id>
    <published>2022-07-27T02:57:20.000Z</published>
    <updated>2022-07-27T03:00:16.615Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-退出应用程序的几种方法"><a href="#C-退出应用程序的几种方法" class="headerlink" title="C# 退出应用程序的几种方法"></a>C# 退出应用程序的几种方法</h1><blockquote><p>Process.GetCurrentProcess().Kill(); 这个方法试了报错</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Application.Exit();<span class="comment">//好像只在主线程可以起作用，而且当有线程，或是阻塞方法的情况下，很容易失灵</span></span><br><span class="line"><span class="keyword">this</span>.Close();<span class="comment">//只是关闭当前窗体。</span></span><br><span class="line">Application.ExitThread();<span class="comment">//退出当前线程上的消息循环，并关闭该线程上的所有窗口。 也会失灵</span></span><br><span class="line">Environment.Exit(<span class="number">0</span>); <span class="comment">//前面三种方法都不能很好的退出程序，此方法可以完全退出程序，这个要强制得多。</span></span><br><span class="line">Process.GetCurrentProcess().Kill();<span class="comment">//此方法完全奏效，绝对是完全退出。</span></span><br></pre></td></tr></table></figure><hr><h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><ol><li><a href="https://blog.csdn.net/weixin_45499836/article/details/124021582">C# 退出应用程序的几种方法)</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">C# 退出应用程序方法收集</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="C#" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/C/"/>
    
    <category term="前端" scheme="https://zml3589110.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="C#" scheme="https://zml3589110.github.io/tags/C/"/>
    
    <category term="关闭程序" scheme="https://zml3589110.github.io/tags/%E5%85%B3%E9%97%AD%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>C#窗体之一（esc退出窗体）</title>
    <link href="https://zml3589110.github.io/posts/2033967494.html"/>
    <id>https://zml3589110.github.io/posts/2033967494.html</id>
    <published>2022-07-27T02:54:20.000Z</published>
    <updated>2022-07-27T03:00:16.612Z</updated>
    
    <content type="html"><![CDATA[<h1 id="直接在当前窗体添加代码"><a href="#直接在当前窗体添加代码" class="headerlink" title="直接在当前窗体添加代码"></a>直接在当前窗体添加代码</h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//esc退出窗体</span></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="built_in">bool</span> <span class="title">ProcessCmdKey</span>(<span class="params"><span class="keyword">ref</span> System.Windows.Forms.Message msg , System.Windows.Forms.Keys keyData</span>) <span class="comment">//激活回车键</span></span></span><br><span class="line"><span class="function"></span> &#123;</span><br><span class="line">  <span class="built_in">int</span> WM_KEYDOWN=<span class="number">256</span>;       </span><br><span class="line">  <span class="built_in">int</span> WM_SYSKEYDOWN = <span class="number">260</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(msg.Msg == WM_KEYDOWN | msg.Msg == WM_SYSKEYDOWN)</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="keyword">switch</span>(keyData)</span><br><span class="line">   &#123;</span><br><span class="line">    <span class="keyword">case</span> Keys.Escape:</span><br><span class="line">     <span class="keyword">this</span>.Close();<span class="comment">//csc关闭窗体</span></span><br><span class="line">     <span class="keyword">break</span>;   </span><br><span class="line">   &#125;  </span><br><span class="line">   </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><hr><h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><ol><li><a href="https://www.cnblogs.com/mingfei200169/articles/578222.html">c#中快捷键的设置(esc退出窗体)</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">C# 通过 esc 按键退出当前窗体</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="C#" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/C/"/>
    
    <category term="前端" scheme="https://zml3589110.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="C#" scheme="https://zml3589110.github.io/tags/C/"/>
    
    <category term="窗体" scheme="https://zml3589110.github.io/tags/%E7%AA%97%E4%BD%93/"/>
    
    <category term="esc" scheme="https://zml3589110.github.io/tags/esc/"/>
    
  </entry>
  
  <entry>
    <title>了解C#和WinForm</title>
    <link href="https://zml3589110.github.io/posts/2295543441.html"/>
    <id>https://zml3589110.github.io/posts/2295543441.html</id>
    <published>2022-07-27T01:24:20.000Z</published>
    <updated>2022-07-27T03:00:16.608Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是-C-？"><a href="#什么是-C-？" class="headerlink" title="什么是 C# ？"></a>什么是 C# ？</h1><p>C#是一个现代的、通用的、面向对象的、面向组件、结构化语言C#的构想十分接近C和C++,是一门面向对象的编程语言，与java非常相似。</p><h1 id="C-的特点"><a href="#C-的特点" class="headerlink" title="C#的特点"></a>C#的特点</h1><ul><li><p><strong>简单、安全</strong></p><blockquote><p>在 C++ 和 C 语言中程序员最头疼的问题就是指针问题，在 C# 语言中已经不再使用指针，而且不允许直接读取内存等不安全的操作。它比 C、C++、Java 提供了更多的数据类型，并且每个数据类型都是固定大小的。此外还提供了命名空间来管理 C# 文件，命名空间 相当于一个文件夹，在创建程序时，允许在一个命名空间中创建一个或多个类，方便调用和重用</p></blockquote></li><li><p><strong>面向对象</strong></p></li></ul><p>与其他面向对象语言一样，C# 语言也具有面向对象语言的基本特征，即<code>封装、继承、 多态</code>。</p><blockquote><pre><code>**封装：**就是将代码看作一个整体，例如使用类、方法、接口等。在使用定义好的类、 方法、接口等对象时不必考虑其细节，只需要知道其对象名以及所需要的参数即可，也是一种提升代码安全性的方法。**继承：**是一种体现代码重用性的特性，减少代码的冗余，但在 C# 语言中仅支持单继承。**多态：**不仅体现了代码的重用性，也体现了代码的灵活性，它主要通过继承和实现接口的方式，让类或接口中的成员表现出不同的作用</code></pre></blockquote><ul><li><p><strong>支持跨平台</strong><br>最早的 C# 语言仅能在 Windows 平台上开发并使用，目前最新的 C# 6.0 版本已经能在多个操作系统上使用，例如在 Mac、Linux 等。此外，还能将其应用到手机、PDA 等设备上。</p></li><li><p><strong>开发多种类型的程序</strong><br>C# 语言不仅能开发在控制台下运行的应用程序，也能开发 Windows 窗体应用程序、网站、手机应用等多种应用程序，并且其提供的 Visual Studio 2015 开发工具中也支持多种类型的程序，让开发人员能快速地构建 C# 应用程序</p></li></ul><h1 id="了解C-、-NET、Winform的关系"><a href="#了解C-、-NET、Winform的关系" class="headerlink" title="了解C#、.NET、Winform的关系"></a>了解C#、.NET、Winform的关系</h1><ul><li>.NET 是一个开发平台，而 C# 是一种在 .NET 开发平台上使用的编程语言，目前能在 .NET 平台上使用的开发语言很多，例如 Visual Basic .NET、Python、J#、Visual C++.NET 等。但在 .NET 平台上使用最多的是 C# 语言。</li><li>WinForm 是 Windows Form 的简称，是基于 .NET Framework 平台的客户端（PC软件）开发技术，一般使用 C# 编程。C# WinForm 编程需要创建「Windows窗体应用程序」项目。</li><li>.NET 提供了大量 Windows 风格的控件和事件，我们可以直接拿来使用，上手简单，开发快速。</li></ul><h1 id="快速创建Winform程序"><a href="#快速创建Winform程序" class="headerlink" title="快速创建Winform程序"></a>快速创建Winform程序</h1><blockquote><p>使用VS2017,.NET Framework 4.6.1</p></blockquote><ul><li>一、创建窗体应用程序非常简单，依次选择“文件”一“新建”一“项目”命令，弹出如下图所示的对话框，选择Windows窗体应用程序，修改位置即可。</li></ul><img src="https://img-blog.csdnimg.cn/img_convert/86b77ebdd9cff3f042e4197ec55f491e.png#pic_center"><ul><li>二、通过工具箱中的label标签，button按钮，comboBox下拉按钮，直接在拖拽到窗体中；按钮的单击事件直接双击可以跳到对应的方法中进行代码编辑；还需要修改对应标签属性中的Name，方便后续的编辑；创建完成后出现如下界面</li></ul><img src="https://img-blog.csdnimg.cn/f586b06ae1094573927e288cfe900c0f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAenprMjAyMjAzMDY=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><ul><li>三、点击启动按钮，出现自己编写的窗体界面</li></ul><img src="https://img-blog.csdnimg.cn/b6b0618317904fb4903a2f90ef0f9d43.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAenprMjAyMjAzMDY=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><h1 id="Winform菜单和工具栏"><a href="#Winform菜单和工具栏" class="headerlink" title="Winform菜单和工具栏"></a>Winform菜单和工具栏</h1><img src="https://img-blog.csdnimg.cn/4931266cefef42088836a0b8601752c7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAenprMjAyMjAzMDY=,size_9,color_FFFFFF,t_70,g_se,x_16#pic_center"><ul><li>一、ListBox:列表框</li></ul><img src="https://img-blog.csdnimg.cn/a5cceedc3b244a4088eca5ae68129299.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAenprMjAyMjAzMDY=,size_16,color_FFFFFF,t_70,g_se,x_16"><ul><li>二、ComboBox:下拉框列表</li></ul><img src="https://img-blog.csdnimg.cn/8577ddc44331479a8b3e3f653d9fb254.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAenprMjAyMjAzMDY=,size_20,color_FFFFFF,t_70,g_se,x_16"><ul><li>三、CheckedListBox:复选框列表</li><li>四、MaskedTextBox:用于输入指定格式的内容，比如电话，邮编等信息，指定格式。</li><li>五、numericUpdown:数字显示框，点击向上或者向下来增加或减少数字的显示</li><li>六、RichTextBox:富文本框</li></ul><img src="https://img-blog.csdnimg.cn/575ec2000b2f42959b326882e3e3fb7f.png"><ul><li>七、MenuStrip:窗体上添加菜单栏控件 MenuStrip，直接点击 MenuStrip ，在右边的 Windows 窗体中就可以显示，输入具体的值时需要有提示字母，可以通过&amp;+字母实现</li><li>八、ToolStrip:和添加菜单栏类似，在工具箱中将 ToolStrip 控件直接拖到 Windows 窗体中即可；如果需要指定图片和文字，可以通过属性中的DisplayStyle设置</li></ul><img src="https://img-blog.csdnimg.cn/175497e93125477b8f8f9f57326ba809.png#pic_center"><ul><li>九、DataGridView:在网格中可以用自定义数据的行和列</li><li>十、事件:可以通过属性中的Click指定不同按钮的相同事件</li></ul><img src="https://img-blog.csdnimg.cn/915a488732164cab97249542371da64f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAenprMjAyMjAzMDY=,size_14,color_FFFFFF,t_70,g_se,x_16#pic_center"><ul><li>十一、容器</li></ul><img src="https://img-blog.csdnimg.cn/e3569f476a854c74af6ad0a295d637df.png#pic_center"><p><strong>在容器中可以放入需要的组件:</strong></p><img src="https://img-blog.csdnimg.cn/24fd881456e8411a9aaf468a5150ca88.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAenprMjAyMjAzMDY=,size_10,color_FFFFFF,t_70,g_se,x_16"><ul><li>十二、属性<blockquote><p><strong>Anchor</strong>属性可以将内部容器窗体的拉伸大小随外部窗体的改变而改变</p></blockquote></li></ul><img src="https://img-blog.csdnimg.cn/0ff92359c8aa4fe5882b10091052c2aa.png"><blockquote><p><strong>Dock</strong>属性将控件停靠在窗体的边缘或者填充窗体</p></blockquote><blockquote><p><strong>IsMdiContainer</strong> 将一个窗体设置为主窗体</p></blockquote><img src="https://img-blog.csdnimg.cn/d1f273531aea4affbaa89bd73ffeb9e2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAenprMjAyMjAzMDY=,size_15,color_FFFFFF,t_70,g_se,x_16"><img src="https://img-blog.csdnimg.cn/d1f273531aea4affbaa89bd73ffeb9e2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAenprMjAyMjAzMDY=,size_15,color_FFFFFF,t_70,g_se,x_16"><blockquote><p><strong>ControlBox</strong>是将窗体中的最大最小设置为不可见状态</p></blockquote><img src="https://img-blog.csdnimg.cn/d921658fe4dc4e14b8281fe010b6de73.png"><blockquote><p><strong>AcceptButton</strong>设置为true时用户可以通过回车键确认</p></blockquote><blockquote><p><strong>Show和ShowDialog的区别</strong></p></blockquote><ul><li>show是界面可以同时存在，第一个界面出现，出现第二个界面时可以点击第一个界面，而showDialog时出现第二个界面时无法点击第一个界面，必须关闭第二个界面才能点击第一个界面。</li></ul><h1 id="Form初始化、布局"><a href="#Form初始化、布局" class="headerlink" title="Form初始化、布局"></a>Form初始化、布局</h1><ul><li>form初始化操作时是先执行构造方法中的InitializeComponent()，然后执行load()，包括实例化——属性设置——事件注册——将控件添加到当前窗体的Controls中。</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>参考文章：<br><a href="http://c.biancheng.net/csharp/winform/">C语言中文网</a><br><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/tour-of-csharp/">C#教程</a></p><ol><li>C#开发窗体应用方便快捷，界面结构整齐。</li><li>控件的使用不仅可以通过拖拽的方式实现，也可以使用代码的方式实现，添加到Controls中，然后编写相应的逻辑代码。</li><li>VS2017快捷键设置：工具——&gt;选项</li></ol><img src="https://img-blog.csdnimg.cn/a423111d12f043dbb6589da4b8765afa.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAenprMjAyMjAzMDY=,size_20,color_FFFFFF,t_70,g_se,x_16"><hr><h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><ol><li><a href="https://blog.csdn.net/m0_67729518/article/details/123518389">WinForm学习</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">了解基本的C#开发信息</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="C#" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/C/"/>
    
    <category term="前端" scheme="https://zml3589110.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="C#" scheme="https://zml3589110.github.io/tags/C/"/>
    
    <category term="WinForm" scheme="https://zml3589110.github.io/tags/WinForm/"/>
    
    <category term=".NET" scheme="https://zml3589110.github.io/tags/NET/"/>
    
  </entry>
  
</feed>
