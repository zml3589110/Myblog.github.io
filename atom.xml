<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>赵逸尘个人博客</title>
  
  <subtitle>记录工作生活</subtitle>
  <link href="https://zml3589110.github.io/atom.xml" rel="self"/>
  
  <link href="https://zml3589110.github.io/"/>
  <updated>2023-12-02T07:19:29.393Z</updated>
  <id>https://zml3589110.github.io/</id>
  
  <author>
    <name>ZhaoYichen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Nginx开机自启动设置方法</title>
    <link href="https://zml3589110.github.io/posts/2373589197.html"/>
    <id>https://zml3589110.github.io/posts/2373589197.html</id>
    <published>2023-12-02T07:12:20.000Z</published>
    <updated>2023-12-02T07:19:29.393Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux操作系统："><a href="#Linux操作系统：" class="headerlink" title="Linux操作系统："></a>Linux操作系统：</h1><h2 id="1-使用Systemd服务"><a href="#1-使用Systemd服务" class="headerlink" title="1.使用Systemd服务"></a>1.使用Systemd服务</h2><p>对于使用Systemd管理服务的Linux发行版，例如Ubuntu 16.04及以后的版本、CentOS 7及以后的版本等，我们可以通过以下方法将Nginx设置为开机自启动：</p><p>首先，在创建Nginx服务文件之前，我们需要确保Nginx已经成功安装在系统上。然后，创建一个名为 nginx.service的服务文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo vim /etc/systemd/system/nginx.service</span></span><br></pre></td></tr></table></figure><p>复制并粘贴以下内容到该文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=The Nginx HTTP and reverse proxy server</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">PIDFile=/run/nginx.pid</span><br><span class="line">ExecStartPre=/usr/sbin/nginx -t</span><br><span class="line">ExecStart=/usr/sbin/nginx</span><br><span class="line">ExecReload=/bin/kill -s HUP $MAINPID</span><br><span class="line">ExecStop=/bin/kill -s QUIT $MAINPID</span><br><span class="line">PrivateTmp=true</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>保存并关闭文件。然后，运行以下命令启动Nginx服务并设置开机自启：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl <span class="built_in">enable</span> nginx</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl start nginx</span></span><br></pre></td></tr></table></figure><h2 id="2-使用SysV-Init"><a href="#2-使用SysV-Init" class="headerlink" title="2.使用SysV Init"></a>2.使用SysV Init</h2><p>对于早期使用SysV Init管理服务的Linux发行版，例如Ubuntu 14.04、CentOS 6等，可以通过以下方式将Nginx设置为开机自启：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo chkconfig --level 345 nginx on</span></span><br></pre></td></tr></table></figure><h1 id="Windows操作系统："><a href="#Windows操作系统：" class="headerlink" title="Windows操作系统："></a>Windows操作系统：</h1><p>若想要设置Nginx在Windows开机启动，可以通过以下方法实现：</p><h2 id="1-新建一个名称为“nginx-start-bat”的批处理脚本，并填写以下内容："><a href="#1-新建一个名称为“nginx-start-bat”的批处理脚本，并填写以下内容：" class="headerlink" title="1.新建一个名称为“nginx-start.bat”的批处理脚本，并填写以下内容："></a>1.新建一个名称为“nginx-start.bat”的批处理脚本，并填写以下内容：</h2><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">start</span> /b /d &quot;C:\<span class="built_in">path</span>\to\nginx&quot; nginx.exe</span><br></pre></td></tr></table></figure><p><strong>请注意将 C:\path\to\nginx替换成实际Nginx安装路径。</strong></p><h2 id="2-在Windows文件资源管理器中，通过以下路径进入系统的启动文件夹："><a href="#2-在Windows文件资源管理器中，通过以下路径进入系统的启动文件夹：" class="headerlink" title="2.在Windows文件资源管理器中，通过以下路径进入系统的启动文件夹："></a>2.在Windows文件资源管理器中，通过以下路径进入系统的启动文件夹：</h2><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">%APPDATA%</span>\Microsoft\Windows\<span class="built_in">Start</span> Menu\Programs\Startup</span><br></pre></td></tr></table></figure><p>将之前创建好的“nginx-start.bat”文件复制到此文件夹。</p><p>此时，Nginx应已设置为Windows开机自启动。</p><h1 id="macOS操作系统："><a href="#macOS操作系统：" class="headerlink" title="macOS操作系统："></a>macOS操作系统：</h1><p>对于macOS用户，可以使用以下方法将Nginx设置为开机自启：</p><h2 id="1-创建一个名为-homebrew-mxcl-nginx-plist的文件，并将其保存在-x2F-Library-x2F-LaunchAgents-路径下。"><a href="#1-创建一个名为-homebrew-mxcl-nginx-plist的文件，并将其保存在-x2F-Library-x2F-LaunchAgents-路径下。" class="headerlink" title="1.创建一个名为 homebrew.mxcl.nginx.plist的文件，并将其保存在 ~&#x2F;Library&#x2F;LaunchAgents 路径下。"></a>1.创建一个名为 homebrew.mxcl.nginx.plist的文件，并将其保存在 ~&#x2F;Library&#x2F;LaunchAgents 路径下。</h2><p>编辑文件并写入以下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</span><br><span class="line">&lt;plist version=&quot;1.0&quot;&gt;</span><br><span class="line">&lt;dict&gt;</span><br><span class="line">  &lt;key&gt;Label&lt;/key&gt;</span><br><span class="line">  &lt;string&gt;homebrew.mxcl.nginx&lt;/string&gt;</span><br><span class="line">  &lt;key&gt;ProgramArguments&lt;/key&gt;</span><br><span class="line">  &lt;array&gt;</span><br><span class="line">    &lt;string&gt;/usr/local/opt/nginx/bin/nginx&lt;/string&gt;</span><br><span class="line">    &lt;string&gt;-g&lt;/string&gt;</span><br><span class="line">    &lt;string&gt;daemon off;&lt;/string&gt;</span><br><span class="line">  &lt;/array&gt;</span><br><span class="line">  &lt;key&gt;RunAtLoad&lt;/key&gt;</span><br><span class="line">  &lt;true/&gt;</span><br><span class="line">  &lt;key&gt;KeepAlive&lt;/key&gt;</span><br><span class="line">  &lt;true/&gt;</span><br><span class="line">  &lt;key&gt;StandardErrorPath&lt;/key&gt;</span><br><span class="line">  &lt;string&gt;/usr/local/var/log/nginx/error.log&lt;/string&gt;</span><br><span class="line">  &lt;key&gt;StandardOutPath&lt;/key&gt;</span><br><span class="line">  &lt;string&gt;/usr/local/var/log/nginx/access.log&lt;/string&gt;</span><br><span class="line">&lt;/dict&gt;</span><br><span class="line">&lt;/plist&gt;</span><br></pre></td></tr></table></figure><h2 id="2-接着，运行以下命令将创建的plist文件加载到launchd服务并启动Nginx："><a href="#2-接着，运行以下命令将创建的plist文件加载到launchd服务并启动Nginx：" class="headerlink" title="2.接着，运行以下命令将创建的plist文件加载到launchd服务并启动Nginx："></a>2.接着，运行以下命令将创建的plist文件加载到launchd服务并启动Nginx：</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.nginx.plist</span></span><br></pre></td></tr></table></figure><hr><h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><ol><li><a href="https://www.8kiz.cn/archives/8407.html">nginx开机自启动设置方法</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">Nginx开机自启动设置方法</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="VUE" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/VUE/"/>
    
    <category term="前端" scheme="https://zml3589110.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Nginx" scheme="https://zml3589110.github.io/categories/Nginx/"/>
    
    
    <category term="网页" scheme="https://zml3589110.github.io/tags/%E7%BD%91%E9%A1%B5/"/>
    
    <category term="VUE" scheme="https://zml3589110.github.io/tags/VUE/"/>
    
    <category term="JavaScript" scheme="https://zml3589110.github.io/tags/JavaScript/"/>
    
    <category term="Nginx" scheme="https://zml3589110.github.io/tags/Nginx/"/>
    
    <category term="linux" scheme="https://zml3589110.github.io/tags/linux/"/>
    
    <category term="开机自启" scheme="https://zml3589110.github.io/tags/%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF/"/>
    
  </entry>
  
  <entry>
    <title>Nginx部署前端项目+ 域名配置</title>
    <link href="https://zml3589110.github.io/posts/1718063250.html"/>
    <id>https://zml3589110.github.io/posts/1718063250.html</id>
    <published>2023-12-02T06:04:20.000Z</published>
    <updated>2023-12-02T08:00:22.733Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Step1：服务器上安装-Nginx"><a href="#Step1：服务器上安装-Nginx" class="headerlink" title="Step1：服务器上安装 Nginx"></a>Step1：服务器上安装 Nginx</h1><h2 id="1、安装nginx"><a href="#1、安装nginx" class="headerlink" title="1、安装nginx"></a>1、安装nginx</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Ubuntu</span></span><br><span class="line">apt-get install nginx</span><br><span class="line"><span class="meta">#</span><span class="bash"> centOS</span></span><br><span class="line">yum install nginx</span><br></pre></td></tr></table></figure><h2 id="2、检查nginx是否安装，输入如下命令后若出现版本号则安装成功"><a href="#2、检查nginx是否安装，输入如下命令后若出现版本号则安装成功" class="headerlink" title="2、检查nginx是否安装，输入如下命令后若出现版本号则安装成功"></a>2、检查nginx是否安装，输入如下命令后若出现版本号则安装成功</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -v</span><br></pre></td></tr></table></figure><h2 id="3、启动nginx"><a href="#3、启动nginx" class="headerlink" title="3、启动nginx"></a>3、启动nginx</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl start nginx</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置nginx在系统启动时自动启动</span></span><br><span class="line">systemctl enable nginx</span><br></pre></td></tr></table></figure><ul><li>注：这里如果出现报错，说明缺少nginx启动相关的依赖，根据报错提示，复制报错提示解决方案的命令，安装相关依赖重新执行上述启动命令即可！</li></ul><h2 id="4、在浏览器输入ip地址，若出现如下页面则启动成功"><a href="#4、在浏览器输入ip地址，若出现如下页面则启动成功" class="headerlink" title="4、在浏览器输入ip地址，若出现如下页面则启动成功"></a>4、在浏览器输入ip地址，若出现如下页面则启动成功</h2><img src="https://img-blog.csdnimg.cn/b2b5aa905fc240738bb1429d076504d1.png"><h1 id="Step2：打包上传Vue项目到服务器"><a href="#Step2：打包上传Vue项目到服务器" class="headerlink" title="Step2：打包上传Vue项目到服务器"></a>Step2：打包上传Vue项目到服务器</h1><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="1-1、Vue2项目配置跨域"><a href="#1-1、Vue2项目配置跨域" class="headerlink" title="1-1、Vue2项目配置跨域"></a>1-1、Vue2项目配置跨域</h3><p>在 vue.config.js 中进行如下配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  publicPath: &#x27;/&#x27;,</span><br><span class="line">  outputDir: &#x27;dist&#x27;,</span><br><span class="line">  assetsDir: &#x27;static&#x27;,</span><br><span class="line">  lintOnSave: false,</span><br><span class="line">  productionSourceMap: false,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    port: port,</span><br><span class="line">    open: true,</span><br><span class="line">    overlay: &#123;</span><br><span class="line">      warnings: false,</span><br><span class="line">      errors: true</span><br><span class="line">    &#125;,</span><br><span class="line">    /* 上线用（配置跨域） */</span><br><span class="line">    proxy: &#123;</span><br><span class="line">      &#x27;/api&#x27;: &#123;</span><br><span class="line">        target: &#x27;接口地址url&#x27;,</span><br><span class="line">        // 允许跨域</span><br><span class="line">        changeOrigin: true,</span><br><span class="line">        ws: true,</span><br><span class="line">        pathRewrite: &#123;</span><br><span class="line">          &#x27;^/api&#x27;: &#x27;&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-Vue3-Vite项目配置跨域"><a href="#1-2-Vue3-Vite项目配置跨域" class="headerlink" title="1-2 Vue3+Vite项目配置跨域"></a>1-2 Vue3+Vite项目配置跨域</h3><p>在 vite.config.js 中进行如下配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">server: &#123;</span><br><span class="line">            port: 3005, // 项目端口</span><br><span class="line">            host: &quot;localhost&quot;,</span><br><span class="line">            proxy: &#123;</span><br><span class="line">                &quot;/smartReport&quot;: &#123; // 接口前缀</span><br><span class="line">                    target: &quot;接口服务器地址：ip+端口&quot;,</span><br><span class="line">                    // 允许跨域</span><br><span class="line">                    changeOrigin: true</span><br><span class="line">                    // 路径重写：在发出请求后将 接口前缀 替换为&#x27;&#x27;空值，这样不影响接口请求</span><br><span class="line">                    // pathRewrite: &#123; </span><br><span class="line">                    //   &#x27;^/smartReport&#x27;: &#x27;&#x27;</span><br><span class="line">                    // &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="2、Vue项目打包："><a href="#2、Vue项目打包：" class="headerlink" title="2、Vue项目打包："></a>2、Vue项目打包：</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p><strong>打包完成后，会在项目根目录下自动生成一个默认dist文件夹</strong></p><h2 id="3、上传至服务器指定文件夹下"><a href="#3、上传至服务器指定文件夹下" class="headerlink" title="3、上传至服务器指定文件夹下"></a>3、上传至服务器指定文件夹下</h2><p>这里我放在服务器的 &#x2F;root&#x2F;front_end 文件夹下<br>上传命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r [dist文件夹所在的绝对路径] [服务器用户名]@[服务器IP地址]:[目标服务器文件夹绝对路径]</span><br></pre></td></tr></table></figure><p><strong>以我的举例：</strong></p><img src="https://img-blog.csdnimg.cn/4cbbf91d37bd4d6e8f402db4f015a488.png"><p><strong>也可以使用 Xftp 向服务器传输文件，Mac用户推荐Termius</strong></p><h1 id="Step3：配置-Nginx"><a href="#Step3：配置-Nginx" class="headerlink" title="Step3：配置 Nginx"></a>Step3：配置 Nginx</h1><ol><li><p>在服务器上找到Nginx安装位置<br>默认在&#x2F;etc&#x2F;nginx</p></li><li><p>打开 &#x2F;etc&#x2F;nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/nginx</span><br></pre></td></tr></table></figure></li><li><p>修改nginx.conf</p></li></ol><p>我使用的Vs Code进行文件创建并写入</p><p><strong>方法：在Vs Code中安装以下插件，连接至服务器后，打开&#x2F;etc&#x2F;nginx</strong></p><img src="https://img-blog.csdnimg.cn/f643cb89d48246338b911371727dca1b.png"><p><strong>在 nginx.conf 中添加server，内容如下：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       3000;#自己设置端口号</span><br><span class="line">        server_name  njupt_patent  ;#自己设置项目名称</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   /root/front_end/dist;#这里写vue项目的所在地址</span><br><span class="line">            index  index.html;#这里是vue项目的首页，需要保证dist中有index.html文件</span><br><span class="line">        &#125;</span><br><span class="line">        location /api/ &#123;    # 会将接口地址/api开头的全部替换文下边配置的地址</span><br><span class="line">            proxy_pass http://[服务器ip地址]:[端口号];            #接口服务地址</span><br><span class="line">        &#125;</span><br><span class="line">        error_page   500 502 503 504  /50x.html;#错误页面</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置完 nginx.conf 后保存，执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 测试 Nginx 配置以确保没有语法错误</span></span><br><span class="line">nginx -t</span><br></pre></td></tr></table></figure><p>如果没有错误，重新加载Nginx以使更改生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl reload nginx</span><br></pre></td></tr></table></figure><ol start="4"><li>也可以直接重启nginx<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart nginx</span><br></pre></td></tr></table></figure></li></ol><h1 id="Step4：授权访问服务器中的文件夹"><a href="#Step4：授权访问服务器中的文件夹" class="headerlink" title="Step4：授权访问服务器中的文件夹"></a>Step4：授权访问服务器中的文件夹</h1><p>在服务器中打开 dist 所在的文件夹的最上级文件夹（一般是根目录），如：我的 dist 文件夹的绝对路径为 &#x2F;root&#x2F;front_end&#x2F;dist ，那么就打开：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /</span><br></pre></td></tr></table></figure><p><strong>输入如下命令授权访问 dist 文件夹：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod -R 777 /root/</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/1da84f125a63437081e772b72a830d04.png"><h1 id="Step5：访问已经部署好的Vue项目"><a href="#Step5：访问已经部署好的Vue项目" class="headerlink" title="Step5：访问已经部署好的Vue项目"></a>Step5：访问已经部署好的Vue项目</h1><p><strong>在浏览器输入：</strong><br>服务器IP地址:自己设置端口号&#x2F;index.html<br><strong>即可进行访问</strong></p><h1 id="Step6：域名配置"><a href="#Step6：域名配置" class="headerlink" title="Step6：域名配置"></a>Step6：域名配置</h1><p>在上述 nginx.conf 中添加如下配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">listen 80; #监听端口，http服务默认监听80端口</span><br><span class="line">server_name example.com; #域名，最好需要注册的域名，而且还要解析域名</span><br><span class="line">location / &#123;</span><br><span class="line">proxy_pass http://example.com:[端口号];#代理转发地址</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h1 id="配置本地地址映射域名以及域名转发指定ip"><a href="#配置本地地址映射域名以及域名转发指定ip" class="headerlink" title="配置本地地址映射域名以及域名转发指定ip"></a>配置本地地址映射域名以及域名转发指定ip</h1><p>首先安装nginx,参加博客：<a href="https://www.cnblogs.com/qfb620/p/5508468.html">https://www.cnblogs.com/qfb620/p/5508468.html</a></p><p>按照博客写的访问127.0.0.1查看是否访问成功，成功即安装成功。</p><p>下一步就是配置127.0.0.1与域名scc.company.com的映射（也就是访问scc.company.com可以请求到本地指定端口的地址。我的项目在本地的8083端口，配置正确，就能访问到我的项目）</p><p>首先,通过switch hosts来添加本地对应域名的映射 127.0.0.1 sct.company.com</p><p>下一步，打开nginx.conf</p><p>找到server,配置如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">      listen       80;</span><br><span class="line">      server_name  sct.company.com;</span><br><span class="line"> </span><br><span class="line">      #charset koi8-r;</span><br><span class="line"> </span><br><span class="line">      #access_log  logs/host.access.log  main;</span><br><span class="line"> </span><br><span class="line">      location / &#123;</span><br><span class="line">          root   html;</span><br><span class="line">         index  index.html index.htm;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      location /custom-web/ &#123;</span><br><span class="line">      proxy_pass   http://127.0.0.1:8083;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>主要改了下面两个地方</p><pre><code>   server_name  sct.company.com;    location /custom-web/ &#123;    proxy_pass   http://127.0.0.1:8083;    &#125;</code></pre><p>好了，127.0.0.1对应域名sct.company.com配好了</p><p>记得重启nginx,进入到nginx的目录，</p><p>输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><p>进行重启。</p><img src="https://img-blog.csdnimg.cn/20190617175148422.png"><p>没有报错就是重启成功</p><p>然后清空浏览器缓存，我是清空了好几次，</p><p>又ping了一下sct.company.com，看请求的是不是本地，</p><img src="https://img-blog.csdnimg.cn/20190617175330584.png"><p>可以看到请求的是本地</p><p>这个时候，浏览器输入sct.company.com&#x2F;custom-web&#x2F;…访问一下项目地址 ,可以看到可以请求到tomcat上面的项目了</p><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;分割线&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>下面看下重定向，配置如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">      listen       80;</span><br><span class="line">      server_name  sct.lvmama.com;</span><br><span class="line"> </span><br><span class="line">      #charset koi8-r;</span><br><span class="line"> </span><br><span class="line">      #access_log  logs/host.access.log  main;</span><br><span class="line"> </span><br><span class="line">      #location / &#123;</span><br><span class="line">         # root   html;</span><br><span class="line">         # index  index.html index.htm;</span><br><span class="line">     # &#125;</span><br><span class="line">  </span><br><span class="line">  location / &#123;</span><br><span class="line">   rewrite ^/(.*)$ http://www.baidu.com/; </span><br><span class="line">   proxy_pass   http://10.200.4.120:80;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">      location /customization-back-web/ &#123;</span><br><span class="line">      proxy_pass   http://127.0.0.1:8083;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>主要是这个代码：</p><p>  location &#x2F; {<br>        rewrite ^&#x2F;(.*)$ <a href="http://www.baidu.com/">http://www.baidu.com/</a>;<br>        proxy_pass   <a href="http://10.200.4.120/">http://10.200.4.120:80</a>;<br>       }</p><p>nginx -s reload重启nginx </p><p>你输入sct.company.com就会跳转到百度</p><h1 id="nginx配置文件-通过域名访问"><a href="#nginx配置文件-通过域名访问" class="headerlink" title="nginx配置文件 通过域名访问"></a>nginx配置文件 通过域名访问</h1><p>解读Nginx配置文件，通过域名访问tomcat<br>第一次在linux 服务器上使用nginx 并指向tomcat 目录 通过域名 访问项目。遇到了很多坑，为了让自己更好的学习并吸收知识，特意总结了一下这次的经验。<br>首先我们需要了解一下nginx的组成部分，想必大家都是对他有所了解。<br>文件所在的路径是 &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf 文件夹下的nginx.conf。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">第一个原本的配置文件上是注释的，这里指的是nginx的用户权限，</span><br><span class="line">user nobody;</span><br><span class="line"></span><br><span class="line">设置最大的工作衍生进程数 这里默认是1</span><br><span class="line">worker_processes 1</span><br><span class="line"></span><br><span class="line">最大的连接数 设置最大的连接数默认为1024个连接数 </span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Http 的主要设置，这里可以添加多个server</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">每一个Server都是一个服务</span><br><span class="line">server&#123;</span><br><span class="line"><span class="meta">#</span><span class="bash">这里是过滤请求，/是所有请求都可以</span></span><br><span class="line">location /&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>下面部署nginx 并使其转发到tomcat下的重点在于server这个块。</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">      listen       80; #首先是nginx的监听端口默认为80</span><br><span class="line">      server_name  www.xxxx.com; #这里是你需要访问的域名地址</span><br><span class="line"><span class="meta">#</span><span class="bash">add_header <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span> <span class="string">&#x27;*&#x27;</span>;<span class="comment">#这里是http 域名跨域，报错时候添加的请求头，这样写所有请求都会进来，会很不安全。</span></span></span><br><span class="line">      #charset koi8-r;</span><br><span class="line">      #access_log  logs/host.access.log  main;#这里是 日志文件的生成路径</span><br><span class="line">      </span><br><span class="line"><span class="meta">#</span><span class="bash">详细介绍location</span></span><br><span class="line">      location / &#123;</span><br><span class="line">      #是监听的端口默认访问的地址，这里如果没有做tomcat的转发则会进入nginx的html目录下的index.html</span><br><span class="line">          root   html;</span><br><span class="line">          </span><br><span class="line">          #这里是编写监听到的请求所转发的端口号，即tomcat端口</span><br><span class="line">proxy_pass http://localhost:8081;</span><br><span class="line">          #Proxy Settings;</span><br><span class="line">          #proxy_redirect off;</span><br><span class="line">          #proxy_set_header Host $host;</span><br><span class="line">          #proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">          #proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">设置nginx 的默认显示页</span></span><br><span class="line">          index  index.html index.htm;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">设置http请求的请求头，使其在跨域访问上不会被浏览器阻止。ps:这里设置我发现没有用，后来还是在ajax过滤器中添加的 请求头，如果大家有知道这里怎么修改的，请留言大家一起学习。</span></span><br><span class="line">add_header &#x27;Access-Control-Allow-Origin&#x27; &#x27;*&#x27;;</span><br><span class="line">add_header &#x27;Access-Control-Allow-Methods&#x27; &#x27;GET, POST, OPTIONS&#x27;;</span><br><span class="line">add_header &#x27;Access-Control-Allow-Headers&#x27; &#x27;DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type&#x27;;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">      # redirect server error pages to the static page /50x.html</span><br><span class="line">      #</span><br><span class="line">      error_page   500 502 503 504  /50x.html;</span><br><span class="line">      location = /50x.html &#123;</span><br><span class="line">          root   html;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>下面是location的设置</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">设置服务器缓存</span><br><span class="line">1.添加一个location  ~.*\.(意思是所有.jpg后缀的文件)</span><br><span class="line">location  ~.*\.(jpg|png|gif)$&#123;</span><br><span class="line"></span><br><span class="line">2.设置该文件类型文件缓存的清除周期为30天</span><br><span class="line">expires  30d;</span><br><span class="line">&#125;</span><br><span class="line">location  ~.*\.(css|js)?$&#123;</span><br><span class="line"></span><br><span class="line">3.设置该文件类型文件缓存的清除周期为1小说</span><br><span class="line">expires  1h;</span><br><span class="line">&#125;</span><br><span class="line">这里注意 全部请求是/  而过滤的请求是\ </span><br></pre></td></tr></table></figure><p><strong>顺带提一下负载均衡</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Nginx 均衡负载的实现 简单提一下 均衡策略</span><br><span class="line">在http 里添加一个upstream 在这个里面依次填写 不同的ip以及端口 nginx </span><br><span class="line">upstream name&#123;</span><br><span class="line">server ip:端口号;</span><br><span class="line">server ip:端口号;</span><br><span class="line">server ip:端口号;</span><br><span class="line">server ip:端口号;</span><br><span class="line">&#125;</span><br><span class="line">nginx 的默认均衡策略是加权轮询 </span><br><span class="line">1.加权轮询策略</span><br><span class="line">nginx计算每个后端服务器的权重，然后自动分配权重最高的后端服务器来处理请求。</span><br><span class="line">加权轮询策略 使用 weight=1来给地址添加权重，权重越高，nginx会优先分配</span><br><span class="line"></span><br><span class="line">2.ip_hash策略</span><br><span class="line">nginx会记录这个访问的ip地址并且在一段时间中 分配给这个ip一个server。</span><br><span class="line">ip_hash 在upstream 的结尾加上  ip_hash; nginx 自动使用ip_hash</span><br><span class="line"></span><br><span class="line">3.url_hash 等.. 插件形式的均衡策略这里就不提了</span><br></pre></td></tr></table></figure><p><strong>设置完配置文件下面就是运行测试了。</strong></p><ol><li>进入nginx 启动文件的目录 &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin</li><li>启动服务 .&#x2F;nginx （这是在第一次启动时使用，或者进程被杀死时启动。）</li><li>重启服务 .&#x2F;nginx -s reload (这是在修改了配置文件的情况下，不需要杀死进程)</li><li>如果在使用 .&#x2F;nginx 命令时 linux 报错nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)证明这个80端口被nginx占用了，这个时候需要杀死进程 使用killall -9 nginx 或者使用 netstat -apn | grep 80 查询当前80端口 tcp 0 0 0.0.0.0:80 0.0.0.0:* LISTEN 13741&#x2F;nginx: master 然后使用kill -9 13741命令杀死进程.</li><li>启动nginx服务器就不会报错，如果配置文件出现错误，下面会显示错误的行号</li></ol><p>在浏览器上输入域名，nginx自动在nginx.conf中查找 server_name 对应的域名 的server 下的location跳转到proxy_pass 这里指的的 IP和端口。我这里设置的是8081端口。</p><img src="https://img-blog.csdn.net/20181024161732244"><p>注意如果proxy_pass 配置的IP地址和域名解析的IP地址不同会出现</p><img src="https://img-blog.csdn.net/20181024162037108"><p>这个问题我是在java代码中使用ajax拦截请求后加入到请求头中解决的。</p><p>在nginx上添加下面这几段并没有实际效果。<br>add_header ‘Access-Control-Allow-Origin’ ‘*’;<br>add_header ‘Access-Control-Allow-Methods’ ‘GET, POST, OPTIONS’;<br>add_header ‘Access-Control-Allow-Headers’ ‘DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type’;</p><h1 id="LINUX安装nginx并绑定域名详细教程"><a href="#LINUX安装nginx并绑定域名详细教程" class="headerlink" title="LINUX安装nginx并绑定域名详细教程"></a>LINUX安装nginx并绑定域名详细教程</h1><ol><li><p>安装依赖包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//一键安装上面四个依赖</span><br><span class="line">yum -y install gcc zlib zlib-devel pcre-devel openssl openssl-devel</span><br></pre></td></tr></table></figure></li><li><p>下载并解压安装包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//创建一个文件夹</span><br><span class="line">cd /usr/local</span><br><span class="line">mkdir nginx</span><br><span class="line">cd nginx</span><br><span class="line">//下载tar包</span><br><span class="line">wget http://nginx.org/download/nginx-1.13.7.tar.gz</span><br><span class="line">tar -xvf nginx-1.13.7.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>安装nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//进入nginx目录</span><br><span class="line">cd /usr/local/nginx</span><br><span class="line">//进入目录</span><br><span class="line">cd nginx-1.13.7</span><br><span class="line">//执行命令</span><br><span class="line">./configure</span><br><span class="line">//执行make命令</span><br><span class="line">make</span><br><span class="line">//执行make install命令</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></li><li><p>配置nginx.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">打开配置文件</span><br><span class="line">vi /usr/local/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure><p>将端口号改成没有被占用的端口（我这里用的是8066），因为可能apeache占用80端口，apeache端口尽量不要修改，我们选择修改nginx端口。</p></li></ol><p>localhost修改为你服务器ip地址。</p><img src="https://img-blog.csdnimg.cn/20200512213707731.png"><ol start="5"><li><p>启动nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx -s reload</span><br><span class="line">//如果出现报错：nginx: [error] open() ＂/usr/local/nginx/logs/nginx.pid＂ failed</span><br><span class="line"></span><br><span class="line">则运行： /usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure><p>再次启动即可！<br><strong>查看nginx进程是否启动：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep nginx</span><br></pre></td></tr></table></figure></li><li><p>若想使用外部主机连接上虚拟机访问端口(你的服务器ip地址)，需要关闭虚拟机的防火墙：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">centOS6及以前版本使用命令： systemctl stop iptables.service</span><br><span class="line"></span><br><span class="line">centOS7关闭防火墙命令： systemctl stop firewalld.service</span><br></pre></td></tr></table></figure></li></ol><p><strong>随后访问该ip即可看到nginx界面。</strong></p><img src="https://img-blog.csdnimg.cn/20200512214119545.png"><ol start="7"><li>nginx安装完成后，我们来绑定域名<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">打开配置文件</span><br><span class="line">vi /usr/local/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure></li></ol><p>修改监听端口listen为: 80;<br>修改server_name为 <a href="http://www.xxxx.com(这里是你的域名)/">www.xxxx.com（这里是你的域名）</a>;<br>在下面server标签里添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">           #转发地址</span><br><span class="line">           proxy_pass http://localhost:8066;</span><br><span class="line">           root   html;</span><br><span class="line">           index  index.html index.htm;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20200512214633218.png"><ol start="8"><li>然后保存文件，重启nginx，重新访问服务器IP地址，你会发现，你的域名也可以直接跳到你项目的页面</li></ol><img src="https://img-blog.csdnimg.cn/20200512215045638.png"><hr><h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><ol><li><a href="https://blog.csdn.net/NJR10byh/article/details/123267776">Linux服务器使用Nginx部署前端项目+ 域名配置</a></li><li><a href="https://blog.csdn.net/luo_yu_1106/article/details/92662138">nginx配置本地地址映射域名以及域名转发指定ip</a></li><li><a href="https://blog.csdn.net/qq_15724141/article/details/83346093">nginx配置文件 通过域名访问</a></li><li><a href="https://blog.csdn.net/qq_38159467/article/details/106085525">LINUX安装nginx并绑定域名详细教程</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">VUE部署到linux下的Nginx，实现远程代理访问</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="VUE" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/VUE/"/>
    
    <category term="前端" scheme="https://zml3589110.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Nginx" scheme="https://zml3589110.github.io/categories/Nginx/"/>
    
    
    <category term="网页" scheme="https://zml3589110.github.io/tags/%E7%BD%91%E9%A1%B5/"/>
    
    <category term="VUE" scheme="https://zml3589110.github.io/tags/VUE/"/>
    
    <category term="JavaScript" scheme="https://zml3589110.github.io/tags/JavaScript/"/>
    
    <category term="Nginx" scheme="https://zml3589110.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Nginx安装并部署VUE</title>
    <link href="https://zml3589110.github.io/posts/588013124.html"/>
    <id>https://zml3589110.github.io/posts/588013124.html</id>
    <published>2023-12-01T13:13:20.000Z</published>
    <updated>2023-12-02T07:19:29.403Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是Nginx"><a href="#什么是Nginx" class="headerlink" title="什么是Nginx"></a>什么是Nginx</h1><p>一款高性能、轻量级Web服务软件<br>稳定性高<br>系统资源消耗低<br>对HTTP并发连接的处理能力高<br>单台物理服务器可支持30000~50000个并发请求</p><h1 id="Ubuntu如何部署vue项目操作步骤"><a href="#Ubuntu如何部署vue项目操作步骤" class="headerlink" title="Ubuntu如何部署vue项目操作步骤"></a>Ubuntu如何部署vue项目操作步骤</h1><ol><li>安装nginx。</li><li>在vue项目的根目录下履行“npm run bulid:prod”打包vue项目。</li><li>打包完成后会生成一个dist目录，将其上传到服务器中。</li><li>修改nginx配置文件&#x2F;etc&#x2F;nginx&#x2F;sites-enabled&#x2F;default，例如：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line"></span><br><span class="line">listen 80;</span><br><span class="line"></span><br><span class="line">listen [::]:80;</span><br><span class="line"></span><br><span class="line">server_name 127.0.0.1:80; # 服务器域名或IP+端口</span><br><span class="line"></span><br><span class="line">root /data/blog/backend/dist; # 打包后的dist目录</span><br><span class="line"></span><br><span class="line">index index.html;</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line"></span><br><span class="line">try_files $uri $uri/ @router; # 指向下面的 @router否则会出现 404</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 对应上面的 @router,主要Vue要求其实不是真实路径，没法找到文件，需要重定向到 index.html 中，然后交给路由处理</span></span><br><span class="line"></span><br><span class="line">location @router &#123;</span><br><span class="line"></span><br><span class="line">rewrite ^.*$ /index.html last;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>输入命令重新加载配置文件便可。<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure></li></ol><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>系统：ubuntu20<br>安装nginx：<br>可以先创建一个nginx目录，我的目录在 &#x2F;usr&#x2F;local&#x2F;nginx下</p><h1 id="一、安装nginx"><a href="#一、安装nginx" class="headerlink" title="一、安装nginx"></a>一、安装nginx</h1><ol><li>安装依赖</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install gcc zlib1g-dev libpcre3 libpcre3-dev libssl-dev</span></span><br></pre></td></tr></table></figure><ol start="2"><li>下载nginx</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget https://nginx.org/download/nginx-1.13.4.tar.gz</span></span><br></pre></td></tr></table></figure><p>也可以手动下载：nginx官网 ：<a href="http://nginx.org/en/download.html">http://nginx.org/en/download.html</a></p><ol start="3"><li><p>解压并进入目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tar -xvf nginx-1.13.4.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> nginx-1.13.4/</span></span><br></pre></td></tr></table></figure></li><li><p>编译和安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./configure</span></span><br><span class="line"><span class="meta">#</span><span class="bash">编译</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo make</span></span><br><span class="line"><span class="meta">#</span><span class="bash">编译成功之后，就可以安装了</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo make install</span></span><br></pre></td></tr></table></figure></li><li><p>查看nginx版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./configure</span></span><br><span class="line"><span class="meta">#</span><span class="bash">进入nginx安装目录</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/nginx/</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看版本</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sbin/nginx -v</span></span><br><span class="line">nginx version: nginx/1.13.4</span><br></pre></td></tr></table></figure></li><li><p>启动【我安装到 &#x2F;usr&#x2F;local&#x2F;nginx目录下了】</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo /usr/<span class="built_in">local</span>/nginx/sbin/nginx</span></span><br><span class="line"><span class="meta">#</span><span class="bash">查看是否启动成功 端口默认是80端口</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> curl 127.0.0.1</span></span><br><span class="line"><span class="meta">#</span><span class="bash">如果返回html 里面有 Welcome to nginx! 则成功</span></span><br></pre></td></tr></table></figure><ol start="7"><li>启动nginx<br>进入&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin目录，输入.&#x2F;nginx即可启动nginx</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nginx</span><br></pre></td></tr></table></figure><ol start="8"><li>如果启动报错：nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)，说明80端口被占用，使用如下命令：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fuser -k 80/tcp</span><br></pre></td></tr></table></figure></li></ol><p><strong>关闭nginx</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nginx -s quit  或者 ./nginx -s stop</span><br></pre></td></tr></table></figure><p><strong>重启nginx</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nginx -s reload</span><br></pre></td></tr></table></figure><p><strong>查看nginx进程</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux|grep nginx</span><br></pre></td></tr></table></figure><ol start="9"><li>设置nginx开机启动<br><strong>只需在rc.local增加启动代码即可。</strong><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/rc.local</span><br></pre></td></tr></table></figure><strong>按键盘 i 然后在底部增加：</strong><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">/usr/<span class="built_in">local</span>/nginx 你的nginx安装的路径</span></span><br><span class="line">/usr/local/nginx/sbin/nginx</span><br></pre></td></tr></table></figure></li></ol><p><strong>nginx安装完成</strong></p><h2 id="安装nginx说明2"><a href="#安装nginx说明2" class="headerlink" title="安装nginx说明2"></a>安装nginx说明2</h2><ol><li>下载压缩包<br>下载地址：<a href="https://nginx.org/en/download.html">nginx下载</a></li></ol><img src="https://img-blog.csdnimg.cn/20191206211604680.png"><ol start="2"><li>解压<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf nginx-1.17.6.tar.gz</span><br></pre></td></tr></table></figure></li><li>安装依赖<br>进入nginx的安装目录</li></ol><img src="https://img-blog.csdnimg.cn/20191206212015540.png"><p><strong>执行命令后会发现出现错误，很多not found， 我们需要添加依赖库。</strong></p><ul><li><p>1、PCRE库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">./configure: error: the HTTP rewrite module requires the PCRE library.</span><br><span class="line">You can either disable the module by using --without-http_rewrite_module</span><br><span class="line">option, or install the PCRE library into the system, or build the PCRE library</span><br><span class="line">statically from the source with nginx by using --with-pcre=&lt;path&gt; option.</span><br></pre></td></tr></table></figure><p><strong>安装PCRE：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libpcre3 libpcre3-dev</span><br></pre></td></tr></table></figure></li><li><p>2、zlib库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">./configure: error: the HTTP gzip module requires the zlib library.</span><br><span class="line">You can either disable the module by using --without-http_gzip_module</span><br><span class="line">option, or install the zlib library into the system, or build the zlib library</span><br><span class="line">statically from the source with nginx by using --with-zlib=&lt;path&gt; option.</span><br></pre></td></tr></table></figure></li></ul><p>** 解决：**</p><p>下载压缩包<a href="http://zlib.net/">http://zlib.net/</a></p><img src="https://img-blog.csdnimg.cn/20191206212711572.png"><ul><li>解压缩<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf zlib-1.2.11.tar.gz</span><br></pre></td></tr></table></figure></li><li>进入文件夹中，依次执行</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>成功，会出现</p><img src="https://img-blog.csdnimg.cn/20191206213142831.png"><ol start="4"><li>安装Nginx<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make install</span><br></pre></td></tr></table></figure></li></ol><img src="https://img-blog.csdnimg.cn/20191206213300526.png"><ul><li>1、 查看nginx位置</li></ul><img src="https://img-blog.csdnimg.cn/2019120621343843.png"><ul><li>2、进入&#x2F;usr&#x2F;local&#x2F;nginx</li></ul><img src="https://img-blog.csdnimg.cn/20191206213544801.png"><ul><li>3、nginx启动命令<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">首先进入sbin</span></span><br><span class="line">./nginx 开启</span><br><span class="line">./nginx -s stop 停止</span><br><span class="line">./nginx -s quit</span><br><span class="line">./nginx -s reload</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">对 nginx 进行重启相当于先停止再启动，即先执行停止命令再执行启动命令</span></span><br><span class="line">./nginx -s quit</span><br><span class="line">./nginx</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">重新加载配置文件</span></span><br><span class="line">    （当修改nginx.conf 修改，要想让配置生效需要重启nginx，使用./nginx -s reload不用先停止nginx再        </span><br><span class="line">     启动，即可将配置信息在nginx中生效。）</span><br><span class="line">./nginx -s reload</span><br></pre></td></tr></table></figure></li></ul><h2 id="一、编译安装Nginx服务"><a href="#一、编译安装Nginx服务" class="headerlink" title="一、编译安装Nginx服务"></a>一、编译安装Nginx服务</h2><p>下载安装包</p><ol><li>关闭防火墙将nginx所需软件包到&#x2F;opt目录下<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br><span class="line">setenforce 0</span><br><span class="line"></span><br><span class="line">nginx-1.12.0.tar.gz</span><br></pre></td></tr></table></figure></li></ol><img src="https://img-blog.csdnimg.cn/20210108161005237.png"><ol start="2"><li>安装依赖包<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install pcre-devel zlib-devel gcc gcc-c++ make</span><br></pre></td></tr></table></figure></li></ol><img src="https://img-blog.csdnimg.cn/20210108161659919.png"><ol start="3"><li>创建运行用户、组<br><strong>（Nginx 服务程序默认以 nobody 身份运行，建议为其创建专门的用户账号，以便更准确地控制其访问权限）</strong><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd -M -s /sbin/nologin nginx</span><br></pre></td></tr></table></figure></li></ol><img src="https://img-blog.csdnimg.cn/20210108161927441.png"><ol start="4"><li>编译安装Nginx<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cd /opt</span><br><span class="line">tar zxvf nginx-1.12.0.tar.gz -C /opt/</span><br><span class="line"></span><br><span class="line">cd nginx-1.12.0/</span><br><span class="line">./configure \</span><br><span class="line">--prefix=/usr/local/nginx \      #指定nginx的安装路径</span><br><span class="line">--user=nginx \#指定用户名</span><br><span class="line">--group=nginx \#指定组名</span><br><span class="line">--with-http_stub_status_module#启用 http_stub_status_module 模块以支持状态统计</span><br><span class="line"></span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line">ln -s /usr/local/nginx/sbin/nginx /usr/local/sbin/#让系统识别nginx的操作命令</span><br></pre></td></tr></table></figure></li></ol><img src="https://img-blog.csdnimg.cn/20210108163831472.png"><ol start="5"><li>检查、启动、重启、停止 nginx服务<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">nginx -t#检查配置文件是否配置正确</span><br><span class="line">nginx#启动</span><br><span class="line">cat /usr/local/nginx/logs/nginx.pid#先查看nginx的PID号</span><br><span class="line">kill -3 &lt;PID号&gt;</span><br><span class="line">kill -s QUIT &lt;PID号&gt;#停止</span><br><span class="line">killall -3 nginx</span><br><span class="line">killall -s QUIT nginx</span><br><span class="line"></span><br><span class="line">kill -1 &lt;PID号&gt;#重载</span><br><span class="line">kill -s HUP &lt;PID号&gt;</span><br><span class="line">killall -1 nginx</span><br><span class="line">killall -s HUP nginx</span><br><span class="line"><span class="meta">#</span><span class="bash">日志分隔，重新打开日志文件</span></span><br><span class="line">kill -USR1 &lt;PID号&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash">平滑升级</span></span><br><span class="line">kill -USR2 &lt;PID号&gt;</span><br></pre></td></tr></table></figure></li></ol><img src="https://img-blog.csdnimg.cn/20210109092954580.png"><ol start="6"><li>添加 Nginx 系统服务</li></ol><ul><li><p>方法一：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/init.d/nginx</span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash">chkconfig: - 99 20</span></span><br><span class="line"><span class="meta">#</span><span class="bash">description:Nginx Service Control Script</span></span><br><span class="line">COM=&quot;/usr/local/nginx/sbin/nginx&quot;</span><br><span class="line">PID=&quot;/usr/local/nginx/logs/nginx.pid&quot;</span><br><span class="line">case &quot;$1&quot; in</span><br><span class="line">start)</span><br><span class="line"><span class="meta">  $</span><span class="bash">COM</span></span><br><span class="line">;;</span><br><span class="line"></span><br><span class="line">stop)</span><br><span class="line">  kill -s QUIT $(cat $PID)</span><br><span class="line">;;</span><br><span class="line"></span><br><span class="line">restart)</span><br><span class="line"><span class="meta">  $</span><span class="bash">0 stop</span></span><br><span class="line"><span class="meta">  $</span><span class="bash">0 start</span></span><br><span class="line">;;</span><br><span class="line"></span><br><span class="line">reload)</span><br><span class="line">  kill -s HUP $(cat $PID)</span><br><span class="line">;;</span><br><span class="line"></span><br><span class="line">*)</span><br><span class="line">echo &quot;Usage: $0 &#123;start|stop|restart|reload&#125;&quot;</span><br><span class="line">exit 1</span><br><span class="line"></span><br><span class="line">esac</span><br><span class="line">exit 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">chmod +x /etc/init.d/nginx</span><br><span class="line">chkconfig --add nginx#添加为系统服务</span><br><span class="line">systemctl stop nginx</span><br><span class="line">systemctl start nginx</span><br></pre></td></tr></table></figure></li><li><p>方法二：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">vim /lib/systemd/system/nginx.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=nginx</span><br><span class="line">After=network.target</span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">PIDFile=/usr/local/nginx/logs/nginx.pid</span><br><span class="line">ExecStart=/usr/local/nginx/sbin/nginx</span><br><span class="line">ExecrReload=/bin/kill -s HUP $MAINPID</span><br><span class="line">ExecrStop=/bin/kill -s QUIT $MAINPID</span><br><span class="line">PrivateTmp=true</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line">chmod 754 /lib/systemd/system/nginx.service</span><br><span class="line">systemctl start nginx.service</span><br><span class="line">systemctl enable nginx.service</span><br></pre></td></tr></table></figure></li></ul><img src="https://img-blog.csdnimg.cn/20210109094331370.png"><img src="https://img-blog.csdnimg.cn/2021010909522079.png"><h3 id="二、认识Nginx服务的主配置文件-nginx-conf"><a href="#二、认识Nginx服务的主配置文件-nginx-conf" class="headerlink" title="二、认识Nginx服务的主配置文件 nginx.conf"></a>二、认识Nginx服务的主配置文件 nginx.conf</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/nginx/conf/nginx.conf </span><br></pre></td></tr></table></figure><ol><li>全局配置<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">user nobody; <span class="comment">#运行用户，若编译时未指定则默认为 nobody</span></span></span><br><span class="line">worker_processes 1; #工作进程数量，可配置成服务器内核数 * 2</span><br><span class="line"><span class="meta">#</span><span class="bash">error_log logs/error.log; <span class="comment">#错误日志文件的位置</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">pid logs/nginx.pid; <span class="comment">#PID 文件的位置</span></span></span><br></pre></td></tr></table></figure></li></ol><img src="https://img-blog.csdnimg.cn/20210109100647777.png"><ol start="2"><li>I&#x2F;O 事件配置<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">events &#123;</span><br><span class="line">    use epoll; #使用 epoll 模型，2.6及以上版本的系统内核，建议使用epoll模型以提高性能</span><br><span class="line">    worker_connections 4096; #每个进程处理 4096 个连接</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash">如提高每个进程的连接数还需执行“<span class="built_in">ulimit</span> -n 65535”命令临时修改本地每个进程可以同时打开的最大文件数。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">在Linux平台上，在进行高并发TCP连接处理时，最高的并发数量都要受到系统对用户单一进程同时可打开文件数量的限制(这是因为系统为每个TCP连接都要创建一个socket句柄，每个socket句柄同时也是一个文件句柄)。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">可使用<span class="built_in">ulimit</span> -a命令查看系统允许当前用户进程打开的文件数限制.</span></span><br></pre></td></tr></table></figure></li></ol><img src="https://img-blog.csdnimg.cn/20210109104817851.png"><img src="https://img-blog.csdnimg.cn/20210109100216697.png"><ol start="3"><li>HTTP 配置<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#文件扩展名与文件类型映射表</span></span></span><br><span class="line">    include       mime.types;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#默认文件类型</span></span></span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#日志格式设定</span></span></span><br><span class="line">    #log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">    #                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">    #                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#访问日志位置</span></span></span><br><span class="line">    #access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#支持文件发送(下载)</span></span></span><br><span class="line">    sendfile        on;</span><br><span class="line"><span class="meta"> #</span><span class="bash"><span class="comment">#此选项允许或禁止使用socke的TCP_CORK的选项（发送数据包前先缓存数据），此选项仅在使用sendfile的时候使用</span></span></span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#连接保持超时时间，单位是秒</span></span></span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#gzip模块设置，设置是否开启gzip压缩输出</span></span></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#Web 服务的监听配置</span></span></span><br><span class="line">server &#123;</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#监听地址及端口</span></span></span><br><span class="line">listen 80; </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#站点域名，可以有多个，用空格隔开</span></span></span><br><span class="line">server_name www.lic.com;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#网页的默认字符集</span></span></span><br><span class="line">charset utf-8;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#根目录配置</span></span></span><br><span class="line">location / &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#网站根目录的位置/usr/local/nginx/html</span></span></span><br><span class="line">root html;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#默认首页文件名</span></span></span><br><span class="line">index index.html index.htm;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#内部错误的反馈页面</span></span></span><br><span class="line">error_page 500 502 503 504 /50x.html;</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#错误页面配置</span></span></span><br><span class="line">location = /50x.html &#123;</span><br><span class="line">root html;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><img src="https://img-blog.csdnimg.cn/20210109104601894.png"><img src="https://img-blog.csdnimg.cn/20210109105457261.png"><img src="https://img-blog.csdnimg.cn/20210109105124101.png"><img src="https://img-blog.csdnimg.cn/20210109105253209.png"><ol start="4"><li>日志格式设定：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">remote_addr与<span class="variable">$http_x_forwarded_for</span>用以记录客户端的ip地址；</span></span><br><span class="line"><span class="meta">$</span><span class="bash">remote_user：用来记录客户端用户名称；</span></span><br><span class="line"><span class="meta">$</span><span class="bash">time_local： 用来记录访问时间与时区；</span></span><br><span class="line"><span class="meta">$</span><span class="bash">request： 用来记录请求的url与http协议；</span></span><br><span class="line"><span class="meta">$</span><span class="bash">status： 用来记录请求状态；成功是200，</span></span><br><span class="line"><span class="meta">$</span><span class="bash">body_bytes_sent ：记录发送给客户端文件主体内容大小；</span></span><br><span class="line"><span class="meta">$</span><span class="bash">http_referer：用来记录从那个页面链接访问过来的；</span></span><br><span class="line"><span class="meta">$</span><span class="bash">http_user_agent：记录客户浏览器的相关信息；</span></span><br><span class="line"></span><br><span class="line">通常web服务器放在反向代理的后面，这样就不能获取到客户的IP地址了，通过$remote_add拿到的IP地址是反向代理服务器的iP地址。反向代理服务器在转发请求的http头信息中，可以增加x_forwarded_for信息，用以记录原有客户端的IP地址和原来客户端的请求的服务器地址。</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">location常见配置指令，root、alias、proxy_pass</span><br><span class="line"></span><br><span class="line">root（根路径配置）：请求www.lic.com/test，会返回文件/usr/local/nginx/html/test/index.html</span><br><span class="line"></span><br><span class="line">alias（别名配置）：请求www.lic.com/test，会返回文件/usr/local/nginx/html/index.html</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/2021010912200345.png"><img src="https://img-blog.csdnimg.cn/20210109122117163.png"><img src="https://img-blog.csdnimg.cn/20210109122148161.png"><img src="https://img-blog.csdnimg.cn/20210109122213224.png"><img src="https://img-blog.csdnimg.cn/20210109122501166.png"><h1 id="二、部署项目"><a href="#二、部署项目" class="headerlink" title="二、部署项目"></a>二、部署项目</h1><ol><li>打开vue项目，在控制台输入<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure>这是我打包好的：默认会生成一个dist文件</li></ol><img src="https://img-blog.csdnimg.cn/20210104155416123.png"><ol start="2"><li><p>进入nginx安装目录下，有一个html文件，默认里边有一个index.html文件，删掉</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf *</span><br></pre></td></tr></table></figure></li><li><p>把生成的dist目录下的静态资源传输到服务器</p></li></ol><img src="https://img-blog.csdnimg.cn/20210104155519139.png"><p><strong>注意：我自己为了方便上传就将这个文件创建了软链接，然后指向了共享文档里了</strong></p><ol start="4"><li>修改配置文件<br><strong>此外，进入cd &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf目录可修改nginx的配置文件：</strong><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim nginx.conf</span><br></pre></td></tr></table></figure></li></ol><p><strong>这是我的：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">       listen       80;</span><br><span class="line">       server_name  localhost;</span><br><span class="line"></span><br><span class="line">       #charset koi8-r;</span><br><span class="line"></span><br><span class="line">       #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">       root   html; #配置自己的静态文件的路径，就是刚刚将打包的vue项目上传的路径，我这里是nginx根路径下的html文件中</span><br><span class="line"></span><br><span class="line">       location / &#123;</span><br><span class="line">            # root   html;</span><br><span class="line">           index  index.html index.htm;</span><br><span class="line">           try_files $uri $uri/ /index.html;</span><br><span class="line">           #需要指向下面的@router否则会出现vue的路由在nginx中刷新出现404，两种写法，这里需要在下边配置router</span><br><span class="line">          # try_files $uri $uri/ @router;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">       # location @router&#123;</span><br><span class="line">       #    rewrite ^.*$ /index.html last;</span><br><span class="line">       #&#125;</span><br><span class="line"></span><br><span class="line">      # 6、这里是解决跨域问题，将你后端的地址写在proxy_pass 后面就可以了                    </span><br><span class="line">      </span><br><span class="line">       location /api/ &#123;</span><br><span class="line">           #rewrite ^.+api/?(.*)$ /$1 break;  #这样写有问题,在网上看有人这样写，发现有问题</span><br><span class="line">           rewrite ^/api/(.*)$ /$1 break;  #必须的写这个，使用nginx的rewrite对uri进行重写  下面这行也要改为api </span><br><span class="line">           proxy_pass http://10.1.0.111:8888/; #跨域转发路由地址</span><br><span class="line">           proxy_redirect off;</span><br><span class="line">           proxy_set_header Host $host;</span><br><span class="line">           proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">           proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">       # redirect server error pages to the static page /50x.html</span><br><span class="line">       #</span><br><span class="line">       error_page   500 502 503 504  /50x.html;</span><br><span class="line">       location = /50x.html &#123;</span><br><span class="line">           root   html;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>这样就可以了<br>记得要开启端口号</p><ol start="5"><li>开放 8080 端口</li></ol><p>1、检查防火墙状态<br><strong>ubuntu</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw status</span><br></pre></td></tr></table></figure><p><strong>centos</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw disable</span><br></pre></td></tr></table></figure><p><strong>running 表示防火墙是开启的，如果你看到的是 not running，则表示防火墙关闭，</strong></p><p>2、关闭防火墙：<br><strong>ubuntu</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --state</span><br></pre></td></tr></table></figure><p>3、开放 8080 端口<br><strong>ubuntu</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw allow 22</span><br></pre></td></tr></table></figure><p><strong>centos</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=8080/tcp --permanent</span><br></pre></td></tr></table></figure><p>4、重启防火墙</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart firewalld.service</span><br></pre></td></tr></table></figure><p>5、重新载入配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>6、重启nginx<br>在&#x2F;nginx&#x2F;sbin&#x2F;目录下</p><p>重启：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nginx -s reload</span><br></pre></td></tr></table></figure><p>查看nginx进程：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux|grep nginx</span><br></pre></td></tr></table></figure><h2 id="部署vue前台代码"><a href="#部署vue前台代码" class="headerlink" title="部署vue前台代码"></a>部署vue前台代码</h2><h3 id="1、打包前台代码"><a href="#1、打包前台代码" class="headerlink" title="1、打包前台代码"></a>1、打包前台代码</h3><p>VScode中执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run start</span><br></pre></td></tr></table></figure><p>在项目的文件夹里有个dist文件夹</p><img src="https://img-blog.csdnimg.cn/20191206214213585.png"><p>里面的文件，全部复制到&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;html中</p><img src="https://img-blog.csdnimg.cn/20191206214248497.png"><img src="https://img-blog.csdnimg.cn/2019120621434736.png"><h3 id="2、修改配置文件"><a href="#2、修改配置文件" class="headerlink" title="2、修改配置文件"></a>2、修改配置文件</h3><p><strong>进到conf目录下，有个nginx.conf，先备份（好习惯）</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp nginx.conf nginx.conf.back</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20191206214501256.png"><p>需要修改，</p><img src="https://img-blog.csdnimg.cn/20191206214827154.png"><p>重新加载配置文件即可。</p><h1 id="报错解决"><a href="#报错解决" class="headerlink" title="报错解决"></a>报错解决</h1><ol><li><p><strong>404: Connection refused) while connecting to upstream, client: 172.16.54.1, server: localhost, request: “POST &#x2F;api&#x2F;accountApi&#x2F;accoun t&#x2F;loginAccount HTTP&#x2F;1.1”, upstream: “<a href="http://10.2.0.126:8888/api/accountApi/account/loginAccount%E2%80%9D">http://10.2.0.126:8888/api/accountApi/account/loginAccount”</a>, host: “172.16.5</strong><br>一般在nginx.conf中配置不对，跨域访问就会出现404，找不到页面的情况：<br>一般安装我上边跨域配置，就不会出现了。</p></li><li><p>vue项目，npm run build时点击路由切换，第一次点击没问题，再点不会切换报错如下图<br>Uncaught SyntaxError: Unexpected token ‘＜‘</p></li></ol><img src="https://img-blog.csdnimg.cn/20210104161229905.png"><p>因为在将我的项目（在路由中用了懒加载）改为 history模式的过程中，有时候发现会出现chunk加载出错的情况，打开chrome的network发现那个chunk加载404了，是因为请求的url中多了一层路径。我在这里发现了解决方案。</p><p>LinusBorg说，因为在 history模式中切换路由时，我们是真正改变了页面的url路径，所以webpack的runtime会认为它位于 example.com&#x2F;some&#x2F;path。如果 publicPath是设置的相对路径，那么webpack加载chunk时可能会变成 example.com&#x2F;some&#x2F;path&#x2F;static&#x2F;js&#x2F;3.js这样的路径，然而chunk的真正路径是 example.com&#x2F;static&#x2F;js&#x2F;3.js，所以我们需要将 publicPath设置为绝对路径（ publicPath: ‘&#x2F;’）来解决这个问题。<br>具体查看：<a href="https://www.jb51.net/article/162268.htm">https://www.jb51.net/article/162268.htm</a> 讲解很详细<br>解决访问：在config.index中加上：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">    publicPath: &#x27;/&#x27;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整的：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line"> publicPath:&#x27;/&#x27;, //配置该路径，nginx中，进行路由转发，才可找到</span><br><span class="line"> devServer: &#123;</span><br><span class="line">    historyApiFallback: true,</span><br><span class="line">    open: true,</span><br><span class="line">    proxy: &#123;</span><br><span class="line">      &#x27;/api&#x27;: &#123;</span><br><span class="line">      </span><br><span class="line">      //  target: &#x27;http://localhost:8888/&#x27;,//设置你调用的接口域名和端口号 别忘了加http</span><br><span class="line">        changeOrigin: true,    //這裡true表示实现跨域</span><br><span class="line">        pathRewrite: &#123;</span><br><span class="line">          &#x27;^/api&#x27;: &#x27;/&#x27; //这里理解成用‘/api’代替target里面的地址，后面组件中我们掉接口时直接用api代替 比如我要调用&#x27;http://40.00.100.100:3002/user/add&#x27;，直接写‘/api/user/add’即可</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完美解决问题</p><hr><h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><ol><li><a href="https://blog.csdn.net/sunrj_niu/article/details/112181688">vue项目部署到nginx（超级详细）以及报错解决</a></li><li><a href="https://yuntue.com/post/74325.html">Ubuntu如何部署vue项目</a></li><li><a href="https://blog.csdn.net/weixin_42361127/article/details/103429823">Ubuntu安装Nginx,并部署vue前端代码</a></li><li><a href="https://blog.csdn.net/weixin_51432770/article/details/112350471">Nginx网站服务配置，图文详解（超详细）</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">VUE部署到linux下的Nginx，实现远程代理访问</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="VUE" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/VUE/"/>
    
    <category term="前端" scheme="https://zml3589110.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Nginx" scheme="https://zml3589110.github.io/categories/Nginx/"/>
    
    
    <category term="网页" scheme="https://zml3589110.github.io/tags/%E7%BD%91%E9%A1%B5/"/>
    
    <category term="VUE" scheme="https://zml3589110.github.io/tags/VUE/"/>
    
    <category term="JavaScript" scheme="https://zml3589110.github.io/tags/JavaScript/"/>
    
    <category term="Nginx" scheme="https://zml3589110.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu软连接</title>
    <link href="https://zml3589110.github.io/posts/3647967481.html"/>
    <id>https://zml3589110.github.io/posts/3647967481.html</id>
    <published>2023-12-01T08:21:20.000Z</published>
    <updated>2023-12-02T07:19:29.377Z</updated>
    
    <content type="html"><![CDATA[<h1 id="软链接基础"><a href="#软链接基础" class="headerlink" title="软链接基础"></a>软链接基础</h1><p><strong>建立软连接</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s 原目录 </span><br></pre></td></tr></table></figure><p><strong>删除软连接</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm  或者强制删除  -rf </span><br></pre></td></tr></table></figure><p><strong>创建软连接</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ln -s 源地址   目的地址</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  列如：Ubuntu文件系统rootfs_dir软连接到 /home/lp目录下</span><br><span class="line">  ln  -s  /opt/Linux/root_dir  /home/lp/roo_dir 就OK了</span><br></pre></td></tr></table></figure><h1 id="方法汇总"><a href="#方法汇总" class="headerlink" title="方法汇总"></a>方法汇总</h1><p><strong>一、什么是软连接</strong><br>软连接（Symbolic Link）也叫软链接，是一种特殊的文件，其作用类似于Windows系统下的快捷方式。软连接指向一个文件或目录的路径，当我们打开软连接时，实际上是访问软连接所指向的文件或目录。</p><p><strong>二、创建软连接</strong><br>在Ubuntu系统中，我们可以使用ln命令来创建软连接。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /path/to/file /path/to/link</span><br></pre></td></tr></table></figure><p>其中，-s代表创建软链接，&#x2F;path&#x2F;to&#x2F;file是要软链接的源文件或目录，&#x2F;path&#x2F;to&#x2F;link是软链接文件的路径。</p><p><strong>三、查看软链接</strong><br>我们可以通过ls命令来查看软链接。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l path/to/link</span><br></pre></td></tr></table></figure><p>-l代表以详细信息列表的形式显示文件或目录的属性，path&#x2F;to&#x2F;link是软链接文件的路径。</p><p><strong>四、删除软链接</strong></p><ul><li><ol><li>使用rm命令删除软链接<br>我们可以使用rm命令来删除软连接。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm /path/to/link</span><br></pre></td></tr></table></figure></li></ol></li></ul><p>其中，&#x2F;path&#x2F;to&#x2F;link是软链接文件的路径。执行此命令后，软链接文件将被从系统中删除。</p><ul><li><ol start="2"><li>使用unlink命令删除软链接<br>与rm命令不同的是，我们也可以使用unlink命令来删除软连接。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unlink /path/to/link</span><br></pre></td></tr></table></figure></li></ol></li></ul><p>其中，&#x2F;path&#x2F;to&#x2F;link是软链接文件的路径。与rm命令不同的是，unlink命令只能用来删除软链接文件，而不能删除其他类型的文件。</p><ul><li><ol start="3"><li>手动删除软链接文件<br>除了使用命令删除软链接外，我们也可以手动删除软链接文件。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm /path/to/link_file</span><br></pre></td></tr></table></figure></li></ol></li></ul><p>其中，&#x2F;path&#x2F;to&#x2F;link_file是软链接文件所在的路径，执行此命令后，软链接文件将被从系统中删除。</p><p><strong>五、注意事项</strong></p><p>在删除软连接文件时需要注意以下几点：</p><ol><li><p>删除软链接并不会删除源文件<br>当我们删除软链接文件时，实际上是在删除软链接文件的记录，并不会删除源文件或目录。</p></li><li><p>删除软链接可能会影响程序功能<br>当软链接文件关联到一个程序的文件夹时，删除软链接文件可能会影响程序的正常运行。因此，在删除软链接文件之前需要确认软链接文件是否与程序相关联。</p></li><li><p>删除软链接需要确认权限<br>删除软链接文件需要具有足够的权限。如果当前用户没有足够的权限，则需要切换到具有删除权限的用户。</p></li></ol><p><strong>六、总结</strong></p><p>通过本文的介绍，我们了解了软连接的基本概念和创建、删除软链接的方法。在删除软链接时，我们需要注意软链接的相关性和删除权限。同时，在使用命令删除软链接时，也可以手动删除软链接文件。</p><h1 id="Linux-ln命令-建立文件-x2F-目录链接"><a href="#Linux-ln命令-建立文件-x2F-目录链接" class="headerlink" title="Linux ln命令 - 建立文件&#x2F;目录链接"></a>Linux ln命令 - 建立文件&#x2F;目录链接</h1><ol><li>使用方式：ln [option] source_file dist_file<br>             -f 建立时，将同档案名删除.<br>             -i 删除前进行询问.<br>             ln -s abc cde 建立abc 的软连接<br>             ln abc cde 建立abc的硬连接，</li><li>软链接与硬链接的区别（通俗）：</li></ol><p>硬链接可认为是一个文件拥有两个文件名;而软链接则是系统新建一个链接文件，此文件指向其所要指的文件</p><p>ln -s &#x2F;root&#x2F;lntest&#x2F;source&#x2F; &#x2F;root&#x2F;lntest&#x2F;dist&#x2F;</p><p>这里看到软链就是个快捷方式</p><img src="https://www.linuxidc.com/upload/2014_12/14123109519447.png"><ol start="3"><li>软链接与硬链接的区别（讲解）：</li></ol><p><strong>Linux 软连接与硬连接</strong></p><p>对于一个文件来说，有唯一的索引接点与之对应，而对于一个索引接点号，却可以有多个文件名与之对应。因此，在磁盘上的同一个文件可以通过不同的路径去访问该文件。注意在Linux下是一切皆文件的啊，文件夹、新加的硬盘 …都可以看着文件来处理的啊。</p><p>连接有软连接和硬连接(hard link)之分的，软连接(symbolic link)又叫符号连接。符号连接相当于Windows下的快捷方式。</p><p>不可以对文件夹建立硬连接的，我们通常用的还是软连接比较多。</p><p><strong>eg:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ln -s <span class="built_in">source</span> dist        <span class="comment"># 建立软连接</span></span><br><span class="line"></span><br><span class="line">ln -s /mnt/hgfs/ /home/luo/    注意后面的“/” 是将目录里所有的文件链接过去，必须加上，否则，建立的目录显示颜色异常，还不能正常访问，如<span class="built_in">cd</span> 进不去</span><br><span class="line"></span><br><span class="line">ln <span class="built_in">source</span> dist            <span class="comment"># 建立硬连接</span></span><br></pre></td></tr></table></figure><p>软链接实际上只是一段文字，里面包含着它所指向的文件的名字，系统看到软链接后自动跳到对应的文件位置处进行处理；相反，硬联接为文件开设一个新的目录项，硬链接与文件原有的名字是平权的，在Linux看来它们是等价的。由于这个原因，硬链接不能连接两个不同文件系统上的文件。</p><p>（1）软连接可以 跨文件系统 ，硬连接不可以 。实践的方法就是用共享文件把windows下的 aa.txt文本文档连接到linux下&#x2F;root目录 下 bb,cc . ln -s aa.txt &#x2F;root&#x2F;bb 连接成功 。ln aa.txt &#x2F;root&#x2F;bb 失败 。</p><p>（2）关于 I节点的问题 。硬连接不管有多少个，都指向的是同一个I节点，会把 结点连接数增加，只要结点的连接数不是 0，文件就一直存在，不管你删除的是源文件还是 连接的文件 。只要有一个存在 ，文件就 存在 （其实也不分什么源文件连接文件的 ，因为他们指向都是同一个 I节点）。 当你修改源文件或者连接文件任何一个的时候 ，其他的文件都会做同步的修改。软链接不直接使用i节点号作为文件指针,而是使用文件路径名作为指针。所以 删除连接文件 对源文件无影响，但是删除源文件，连接文件就会找不到要指向的文件 。软链接有自己的inode,并在磁盘上有一小片空间存放路径名.</p><p>（3）软连接可以对一个不存在的文件名进行连接 。</p><p>（4）软连接可以对目录进行连接。</p><p><strong>备注：节点</strong> :它是UNIX内部用于描述文件特性的数据结构.我们通常称I节点为文件索引结点(信息结点).i节点含有关于文件的大部分的重要信息,包括文件数据块在磁盘上的地址.每一个I节点有它自己的标志号,我们称为文件顺序号.I节点包含的信息 1.文件类型 2.文件属主关系 3.文件的访问权限 4.文件的时间截.</p><hr><h1 id="相关链接（侵删）"><a href="#相关链接（侵删）" class="headerlink" title="相关链接（侵删）"></a>相关链接（侵删）</h1><ol><li><a href="https://javaforall.cn/187546.html">Ubuntu创建软连接</a></li><li><a href="https://www.python100.com/html/NO0742SZ7P1E.html">Ubuntu删除软连接方法汇总</a></li><li><a href="https://www.linuxidc.com/Linux/2014-12/111056.htm">Linux ln命令 - 建立文件&#x2F;目录链接</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">Ubuntu管理软链接</summary>
    
    
    
    <category term="Linux" scheme="https://zml3589110.github.io/categories/Linux/"/>
    
    <category term="软链接" scheme="https://zml3589110.github.io/categories/%E8%BD%AF%E9%93%BE%E6%8E%A5/"/>
    
    <category term="文件管理" scheme="https://zml3589110.github.io/categories/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/"/>
    
    
    <category term="Ubuntu" scheme="https://zml3589110.github.io/tags/Ubuntu/"/>
    
    <category term="软链接" scheme="https://zml3589110.github.io/tags/%E8%BD%AF%E9%93%BE%E6%8E%A5/"/>
    
  </entry>
  
  <entry>
    <title>VirtualBox虚拟机开机后台自启动</title>
    <link href="https://zml3589110.github.io/posts/3955128240.html"/>
    <id>https://zml3589110.github.io/posts/3955128240.html</id>
    <published>2023-12-01T02:11:20.000Z</published>
    <updated>2023-12-01T02:26:35.807Z</updated>
    
    <content type="html"><![CDATA[<h1 id="编写BAT脚本文件"><a href="#编写BAT脚本文件" class="headerlink" title="编写BAT脚本文件"></a>编写BAT脚本文件</h1><p>编写bat脚本,其中F:\program\Oracle\VirtualBox为Virtualbox可执行文件所在目录，右键桌面快捷图标可以看到</p><p>虚拟机的名字在虚拟机主界面列表中就可以看到</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@ECHO OFF</span><br><span class="line">F:\program\Oracle\VirtualBox\VBoxManage.exe startvm ES1 --type headless</span><br><span class="line">F:\program\Oracle\VirtualBox\VBoxManage.exe startvm ES2 --type headless</span><br><span class="line">F:\program\Oracle\VirtualBox\VBoxManage.exe startvm ES3 --type headless</span><br><span class="line">EXIT</span><br></pre></td></tr></table></figure><p>上面脚本是启动了３个虚拟机，根据自己需要改动即可</p><p>把Virtualbox.bat拉到 “C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Startup”下。这样就能开机启动了。</p><h1 id="遇到问题后自己解决办法"><a href="#遇到问题后自己解决办法" class="headerlink" title="遇到问题后自己解决办法"></a>遇到问题后自己解决办法</h1><p><strong>由于路径是 Program Files 有空格键，所以直接这样写是失败的！</strong><br>后边写成了分批模式就成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">d:</span><br><span class="line"><span class="built_in">cd</span> Program Files</span><br><span class="line"><span class="built_in">cd</span> Oracle\VirtualBox</span><br><span class="line">VBoxManage.exe startvm Ubuntu --<span class="built_in">type</span> headless </span><br></pre></td></tr></table></figure><h1 id="BAT详细说明"><a href="#BAT详细说明" class="headerlink" title="BAT详细说明"></a>BAT详细说明</h1><p>Windows7下安装个linux虚拟机，学习下非常好。</p><p>但是每次使用linux的时候，都是打开virtualBox–&gt;启动安装的linux系统–&gt;再用远程桌面(SSH等)连接</p><p>每次手动打开比较麻烦，而且linux虚拟机也有窗口，比较冗杂。如果能开机自启，并且后台运行linux虚拟机(没有可见窗口)，那就开心了。</p><h2 id="找到VirtualBox的安装目录"><a href="#找到VirtualBox的安装目录" class="headerlink" title="找到VirtualBox的安装目录"></a>找到VirtualBox的安装目录</h2><p>我的virtualbox安装在 D:virualBox，进入这个目录，你会看到有个VBoxManage.exe文件，没有错，我们就是用它来启动虚拟机的。</p><p>怎么启动呢?命令行如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VBoxManage startvm &lt;uuid&gt;|&lt;name&gt; [--<span class="built_in">type</span> gui|sdl|headless] </span><br></pre></td></tr></table></figure><p>比如我新建的虚拟机叫study，那么</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:virualBoxVBoxManage startvm study --<span class="built_in">type</span> headless </span><br></pre></td></tr></table></figure><p>–type headless:表示后台执行，没有窗口哦</p><p>来，我们打开cmd，试下这个命令</p><p>提示已经启动了study虚拟机了。</p><h2 id="开机自启动"><a href="#开机自启动" class="headerlink" title="开机自启动"></a>开机自启动</h2><p>现在看不到窗口了，但是还是需要手动输入命令行启动。如果能开机自启动就好了</p><p>1、首选我们要做一个bat脚本：virtualboxtStart.bat</p><p>2、里面写入上面的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:virualBoxVBoxManage startvm study --<span class="built_in">type</span> headless  </span><br></pre></td></tr></table></figure><p>3、把virtualboxtStart.bat放到C:ProgramDataMicrosoftWindowsStart MenuProgramsStartup，这个目录下的脚本是开机的时候自动运行的哦</p><p>好了，小工告成。重启电脑，你就会发现，Windows7偷偷帮我们启动了study这个虚拟机了。</p><p>可以用SSH连接，操作了。</p><p>注：也可以在cmd中使用命令行对虚拟机进行状态管理：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VBoxManage controlvm &lt;uuid&gt;|&lt;name&gt; pause|resume|reset|poweroff|savestate| </span><br></pre></td></tr></table></figure><p>比如我想关闭：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:virualBoxVBoxManage controlvm study poweroff </span><br></pre></td></tr></table></figure><h1 id="解决bat批处理文件使用路径有空格-试过无效果"><a href="#解决bat批处理文件使用路径有空格-试过无效果" class="headerlink" title="解决bat批处理文件使用路径有空格(试过无效果)"></a>解决bat批处理文件使用路径有空格(试过无效果)</h1><p>编写批处理文件时，如果文件路径中有空格会无法读取完整路径，这时候可以将有空格的路径用双引号括起来</p><p>在start xxx.exe语句中，不能用双引号把整个路径括起来，要选择性的括有空格的那个</p><p>很多帖子写的是这样括</p><p>start G:\Siemens&quot;NX 12.0”\UGII\ugraf.exe</p><p>但是我试了之后发现运行的时候这个双引号连带着里面的文件名都变成了乱码</p><p>解决方法是把两边的“\”也括进去</p><p>start G:\Siemens”\NX 12.0&quot;UGII\ugraf.exe</p><p>这样就ok了</p><hr><blockquote><p><strong>说明：本文是收集参考文档，以方便查看</strong></p></blockquote><hr><h1 id="信息链接"><a href="#信息链接" class="headerlink" title="信息链接:"></a>信息链接:</h1><ol><li><a href="http://www.hzhcontrols.com/new-402594.html">如何在Windows 7下实现VirtualBox虚拟机开机后台自启动</a></li><li><a href="https://ispacesoft.com/107434.html">设置virtualbox开机自启动，并启动虚拟机</a></li><li><a href="https://blog.csdn.net/qq_58846219/article/details/134461042">解决bat批处理文件使用路径有空格</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">虚拟机 Virtual box 在系统打开时自动启动相应系统，不用每次开机得手动启动</summary>
    
    
    
    <category term="问题收集" scheme="https://zml3589110.github.io/categories/%E9%97%AE%E9%A2%98%E6%94%B6%E9%9B%86/"/>
    
    <category term="开机自启" scheme="https://zml3589110.github.io/categories/%E9%97%AE%E9%A2%98%E6%94%B6%E9%9B%86/%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF/"/>
    
    
    <category term="开机自启" scheme="https://zml3589110.github.io/tags/%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF/"/>
    
    <category term="虚拟机" scheme="https://zml3589110.github.io/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    <category term="Virtual box" scheme="https://zml3589110.github.io/tags/Virtual-box/"/>
    
  </entry>
  
  <entry>
    <title>蓝牙相关知识收集</title>
    <link href="https://zml3589110.github.io/posts/4036844216.html"/>
    <id>https://zml3589110.github.io/posts/4036844216.html</id>
    <published>2023-10-30T12:58:20.000Z</published>
    <updated>2023-10-30T13:06:21.508Z</updated>
    
    <content type="html"><![CDATA[<h1 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h1><ol><li><a href="https://blog.csdn.net/guoqx/article/details/129174436">蓝牙 - 如何在Windows下抓取蓝牙数据</a><br>首先，要在Windows上安装一个工具：Bluetooth Virtual Sniffer (btvs.exe)。<br>下载路径：</li></ol><p>访问：Get the Microsoft Bluetooth Test Platform software package - Windows drivers | Microsoft Learn</p><p>点击下载：<a href="https://download.microsoft.com/download/e/e/e/eeed3cd5-bdbd-47db-9b8e-ca9d2df2cd29/BluetoothTestPlatformPack-1.14.0.msi">https://download.microsoft.com/download/e/e/e/eeed3cd5-bdbd-47db-9b8e-ca9d2df2cd29/BluetoothTestPlatformPack-1.14.0.msi</a></p><p>下一步安装WireShark</p><p>在命令行终端里，运行btvs.exe程序。</p><p>c:\BTP\v1.14.0\x86&gt;btvs.exe -Mode Wireshark</p><p>然后就会启动Wireshark，开始抓取蓝牙数据。要抓取成功，要打开电脑的蓝牙功能，才会有数据出现。</p><ol start="2"><li><a href="https://blog.csdn.net/linan101/article/details/124007791">蓝牙 BLE 广播包信息解析</a><br>低功耗蓝牙 BLE 广播数据解析：</li></ol><p>低功耗蓝牙包含两类报文：广播报文 &amp; 数据报文；<br>在广播的时候使用3个信道，顺序广播；</p><p>广播包 有效数据部分 无效数据部分</p><h1 id="包解析"><a href="#包解析" class="headerlink" title="包解析"></a>包解析</h1><ol><li><a href="https://sleepingbug.blog.csdn.net/article/details/50628568">蓝牙4.0 BLE 广播包解析</a></li></ol><h1 id="阿里云蓝牙"><a href="#阿里云蓝牙" class="headerlink" title="阿里云蓝牙"></a>阿里云蓝牙</h1><ol><li><a href="https://help.aliyun.com/document_detail/173318.html">蓝牙BLE非交互式广播规范</a></li></ol><h1 id="C-蓝牙开发"><a href="#C-蓝牙开发" class="headerlink" title="C#蓝牙开发"></a>C#蓝牙开发</h1><ol><li><p><a href="https://blog.csdn.net/A244108451/article/details/128664207">使用C#进行蓝牙开发-接收BLE广播</a></p></li><li><p><a href="https://blog.csdn.net/allexw/article/details/129127168">使用C#进行低功耗蓝牙BLE开发</a></p></li><li><p><a href="https://www.jb51.net/article/273720.htm">C#连接蓝牙设备的实现示例</a></p></li><li><p><a href="https://blog.csdn.net/Ikaros_521/article/details/118700495">win10 蓝牙调试工具 Bluetooth LE Explorer 简单使用</a></p></li><li><p><a href="https://blog.csdn.net/code_long/article/details/105636398">C# ble 4.0 低能耗 蓝牙交互</a></p></li><li><p><a href="https://blog.csdn.net/shengfakun1234/article/details/110928783">Win10 平台C#与低功耗蓝牙BLE设备通信案例</a></p></li></ol><hr><h1 id="相关链接（侵删）"><a href="#相关链接（侵删）" class="headerlink" title="相关链接（侵删）"></a>相关链接（侵删）</h1><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">蓝牙知识合集</summary>
    
    
    
    <category term="蓝牙" scheme="https://zml3589110.github.io/categories/%E8%93%9D%E7%89%99/"/>
    
    <category term="抓包" scheme="https://zml3589110.github.io/categories/%E6%8A%93%E5%8C%85/"/>
    
    <category term="Wireshark" scheme="https://zml3589110.github.io/categories/Wireshark/"/>
    
    <category term="Bluetooth Test Platform" scheme="https://zml3589110.github.io/categories/Bluetooth-Test-Platform/"/>
    
    <category term="C#" scheme="https://zml3589110.github.io/categories/C/"/>
    
    
    <category term="蓝牙知识" scheme="https://zml3589110.github.io/tags/%E8%93%9D%E7%89%99%E7%9F%A5%E8%AF%86/"/>
    
    <category term="抓包" scheme="https://zml3589110.github.io/tags/%E6%8A%93%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>Homeassistant环境Docker配置</title>
    <link href="https://zml3589110.github.io/posts/1724428249.html"/>
    <id>https://zml3589110.github.io/posts/1724428249.html</id>
    <published>2023-10-30T09:10:20.000Z</published>
    <updated>2023-10-30T09:22:31.443Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ubuntu下使用docker"><a href="#Ubuntu下使用docker" class="headerlink" title="Ubuntu下使用docker"></a>Ubuntu下使用docker</h1><ol><li><p><a href="https://blog.csdn.net/Tester_muller/article/details/131440306">最详细的ubuntu 安装 docker教程</a></p></li><li><p><a href="https://blog.csdn.net/root_1314/article/details/128050433">Ubuntu-卸载Docker</a></p></li></ol><h2 id="安装hass"><a href="#安装hass" class="headerlink" title="安装hass"></a>安装hass</h2><ol><li><p><a href="https://blog.csdn.net/qq_41830158/article/details/131605397">docker安装Homeassist</a></p></li><li><p><a href="https://www.fastboard.cn/150/">Home Assistant基本搭建(Docker方式)</a></p></li></ol><p><strong>根据这个安装hass成功</strong></p><ol><li><a href="https://blog.51cto.com/u_16175446/7071164">ubuntu docker 安装homeassistant</a></li></ol><p>安装HomeAssistant<br>在安装HomeAssistant之前，我们需要先创建一个Docker容器来运行HomeAssistant。以下是整个安装过程的步骤：</p><p>步骤描述<br>1拉取HomeAssistant镜像<br>2创建HomeAssistant容器<br>3配置HomeAssistant<br>步骤1：拉取HomeAssistant镜像<br>首先，我们需要从Docker Hub上拉取HomeAssistant的镜像。HomeAssistant的官方镜像名称是homeassistant&#x2F;home-assistant。执行以下命令来拉取镜像：</p><p>docker pull homeassistant&#x2F;home-assistant<br>1.<br>步骤2：创建HomeAssistant容器<br>完成镜像的拉取后，我们可以通过创建一个Docker容器来运行HomeAssistant。为了方便管理，我们可以给容器起一个有意义的名称，并将一些配置文件和数据文件挂载到容器内部。执行以下命令来创建容器：</p><p>docker run -d –name&#x3D;homeassistant <br>  –restart unless-stopped <br>  -v &#x2F;path&#x2F;to&#x2F;config:&#x2F;config <br>  -v &#x2F;etc&#x2F;localtime:&#x2F;etc&#x2F;localtime:ro <br>  –network&#x3D;host <br>  homeassistant&#x2F;home-assistant<br>上述命令中的参数解释如下：</p><p>-d：表示以后台模式运行容器<br>–name&#x3D;homeassistant：给容器起一个名称，这里使用homeassistant<br>–restart unless-stopped：设置容器在退出后自动重新启动<br>-v &#x2F;path&#x2F;to&#x2F;config:&#x2F;config：将配置文件挂载到容器的&#x2F;config目录下，其中&#x2F;path&#x2F;to&#x2F;config是你本地存放HomeAssistant配置文件的路径<br>-v &#x2F;etc&#x2F;localtime:&#x2F;etc&#x2F;localtime:ro：将宿主机的时区挂载到容器中，确保时间同步<br>–network&#x3D;host：使用主机网络模式，使得HomeAssistant能够访问本地网络设备<br>homeassistant&#x2F;home-assistant：此为之前拉取的HomeAssistant镜像名称<br>步骤3：配置HomeAssistant<br>现在，我们已经成功创建了HomeAssistant容器。接下来，我们需要进行一些配置，以便访问和管理HomeAssistant。以下是几个重要的配置项：</p><p>Web界面访问：HomeAssistant的Web界面默认监听在8123端口，使用浏览器访问<a href="http://localhost:8123即可进入界面。">http://localhost:8123即可进入界面。</a><br>配置文件：容器中的配置文件位于&#x2F;config目录下，你可以通过编辑本地配置文件来修改HomeAssistant的配置。<br>插件安装：HomeAssistant支持通过插件来扩展功能，你可以在Web界面的”插件商店”中安装和管理插件。</p><h1 id="整合部分"><a href="#整合部分" class="headerlink" title="整合部分"></a>整合部分</h1><ol><li><a href="https://ranlychan.top/archives/489.html">物联网 | HASS+MQTT+树莓派室内监测小型物联网系统</a></li></ol><h1 id="配置hass下的yaml文件"><a href="#配置hass下的yaml文件" class="headerlink" title="配置hass下的yaml文件"></a>配置hass下的yaml文件</h1><p><strong>通过这个办法找到yaml文件啦</strong></p><ol><li><a href="https://www.bilibili.com/read/cv14045974/">怎样修改homeassistant 的配置文件configuration.yaml</a><br>二．直接连接容器修改<br>1.通过ssh连接修改(使用的是这个)<br>     sudo docker exec -it homeassistant bash<br>    vi configuration.yaml<br>2.vnc 连接修改<br>   进入 &#x2F;usr&#x2F;share&#x2F;hassio&#x2F;homeassistant文件夹找configuration.yaml<br>3.通过破portainer连接修改<br>    vi configuration.yaml</li></ol><p><strong>参考这个修改实体成功</strong><br>2. <a href="https://blog.csdn.net/weixin_61908666/article/details/130186243">homeassistant配置MQTT集成以及传感器实体（STM32连接进入homeassistant）</a></p><hr><h1 id="相关链接（侵删）"><a href="#相关链接（侵删）" class="headerlink" title="相关链接（侵删）"></a>相关链接（侵删）</h1><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">各种HASS相关内容收集呀</summary>
    
    
    
    <category term="ubuntu" scheme="https://zml3589110.github.io/categories/ubuntu/"/>
    
    <category term="hass" scheme="https://zml3589110.github.io/categories/hass/"/>
    
    <category term="ESP8266" scheme="https://zml3589110.github.io/categories/ESP8266/"/>
    
    <category term="ESP32" scheme="https://zml3589110.github.io/categories/ESP32/"/>
    
    
    <category term="Ubuntu" scheme="https://zml3589110.github.io/tags/Ubuntu/"/>
    
    <category term="智能家居" scheme="https://zml3589110.github.io/tags/%E6%99%BA%E8%83%BD%E5%AE%B6%E5%B1%85/"/>
    
    <category term="ESP8266" scheme="https://zml3589110.github.io/tags/ESP8266/"/>
    
    <category term="物联网" scheme="https://zml3589110.github.io/tags/%E7%89%A9%E8%81%94%E7%BD%91/"/>
    
    <category term="Homeassistant" scheme="https://zml3589110.github.io/tags/Homeassistant/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu文件压缩、解压缩等操作</title>
    <link href="https://zml3589110.github.io/posts/2452845339.html"/>
    <id>https://zml3589110.github.io/posts/2452845339.html</id>
    <published>2023-10-17T00:36:20.000Z</published>
    <updated>2023-10-17T02:22:55.416Z</updated>
    
    <content type="html"><![CDATA[<h1 id="打包、压缩、解压缩-Lnux需先打包成一个文件再压缩"><a href="#打包、压缩、解压缩-Lnux需先打包成一个文件再压缩" class="headerlink" title="打包、压缩、解压缩(Lnux需先打包成一个文件再压缩)"></a>打包、压缩、解压缩(Lnux需先打包成一个文件再压缩)</h1><p>在具体总结各类压缩文件之前，首先要弄清两个概念：打包和压缩。</p><p>打包是指将一大堆文件或目录什么的变成一个总的文件，压缩则是将一个大的文件通过一些压缩算法变成一个小文件。为什么要区分这两个概念呢？其实这源于Linux中的很多压缩程序只能针对一个文件进行压缩，这样当你想要压缩一大堆文件时，你就得先借助另外的工具将这一大堆文件先打成一个包，然后再就原来的压缩程序进行压缩。</p><p>Linux下最常用的打包程序就是tar了，使用tar程序打出来的包我们常称为tar包，tar包文件的命令通常都是以.tar结尾的。生成tar包后，就可以用其它的程序来进行压缩了。</p><p><img src="https://img-blog.csdnimg.cn/709ccabc1f6949d488eec8d0925544ad.png"></p><h2 id="课堂笔记-tar既能打包又能解压缩"><a href="#课堂笔记-tar既能打包又能解压缩" class="headerlink" title="课堂笔记(tar既能打包又能解压缩)"></a>课堂笔记(tar既能打包又能解压缩)</h2><img src="https://img-blog.csdnimg.cn/709ccabc1f6949d488eec8d0925544ad.png"><img src="https://img-blog.csdnimg.cn/2c517ed25b014ad8a9c52c0147af2bd1.png"><img src="https://img-blog.csdnimg.cn/d53dc1dfb3f24c11b5f1e9d272853263.png"><p><strong>上面笔记中打包顺序写反了：tar - vcf test.tar test</strong></p><img src="https://img-blog.csdnimg.cn/ba8e0dd368e645e7aebb93bc1b8b2c99.png"><p><strong>tar提供打包解包的同时还具有压缩和解压缩功能：</strong></p><img src="https://img-blog.csdnimg.cn/b44a581f7de9455bb5037a6beebe4bff.png"><img src="https://img-blog.csdnimg.cn/13723a96f7b348b5a2969aed4e033b26.png"><p><strong>注意：不好用的时候，把参数Z去掉，或者你文件从Windows传到虚拟机有问题。</strong></p><img src="https://img-blog.csdnimg.cn/80d88168445c4d08a6a767dbfc04f3b2.png"><h1 id="打包解包-带软链接"><a href="#打包解包-带软链接" class="headerlink" title="打包解包(带软链接)"></a>打包解包(带软链接)</h1><img src="https://img-blog.csdnimg.cn/b5315f38e46542ebbb51724d0a836496.png"><p><strong>解包提示有问题的话，直接用 tar -vxf test.tar 解包软链接也生效。</strong></p><h2 id="1-拷贝文件-带软链接"><a href="#1-拷贝文件-带软链接" class="headerlink" title="1.拷贝文件(带软链接)"></a>1.拷贝文件(带软链接)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -d dep/libs/*  到开发板的/usr/lib下</span><br></pre></td></tr></table></figure><h2 id="2-拷贝文件夹"><a href="#2-拷贝文件夹" class="headerlink" title="2.拷贝文件夹"></a>2.拷贝文件夹</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -r certs  到开发板的/mnt/user_data/iot_data下</span><br></pre></td></tr></table></figure><h2 id="3-命令实现"><a href="#3-命令实现" class="headerlink" title="3.命令实现"></a>3.命令实现</h2><p><strong>解包 .tar：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf FileName.tar</span><br></pre></td></tr></table></figure><p><strong>打包.tar：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -cvf FileName.tar DirName  <span class="comment"># tar是打包，不是压缩！</span></span><br></pre></td></tr></table></figure><p><strong>解压.tar.gz 和 .tgz：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf FileName.tar.gz</span><br></pre></td></tr></table></figure><p><strong>压缩.tar.gz 和 .tgz：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zcvf FileName.tar.gz DirName</span><br></pre></td></tr></table></figure><p><strong>解压.zip：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip FileName.zip</span><br></pre></td></tr></table></figure><p><strong>压缩.zip：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zip -r FileName.zip DirName</span><br></pre></td></tr></table></figure><p>-r 表示递归</p><p><strong>解包.tgz：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xvzf FileName.tgz</span><br></pre></td></tr></table></figure><p><strong>解压.gz：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gunzip FileName.gz</span><br></pre></td></tr></table></figure><p><strong>解压.gz：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gzip -d FileName.gz</span><br></pre></td></tr></table></figure><p><strong>压缩.gz：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gzip FileName</span><br></pre></td></tr></table></figure><p><strong>解压.bz2：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bzip2 -d FileName.bz2</span><br></pre></td></tr></table></figure><p><strong>解压.bz2：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bunzip2 FileName.bz2</span><br></pre></td></tr></table></figure><p><strong>压缩.bz2：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bzip2 -z FileName</span><br></pre></td></tr></table></figure><p><strong>解压.tar.bz2：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -jxvf FileName.tar.bz2</span><br></pre></td></tr></table></figure><p><strong>压缩.tar.bz2：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar- jcvf FileName.tar.bz2 DirName</span><br></pre></td></tr></table></figure><p><strong>解压.bz：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bzip2 -d FileName.bz</span><br></pre></td></tr></table></figure><p><strong>解压.bz：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bunzip2 FileName.bz</span><br></pre></td></tr></table></figure><p><strong>解压.tar.bz：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar jxvf FileName.tar.bz</span><br></pre></td></tr></table></figure><p><strong>.tar.xz 这是两层压缩，外面是xz压缩方式，里层是tar压缩</strong><br>所以可以分两步实现解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ xz -d filename.tar.xz</span><br><span class="line">$ tar -xvf filename.tar</span><br></pre></td></tr></table></figure><p><strong>也可以直接解压</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar -xvJf filename.tar.xz</span><br><span class="line">or</span><br><span class="line">tar -Jxf filename.tar.xz</span><br></pre></td></tr></table></figure><p><strong>压缩.tar.xz：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -Jcf filename.tar.xz filename</span><br></pre></td></tr></table></figure><p><strong>解压.Z：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uncompress FileName.Z</span><br></pre></td></tr></table></figure><p><strong>压缩.Z：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compress FileName</span><br></pre></td></tr></table></figure><p><strong>解压.tar.Z：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -Zxvf FileName.tar.Z</span><br></pre></td></tr></table></figure><p><strong>压缩.tar.Z：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar Zcvf FileName.tar.Z DirName</span><br></pre></td></tr></table></figure><p><strong>解压.rar：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rar -x FileName.rar</span><br></pre></td></tr></table></figure><p><strong>压缩.rar：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rar -a FileName.rar DirName</span><br></pre></td></tr></table></figure><p><strong>解压.lha：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lha -e FileName.lha</span><br></pre></td></tr></table></figure><p><strong>压缩.lha：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lha -a FileName.lha FileName</span><br></pre></td></tr></table></figure><p><strong>解包.rpm：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm2cpio FileName.rpm | cpio -div</span><br></pre></td></tr></table></figure><p><strong>解包.deb：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ar p FileName.deb data.tar.gz | tar -zxf </span><br></pre></td></tr></table></figure><p><strong>解压.tar .tgz .tar.gz .tar.Z .tar.bz .tar.bz2 .zip .cpio .rpm .deb .slp .arj .rar .ace .lha .lzh .lzx .lzs .arc .sda .sfx .lnx .zoo .cab .kar .cpt .pit .sit .sea：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sEx x FileName.*</span><br></pre></td></tr></table></figure><p><strong>压缩.tar .tgz .tar.gz .tar.Z .tar.bz .tar.bz2 .zip .cpio .rpm .deb .slp .arj .rar .ace .lha .lzh .lzx .lzs .arc .sda .sfx .lnx .zoo .cab .kar .cpt .pit .sit .sea：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sEx a FileName.* FileName</span><br></pre></td></tr></table></figure><hr><h1 id="相关链接（侵删）"><a href="#相关链接（侵删）" class="headerlink" title="相关链接（侵删）"></a>相关链接（侵删）</h1><ol><li><a href="https://blog.csdn.net/zhuguanlin121/article/details/118726551">Ubuntu文件压缩、解压缩、打包解包(带软链接)、拷贝文件(带软链接)、拷贝文件夹</a></li><li><a href="https://blog.csdn.net/weixin_45309916/article/details/107791294">Ubuntu 命令解压文件大全</a></li><li><a href="https://blog.csdn.net/ji519974770/article/details/81916468">打包和压缩的概念和区别</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">Ubuntu文件压缩、解压缩、打包解包(带软链接)、拷贝文件(带软链接)、拷贝文件夹</summary>
    
    
    
    <category term="Linux" scheme="https://zml3589110.github.io/categories/Linux/"/>
    
    <category term="zar" scheme="https://zml3589110.github.io/categories/zar/"/>
    
    <category term="文件管理" scheme="https://zml3589110.github.io/categories/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/"/>
    
    
    <category term="Ubuntu" scheme="https://zml3589110.github.io/tags/Ubuntu/"/>
    
    <category term="zar" scheme="https://zml3589110.github.io/tags/zar/"/>
    
    <category term="压缩" scheme="https://zml3589110.github.io/tags/%E5%8E%8B%E7%BC%A9/"/>
    
    <category term="解压" scheme="https://zml3589110.github.io/tags/%E8%A7%A3%E5%8E%8B/"/>
    
    <category term="软链接" scheme="https://zml3589110.github.io/tags/%E8%BD%AF%E9%93%BE%E6%8E%A5/"/>
    
  </entry>
  
  <entry>
    <title>HEXO打包到github报错</title>
    <link href="https://zml3589110.github.io/posts/3701598706.html"/>
    <id>https://zml3589110.github.io/posts/3701598706.html</id>
    <published>2023-07-08T06:29:20.000Z</published>
    <updated>2023-07-08T06:37:18.267Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题出现"><a href="#问题出现" class="headerlink" title="问题出现"></a>问题出现</h1><p>在文章写好之后打包静态网页并发送到github中时，提示一下错误<br>@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@<br>@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @<br>@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</p><p>一度以为ssh导致问题，重新创建几次都不成功<br>而且也已经放弃使用了一段时间</p><p>直到今天想重新安装esp8266环境时才想起</p><p>然后各种找原因，各种尝试</p><p>最终在这篇文章下找到了答案</p><p>就是把 C:\Users\Administrator.ssh\known_hosts 文件删除就行</p><h1 id="解决参考"><a href="#解决参考" class="headerlink" title="解决参考"></a>解决参考</h1><p>本地ubuntu20.04 通过ssh连接腾讯云 云主机ubuntu20.04出现以下提示</p><p>@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@<br>@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @<br>@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@<br>IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!<br>Someone could be eavesdropping on you right now (man-in-the-middle attack)!<br>It is also possible that a host key has just been changed.<br>The fingerprint for the ECDSA key sent by the remote host is<br>SHA256:lWEJCiuk2DsPYdodOxj8w7WFY3b+RF+9f5ns.<br>Please contact your system administrator.<br>Add correct host key in &#x2F;home&#x2F;su&#x2F;.ssh&#x2F;known_hosts to get rid of this message.<br>Offending ECDSA key in &#x2F;home&#x2F;su&#x2F;.ssh&#x2F;known_hosts:6<br>  remove with:<br>  ssh-keygen -f “&#x2F;home&#x2F;su&#x2F;.ssh&#x2F;known_hosts” -R “43.<em><strong>.</strong>.</em><strong>“<br>ECDSA host key for 43.</strong><em>.**.*</em> has changed and you have requested strict checking.<br>Host key verification failed.</p><p>将known_hosts文件删除就行了,看它的提示，文件位置在哪里，改成你的文件位置即可。</p><p>rm -rf &#x2F;home&#x2F;su&#x2F;.ssh&#x2F;known_hosts<br>然后出现</p><p>Are you sure you want to continue connecting (yes&#x2F;no&#x2F;[fingerprint])?<br>敲yes就行了，然后输入你的密码即可。</p><hr><h1 id="相关链接-侵删"><a href="#相关链接-侵删" class="headerlink" title="相关链接(侵删)"></a>相关链接(侵删)</h1><ol><li><a href="https://blog.csdn.net/crazytire/article/details/125964956">IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY! 解决办法</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">hexo文章推送时报错 IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!</summary>
    
    
    
    <category term="gihub" scheme="https://zml3589110.github.io/categories/gihub/"/>
    
    <category term="ssh" scheme="https://zml3589110.github.io/categories/gihub/ssh/"/>
    
    <category term="known_hosts" scheme="https://zml3589110.github.io/categories/known-hosts/"/>
    
    
    <category term="HEXO" scheme="https://zml3589110.github.io/tags/HEXO/"/>
    
    <category term="github" scheme="https://zml3589110.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu使用minicom串口工具</title>
    <link href="https://zml3589110.github.io/posts/2500108762.html"/>
    <id>https://zml3589110.github.io/posts/2500108762.html</id>
    <published>2023-03-28T06:56:20.000Z</published>
    <updated>2023-03-28T07:17:02.830Z</updated>
    
    <content type="html"><![CDATA[<h1 id="linux查看usb转串口设备使用的端口号"><a href="#linux查看usb转串口设备使用的端口号" class="headerlink" title="linux查看usb转串口设备使用的端口号"></a>linux查看usb转串口设备使用的端口号</h1><p><strong>查看使用的端口号：</strong></p><img src="https://img-blog.csdnimg.cn/20210613112924873.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY3MzYwMw==,size_16,color_FFFFFF,t_70"><p><strong>也可以输入以下命令查看：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l /dev/ttyUSB*</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20210613114213709.png"><p><strong>可以看到有几个设备挂载。</strong></p><p>设置端口号：<br>输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo minicom -s</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20210613113046237.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY3MzYwMw==,size_16,color_FFFFFF,t_70"><p>运行代码：<br>完成</p><h1 id="退出方法"><a href="#退出方法" class="headerlink" title="退出方法"></a>退出方法</h1><p>1）需使用Ctrl+a 进入设置状态<br>2）按z进入设置菜单<br>（1）S键：发送文件到目标系统中；<br>（2）W键：自动卷屏。当显示的内容超过一行之後，自动将後面的内容换行。这个功能在查看内核的啓动信息时很有用。<br>（3）C键：清除屏幕的显示内容；<br>（4）B键：浏览minicom的历史显示；<br>（5）X键：退出mInicom，会提示确认退出。</p><h1 id="minicom常用指令"><a href="#minicom常用指令" class="headerlink" title="minicom常用指令"></a>minicom常用指令</h1><p>因为现在电脑基本不配备串行接口，所以，usb转串口成为硬件调试时的必然选择。目前知道的，PL2303的驱动是有的，在dev下的名称是ttyUSB#。</p><p>minicom，tkterm都是linux下应用比较广泛的串口软件，这里简单介绍minicom使用。</p><p>一，安装</p><p>debian 系，比如 ubuntu、mint等：</p><p>sudo apt-get install minicom</p><p>二，配置</p><p>首先，查看串口设备是否可用。linux下的所有操作面向用户的都是文件操作，在对串口操作之前，我们应该先确认自己对该文件有没有读写权限。</p><p>ls -l &#x2F;dev&#x2F;ttyUSB*</p><p>linux下的usb串口命名为ttyUSB，运行上面命令，可以看到有几个设备挂载。</p><p>我们这里是：</p><p>crw-rw—- 1 root dialout 188, 0 Apr 10 17:10 &#x2F;dev&#x2F;ttyUSB0</p><p>只有ttuUSB0.</p><p>但是正如上面显示，ttyUSB0这个设备是root所有的，所以，我们以普通用户身份打开minicom是没法访问该文件的。</p><p>然后，运行$ sudo minicom -s ， 设置串口。</p><p>进入minicom的配置界面，使用上下键选择Serial port setup，回车。此时光标在“change which setting”后面停留，它的上面有如下菜单：</p><p>Serial port setup [Enter]+————————————————————-+</p><p>| A – Serial Device : &#x2F;dev&#x2F;ttyUSB0 |</p><p>| B – Lockfile Location : &#x2F;var&#x2F;lock |</p><p>| C – Callin Program : |</p><p>| D – Callout Program -: |</p><p>| E – Bps&#x2F;Par&#x2F;Bits : 115200 8N1 |</p><p>| F – Hardware Flow Control : No |</p><p>| G – Software Flow Control : No |</p><p>| |</p><p>| Change which setting? |</p><p>+————————————————————-+</p><p>我们只需输入上面对应的字母，就可以进如相应的菜单进行设置。设置完成，回车，光标会回到“change which setting”后面，如此重复。完成按回车返回主菜单即可。</p><p>注意：如果不是 USB 转串口，而是直接使用串口，那么 Serial Device 要配置为 &#x2F;dev&#x2F;ttyS0(具体哪个设备，系统不同名字不同，如果你不知道，那就看你运气了)。</p><p>返回主菜单后，选择“Save setup as dfl”，将其保存为默认设置，然后选择 Exit 退出，注意，不是退出 minicom。</p><p>三，使用</p><p>如果上面设置顺利，重新给开发板上电后，此时，窗口里就有信息打印出来了。minicom基本操作如下：</p><p>1)组合键 Ctrl+a 进入设置状态；</p><p>2)按 z 打开帮助菜单，或者你用的熟练的话，直接输入菜单对应的字母即可；</p><p>(1)S键：发送文件到目标系统中；</p><p>(2)W键：自动卷屏。当显示的内容超过一行之後，自动将後面的内容换行。这个功能在查看内核的啓动信息时很有用。</p><p>(3)C键：清除屏幕的显示内容；</p><p>(4)B键：浏览minicom的历史显示；</p><p>(5)X键：退出mInicom，会提示确认退出。</p><ol start="3"><li>比如，使用 Ctrl-A–&gt;O 进入 minicom 配置菜单：</li></ol><p>+—–[configuration]——+</p><p>| Filenames and paths |</p><p>| File transfer protocols -|</p><p>| Serial port setup |</p><p>| Modem and dialing |</p><p>| Screen and keyboard |</p><p>| Save setup as dfl |</p><p>| Save setup as.. |</p><p>| Exit |</p><p>+————————–+</p><p>我们可以配置使用 Ctrl-A-S 发送文件时的默认路径，可选择”Filenames and paths”进行配置：</p><p>+———————————————————————–+</p><p>| A – Download directory : &#x2F;home&#x2F;crliu |</p><p>| B – Upload directory : &#x2F;tmp |</p><p>| C – Script directory : |</p><p>| D – Script program : runscript |</p><p>| E – Kermit program : |</p><p>| F – Logging options |</p><p>| |</p><p>| Change which setting? |</p><p>+———————————————————————–+</p><p>如上，A – download 下载文件的存放位置(开发板 —&gt; PC, rz)开发板上的文件将被传输到PC机上的&#x2F;home&#x2F;crliu目录下。</p><p>B – upload 从此处读取上传的文件(PC —&gt; 开发板, sz)PC机向开发板发送文件，需要发送的文件在&#x2F;tmp目录下(PC机上的目录)。</p><p>四，其他技巧</p><p>启动 minicom 的时候，会检测 MINICOM 环境变量，将它们作为命令参数，如果命令中指定了某个参数，那么这个 MINICOM 中的相应的某个参数会被替换。</p><p>我们在 ~&#x2F;.bashrc 文件中添加这一行，使得 minicom 默认每次都进入彩色模式，并自动进入串口配置：</p><p>export MINICOM&#x3D;’-s -c on’</p><p>The configuration 参数更有趣。通常，minicom从文件“minirc.dfl”中获取其缺省值。不过，若你给minicom一个参数，它将尝试从文件“minirc.configuration”中获取缺省值。因此，为不同端口、不同用户等创建多个配置文件是可能的。最好使用设备名，如：tty1， tty64，sio2等。如果用户创建了自己的配置文件，那么该文件将以“.minirc.dfl”为名出现在他的home目录中。</p><p>minicom的全局配置文件通常在&#x2F;etc&#x2F;minirc.dfl. minicom将其配置文件保存在一个目录中，通常是：&#x2F;var&#x2F;lib&#x2F;minicom, &#x2F;usr&#x2F;local&#x2F;etc或者&#x2F;etc。要想知道minicom编译时内定的缺省目录，可用命令“minicom -h”，在那儿你可能还会找到runscript(1) 的demo文件。</p><p>配置文件的文件名格式：minirc.user。minicom默认加载配置文件minirc.df1，但你也可以仿照minirc.df1编辑自己的配置文件minirc.user，输入minicom user启动时则加载minirc.user。如在本机上，我做了一个minirc.root，输入minicom root 启动minicom，则系统自动加载&#x2F;etc&#x2F;minirc.root中的配置。</p><p>$HOME&#x2F;.minirc.*</p><p>$HOME&#x2F;.dialdir</p><p>$HOME&#x2F;minicom.log</p><p>&#x2F;usr&#x2F;share&#x2F;locale&#x2F;*&#x2F;LC_MESSAGES&#x2F;minicom.mo</p><p>*命令行启动minicom的参数</p><p>更多的参数，参见”man minicom”的输出。</p><p>-s</p><p>设置。 root 使用此选项在&#x2F;etc&#x2F;minirc.dfl中编辑系统范围的缺省值。使用此参数后，minicom 将 不 进行初始化， 而是直接进入配置菜单。如果因为你的系统被改变，或者第一次运行minicom时，minicom不能启动，这个参数就会很有用。对于多数系统，已经内定了比较合适的缺省值。</p><p>-o</p><p>不进行初始化。minicom 将跳过初始化代码。如果你未复位(reset)就退出了minicom，又想重启一次会话(session)，那么用这个选项就比较爽(不会再有错误提示：modem is locked —- 注)。但是也有潜在的危险：由于未对lock文件等进行检查，因此一般用户可能会与uucp之类的东东发生冲突……也许以后这个参数会被去掉。现在姑且假定，使用modem的用户对自己的行为足够负责。</p><p>-m</p><p>用Meta或Alt键重载命令键。在1.80版中这是缺省值，也可以在minicom 菜单中配置这个选项。不过若你一直使用不同的终端，其中有些没有Meta或Alt键，那么方便的做法还是把缺省的命令键设置为Ctrl-A，当你有了支持 Meta或Alt键的键盘时再使用此选项。Minicom假定你的Meta键发送ESC前缀，而不是设置字符最高位的那一种(见下)。</p><p>-M</p><p>跟“-m”一样，但是假定你的Meta键设置字符高端的第八位(发送128+字符代码)。</p><p>-z</p><p>使用终端状态行。仅当终端支持，并且在其termcap或terminfo<a href="https://cloud.tencent.com/solution/database?from=10680">数据库</a>入口中有相关信息时才可用。</p><p>-l</p><p>逐字翻译 高位被置位的字符。使用此标志， minicom将不再尝试将IBM行字符翻译为ASCII码，而是将其直接传送。许多PC-Unix克隆不经翻译也能正确显示它们(Linux使用专门的模式：Coherent和Sco)。</p><p>-w</p><p>在启动的时候就自动换行，这样启动之后不用运行 w进行设置了，详细参考后面。</p><p>-a</p><p>特性使用。 有些终端，特别是televideo终端， 有个很讨厌的特性处理(串行而非并行)。minicom缺省使用‘-a on’，但若你在用这样的终端，你就可以(必须!)加上选项‘-a off’。尾字‘on’或‘off’需要加上。</p><p>-t</p><p>终端类型。使用此标志， 你可以重载环境变量TERM， 这在环境变量MINICOM 中使用很方便； 你可以创建一个专门的 termcap 入口以备minicom 在控制台上使用，它将屏幕初始化为raw模式， 这样，连同‘-l’标志一起，就可以不经翻译而显示IBM行字符。</p><p>-c</p><p>颜色使用。些终端(如Linux控制台)支持标准ANSI转义序列色彩。由于termcap显然没有对于色彩的支持，因而minicom 硬性内置了这些转义序列的代码。所以此选项缺省为off。使用‘-c on’可以打开此项。把这个标志，还有‘-m’放入MINICOM环境变量中是个不错的选择。</p><p>-S</p><p>脚本。 启动时执行给定名字的脚本。到目前为止，还不支持将用户名和口令传送给启动脚本。如果你还使用了‘-d’选项，以在启动时开始拨号，此脚本将在拨号之前运行，拨号项目入口由‘-d’指明。</p><p>-p</p><p>要使用的伪终端。 它超载配置文件中定义的终端端口，但仅当其为伪tty设备。提供的文件名必须采用这样的形式：(&#x2F;dev&#x2F;)tty[p-z][0-f]</p><p>-C</p><p>文件名。 启动时打开捕获文件。</p><p>-8</p><p>不经修改地传送8位字符。“连续”意指未对地点&#x2F;特性进行真正改变，就不插入地点&#x2F;特性控制序列。此模式用于显示8位多字节字符，比如日本字(TMD！应该是中国字!!)。不是8位字符的语言都需要(例如显示芬兰文字就不需要这个)。</p><h1 id="linux-查看所有USB端口"><a href="#linux-查看所有USB端口" class="headerlink" title="linux 查看所有USB端口"></a>linux 查看所有USB端口</h1><p>1、查看串口是否可用</p><p>可以对串口发送数据比如对com1口，echo &#x2F;dev&#x2F;ttyS0</p><p>2、查看串口名称使用</p><p>ls -l &#x2F;dev&#x2F;ttyS*</p><p>一般情况下串口的名称全部在dev下面，如果你没有外插串口卡的话默认是dev下的ttyS*,一般ttyS0对应com1，ttyS1对应com2，当然也不一定是必然的；</p><p>3、查看串口驱动</p><p>cat&#x2F;proc&#x2F;tty&#x2F;drivers&#x2F;serial</p><p>4、查看串口设备</p><p>dmesg | grep ttyS*</p><p>5、查一下板子上的串口有没有设备</p><p>grep tty&#x2F;proc&#x2F;devices</p><p>如果有ttyS设备，再看&#x2F;dev&#x2F;有没有ttyS*，如没有就建立一个：mknod &#x2F;dev&#x2F;ttyS0 c 4 64</p><p>如果板子的设备中没有标准串口设备ttyS0，也没有ttySAC0。&#x2F;dev下应该有一个USB串口：&#x2F;dev&#x2F;ttyUSB0.</p><p>当一个串行卡或数据卡被侦测到时，它会被指定成为第一个可用的串行设备。通常是&#x2F;dev&#x2F;ttyS1(cua1)或&#x2F;dev&#x2F;ttyS2(cua2)，这完成看原已内建的串口数目。ttyS*设备会被报告在&#x2F;var&#x2F;run&#x2F;stab内。</p><p>PC上的串口一般是ttyS，板子上Linux的串口一般叫做ttySAC</p><p>补充:</p><p>如果需要查看这个串口设备输出</p><p>cat ttyUSB0</p><p>如果需要对这个设备输入</p><p>echo aaaaa&gt;ttyUSB0</p><hr><h1 id="相关链接（侵删）"><a href="#相关链接（侵删）" class="headerlink" title="相关链接（侵删）"></a>相关链接（侵删）</h1><ol><li><a href="https://blog.csdn.net/weixin_43673603/article/details/117871650">linux查看usb转串口设备使用的端口号</a></li><li><a href="https://blog.csdn.net/jhyworkspace/article/details/53572284">minicom退出方法</a></li><li><a href="https://cloud.tencent.com/developer/article/2070441">minicom指令_Minicom 使用初步</a></li><li><a href="https://blog.csdn.net/weixin_34489089/article/details/116677110">linux 查看所有USB端口,linux查看所有串口和usb设备方法</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">Ubuntu开启Samba服务，主要是针对esp32编译环境需要软链接，之前用虚拟机共享出现Windows没有软链接功能导致异常</summary>
    
    
    
    <category term="Linux" scheme="https://zml3589110.github.io/categories/Linux/"/>
    
    <category term="minicom" scheme="https://zml3589110.github.io/categories/minicom/"/>
    
    
    <category term="Ubuntu" scheme="https://zml3589110.github.io/tags/Ubuntu/"/>
    
    <category term="串口" scheme="https://zml3589110.github.io/tags/%E4%B8%B2%E5%8F%A3/"/>
    
    <category term="minicom" scheme="https://zml3589110.github.io/tags/minicom/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu烧录下载时找不到USB0报错</title>
    <link href="https://zml3589110.github.io/posts/3713584928.html"/>
    <id>https://zml3589110.github.io/posts/3713584928.html</id>
    <published>2023-03-28T06:45:20.000Z</published>
    <updated>2023-03-28T07:17:02.839Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ESP编译好后下载时发现找不到端口"><a href="#ESP编译好后下载时发现找不到端口" class="headerlink" title="ESP编译好后下载时发现找不到端口"></a>ESP编译好后下载时发现找不到端口</h1><p>问题:<br>在linux环境，使用esp32 MDK进行烧录程序时， 当执行到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">idf.py -p dev/ttfUSB0 flash</span><br></pre></td></tr></table></figure><p>时候报错，无法操作。</p><h2 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h2><p>只有root用户和属于dialout组的用户会有读写权限</p><h2 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h2><p>该方法重启就会失效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod -R 777 /dev/ttyUSB0</span><br></pre></td></tr></table></figure><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>永久生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -aG dialout user //user替换为自己的用户名</span><br></pre></td></tr></table></figure><h2 id="reboot-x2F-x2F-必须要重启一下才会生效"><a href="#reboot-x2F-x2F-必须要重启一下才会生效" class="headerlink" title="reboot &#x2F;&#x2F;必须要重启一下才会生效"></a>reboot &#x2F;&#x2F;必须要重启一下才会生效</h2><h1 id="相关链接（侵删）"><a href="#相关链接（侵删）" class="headerlink" title="相关链接（侵删）"></a>相关链接（侵删）</h1><ol><li><a href="https://blog.csdn.net/amimax/article/details/128244634">【问题解决】ESP32报错：could not open port &#x2F;dev&#x2F;ttyUSB0: [Errno 13] Permission denied: ‘&#x2F;dev&#x2F;ttyUSB0</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">ESP下载程序时报错 could not open port /dev/ttyUSB0</summary>
    
    
    
    <category term="Linux" scheme="https://zml3589110.github.io/categories/Linux/"/>
    
    <category term="ESP8266" scheme="https://zml3589110.github.io/categories/ESP8266/"/>
    
    <category term="乐鑫" scheme="https://zml3589110.github.io/categories/%E4%B9%90%E9%91%AB/"/>
    
    <category term="ESP32" scheme="https://zml3589110.github.io/categories/ESP32/"/>
    
    
    <category term="Ubuntu" scheme="https://zml3589110.github.io/tags/Ubuntu/"/>
    
    <category term="ESP8266" scheme="https://zml3589110.github.io/tags/ESP8266/"/>
    
    <category term="物联网" scheme="https://zml3589110.github.io/tags/%E7%89%A9%E8%81%94%E7%BD%91/"/>
    
    <category term="乐鑫" scheme="https://zml3589110.github.io/tags/%E4%B9%90%E9%91%AB/"/>
    
    <category term="烧录" scheme="https://zml3589110.github.io/tags/%E7%83%A7%E5%BD%95/"/>
    
    <category term="USB0" scheme="https://zml3589110.github.io/tags/USB0/"/>
    
  </entry>
  
  <entry>
    <title>ESP32环境(Ubuntu) 问题集锦</title>
    <link href="https://zml3589110.github.io/posts/2527818842.html"/>
    <id>https://zml3589110.github.io/posts/2527818842.html</id>
    <published>2023-03-27T08:12:20.000Z</published>
    <updated>2023-03-27T08:45:04.354Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装好环境后报错"><a href="#安装好环境后报错" class="headerlink" title="安装好环境后报错"></a>安装好环境后报错</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fatal: 不是 git 仓库：’/home/geeloong/esp/esp-idf/.git’</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;cmake&quot;</span> must be available on the PATH to use idf.py</span><br></pre></td></tr></table></figure><p><strong>解决办法:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">sudo apt install cmake</span><br></pre></td></tr></table></figure><hr><h1 id="相关链接（侵删）"><a href="#相关链接（侵删）" class="headerlink" title="相关链接（侵删）"></a>相关链接（侵删）</h1><ol><li><a href="https://blog.csdn.net/Aspiration_H/article/details/124168414">ESP32开发环境搭建，Linux，SDK，IDF，Ubuntu，乐鑫</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">Ubuntu下搭建ESP32开发环境时遇到的问题收集</summary>
    
    
    
    <category term="Linux" scheme="https://zml3589110.github.io/categories/Linux/"/>
    
    <category term="文件共享" scheme="https://zml3589110.github.io/categories/%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB/"/>
    
    <category term="乐鑫" scheme="https://zml3589110.github.io/categories/%E4%B9%90%E9%91%AB/"/>
    
    <category term="ESP32" scheme="https://zml3589110.github.io/categories/ESP32/"/>
    
    
    <category term="Ubuntu" scheme="https://zml3589110.github.io/tags/Ubuntu/"/>
    
    <category term="物联网" scheme="https://zml3589110.github.io/tags/%E7%89%A9%E8%81%94%E7%BD%91/"/>
    
    <category term="乐鑫" scheme="https://zml3589110.github.io/tags/%E4%B9%90%E9%91%AB/"/>
    
    <category term="ESP32" scheme="https://zml3589110.github.io/tags/ESP32/"/>
    
    <category term="SDK-IDF" scheme="https://zml3589110.github.io/tags/SDK-IDF/"/>
    
    <category term="开发环境" scheme="https://zml3589110.github.io/tags/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    
    <category term="安装问题" scheme="https://zml3589110.github.io/tags/%E5%AE%89%E8%A3%85%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>通过HOMEKIT让ESP8266控制继电器</title>
    <link href="https://zml3589110.github.io/posts/442091668.html"/>
    <id>https://zml3589110.github.io/posts/442091668.html</id>
    <published>2023-03-25T08:13:20.000Z</published>
    <updated>2023-03-27T00:14:26.618Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ESP8266控制继电器（支持HOMEKIT，无需homebridge，可用SIRI控制）"><a href="#ESP8266控制继电器（支持HOMEKIT，无需homebridge，可用SIRI控制）" class="headerlink" title="ESP8266控制继电器（支持HOMEKIT，无需homebridge，可用SIRI控制）"></a>ESP8266控制继电器（支持HOMEKIT，无需homebridge，可用SIRI控制）</h1><p><strong>首先感谢：</strong><br><a href="https://github.com/RavenSystem/esp-homekit-devices">https://github.com/RavenSystem/esp-homekit-devices</a><br><a href="https://github.com/Gruppio/Sonoff-Homekit">https://github.com/Gruppio/Sonoff-Homekit</a><br>主要设备：ESP8266、1路5V继电器、杜邦线若干。</p><img src="https://img-blog.csdnimg.cn/20190113140601235.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RXVEYxOTk4,size_16,color_FFFFFF,t_70"><img src="https://img-blog.csdnimg.cn/20190113140616914.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RXVEYxOTk4,size_16,color_FFFFFF,t_70"><img src="https://img-blog.csdnimg.cn/20190113140633662.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RXVEYxOTk4,size_16,color_FFFFFF,t_70"><p>下面开始进入正题：</p><h2 id="开始给ESP8266刷固件"><a href="#开始给ESP8266刷固件" class="headerlink" title="开始给ESP8266刷固件"></a>开始给ESP8266刷固件</h2><p><a href="https://pan.baidu.com/s/1Xp3CvFbdh4McnkBIacfsuQ">https://pan.baidu.com/s/1Xp3CvFbdh4McnkBIacfsuQ</a> （固件自取）<br>本次采用esptool.py来刷鞋固件，所以需要给电脑安装python环境。</p><h2 id="安装esptool-py"><a href="#安装esptool-py" class="headerlink" title="安装esptool.py"></a>安装esptool.py</h2><p>pip install esptool<br>切换到python的安装路径不知道在哪的输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">where</span> python</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20190113142401883.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RXVEYxOTk4,size_16,color_FFFFFF,t_70"><p><strong>cd &#x2F;python路径 切换到python安装目录，在此目录下放上我们要刷写的固件</strong></p><img src="https://img-blog.csdnimg.cn/20190113142724432.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RXVEYxOTk4,size_16,color_FFFFFF,t_70"><p>好，开始用micro-USB线将ESP8266连接到计算机（如果不识别自行安装CH340驱动）记住端口号，我的是COM3</p><img src="https://img-blog.csdnimg.cn/20190113143206883.png"><h2 id="先清空flash"><a href="#先清空flash" class="headerlink" title="先清空flash"></a>先清空flash</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">esptool.py --port COM3 erase_flash</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/2019011314341874.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RXVEYxOTk4,size_16,color_FFFFFF,t_70"><h2 id="刷入固件"><a href="#刷入固件" class="headerlink" title="刷入固件"></a>刷入固件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">esptool.py -p COM3 -b 115200 write_flash -fs 1MB -fm dout -ff 40m 0x0 rboot.bin 0x1000 blank_config.bin 0x2000 Sonoff_ON.bin</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20190113143825879.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RXVEYxOTk4,size_16,color_FFFFFF,t_70"><p>**到这里固件已经刷入完成，搜索WIFI看到名为Switch-****<strong>的SSID，连接上后进入192.168.4.1进行设置为其连接上一个可联网的WIFI。</strong></p><img src="https://img-blog.csdnimg.cn/20190113144217426.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RXVEYxOTk4,size_16,color_FFFFFF,t_70"><p>这时打开ios的家庭APP，添加配件，选择“我没有代码或无法扫描”<strong>输入配对码：11111111</strong></p><img src="https://img-blog.csdnimg.cn/20190113144537603.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RXVEYxOTk4,size_16,color_FFFFFF,t_70"><img src="https://img-blog.csdnimg.cn/20190113144609464.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RXVEYxOTk4,size_16,color_FFFFFF,t_70"><h2 id="我们可以从串口信息看到正在添加HOMEKIT-客户端"><a href="#我们可以从串口信息看到正在添加HOMEKIT-客户端" class="headerlink" title="我们可以从串口信息看到正在添加HOMEKIT 客户端"></a>我们可以从串口信息看到正在添加HOMEKIT 客户端</h2><img src="https://img-blog.csdnimg.cn/20190113145119352.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RXVEYxOTk4,size_16,color_FFFFFF,t_70"><h2 id="这时已经成功添加到家庭APP，支持SIRI控制"><a href="#这时已经成功添加到家庭APP，支持SIRI控制" class="headerlink" title="这时已经成功添加到家庭APP，支持SIRI控制"></a>这时已经成功添加到家庭APP，支持SIRI控制</h2><img src="https://img-blog.csdnimg.cn/20190113145151882.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RXVEYxOTk4,size_16,color_FFFFFF,t_70"><p>接下来，让我们把继电器连接到ESP8266的D6 (GPIO12)口上。ESP8266接笔记本的USB口可能会供电不足导致不能控制继电器。我在这里就用充电宝做电源了。我们可以试试让siri帮你开关继电器了</p><img src="https://img-blog.csdnimg.cn/2019011314553482.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RXVEYxOTk4,size_16,color_FFFFFF,t_70"><p>这里附上一张继电器接220V用电器的示意图</p><img src="https://img-blog.csdnimg.cn/20190113145902241.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RXVEYxOTk4,size_16,color_FFFFFF,t_70"><hr><h1 id="相关链接（侵删）"><a href="#相关链接（侵删）" class="headerlink" title="相关链接（侵删）"></a>相关链接（侵删）</h1><ol><li><a href="https://blog.csdn.net/TWTF1998/article/details/86419559">ESP8266控制继电器（支持HOMEKIT）</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">通过HOMEKIT让ESP8266控制继电器，通过esptool下载程序</summary>
    
    
    
    <category term="Linux" scheme="https://zml3589110.github.io/categories/Linux/"/>
    
    <category term="ESP8266" scheme="https://zml3589110.github.io/categories/ESP8266/"/>
    
    <category term="乐鑫" scheme="https://zml3589110.github.io/categories/%E4%B9%90%E9%91%AB/"/>
    
    
    <category term="Ubuntu" scheme="https://zml3589110.github.io/tags/Ubuntu/"/>
    
    <category term="ESP8266" scheme="https://zml3589110.github.io/tags/ESP8266/"/>
    
    <category term="物联网" scheme="https://zml3589110.github.io/tags/%E7%89%A9%E8%81%94%E7%BD%91/"/>
    
    <category term="乐鑫" scheme="https://zml3589110.github.io/tags/%E4%B9%90%E9%91%AB/"/>
    
    <category term="HOMEKIT" scheme="https://zml3589110.github.io/tags/HOMEKIT/"/>
    
    <category term="esptool.py" scheme="https://zml3589110.github.io/tags/esptool-py/"/>
    
  </entry>
  
  <entry>
    <title>C 使用 sizeof 判断数组大小报错</title>
    <link href="https://zml3589110.github.io/posts/2501953460.html"/>
    <id>https://zml3589110.github.io/posts/2501953460.html</id>
    <published>2023-03-03T02:57:20.000Z</published>
    <updated>2023-03-27T00:14:26.598Z</updated>
    
    <content type="html"><![CDATA[<h1 id="extern关联数组"><a href="#extern关联数组" class="headerlink" title="extern关联数组"></a>extern关联数组</h1><p>在写代码时，我想用extern来关联一个数组，然后利用sizeof计算数组的大小，代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">char</span> a[];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> b size=(sizeof(a)/sizeof(a[0]))</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>编译报错：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">invalid application of `<span class="keyword">sizeof</span><span class="number">&#x27;</span> to incomplete type `<span class="keyword">char</span>[] &#x27;</span><br></pre></td></tr></table></figure><p>主要原因是sizeof不能用在extern变量：<br>sizeof 的计算是在代码编译的时刻。<br>而extern是在链接的时刻。<br>所以 sizeof 在计算时，并不知道这个extern修饰的符号到底占用了多少空间。</p><p>解决办法：</p><p>1.把sizeof()和数组写到一个文件中</p><p>2.不用宏定义b，而是在定义数组a的那个文件里定义 size&#x3D;(sizeof(a)&#x2F;sizeof(a[0]));<br>然后在其他文件中<br>extern int size;<br>extern char a[];</p><hr><h1 id="相关链接（侵删）"><a href="#相关链接（侵删）" class="headerlink" title="相关链接（侵删）"></a>相关链接（侵删）</h1><ol><li><a href="https://www.programminghunter.com/article/53431378866/#:~:text=invalid%20application%20of%20%60%20sizeof%27%20to%20incomplete,type%20%60char%20%5B%5D%20%27%20%E4%B8%BB%E8%A6%81%E5%8E%9F%E5%9B%A0%E6%98%AFsizeof%E4%B8%8D%E8%83%BD%E7%94%A8%E5%9C%A8extern%E5%8F%98%E9%87%8F%EF%BC%9A%20sizeof%20%E7%9A%84%E8%AE%A1%E7%AE%97%E6%98%AF%E5%9C%A8%E4%BB%A3%E7%A0%81%E7%BC%96%E8%AF%91%E7%9A%84%E6%97%B6%E5%88%BB%E3%80%82">invalid application of <code>sizeof&#39; to incomplete type </code>char[] ‘</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">C 使用 sizeof 判断数组大小报错 invalid application of `sizeof&#39; to incomplete type `char[] &#39;</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="C" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/C/"/>
    
    <category term="关键字" scheme="https://zml3589110.github.io/categories/%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    
    
    <category term="C" scheme="https://zml3589110.github.io/tags/C/"/>
    
    <category term="sizeof" scheme="https://zml3589110.github.io/tags/sizeof/"/>
    
    <category term="extern" scheme="https://zml3589110.github.io/tags/extern/"/>
    
    <category term="关键字" scheme="https://zml3589110.github.io/tags/%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    
    <category term="数组" scheme="https://zml3589110.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>C# 程序编译时自动更新版本号方法</title>
    <link href="https://zml3589110.github.io/posts/996856330.html"/>
    <id>https://zml3589110.github.io/posts/996856330.html</id>
    <published>2023-02-23T09:02:20.000Z</published>
    <updated>2023-03-27T00:14:26.583Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-创建控制台工程AutoUpdateVersion，复制如下代码，生成exe文件"><a href="#1-创建控制台工程AutoUpdateVersion，复制如下代码，生成exe文件" class="headerlink" title="1.创建控制台工程AutoUpdateVersion，复制如下代码，生成exe文件"></a>1.创建控制台工程AutoUpdateVersion，复制如下代码，生成exe文件</h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line">    <span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="comment">//by txwtech</span></span><br><span class="line">    <span class="keyword">namespace</span> <span class="title">AutoUpdateVersion</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">UpdateVersion</span>(<span class="params"><span class="keyword">ref</span> <span class="built_in">string</span> line</span>)</span></span><br><span class="line"><span class="function"></span>            &#123;</span><br><span class="line">                <span class="keyword">var</span> first = line.IndexOf(<span class="string">&#x27;&quot;&#x27;</span>);</span><br><span class="line">                <span class="keyword">var</span> second = line.LastIndexOf(<span class="string">&#x27;&quot;&#x27;</span>);</span><br><span class="line">                <span class="keyword">var</span> sVersion = line.Substring(first + <span class="number">1</span>, second - first - <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">var</span> arrVersion = sVersion.Split(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">                <span class="keyword">if</span> (arrVersion.Length &lt; <span class="number">4</span>) <span class="keyword">return</span>;</span><br><span class="line">                <span class="keyword">var</span> major = Convert.ToInt32(arrVersion[<span class="number">0</span>]);</span><br><span class="line">                <span class="keyword">var</span> minor = Convert.ToInt32(arrVersion[<span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">var</span> build = Convert.ToInt32(arrVersion[<span class="number">2</span>]);</span><br><span class="line">                <span class="keyword">var</span> amendment = Convert.ToInt32(arrVersion[<span class="number">3</span>]);</span><br><span class="line">                <span class="keyword">if</span> (++amendment &gt; <span class="number">999</span>) ++build;</span><br><span class="line">                <span class="keyword">if</span> (build &gt; <span class="number">99</span>) ++minor;</span><br><span class="line">                <span class="keyword">if</span> (minor &gt; <span class="number">9</span>) ++major;</span><br><span class="line">                <span class="keyword">var</span> sNewVersion = <span class="string">$&quot;<span class="subst">&#123;major&#125;</span>.<span class="subst">&#123;minor&#125;</span>.<span class="subst">&#123;build&#125;</span>.<span class="subst">&#123;amendment&#125;</span>&quot;</span>;</span><br><span class="line">                line = line.Replace(sVersion, sNewVersion);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;this is updateversion app&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>            &#123;</span><br><span class="line">                <span class="keyword">if</span> (args.Length != <span class="number">1</span> || !File.Exists(args[<span class="number">0</span>])) <span class="keyword">return</span>;</span><br><span class="line">                <span class="keyword">var</span> lines = File.ReadAllLines(args[<span class="number">0</span>]);</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> i = lines.Length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (lines[i].Contains(<span class="string">&quot;assembly: AssemblyFileVersion&quot;</span>))</span><br><span class="line">                    &#123;</span><br><span class="line">                        UpdateVersion(<span class="keyword">ref</span> lines[i]);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (lines[i].Contains(<span class="string">&quot;assembly: AssemblyVersion&quot;</span>) &amp;&amp; !lines[i].Contains(<span class="string">&quot;*&quot;</span>))</span><br><span class="line">                    &#123;</span><br><span class="line">                        UpdateVersion(<span class="keyword">ref</span> lines[i]);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                File.WriteAllLines(args[<span class="number">0</span>], lines);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="2-拷贝文件"><a href="#2-拷贝文件" class="headerlink" title="2. 拷贝文件"></a>2. 拷贝文件</h1><img src="https://img2022.cnblogs.com/blog/1677779/202204/1677779-20220422171616543-110909714.jpg"><h1 id="3-复制到另外一个项目，需要自动更新版本号的项目"><a href="#3-复制到另外一个项目，需要自动更新版本号的项目" class="headerlink" title="3.复制到另外一个项目，需要自动更新版本号的项目"></a>3.复制到另外一个项目，需要自动更新版本号的项目</h1><img src="https://img2022.cnblogs.com/blog/1677779/202204/1677779-20220422171541867-2022955841.jpg"><h1 id="4-打开项目属性进行设置；"><a href="#4-打开项目属性进行设置；" class="headerlink" title="4. 打开项目属性进行设置；"></a>4. 打开项目属性进行设置；</h1><p>start AutoUpdateVersion $(ProjectDir)Properties\AssemblyInfo.cs</p><p>或者：</p><p>AutoUpdateVersion $(ProjectDir)Properties\AssemblyInfo.cs</p><img src="https://img2022.cnblogs.com/blog/1677779/202204/1677779-20220422171844330-228246739.jpg"><hr><h1 id="相关链接（侵删）"><a href="#相关链接（侵删）" class="headerlink" title="相关链接（侵删）"></a>相关链接（侵删）</h1><ol><li><a href="https://www.cnblogs.com/txwtech/p/16179740.html">C#程序编译时自动更新版本号方法</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">C# 程序编译时自动更新版本号方法</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="C#" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/C/"/>
    
    <category term="前端" scheme="https://zml3589110.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="版本号" scheme="https://zml3589110.github.io/categories/%E7%89%88%E6%9C%AC%E5%8F%B7/"/>
    
    
    <category term="C#" scheme="https://zml3589110.github.io/tags/C/"/>
    
    <category term="版本号" scheme="https://zml3589110.github.io/tags/%E7%89%88%E6%9C%AC%E5%8F%B7/"/>
    
    <category term="自动更新" scheme="https://zml3589110.github.io/tags/%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0/"/>
    
  </entry>
  
  <entry>
    <title>C# 十进制与十六进制之间的转换</title>
    <link href="https://zml3589110.github.io/posts/1935384656.html"/>
    <id>https://zml3589110.github.io/posts/1935384656.html</id>
    <published>2023-02-23T08:17:20.000Z</published>
    <updated>2023-03-27T00:14:26.558Z</updated>
    
    <content type="html"><![CDATA[<h1 id="转换进制方法一"><a href="#转换进制方法一" class="headerlink" title="转换进制方法一"></a>转换进制方法一</h1><h2 id="一、十进制转换为十六进制"><a href="#一、十进制转换为十六进制" class="headerlink" title="一、十进制转换为十六进制"></a>一、十进制转换为十六进制</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> a = <span class="number">654</span>;</span><br><span class="line"><span class="built_in">string</span> A = a.ToString(<span class="string">&quot;X6&quot;</span>);</span><br></pre></td></tr></table></figure><p>上面Tostring(“X6”)是将整型a转化成16进制数；</p><p>其中：</p><p><strong>（1） “x”小写输出十六进制的的字母为小写字母，”X”大写则输出的十六进制字母为大写；</strong></p><p><strong>（2） 后面的数字6是表示自动补0补足6位；</strong></p><h2 id="二、十六进制转为十进制"><a href="#二、十六进制转为十进制" class="headerlink" title="二、十六进制转为十进制"></a>二、十六进制转为十进制</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = Convert.ToInt64(A, <span class="number">16</span>);</span><br></pre></td></tr></table></figure><p>将十六进制数A转化为整型a</p><p>其中：</p><p><strong>（1）var关键字：匿名类型，可以代替任何类型</strong></p><p><strong>（2） ToInt64(String value,Int frombase)是Convert里面的一个方法，是将制定技术的数字的字符串表示形式转换为等效的64位有符号整数，Value是需要转化的字符串，frombase是数字基数，即2，8，10，16，这里是将16进制转化，所以是16</strong></p><h1 id="将整数转换为十六进制"><a href="#将整数转换为十六进制" class="headerlink" title="将整数转换为十六进制"></a>将整数转换为十六进制</h1><p><strong>将整数转换为十六进制</strong></p><p>可以使用string.ToString()扩展方法将整数转换为十六进制。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer Value: <span class="number">500</span></span><br><span class="line">Hexadecimal Value: <span class="number">1F</span>4</span><br></pre></td></tr></table></figure><p><strong>将十六进制转换为整数</strong>-</p><p>可以使用int.Parse或convert.ToInt32将十六进制值转换为整数</p><p>**int.Parse-**将数字的字符串表示形式转换为其等效的32位有符号整数。返回值指示操作是否成功。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hexadecimal Value: <span class="number">1F</span>4</span><br><span class="line">Integer Value: <span class="number">500</span></span><br></pre></td></tr></table></figure><p>**Convert.ToInt32-**将指定的值转换为32位带符号整数。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hexadecimal Value: <span class="number">1F</span>4</span><br><span class="line">Integer Value: <span class="number">500</span></span><br></pre></td></tr></table></figure><p><strong>将整数转换为十六进制</strong>-</p><p><strong>字符串hexValue &#x3D; integerValue.ToString（“ X”）;</strong></p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DemoApplication</span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="built_in">int</span> integerValue = <span class="number">500</span>;</span><br><span class="line">         Console.WriteLine(<span class="string">$&quot;Integer Value: <span class="subst">&#123;integerValue&#125;</span>&quot;</span>);</span><br><span class="line">         <span class="built_in">string</span> hexValue = integerValue.ToString(<span class="string">&quot;X&quot;</span>);</span><br><span class="line">         Console.WriteLine(<span class="string">$&quot;Hexadecimal Value: <span class="subst">&#123;hexValue&#125;</span>&quot;</span>);</span><br><span class="line">         Console.ReadLine();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><p>上面代码的输出是</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer Value: <span class="number">500</span></span><br><span class="line">Hexadecimal Value: <span class="number">1F</span>4</span><br></pre></td></tr></table></figure><p><strong>将十六进制转换为整数</strong>-</p><p><strong>使用int.Parse的示例</strong>-</p><h2 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DemoApplication</span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="built_in">string</span> hexValue = <span class="string">&quot;1F4&quot;</span>;</span><br><span class="line">         Console.WriteLine(<span class="string">$&quot;Hexadecimal Value: <span class="subst">&#123;hexValue&#125;</span>&quot;</span>);</span><br><span class="line">         <span class="built_in">int</span> integerValue = <span class="built_in">int</span>.Parse(hexValue, System.Globalization.NumberStyles.HexNumber);</span><br><span class="line">         Console.WriteLine(<span class="string">$&quot;Integer Value: <span class="subst">&#123;integerValue&#125;</span>&quot;</span>);</span><br><span class="line">         Console.ReadLine();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><p>上面代码的输出是</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hexadecimal Value: <span class="number">1F</span>4</span><br><span class="line">Integer Value: <span class="number">500</span></span><br></pre></td></tr></table></figure><p><strong>使用Convert.ToInt32的示例</strong>-</p><h2 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DemoApplication</span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="built_in">string</span> hexValue = <span class="string">&quot;1F4&quot;</span>;</span><br><span class="line">         Console.WriteLine(<span class="string">$&quot;Hexadecimal Value: <span class="subst">&#123;hexValue&#125;</span>&quot;</span>);</span><br><span class="line">         <span class="built_in">int</span> integerValue = Convert.ToInt32(hexValue, <span class="number">16</span>);</span><br><span class="line">         Console.WriteLine(<span class="string">$&quot;Integer Value: <span class="subst">&#123;integerValue&#125;</span>&quot;</span>);</span><br><span class="line">         Console.ReadLine();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><p>上面代码的输出是</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hexadecimal Value: <span class="number">1F</span>4</span><br><span class="line">Integer Value: <span class="number">500</span></span><br></pre></td></tr></table></figure><h1 id="数据互转-16进制-amp-16进制字符串-amp-字符串"><a href="#数据互转-16进制-amp-16进制字符串-amp-字符串" class="headerlink" title="数据互转 16进制&amp;16进制字符串&amp;字符串"></a>数据互转 16进制&amp;16进制字符串&amp;字符串</h1><h2 id="1、字符串过滤-or-提取字符串"><a href="#1、字符串过滤-or-提取字符串" class="headerlink" title="1、字符串过滤 or 提取字符串"></a>1、字符串过滤 or 提取字符串</h2><p>提取字符串：在C# .net开发中 “ToString()”方法是最常见的，用于将文本转为字符串；</p><p>字符串过滤：在处理字符串数据或者hex数据时，一般都需要去掉 空格 数组标识0x 标点符号 等等字符，方便后续进一步处理；</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将文本转为字符串</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="built_in">string</span> str = textBox1.Text.ToString();</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//过滤字符串</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> pattern = <span class="string">&quot;[A-Za-z0-9]&quot;</span>;</span><br><span class="line">    <span class="built_in">string</span> strRet = <span class="string">&quot;&quot;</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//正则匹配，只保留字母和数字</span></span><br><span class="line">    MatchCollection results = Regex.Matches(ReadString(), pattern);</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> v <span class="keyword">in</span> results)</span><br><span class="line">    &#123;</span><br><span class="line">        strRet += v.ToString();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> strRet.Replace(<span class="string">&quot;0x&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、字符串与16进制数组互转"><a href="#2、字符串与16进制数组互转" class="headerlink" title="2、字符串与16进制数组互转"></a>2、字符串与16进制数组互转</h2><p>从字符串转16进制数组，字符串的每一个字符就是一个byte；</p><p>可以用Encoding类的方法完成格式转换，Encoding位于System.Text命名空间下；</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//str为输入字符串</span></span><br><span class="line"><span class="built_in">byte</span>[] bytes = Encoding.Default.GetBytes(str);</span><br></pre></td></tr></table></figure><p><strong>同样的，字节数组转字符串；</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//bytes为输入字节数组</span></span><br><span class="line"><span class="built_in">string</span> str = Encoding.Default.GetString(bytes);</span><br></pre></td></tr></table></figure><h2 id="3、16进制数组与16进制字符串互转"><a href="#3、16进制数组与16进制字符串互转" class="headerlink" title="3、16进制数组与16进制字符串互转"></a>3、16进制数组与16进制字符串互转</h2><ul><li>16进制数组无法直接打印和显示（否则会出现乱码），这就需要转成对应的字符串；</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="comment">//利用for循环将16进制数组转成对应的16进制字符串</span></span><br><span class="line"><span class="comment">//如 0x7E,0x5D,0x5A =&gt; &quot;7E5D5A&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">string</span> strTemp = <span class="string">&quot;&quot;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; bytes.Length; i++)</span><br><span class="line">&#123;</span><br><span class="line">strTemp += bytes[i].ToString(<span class="string">&quot;X2&quot;</span>);</span><br><span class="line">strTemp += <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一般对于嵌入式硬件底层，收到的数据都是字节流，不需要转换，可以直接处理；</p><p>但是对于PC、Android等非底层驱动，拿到的数据都是字符串形式，这就需要将16进制字符串转16进制数组；</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="comment">//str为过滤之后的字符串，只包含字母和数字</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">string</span> strTemp = <span class="string">&quot;&quot;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; str.Length/<span class="number">2</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">strTemp += str.Substring(<span class="number">2</span> * i, <span class="number">2</span>);</span><br><span class="line">strTemp += <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、字符串与16进制字符串"><a href="#4、字符串与16进制字符串" class="headerlink" title="4、字符串与16进制字符串"></a>4、字符串与16进制字符串</h2><p>二者互转又多了一层。</p><ol><li><p>字符串转16进制字符串：先将字符串转为16进制数组，再将16进制数组转为16进制字符串；</p></li><li><p>16进制字符串转字符串：先将16进制字符串转为16进制数组，再将16进制数组转为字符串；</p></li></ol><h2 id="5、其它常见转换操作"><a href="#5、其它常见转换操作" class="headerlink" title="5、其它常见转换操作"></a>5、其它常见转换操作</h2><p><strong>5.1 字符串替换</strong><br>小节1中介绍了正则匹配来过滤字符串的方法，string类本身也有很多方法实现过滤和替换</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//去掉字符串中的控制字符</span></span><br><span class="line"><span class="built_in">string</span> str2 = str1.Replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>).Replace(<span class="string">&quot;,&quot;</span>, <span class="string">&quot;&quot;</span>).Replace(<span class="string">&quot;\t&quot;</span>, <span class="string">&quot;&quot;</span>).Replace(<span class="string">&quot;\n&quot;</span>, <span class="string">&quot;&quot;</span>).Replace(<span class="string">&quot;\r&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>5.2 格式转换</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Encoding为编码格式转换</span></span><br><span class="line"><span class="comment">//Convert为数据格式转换</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//常见的转换有</span></span><br><span class="line"> </span><br><span class="line">Convert.ToByte();</span><br><span class="line">Convert.ToUInt16();</span><br><span class="line">Convert.ToUInt32();</span><br><span class="line">Convert.ToUInt64();</span><br><span class="line">Convert.ToDateTime();</span><br><span class="line">Convert.ToString();</span><br><span class="line">Convert.ToBase64String();</span><br></pre></td></tr></table></figure><hr><h1 id="相关链接（侵删）"><a href="#相关链接（侵删）" class="headerlink" title="相关链接（侵删）"></a>相关链接（侵删）</h1><ol><li><a href="https://blog.csdn.net/DKDUCK/article/details/120427693">C#中十进制与十六进制之间的转换</a></li><li><a href="https://www.nhooo.com/note/qa02fr.html">如何在C#中将整数转换为十六进制，反之亦然？</a></li><li><a href="https://blog.csdn.net/weixin_38743772/article/details/128653936">C# 数据互转 16进制&amp;16进制字符串&amp;字符串</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">C# 十进制与十六进制之间的转换</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="C#" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/C/"/>
    
    <category term="前端" scheme="https://zml3589110.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="数据" scheme="https://zml3589110.github.io/categories/%E6%95%B0%E6%8D%AE/"/>
    
    <category term="进制转换" scheme="https://zml3589110.github.io/categories/%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/"/>
    
    
    <category term="C#" scheme="https://zml3589110.github.io/tags/C/"/>
    
    <category term="数据" scheme="https://zml3589110.github.io/tags/%E6%95%B0%E6%8D%AE/"/>
    
    <category term="进制转换" scheme="https://zml3589110.github.io/tags/%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/"/>
    
  </entry>
  
  <entry>
    <title>C# 获取本机IP</title>
    <link href="https://zml3589110.github.io/posts/1056828438.html"/>
    <id>https://zml3589110.github.io/posts/1056828438.html</id>
    <published>2023-02-23T07:48:20.000Z</published>
    <updated>2023-03-27T00:14:26.541Z</updated>
    
    <content type="html"><![CDATA[<h1 id="获取本机IP"><a href="#获取本机IP" class="headerlink" title="获取本机IP"></a>获取本机IP</h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">GetLocalIp</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span>获取本地的IP地址</span></span><br><span class="line">    <span class="built_in">string</span> AddressIP = <span class="built_in">string</span>.Empty;</span><br><span class="line">    <span class="keyword">foreach</span> (IPAddress _IPAddress <span class="keyword">in</span> Dns.GetHostEntry(Dns.GetHostName()).AddressList)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_IPAddress.AddressFamily.ToString() == <span class="string">&quot;InterNetwork&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            AddressIP = _IPAddress.ToString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> AddressIP;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="相关链接（侵删）"><a href="#相关链接（侵删）" class="headerlink" title="相关链接（侵删）"></a>相关链接（侵删）</h1><ol><li><a href="https://www.cnblogs.com/txwtech/p/16201403.html">c#获取本机IP</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">C# 使用代码获取本地IP</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="C#" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/C/"/>
    
    <category term="前端" scheme="https://zml3589110.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="IP" scheme="https://zml3589110.github.io/categories/IP/"/>
    
    <category term="网络编程" scheme="https://zml3589110.github.io/categories/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C#" scheme="https://zml3589110.github.io/tags/C/"/>
    
    <category term="网络" scheme="https://zml3589110.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="IP地址" scheme="https://zml3589110.github.io/tags/IP%E5%9C%B0%E5%9D%80/"/>
    
  </entry>
  
  <entry>
    <title>C#绘图之十八（十字光标-交叉线跟随鼠标移动）</title>
    <link href="https://zml3589110.github.io/posts/884599238.html"/>
    <id>https://zml3589110.github.io/posts/884599238.html</id>
    <published>2023-02-23T07:44:20.000Z</published>
    <updated>2023-03-27T00:14:26.708Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h1><h2 id="设置ChartAre属性："><a href="#设置ChartAre属性：" class="headerlink" title="设置ChartAre属性："></a>设置ChartAre属性：</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chart1.ChartAreas[<span class="number">0</span>].CursorX.IsUserEnabled = <span class="literal">true</span>;</span><br><span class="line">chart1.ChartAreas[<span class="number">0</span>].CursorY.IsUserEnabled = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><h2 id="对Chart添加MouseMove事件，在方法内实现如下代码："><a href="#对Chart添加MouseMove事件，在方法内实现如下代码：" class="headerlink" title="对Chart添加MouseMove事件，在方法内实现如下代码："></a>对Chart添加MouseMove事件，在方法内实现如下代码：</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">chart1_MouseMove</span>(<span class="params"><span class="built_in">object</span> sender, MouseEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">chart1.ChartAreas[<span class="number">0</span>].CursorX.SetCursorPixelPosition(<span class="keyword">new</span> PointF(e.X, e.Y), <span class="literal">true</span>);</span><br><span class="line">    chart1.ChartAreas[<span class="number">0</span>].CursorY.SetCursorPixelPosition(<span class="keyword">new</span> PointF(e.X, e.Y), <span class="literal">true</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="相关链接（侵删）"><a href="#相关链接（侵删）" class="headerlink" title="相关链接（侵删）"></a>相关链接（侵删）</h1><ol><li><a href="https://zhuanlan.zhihu.com/p/337384925">C# Chart 十字光标&#x2F;交叉线跟随鼠标移动</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">使用 C# chart 图表时十字光标-交叉线跟随鼠标移动</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="C#" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/C/"/>
    
    <category term="前端" scheme="https://zml3589110.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="绘图" scheme="https://zml3589110.github.io/categories/%E7%BB%98%E5%9B%BE/"/>
    
    
    <category term="C#" scheme="https://zml3589110.github.io/tags/C/"/>
    
    <category term="控件" scheme="https://zml3589110.github.io/tags/%E6%8E%A7%E4%BB%B6/"/>
    
    <category term="绘图" scheme="https://zml3589110.github.io/tags/%E7%BB%98%E5%9B%BE/"/>
    
    <category term="Chart" scheme="https://zml3589110.github.io/tags/Chart/"/>
    
  </entry>
  
  <entry>
    <title>C#绘图之十七（隐藏与显示某一系列曲线方法vs2019-示例）</title>
    <link href="https://zml3589110.github.io/posts/1984843230.html"/>
    <id>https://zml3589110.github.io/posts/1984843230.html</id>
    <published>2023-02-23T07:39:20.000Z</published>
    <updated>2023-03-27T00:14:26.703Z</updated>
    
    <content type="html"><![CDATA[<h1 id="图表隐藏与显示方法"><a href="#图表隐藏与显示方法" class="headerlink" title="图表隐藏与显示方法"></a>图表隐藏与显示方法</h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkBox1_CheckedChanged</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(checkBox1.Checked==<span class="literal">true</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//  chart1.Series[0].IsVisibleInLegend = true;</span></span><br><span class="line">        <span class="comment">//  chart2.Series[0].IsVisibleInLegend = true;</span></span><br><span class="line">        chart1.Series[<span class="number">0</span>].Enabled = <span class="literal">true</span>;      </span><br><span class="line">        <span class="comment">//by txwtech</span></span><br><span class="line">            </span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// chart1.Series[0].IsVisibleInLegend = false;</span></span><br><span class="line">        chart1.Series[<span class="number">0</span>].Enabled = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// chart1.Series[0].Points.Clear();</span></span><br><span class="line">        <span class="comment">//  chart2.Series[0].IsVisibleInLegend = false;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://img2022.cnblogs.com/blog/1677779/202204/1677779-20220429164428048-2096736696.jpg"><h1 id="完整代码示例"><a href="#完整代码示例" class="headerlink" title="完整代码示例"></a>完整代码示例</h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.ComponentModel;</span><br><span class="line"><span class="keyword">using</span> System.Data;</span><br><span class="line"><span class="keyword">using</span> System.Drawing;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Net;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms.DataVisualization.Charting;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">draw_chart_practice</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Form1</span> : <span class="title">Form</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Form1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line">        ToolTip toolTip = <span class="keyword">new</span> ToolTip();</span><br><span class="line">        <span class="built_in">string</span> postion11 = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="built_in">string</span>[] xx = <span class="keyword">new</span> <span class="built_in">string</span> []&#123;<span class="string">&quot;1月&quot;</span>,<span class="string">&quot;2月&quot;</span>, <span class="string">&quot;3月&quot;</span>,<span class="string">&quot;4月&quot;</span>, <span class="string">&quot;5月&quot;</span>, <span class="string">&quot;6月&quot;</span>,<span class="string">&quot;7月&quot;</span>, <span class="string">&quot;8月&quot;</span>, <span class="string">&quot;9月&quot;</span>, <span class="string">&quot;10月&quot;</span>, <span class="string">&quot;11月&quot;</span>, <span class="string">&quot;12月&quot;</span> &#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">int</span>[] yy = <span class="keyword">new</span> <span class="built_in">int</span>[] &#123; <span class="number">88</span>,<span class="number">99</span>,<span class="number">100</span>, <span class="number">88</span>, <span class="number">99</span>, <span class="number">100</span> , <span class="number">88</span>, <span class="number">99</span>, <span class="number">100</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">5</span> &#125;;</span><br><span class="line">        <span class="built_in">int</span>[] yy2 = <span class="keyword">new</span> <span class="built_in">int</span>[] &#123; <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">18</span>, <span class="number">95</span>, <span class="number">105</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">7</span> &#125;;</span><br><span class="line">      <span class="comment">//  string[] yy3 = new string[] &#123; &quot;1月&quot;, &quot;2月&quot;, &quot;3月&quot;, &quot;4月&quot;, &quot;5月&quot;, &quot;6月&quot;, &quot;7月&quot;, &quot;8月&quot;, &quot;9月&quot;, &quot;10月&quot;, &quot;11月&quot;, &quot;12月&quot; &#125;;</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">modify</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">          <span class="comment">//  static void Main(string[] args)</span></span><br><span class="line">            &#123;</span><br><span class="line">                DirectoryInfo directoryInfo = <span class="keyword">new</span> DirectoryInfo(Application.StartupPath);</span><br><span class="line">                <span class="built_in">string</span> path = directoryInfo.Parent.Parent.FullName + <span class="string">@&quot;\Properties\AssemblyInfo.cs&quot;</span>; <span class="comment">//上上级目录</span></span><br><span class="line"></span><br><span class="line">             <span class="comment">//   if (args.Length != 1 || !File.Exists(args[0])) return;     </span></span><br><span class="line">                <span class="keyword">var</span> lines = File.ReadAllLines(path);</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> i = lines.Length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (lines[i].Contains(<span class="string">&quot;assembly: AssemblyFileVersion&quot;</span>))</span><br><span class="line">                    &#123;</span><br><span class="line">                        UpdateVersion(<span class="keyword">ref</span> lines[i]);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (lines[i].Contains(<span class="string">&quot;assembly: AssemblyVersion&quot;</span>) &amp;&amp; !lines[i].Contains(<span class="string">&quot;*&quot;</span>))</span><br><span class="line">                    &#123;</span><br><span class="line">                        UpdateVersion(<span class="keyword">ref</span> lines[i]); </span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                File.WriteAllLines(path, lines); </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">AddLogInfo_IP</span>(<span class="params"><span class="built_in">string</span> log_text</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">              <span class="comment">//  lock (Obj)</span></span><br><span class="line">                &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    <span class="built_in">string</span> data = log_text;</span><br><span class="line"></span><br><span class="line">                    <span class="built_in">string</span> strNow, strDate;</span><br><span class="line"></span><br><span class="line">                    System.DateTime currentTime = <span class="keyword">new</span> System.DateTime();</span><br><span class="line">                    currentTime = System.DateTime.Now;</span><br><span class="line">                    strNow = currentTime.ToString();<span class="comment">//记录具体时间</span></span><br><span class="line">                    strDate = currentTime.ToString(<span class="string">&quot;yyyyMMdd&quot;</span>);</span><br><span class="line">                    strDate = <span class="string">&quot;\\\\172.17.50.89\\txw\\box_verification_ip\\&quot;</span> + strDate + <span class="string">&quot;box_verification.txt&quot;</span>; <span class="comment">//创建文件名</span></span><br><span class="line">                                                                                      <span class="comment">//  strDate = &quot;\</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="literal">true</span>)<span class="comment">//</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        data = strNow + <span class="string">&quot; &quot;</span> + data + <span class="string">&quot;\r\n&quot;</span>;                      </span><br><span class="line">                        File.AppendAllText(strDate, data, Encoding.UTF8);</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            catch (IOException e)</span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                MessageBox.Show(<span class="string">&quot;日志记录写入错误\r\n&quot;</span> + e.StackTrace + <span class="string">&quot;\r\n&quot;</span> + e.Message);</span><br><span class="line">            &#125;</span><br><span class="line">            catch (Exception ex)</span><br><span class="line">            &#123;</span><br><span class="line">                MessageBox.Show(<span class="string">&quot;日志记录写入错误\r\n&quot;</span> + ex.StackTrace + <span class="string">&quot;\r\n&quot;</span> + ex.Message);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">GetLocalIp</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment"><span class="doctag">///</span>获取本地的IP地址</span></span><br><span class="line">            <span class="built_in">string</span> AddressIP = <span class="built_in">string</span>.Empty;</span><br><span class="line">            <span class="keyword">foreach</span> (IPAddress _IPAddress <span class="keyword">in</span> Dns.GetHostEntry(Dns.GetHostName()).AddressList)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//if (_IPAddress.AddressFamily.ToString() == &quot;InterNetwork&quot;)</span></span><br><span class="line">                &#123;</span><br><span class="line">                   <span class="comment">// AddressIP = _IPAddress.ToString();</span></span><br><span class="line">                &#125;</span><br><span class="line">                AddLogInfo_IP(_IPAddress.ToString());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> AddressIP;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button1_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//GetLocalIp();</span></span><br><span class="line">            <span class="comment">//   modify();</span></span><br><span class="line">            <span class="comment">//chart1.Series[0].Points.AddXY(1, 168);</span></span><br><span class="line">            <span class="comment">//chart1.Series[0].Points.AddXY(3, 122);</span></span><br><span class="line">            <span class="comment">//chart1.Series[0].Points.AddXY(4, 153);</span></span><br><span class="line">            <span class="comment">//chart1.Series[0].Points.AddXY(5, 172);</span></span><br><span class="line">            <span class="comment">//chart1.Series[0].Points.AddXY(6, 100);</span></span><br><span class="line">            <span class="comment">//chart1.Series[0].Points.AddXY(100, 120);</span></span><br><span class="line">            <span class="comment">//chart1.Series[1].Points.AddXY(2, 2);</span></span><br><span class="line">            <span class="comment">//chart1.Series[1].Points.AddXY(4, 6);</span></span><br><span class="line">            xx[<span class="number">0</span>] = System.DateTime.Now.ToString();</span><br><span class="line">            xx[<span class="number">1</span>] = System.DateTime.Now.ToString();</span><br><span class="line">            xx[<span class="number">2</span>] = System.DateTime.Now.ToString();</span><br><span class="line">            xx[<span class="number">3</span>] = System.DateTime.Now.ToString();</span><br><span class="line">            xx[<span class="number">4</span>] = System.DateTime.Now.ToString();</span><br><span class="line">            xx[<span class="number">5</span>] = System.DateTime.Now.ToString();</span><br><span class="line">            chart1.Series[<span class="number">0</span>].Points.DataBindXY(xx,yy);</span><br><span class="line">            chart1.Series[<span class="number">1</span>].Points.DataBindXY(xx, yy2);</span><br><span class="line">            chart2.Series[<span class="number">0</span>].Points.DataBindXY(xx, yy);</span><br><span class="line">            <span class="comment">// chart1.Series[0].Label = &quot;#VAL&quot;;//每个点的值显示</span></span><br><span class="line">            chart1.Series[<span class="number">0</span>].ToolTip = <span class="string">&quot;#VALX:#VAL&quot;</span>;</span><br><span class="line">            chart1.Series[<span class="number">1</span>].ToolTip = <span class="string">&quot;#VALX:#VAL&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (checkBox1.Checked == <span class="literal">true</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                chart1.Series[<span class="number">0</span>].IsVisibleInLegend = <span class="literal">true</span>;</span><br><span class="line">                chart1.Series[<span class="number">0</span>].Enabled = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                chart1.Series[<span class="number">0</span>].IsVisibleInLegend = <span class="literal">false</span>;</span><br><span class="line">                chart1.Series[<span class="number">0</span>].Enabled = <span class="literal">false</span>;</span><br><span class="line">              <span class="comment">//  chart1.Series[0].Points.Clear();</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (checkBox2.Checked == <span class="literal">true</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                chart1.Series[<span class="number">1</span>].IsVisibleInLegend = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                chart1.Series[<span class="number">1</span>].IsVisibleInLegend = <span class="literal">false</span>;</span><br><span class="line">                <span class="comment">//chart1.Series[1].Points.Clear();</span></span><br><span class="line">            &#125;</span><br><span class="line">            InitChart(chart1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">UpdateVersion</span>(<span class="params"><span class="keyword">ref</span> <span class="built_in">string</span> line</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> first = line.IndexOf(<span class="string">&#x27;&quot;&#x27;</span>);</span><br><span class="line">            <span class="keyword">var</span> second = line.LastIndexOf(<span class="string">&#x27;&quot;&#x27;</span>);</span><br><span class="line">            <span class="keyword">var</span> sVersion = line.Substring(first + <span class="number">1</span>, second - first - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">var</span> arrVersion = sVersion.Split(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span> (arrVersion.Length &lt; <span class="number">4</span>) <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">var</span> major = Convert.ToInt32(arrVersion[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">var</span> minor = Convert.ToInt32(arrVersion[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">var</span> build = Convert.ToInt32(arrVersion[<span class="number">2</span>]);</span><br><span class="line">            <span class="keyword">var</span> amendment = Convert.ToInt32(arrVersion[<span class="number">3</span>]);</span><br><span class="line">            <span class="keyword">if</span> (++amendment &gt; <span class="number">999</span>) ++build;</span><br><span class="line">            <span class="keyword">if</span> (build &gt; <span class="number">99</span>) ++minor;</span><br><span class="line">            <span class="keyword">if</span> (minor &gt; <span class="number">9</span>) ++major;</span><br><span class="line">            <span class="keyword">var</span> sNewVersion = <span class="string">$&quot;<span class="subst">&#123;major&#125;</span>.<span class="subst">&#123;minor&#125;</span>.<span class="subst">&#123;build&#125;</span>.<span class="subst">&#123;amendment&#125;</span>&quot;</span>;</span><br><span class="line">            line = line.Replace(sVersion, sNewVersion);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">       </span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">InitChart</span>(<span class="params">System.Windows.Forms.DataVisualization.Charting.Chart chart1</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            chart1.ChartAreas[<span class="number">0</span>].CursorX.Interval = <span class="number">0</span>;</span><br><span class="line">            chart1.ChartAreas[<span class="number">0</span>].CursorX.IsUserEnabled = <span class="literal">true</span>;</span><br><span class="line">            chart1.ChartAreas[<span class="number">0</span>].CursorX.IsUserSelectionEnabled = <span class="literal">true</span>;</span><br><span class="line">            chart1.MouseClick += <span class="keyword">new</span> System.Windows.Forms.MouseEventHandler(chart1_MouseClick);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">chart1_MouseMove</span>(<span class="params"><span class="built_in">object</span> sender, MouseEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> area = chart1.ChartAreas[<span class="number">0</span>];</span><br><span class="line">           <span class="comment">// var area = chart1.Series[0];</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//      double xvalue = area.AxisX.PixelPositionToValue(e.X);</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">//  double yvalue = area.AxisY.PixelPositionToValue(e.Y);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// textbox1.text = string.Format(&quot;&#123;0:f0&#125;,&#123;1:f0&#125;&quot;, xvalue, yvalue);</span></span><br><span class="line">        <span class="comment">//    postion11=(string.Format(&quot;&#123;0:f0&#125;,&#123;1:f0&#125;&quot;, xvalue, yvalue));</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">chart1_MouseHover</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> area = chart1.ChartAreas[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">           <span class="comment">// double xvalue = area.AxisX.PixelPositionToValue(e.X);</span></span><br><span class="line"></span><br><span class="line">           <span class="comment">// double yvalue = area.AxisY.PixelPositionToValue(e.Y);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// textbox1.text = string.Format(&quot;&#123;0:f0&#125;,&#123;1:f0&#125;&quot;, xvalue, yvalue);</span></span><br><span class="line">           <span class="comment">// MessageBox.Show(string.Format(&quot;&#123;0:f0&#125;,&#123;1:f0&#125;&quot;, xvalue, yvalue));</span></span><br><span class="line">          <span class="comment">//  toolTip.SetToolTip(chart1, postion11);</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  private void chart1_Click(object sender, EventArgs e)</span></span><br><span class="line">        <span class="comment">// &#123;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">chart1_MouseClick</span>(<span class="params"><span class="built_in">object</span> sender, MouseEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Chart chart1 = sender <span class="keyword">as</span> Chart;</span><br><span class="line">              </span><br><span class="line">          <span class="comment">//  string aa = chart1.Series[0].ToolTip = &quot;#VALX:#VAL&quot;;</span></span><br><span class="line">         <span class="comment">//   MessageBox.Show(aa);</span></span><br><span class="line">            <span class="keyword">if</span> (e.Button == MouseButtons.Right)</span><br><span class="line">            &#123;</span><br><span class="line">                chart1.ChartAreas[<span class="number">0</span>].AxisX.ScaleView.ZoomReset(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkBox1_CheckedChanged</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">if</span>(checkBox1.Checked==<span class="literal">true</span>)</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="comment">//  chart1.Series[0].IsVisibleInLegend = true;</span></span><br><span class="line">              <span class="comment">//  chart2.Series[0].IsVisibleInLegend = true;</span></span><br><span class="line"></span><br><span class="line">                chart1.Series[<span class="number">0</span>].Enabled = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//by txwtech</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">               <span class="comment">// chart1.Series[0].IsVisibleInLegend = false;</span></span><br><span class="line">                chart1.Series[<span class="number">0</span>].Enabled = <span class="literal">false</span>;</span><br><span class="line">                <span class="comment">// chart1.Series[0].Points.Clear();</span></span><br><span class="line">              <span class="comment">//  chart2.Series[0].IsVisibleInLegend = false;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkBox2_CheckedChanged</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">if</span> (checkBox2.Checked == <span class="literal">true</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                chart1.Series[<span class="number">1</span>].IsVisibleInLegend = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                chart1.Series[<span class="number">1</span>].IsVisibleInLegend = <span class="literal">false</span>;</span><br><span class="line">                <span class="comment">//chart1.Series[1].Points.Clear();</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="相关链接（侵删）"><a href="#相关链接（侵删）" class="headerlink" title="相关链接（侵删）"></a>相关链接（侵删）</h1><ol><li><a href="https://www.cnblogs.com/txwtech/p/16207210.html">c#ms chart图表隐藏与显示某一系列曲线方法vs2019</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">使用 C# chart 图表隐藏与显示某一系列曲线</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="C#" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/C/"/>
    
    <category term="前端" scheme="https://zml3589110.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="绘图" scheme="https://zml3589110.github.io/categories/%E7%BB%98%E5%9B%BE/"/>
    
    
    <category term="C#" scheme="https://zml3589110.github.io/tags/C/"/>
    
    <category term="控件" scheme="https://zml3589110.github.io/tags/%E6%8E%A7%E4%BB%B6/"/>
    
    <category term="绘图" scheme="https://zml3589110.github.io/tags/%E7%BB%98%E5%9B%BE/"/>
    
    <category term="Chart" scheme="https://zml3589110.github.io/tags/Chart/"/>
    
    <category term="图表" scheme="https://zml3589110.github.io/tags/%E5%9B%BE%E8%A1%A8/"/>
    
    <category term="显示隐藏曲线" scheme="https://zml3589110.github.io/tags/%E6%98%BE%E7%A4%BA%E9%9A%90%E8%97%8F%E6%9B%B2%E7%BA%BF/"/>
    
  </entry>
  
  <entry>
    <title>C#绘图之十六（在鼠标移动到Series上时显示节点及数据）</title>
    <link href="https://zml3589110.github.io/posts/1504952015.html"/>
    <id>https://zml3589110.github.io/posts/1504952015.html</id>
    <published>2023-02-23T07:21:20.000Z</published>
    <updated>2023-03-27T00:14:26.690Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、效果与思路"><a href="#一、效果与思路" class="headerlink" title="一、效果与思路"></a>一、效果与思路</h1><h2 id="解决方案1"><a href="#解决方案1" class="headerlink" title="解决方案1"></a>解决方案1</h2><p>用chart的mousemove时间，实时跟踪鼠标最近的X轴的位置，然后把cursorX设置到那个位置上，让用户知道我是选的那一个X的值，同时用tooltip显示该X轴上所有的Y值，结贴了谢谢大家。</p><p>至于如何显示鼠标移动到的那个series上的数据节点，可以在Mousmove时，用一个击中测试，判断。</p><p><strong>参考代码，击中测试获得点数据点的索引：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (e.HitTestResult.ChartElementType == ChartElementType.DataPoint)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> i = e.HitTestResult.PointIndex;</span><br><span class="line">    DataPoint dp = e.HitTestResult.Series.Points[i];</span><br><span class="line">    e.Text = <span class="built_in">string</span>.Format(<span class="string">&quot;&#123;1:F3&#125;&quot;</span>, dp.XValue, dp.YValues[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解决方案2"><a href="#解决方案2" class="headerlink" title="解决方案2"></a>解决方案2</h2><p>用的是vs的chart控件。我在页面上的chart中写的是这种方式显示tooltip的（chart1是我的chart的名字）</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">chart1.GetToolTipText += <span class="keyword">new</span> EventHandler&lt;ToolTipEventArgs&gt;(chart_GetToolTipText);</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">chart_GetToolTipText</span>(<span class="params"><span class="built_in">object</span> sender, ToolTipEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (e.HitTestResult.ChartElementType == ChartElementType.DataPoint)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> i = e.HitTestResult.PointIndex;</span><br><span class="line">        DataPoint dp = e.HitTestResult.Series.Points[i];</span><br><span class="line">        e.Text = <span class="built_in">string</span>.Format(<span class="string">&quot;&#123;1:F3&#125;&quot;</span>, dp.XValue, dp.YValues[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这个鼠标悬停的判断范围也好窄好窄好窄好窄，选一个点要选半天，鼠标晃来晃去都不能出现tooltip，这个根本没办法用。请问高手有没有好的方式可以让图形可以容忍一定的偏斜，就是说即使没有选到这个点，到这个点附近多少范围之类也可以出现tooltip</p><p><strong>思路：</strong><br>1、记得以前有一个软件，当你的鼠标移动到你需要指点的附近时，它就会“磁吸”到点那里去，你也可以这样，挑最近的吸过去。<br>2、如果你开发的是分析软件，而且精度要求很高的话，建议采用加粗放大方式，点击后“标点”再缩小回去。</p><blockquote><p>参考</p></blockquote><p>#VALX         &#x2F;&#x2F;x轴数据<br>#VALY         &#x2F;&#x2F;y轴数据<br>#PERCENT      &#x2F;&#x2F;百分比<br>#AVG          &#x2F;&#x2F;平均值<br>#INDEX        &#x2F;&#x2F;索引值<br>#MAX          &#x2F;&#x2F;最大值<br>#MIN          &#x2F;&#x2F;最小值<br>#TOTAL        &#x2F;&#x2F;合计<br>#LEGENDTEXT   &#x2F;&#x2F;显示Legend的text<br>#SER          &#x2F;&#x2F;显示Series名称</p><h1 id="二、参考示例"><a href="#二、参考示例" class="headerlink" title="二、参考示例"></a>二、参考示例</h1><p>ChartControl.RuntimeHitTesting属性一定要设为True。</p><p>Line Series markers的Visible一定要弄成True。CalcHitInfo的SeriesPoint一直为null，最后跑到devexpress support center上问的。<br>我的dev版本是13.1.5，设置属性的方法是Series-&gt;View-&gt;MarkerVisibility。有的 版本可能是Series -&gt; LineMarkerOptions -&gt; Visible。</p><p>我的是以曲线图Spline为例，下面就是代码。</p><h2 id="1-鼠标点击点弹出Messagebox"><a href="#1-鼠标点击点弹出Messagebox" class="headerlink" title="1.鼠标点击点弹出Messagebox"></a>1.鼠标点击点弹出Messagebox</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">chartControl4_MouseClick</span>(<span class="params"><span class="built_in">object</span> sender, MouseEventArgs e</span>) </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    ChartHitInfo hitInfo = chartControl4.CalcHitInfo(e.Location); </span><br><span class="line">    <span class="keyword">if</span> (hitInfo.SeriesPoint != <span class="literal">null</span>) </span><br><span class="line">    &#123; </span><br><span class="line">        MessageBox.Show(hitInfo.SeriesPoint.Values[<span class="number">0</span>].ToString()); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><img src="https://img-blog.csdn.net/20140328173729296?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaHlqXzEz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"><img src="https://img-blog.csdn.net/20140328173746609?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaHlqXzEz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"><h2 id="2-鼠标移动用ToolTipController显示值"><a href="#2-鼠标移动用ToolTipController显示值" class="headerlink" title="2.鼠标移动用ToolTipController显示值"></a>2.鼠标移动用ToolTipController显示值</h2><ul><li>外面定义</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ToolTipController toolTipController = <span class="keyword">new</span> ToolTipController();  </span><br></pre></td></tr></table></figure><ul><li>下面是dev的源码：</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">chartControl4_MouseMove</span>(<span class="params"><span class="built_in">object</span> sender, MouseEventArgs e</span>)  </span></span><br><span class="line"><span class="function"></span>    &#123;  </span><br><span class="line">        ChartHitInfo hitInfo = chartControl4.CalcHitInfo(e.Location);  </span><br><span class="line">        StringBuilder builder = <span class="keyword">new</span> StringBuilder();  </span><br><span class="line">        <span class="keyword">if</span> (hitInfo.InDiagram)  </span><br><span class="line">            builder.AppendLine(<span class="string">&quot;In diagram&quot;</span>);  </span><br><span class="line">        <span class="keyword">if</span> (hitInfo.InNonDefaultPane)  </span><br><span class="line">            builder.AppendLine(<span class="string">&quot;In non-default pane: &quot;</span> + hitInfo.NonDefaultPane.Name);  </span><br><span class="line">        <span class="keyword">if</span> (hitInfo.InAxis)  </span><br><span class="line">        &#123;  </span><br><span class="line">            builder.AppendLine(<span class="string">&quot;In axis: &quot;</span> + hitInfo.Axis.Name);  </span><br><span class="line">            <span class="keyword">if</span> (hitInfo.AxisLabelItem != <span class="literal">null</span>)  </span><br><span class="line">                builder.AppendLine(<span class="string">&quot;  Label item: &quot;</span> + hitInfo.AxisLabelItem.Text);  </span><br><span class="line">            <span class="keyword">if</span> (hitInfo.AxisTitle != <span class="literal">null</span>)  </span><br><span class="line">                builder.AppendLine(<span class="string">&quot;  Axis title: &quot;</span> + hitInfo.AxisTitle.Text);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">if</span> (hitInfo.InChartTitle)  </span><br><span class="line">            builder.AppendLine(<span class="string">&quot;In chart title: &quot;</span> + hitInfo.ChartTitle.Text);  </span><br><span class="line">        <span class="keyword">if</span> (hitInfo.InLegend)  </span><br><span class="line">            builder.AppendLine(<span class="string">&quot;In legend&quot;</span>);  </span><br><span class="line">        <span class="keyword">if</span> (hitInfo.InSeries)  </span><br><span class="line">            builder.AppendLine(<span class="string">&quot;In series: &quot;</span> + ((Series)hitInfo.Series).Name);  </span><br><span class="line">        <span class="keyword">if</span> (hitInfo.InSeriesLabel)  </span><br><span class="line">        &#123;  </span><br><span class="line">            builder.AppendLine(<span class="string">&quot;In series label&quot;</span>);  </span><br><span class="line">            builder.AppendLine(<span class="string">&quot;  Series: &quot;</span> + ((Series)hitInfo.Series).Name);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">if</span> (hitInfo.SeriesPoint != <span class="literal">null</span>)  </span><br><span class="line">        &#123;  </span><br><span class="line">            builder.AppendLine(<span class="string">&quot;  Argument: &quot;</span> + hitInfo.SeriesPoint.Argument);  </span><br><span class="line">            <span class="keyword">if</span> (!hitInfo.SeriesPoint.IsEmpty)  </span><br><span class="line">                builder.AppendLine(<span class="string">&quot;  Value: &quot;</span> + hitInfo.SeriesPoint.Values[<span class="number">0</span>]);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">if</span> (builder.Length &gt; <span class="number">0</span>)  </span><br><span class="line">            toolTipController.ShowHint(<span class="string">&quot;Hit-testing results:\n&quot;</span> + builder.ToString(), chartControl4.PointToScreen(e.Location));  </span><br><span class="line">        <span class="keyword">else</span>  </span><br><span class="line">            toolTipController.HideHint();  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>MouseLeave事件代码</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">chartControl4_MouseLeave</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>) </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    toolTipController.HideHint(); </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><img src="https://img-blog.csdn.net/20140328174521500?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaHlqXzEz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"><h2 id="3-另一种鼠标移动显示信息的方法，用CustomDrawCrosshair事件，从别人那里学习的。这种还可以显示图片。"><a href="#3-另一种鼠标移动显示信息的方法，用CustomDrawCrosshair事件，从别人那里学习的。这种还可以显示图片。" class="headerlink" title="3.另一种鼠标移动显示信息的方法，用CustomDrawCrosshair事件，从别人那里学习的。这种还可以显示图片。"></a>3.另一种鼠标移动显示信息的方法，用CustomDrawCrosshair事件，从别人那里学习的。这种还可以显示图片。</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">chartControl4_CustomDrawCrosshair</span>(<span class="params"><span class="built_in">object</span> sender, CustomDrawCrosshairEventArgs e</span>) </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">   </span><br><span class="line">    <span class="keyword">foreach</span> (CrosshairElement element <span class="keyword">in</span> e.CrosshairElements) </span><br><span class="line">    &#123; </span><br><span class="line">        SeriesPoint point = element.SeriesPoint; </span><br><span class="line">        element.LabelElement.MarkerImage = Image.FromFile(<span class="string">@&quot;F:\Resources\Add.png&quot;</span>);<span class="comment">// 设置图片路径 </span></span><br><span class="line">        element.LabelElement.MarkerImageSizeMode = ChartImageSizeMode.Stretch; </span><br><span class="line">        element.LabelElement.MarkerSize = <span class="keyword">new</span> Size(<span class="number">100</span>, <span class="number">100</span>); <span class="comment">// 大小 </span></span><br><span class="line">        element.LabelElement.Text = point.Values[<span class="number">0</span>].ToString();<span class="comment">//显示要显示的文字 </span></span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><img src="https://img-blog.csdn.net/20140328174741250?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaHlqXzEz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"><p>这里有devexpress用CustomDrawCrosshair事件显示点信息的Demo<a href="https://documentation.devexpress.com/#WindowsForms/customdocument3440">How to: Show a Tooltip with a Series Point’s Data</a></p><p>参考</p><p>1.<a href="http://my.csdn.net/hustaiyaya">hustaiyaya</a>， <a href="http://bbs.csdn.net/topics/390754014">winform chart控件鼠标悬停显示Y值</a>。</p><p>2.<a href="http://my.csdn.net/huang369509940">黄大仙儿</a>，<a href="http://blog.csdn.net/hyj_13/article/details/22416029">c#—devexpress chartcontrol 鼠标点击chart上的点事件，鼠标移动显示值</a>，2014-3。</p><p>\3. <a href="http://blog.csdn.net/rztyfx/article/details/45912821">c# chart 鼠标放在数据点上出现的小提示。</a></p><hr><h1 id="相关链接（侵删）"><a href="#相关链接（侵删）" class="headerlink" title="相关链接（侵删）"></a>相关链接（侵删）</h1><ol><li><a href="https://www.cnblogs.com/arxive/p/5862471.html">C# chart，有关如何在鼠标移动到Series上时显示节点及数据 （有待继续更新）</a></li></ol><hr><center><font color="red">=================我是分割线=================</font></center><p><strong>欢迎到公众号来唠嗑:</strong></p><img src="https://pic4.zhimg.com/80/v2-eedc5dc7d30beedf4c2f1812df8e61a7_720w.jpg">]]></content>
    
    
    <summary type="html">使用 C# chart 图表时在鼠标移动到Series上时显示节点及数据</summary>
    
    
    
    <category term="编程类" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/"/>
    
    <category term="C#" scheme="https://zml3589110.github.io/categories/%E7%BC%96%E7%A8%8B%E7%B1%BB/C/"/>
    
    <category term="前端" scheme="https://zml3589110.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="绘图" scheme="https://zml3589110.github.io/categories/%E7%BB%98%E5%9B%BE/"/>
    
    
    <category term="C#" scheme="https://zml3589110.github.io/tags/C/"/>
    
    <category term="控件" scheme="https://zml3589110.github.io/tags/%E6%8E%A7%E4%BB%B6/"/>
    
    <category term="绘图" scheme="https://zml3589110.github.io/tags/%E7%BB%98%E5%9B%BE/"/>
    
    <category term="Chart" scheme="https://zml3589110.github.io/tags/Chart/"/>
    
  </entry>
  
</feed>
